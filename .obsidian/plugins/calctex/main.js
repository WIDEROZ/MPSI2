/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CalctexPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/editor.ts
var import_language = require("@codemirror/language");
var import_state = require("@codemirror/state");
var import_view2 = require("@codemirror/view");

// src/widget.ts
var import_view = require("@codemirror/view");
var ResultWidget = class extends import_view.WidgetType {
  constructor(view, index, text) {
    super();
    this.view = view;
    this.index = index;
    this.text = text;
  }
  toDOM(_view) {
    document.removeEventListener("keydown", this.keyListener, true);
    const div2 = document.createElement("span");
    div2.className = "result-text";
    this.insertLocation = this.index;
    this.resultText = this.text;
    div2.innerText = this.text;
    this.keyListener = (event) => {
      if (event.key !== CalctexPlugin.INSTANCE.settings.completionTriggerKey)
        return;
      event.preventDefault();
      this.insertToDOM();
    };
    document.addEventListener("keydown", this.keyListener, true);
    div2.onclick = () => {
      this.insertToDOM();
    };
    return div2;
  }
  destroy(dom) {
    document.removeEventListener("keydown", this.keyListener, true);
    dom.remove();
  }
  insertToDOM() {
    const transaction = this.view.state.update({
      changes: {
        from: this.insertLocation,
        to: this.insertLocation,
        insert: this.resultText
      },
      selection: {
        anchor: this.insertLocation + this.resultText.length,
        head: this.insertLocation + this.resultText.length
      }
    });
    this.view.dispatch(transaction);
    document.removeEventListener("keydown", this.keyListener, true);
  }
};

// node_modules/@cortex-js/compute-engine/dist/compute-engine.min.esm.js
var __create = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames2(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __copyProps2 = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps2(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp2(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var require_complex = __commonJS({
  "node_modules/complex.js/complex.js"(exports, module2) {
    (function(root) {
      "use strict";
      var cosh2 = Math.cosh || function(x) {
        return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
      };
      var sinh2 = Math.sinh || function(x) {
        return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
      };
      var cosm1 = function(x) {
        var b = Math.PI / 4;
        if (-b > x || x > b) {
          return Math.cos(x) - 1;
        }
        var xx = x * x;
        return xx * (xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888e3 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2);
      };
      var hypot2 = function(x, y) {
        var a = Math.abs(x);
        var b = Math.abs(y);
        if (a < 3e3 && b < 3e3) {
          return Math.sqrt(a * a + b * b);
        }
        if (a < b) {
          a = b;
          b = x / y;
        } else {
          b = y / x;
        }
        return a * Math.sqrt(1 + b * b);
      };
      var parser_exit = function() {
        throw SyntaxError("Invalid Param");
      };
      function logHypot(a, b) {
        var _a = Math.abs(a);
        var _b = Math.abs(b);
        if (a === 0) {
          return Math.log(_b);
        }
        if (b === 0) {
          return Math.log(_a);
        }
        if (_a < 3e3 && _b < 3e3) {
          return Math.log(a * a + b * b) * 0.5;
        }
        a = a / 2;
        b = b / 2;
        return 0.5 * Math.log(a * a + b * b) + Math.LN2;
      }
      var parse = function(a, b) {
        var z = { "re": 0, "im": 0 };
        if (a === void 0 || a === null) {
          z["re"] = z["im"] = 0;
        } else if (b !== void 0) {
          z["re"] = a;
          z["im"] = b;
        } else
          switch (typeof a) {
            case "object":
              if ("im" in a && "re" in a) {
                z["re"] = a["re"];
                z["im"] = a["im"];
              } else if ("abs" in a && "arg" in a) {
                if (!Number.isFinite(a["abs"]) && Number.isFinite(a["arg"])) {
                  return Complex20["INFINITY"];
                }
                z["re"] = a["abs"] * Math.cos(a["arg"]);
                z["im"] = a["abs"] * Math.sin(a["arg"]);
              } else if ("r" in a && "phi" in a) {
                if (!Number.isFinite(a["r"]) && Number.isFinite(a["phi"])) {
                  return Complex20["INFINITY"];
                }
                z["re"] = a["r"] * Math.cos(a["phi"]);
                z["im"] = a["r"] * Math.sin(a["phi"]);
              } else if (a.length === 2) {
                z["re"] = a[0];
                z["im"] = a[1];
              } else {
                parser_exit();
              }
              break;
            case "string":
              z["im"] = /* void */
              z["re"] = 0;
              var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
              var plus = 1;
              var minus = 0;
              if (tokens === null) {
                parser_exit();
              }
              for (var i = 0; i < tokens.length; i++) {
                var c = tokens[i];
                if (c === " " || c === "	" || c === "\n") {
                } else if (c === "+") {
                  plus++;
                } else if (c === "-") {
                  minus++;
                } else if (c === "i" || c === "I") {
                  if (plus + minus === 0) {
                    parser_exit();
                  }
                  if (tokens[i + 1] !== " " && !isNaN(tokens[i + 1])) {
                    z["im"] += parseFloat((minus % 2 ? "-" : "") + tokens[i + 1]);
                    i++;
                  } else {
                    z["im"] += parseFloat((minus % 2 ? "-" : "") + "1");
                  }
                  plus = minus = 0;
                } else {
                  if (plus + minus === 0 || isNaN(c)) {
                    parser_exit();
                  }
                  if (tokens[i + 1] === "i" || tokens[i + 1] === "I") {
                    z["im"] += parseFloat((minus % 2 ? "-" : "") + c);
                    i++;
                  } else {
                    z["re"] += parseFloat((minus % 2 ? "-" : "") + c);
                  }
                  plus = minus = 0;
                }
              }
              if (plus + minus > 0) {
                parser_exit();
              }
              break;
            case "number":
              z["im"] = 0;
              z["re"] = a;
              break;
            default:
              parser_exit();
          }
        if (isNaN(z["re"]) || isNaN(z["im"])) {
        }
        return z;
      };
      function Complex20(a, b) {
        if (!(this instanceof Complex20)) {
          return new Complex20(a, b);
        }
        var z = parse(a, b);
        this["re"] = z["re"];
        this["im"] = z["im"];
      }
      Complex20.prototype = {
        "re": 0,
        "im": 0,
        /**
         * Calculates the sign of a complex number, which is a normalized complex
         *
         * @returns {Complex}
         */
        "sign": function() {
          var abs2 = this["abs"]();
          return new Complex20(
            this["re"] / abs2,
            this["im"] / abs2
          );
        },
        /**
         * Adds two complex numbers
         *
         * @returns {Complex}
         */
        "add": function(a, b) {
          var z = new Complex20(a, b);
          if (this["isInfinite"]() && z["isInfinite"]()) {
            return Complex20["NAN"];
          }
          if (this["isInfinite"]() || z["isInfinite"]()) {
            return Complex20["INFINITY"];
          }
          return new Complex20(
            this["re"] + z["re"],
            this["im"] + z["im"]
          );
        },
        /**
         * Subtracts two complex numbers
         *
         * @returns {Complex}
         */
        "sub": function(a, b) {
          var z = new Complex20(a, b);
          if (this["isInfinite"]() && z["isInfinite"]()) {
            return Complex20["NAN"];
          }
          if (this["isInfinite"]() || z["isInfinite"]()) {
            return Complex20["INFINITY"];
          }
          return new Complex20(
            this["re"] - z["re"],
            this["im"] - z["im"]
          );
        },
        /**
         * Multiplies two complex numbers
         *
         * @returns {Complex}
         */
        "mul": function(a, b) {
          var z = new Complex20(a, b);
          if (this["isInfinite"]() && z["isZero"]() || this["isZero"]() && z["isInfinite"]()) {
            return Complex20["NAN"];
          }
          if (this["isInfinite"]() || z["isInfinite"]()) {
            return Complex20["INFINITY"];
          }
          if (z["im"] === 0 && this["im"] === 0) {
            return new Complex20(this["re"] * z["re"], 0);
          }
          return new Complex20(
            this["re"] * z["re"] - this["im"] * z["im"],
            this["re"] * z["im"] + this["im"] * z["re"]
          );
        },
        /**
         * Divides two complex numbers
         *
         * @returns {Complex}
         */
        "div": function(a, b) {
          var z = new Complex20(a, b);
          if (this["isZero"]() && z["isZero"]() || this["isInfinite"]() && z["isInfinite"]()) {
            return Complex20["NAN"];
          }
          if (this["isInfinite"]() || z["isZero"]()) {
            return Complex20["INFINITY"];
          }
          if (this["isZero"]() || z["isInfinite"]()) {
            return Complex20["ZERO"];
          }
          a = this["re"];
          b = this["im"];
          var c = z["re"];
          var d = z["im"];
          var t, x;
          if (0 === d) {
            return new Complex20(a / c, b / c);
          }
          if (Math.abs(c) < Math.abs(d)) {
            x = c / d;
            t = c * x + d;
            return new Complex20(
              (a * x + b) / t,
              (b * x - a) / t
            );
          } else {
            x = d / c;
            t = d * x + c;
            return new Complex20(
              (a + b * x) / t,
              (b - a * x) / t
            );
          }
        },
        /**
         * Calculate the power of two complex numbers
         *
         * @returns {Complex}
         */
        "pow": function(a, b) {
          var z = new Complex20(a, b);
          a = this["re"];
          b = this["im"];
          if (z["isZero"]()) {
            return Complex20["ONE"];
          }
          if (z["im"] === 0) {
            if (b === 0 && a > 0) {
              return new Complex20(Math.pow(a, z["re"]), 0);
            } else if (a === 0) {
              switch ((z["re"] % 4 + 4) % 4) {
                case 0:
                  return new Complex20(Math.pow(b, z["re"]), 0);
                case 1:
                  return new Complex20(0, Math.pow(b, z["re"]));
                case 2:
                  return new Complex20(-Math.pow(b, z["re"]), 0);
                case 3:
                  return new Complex20(0, -Math.pow(b, z["re"]));
              }
            }
          }
          if (a === 0 && b === 0 && z["re"] > 0 && z["im"] >= 0) {
            return Complex20["ZERO"];
          }
          var arg = Math.atan2(b, a);
          var loh = logHypot(a, b);
          a = Math.exp(z["re"] * loh - z["im"] * arg);
          b = z["im"] * loh + z["re"] * arg;
          return new Complex20(
            a * Math.cos(b),
            a * Math.sin(b)
          );
        },
        /**
         * Calculate the complex square root
         *
         * @returns {Complex}
         */
        "sqrt": function() {
          var a = this["re"];
          var b = this["im"];
          var r = this["abs"]();
          var re, im;
          if (a >= 0) {
            if (b === 0) {
              return new Complex20(Math.sqrt(a), 0);
            }
            re = 0.5 * Math.sqrt(2 * (r + a));
          } else {
            re = Math.abs(b) / Math.sqrt(2 * (r - a));
          }
          if (a <= 0) {
            im = 0.5 * Math.sqrt(2 * (r - a));
          } else {
            im = Math.abs(b) / Math.sqrt(2 * (r + a));
          }
          return new Complex20(re, b < 0 ? -im : im);
        },
        /**
         * Calculate the complex exponent
         *
         * @returns {Complex}
         */
        "exp": function() {
          var tmp = Math.exp(this["re"]);
          if (this["im"] === 0) {
          }
          return new Complex20(
            tmp * Math.cos(this["im"]),
            tmp * Math.sin(this["im"])
          );
        },
        /**
         * Calculate the complex exponent and subtracts one.
         *
         * This may be more accurate than `Complex(x).exp().sub(1)` if
         * `x` is small.
         *
         * @returns {Complex}
         */
        "expm1": function() {
          var a = this["re"];
          var b = this["im"];
          return new Complex20(
            Math.expm1(a) * Math.cos(b) + cosm1(b),
            Math.exp(a) * Math.sin(b)
          );
        },
        /**
         * Calculate the natural log
         *
         * @returns {Complex}
         */
        "log": function() {
          var a = this["re"];
          var b = this["im"];
          if (b === 0 && a > 0) {
          }
          return new Complex20(
            logHypot(a, b),
            Math.atan2(b, a)
          );
        },
        /**
         * Calculate the magnitude of the complex number
         *
         * @returns {number}
         */
        "abs": function() {
          return hypot2(this["re"], this["im"]);
        },
        /**
         * Calculate the angle of the complex number
         *
         * @returns {number}
         */
        "arg": function() {
          return Math.atan2(this["im"], this["re"]);
        },
        /**
         * Calculate the sine of the complex number
         *
         * @returns {Complex}
         */
        "sin": function() {
          var a = this["re"];
          var b = this["im"];
          return new Complex20(
            Math.sin(a) * cosh2(b),
            Math.cos(a) * sinh2(b)
          );
        },
        /**
         * Calculate the cosine
         *
         * @returns {Complex}
         */
        "cos": function() {
          var a = this["re"];
          var b = this["im"];
          return new Complex20(
            Math.cos(a) * cosh2(b),
            -Math.sin(a) * sinh2(b)
          );
        },
        /**
         * Calculate the tangent
         *
         * @returns {Complex}
         */
        "tan": function() {
          var a = 2 * this["re"];
          var b = 2 * this["im"];
          var d = Math.cos(a) + cosh2(b);
          return new Complex20(
            Math.sin(a) / d,
            sinh2(b) / d
          );
        },
        /**
         * Calculate the cotangent
         *
         * @returns {Complex}
         */
        "cot": function() {
          var a = 2 * this["re"];
          var b = 2 * this["im"];
          var d = Math.cos(a) - cosh2(b);
          return new Complex20(
            -Math.sin(a) / d,
            sinh2(b) / d
          );
        },
        /**
         * Calculate the secant
         *
         * @returns {Complex}
         */
        "sec": function() {
          var a = this["re"];
          var b = this["im"];
          var d = 0.5 * cosh2(2 * b) + 0.5 * Math.cos(2 * a);
          return new Complex20(
            Math.cos(a) * cosh2(b) / d,
            Math.sin(a) * sinh2(b) / d
          );
        },
        /**
         * Calculate the cosecans
         *
         * @returns {Complex}
         */
        "csc": function() {
          var a = this["re"];
          var b = this["im"];
          var d = 0.5 * cosh2(2 * b) - 0.5 * Math.cos(2 * a);
          return new Complex20(
            Math.sin(a) * cosh2(b) / d,
            -Math.cos(a) * sinh2(b) / d
          );
        },
        /**
         * Calculate the complex arcus sinus
         *
         * @returns {Complex}
         */
        "asin": function() {
          var a = this["re"];
          var b = this["im"];
          var t1 = new Complex20(
            b * b - a * a + 1,
            -2 * a * b
          )["sqrt"]();
          var t2 = new Complex20(
            t1["re"] - b,
            t1["im"] + a
          )["log"]();
          return new Complex20(t2["im"], -t2["re"]);
        },
        /**
         * Calculate the complex arcus cosinus
         *
         * @returns {Complex}
         */
        "acos": function() {
          var a = this["re"];
          var b = this["im"];
          var t1 = new Complex20(
            b * b - a * a + 1,
            -2 * a * b
          )["sqrt"]();
          var t2 = new Complex20(
            t1["re"] - b,
            t1["im"] + a
          )["log"]();
          return new Complex20(Math.PI / 2 - t2["im"], t2["re"]);
        },
        /**
         * Calculate the complex arcus tangent
         *
         * @returns {Complex}
         */
        "atan": function() {
          var a = this["re"];
          var b = this["im"];
          if (a === 0) {
            if (b === 1) {
              return new Complex20(0, Infinity);
            }
            if (b === -1) {
              return new Complex20(0, -Infinity);
            }
          }
          var d = a * a + (1 - b) * (1 - b);
          var t1 = new Complex20(
            (1 - b * b - a * a) / d,
            -2 * a / d
          ).log();
          return new Complex20(-0.5 * t1["im"], 0.5 * t1["re"]);
        },
        /**
         * Calculate the complex arcus cotangent
         *
         * @returns {Complex}
         */
        "acot": function() {
          var a = this["re"];
          var b = this["im"];
          if (b === 0) {
            return new Complex20(Math.atan2(1, a), 0);
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex20(
            a / d,
            -b / d
          ).atan() : new Complex20(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).atan();
        },
        /**
         * Calculate the complex arcus secant
         *
         * @returns {Complex}
         */
        "asec": function() {
          var a = this["re"];
          var b = this["im"];
          if (a === 0 && b === 0) {
            return new Complex20(0, Infinity);
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex20(
            a / d,
            -b / d
          ).acos() : new Complex20(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).acos();
        },
        /**
         * Calculate the complex arcus cosecans
         *
         * @returns {Complex}
         */
        "acsc": function() {
          var a = this["re"];
          var b = this["im"];
          if (a === 0 && b === 0) {
            return new Complex20(Math.PI / 2, Infinity);
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex20(
            a / d,
            -b / d
          ).asin() : new Complex20(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).asin();
        },
        /**
         * Calculate the complex sinh
         *
         * @returns {Complex}
         */
        "sinh": function() {
          var a = this["re"];
          var b = this["im"];
          return new Complex20(
            sinh2(a) * Math.cos(b),
            cosh2(a) * Math.sin(b)
          );
        },
        /**
         * Calculate the complex cosh
         *
         * @returns {Complex}
         */
        "cosh": function() {
          var a = this["re"];
          var b = this["im"];
          return new Complex20(
            cosh2(a) * Math.cos(b),
            sinh2(a) * Math.sin(b)
          );
        },
        /**
         * Calculate the complex tanh
         *
         * @returns {Complex}
         */
        "tanh": function() {
          var a = 2 * this["re"];
          var b = 2 * this["im"];
          var d = cosh2(a) + Math.cos(b);
          return new Complex20(
            sinh2(a) / d,
            Math.sin(b) / d
          );
        },
        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        "coth": function() {
          var a = 2 * this["re"];
          var b = 2 * this["im"];
          var d = cosh2(a) - Math.cos(b);
          return new Complex20(
            sinh2(a) / d,
            -Math.sin(b) / d
          );
        },
        /**
         * Calculate the complex coth
         *
         * @returns {Complex}
         */
        "csch": function() {
          var a = this["re"];
          var b = this["im"];
          var d = Math.cos(2 * b) - cosh2(2 * a);
          return new Complex20(
            -2 * sinh2(a) * Math.cos(b) / d,
            2 * cosh2(a) * Math.sin(b) / d
          );
        },
        /**
         * Calculate the complex sech
         *
         * @returns {Complex}
         */
        "sech": function() {
          var a = this["re"];
          var b = this["im"];
          var d = Math.cos(2 * b) + cosh2(2 * a);
          return new Complex20(
            2 * cosh2(a) * Math.cos(b) / d,
            -2 * sinh2(a) * Math.sin(b) / d
          );
        },
        /**
         * Calculate the complex asinh
         *
         * @returns {Complex}
         */
        "asinh": function() {
          var tmp = this["im"];
          this["im"] = -this["re"];
          this["re"] = tmp;
          var res = this["asin"]();
          this["re"] = -this["im"];
          this["im"] = tmp;
          tmp = res["re"];
          res["re"] = -res["im"];
          res["im"] = tmp;
          return res;
        },
        /**
         * Calculate the complex acosh
         *
         * @returns {Complex}
         */
        "acosh": function() {
          var res = this["acos"]();
          if (res["im"] <= 0) {
            var tmp = res["re"];
            res["re"] = -res["im"];
            res["im"] = tmp;
          } else {
            var tmp = res["im"];
            res["im"] = -res["re"];
            res["re"] = tmp;
          }
          return res;
        },
        /**
         * Calculate the complex atanh
         *
         * @returns {Complex}
         */
        "atanh": function() {
          var a = this["re"];
          var b = this["im"];
          var noIM = a > 1 && b === 0;
          var oneMinus = 1 - a;
          var onePlus = 1 + a;
          var d = oneMinus * oneMinus + b * b;
          var x = d !== 0 ? new Complex20(
            (onePlus * oneMinus - b * b) / d,
            (b * oneMinus + onePlus * b) / d
          ) : new Complex20(
            a !== -1 ? a / 0 : 0,
            b !== 0 ? b / 0 : 0
          );
          var temp = x["re"];
          x["re"] = logHypot(x["re"], x["im"]) / 2;
          x["im"] = Math.atan2(x["im"], temp) / 2;
          if (noIM) {
            x["im"] = -x["im"];
          }
          return x;
        },
        /**
         * Calculate the complex acoth
         *
         * @returns {Complex}
         */
        "acoth": function() {
          var a = this["re"];
          var b = this["im"];
          if (a === 0 && b === 0) {
            return new Complex20(0, Math.PI / 2);
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex20(
            a / d,
            -b / d
          ).atanh() : new Complex20(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).atanh();
        },
        /**
         * Calculate the complex acsch
         *
         * @returns {Complex}
         */
        "acsch": function() {
          var a = this["re"];
          var b = this["im"];
          if (b === 0) {
            return new Complex20(
              a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity,
              0
            );
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex20(
            a / d,
            -b / d
          ).asinh() : new Complex20(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).asinh();
        },
        /**
         * Calculate the complex asech
         *
         * @returns {Complex}
         */
        "asech": function() {
          var a = this["re"];
          var b = this["im"];
          if (this["isZero"]()) {
            return Complex20["INFINITY"];
          }
          var d = a * a + b * b;
          return d !== 0 ? new Complex20(
            a / d,
            -b / d
          ).acosh() : new Complex20(
            a !== 0 ? a / 0 : 0,
            b !== 0 ? -b / 0 : 0
          ).acosh();
        },
        /**
         * Calculate the complex inverse 1/z
         *
         * @returns {Complex}
         */
        "inverse": function() {
          if (this["isZero"]()) {
            return Complex20["INFINITY"];
          }
          if (this["isInfinite"]()) {
            return Complex20["ZERO"];
          }
          var a = this["re"];
          var b = this["im"];
          var d = a * a + b * b;
          return new Complex20(a / d, -b / d);
        },
        /**
         * Returns the complex conjugate
         *
         * @returns {Complex}
         */
        "conjugate": function() {
          return new Complex20(this["re"], -this["im"]);
        },
        /**
         * Gets the negated complex number
         *
         * @returns {Complex}
         */
        "neg": function() {
          return new Complex20(-this["re"], -this["im"]);
        },
        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        "ceil": function(places) {
          places = Math.pow(10, places || 0);
          return new Complex20(
            Math.ceil(this["re"] * places) / places,
            Math.ceil(this["im"] * places) / places
          );
        },
        /**
         * Floors the actual complex number
         *
         * @returns {Complex}
         */
        "floor": function(places) {
          places = Math.pow(10, places || 0);
          return new Complex20(
            Math.floor(this["re"] * places) / places,
            Math.floor(this["im"] * places) / places
          );
        },
        /**
         * Ceils the actual complex number
         *
         * @returns {Complex}
         */
        "round": function(places) {
          places = Math.pow(10, places || 0);
          return new Complex20(
            Math.round(this["re"] * places) / places,
            Math.round(this["im"] * places) / places
          );
        },
        /**
         * Compares two complex numbers
         *
         * **Note:** new Complex(Infinity).equals(Infinity) === false
         *
         * @returns {boolean}
         */
        "equals": function(a, b) {
          var z = new Complex20(a, b);
          return Math.abs(z["re"] - this["re"]) <= Complex20["EPSILON"] && Math.abs(z["im"] - this["im"]) <= Complex20["EPSILON"];
        },
        /**
         * Clones the actual object
         *
         * @returns {Complex}
         */
        "clone": function() {
          return new Complex20(this["re"], this["im"]);
        },
        /**
         * Gets a string of the actual complex number
         *
         * @returns {string}
         */
        "toString": function() {
          var a = this["re"];
          var b = this["im"];
          var ret = "";
          if (this["isNaN"]()) {
            return "NaN";
          }
          if (this["isInfinite"]()) {
            return "Infinity";
          }
          if (Math.abs(a) < Complex20["EPSILON"]) {
            a = 0;
          }
          if (Math.abs(b) < Complex20["EPSILON"]) {
            b = 0;
          }
          if (b === 0) {
            return ret + a;
          }
          if (a !== 0) {
            ret += a;
            ret += " ";
            if (b < 0) {
              b = -b;
              ret += "-";
            } else {
              ret += "+";
            }
            ret += " ";
          } else if (b < 0) {
            b = -b;
            ret += "-";
          }
          if (1 !== b) {
            ret += b;
          }
          return ret + "i";
        },
        /**
         * Returns the actual number as a vector
         *
         * @returns {Array}
         */
        "toVector": function() {
          return [this["re"], this["im"]];
        },
        /**
         * Returns the actual real value of the current object
         *
         * @returns {number|null}
         */
        "valueOf": function() {
          if (this["im"] === 0) {
            return this["re"];
          }
          return null;
        },
        /**
         * Determines whether a complex number is not on the Riemann sphere.
         *
         * @returns {boolean}
         */
        "isNaN": function() {
          return isNaN(this["re"]) || isNaN(this["im"]);
        },
        /**
         * Determines whether or not a complex number is at the zero pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        "isZero": function() {
          return this["im"] === 0 && this["re"] === 0;
        },
        /**
         * Determines whether a complex number is not at the infinity pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        "isFinite": function() {
          return isFinite(this["re"]) && isFinite(this["im"]);
        },
        /**
         * Determines whether or not a complex number is at the infinity pole of the
         * Riemann sphere.
         *
         * @returns {boolean}
         */
        "isInfinite": function() {
          return !(this["isNaN"]() || this["isFinite"]());
        }
      };
      Complex20["ZERO"] = new Complex20(0, 0);
      Complex20["ONE"] = new Complex20(1, 0);
      Complex20["I"] = new Complex20(0, 1);
      Complex20["PI"] = new Complex20(Math.PI, 0);
      Complex20["E"] = new Complex20(Math.E, 0);
      Complex20["INFINITY"] = new Complex20(Infinity, Infinity);
      Complex20["NAN"] = new Complex20(NaN, NaN);
      Complex20["EPSILON"] = 1e-15;
      if (typeof define === "function" && define["amd"]) {
        define([], function() {
          return Complex20;
        });
      } else if (typeof exports === "object") {
        Object.defineProperty(Complex20, "__esModule", { "value": true });
        Complex20["default"] = Complex20;
        Complex20["Complex"] = Complex20;
        module2["exports"] = Complex20;
      } else {
        root["Complex"] = Complex20;
      }
    })(exports);
  }
});
function isSymbolEntry(entry) {
  return "kind" in entry && entry.kind === "symbol";
}
function isMatchfixEntry(entry) {
  return "kind" in entry && entry.kind === "matchfix";
}
function isInfixEntry(entry) {
  return "kind" in entry && entry.kind === "infix";
}
function isPrefixEntry(entry) {
  return "kind" in entry && entry.kind === "prefix";
}
function isPostfixEntry(entry) {
  return "kind" in entry && entry.kind === "postfix";
}
function isEnvironmentEntry(entry) {
  return "kind" in entry && entry.kind === "environment";
}
var EXP_LIMIT = 9e15;
var MAX_DIGITS = 1e9;
var NUMERALS = "0123456789abcdef";
var LN10 = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058";
var PI = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789";
var DEFAULTS = {
  // These values must be integers within the stated ranges (inclusive).
  // Most of these values can be changed at run-time using the `Decimal.config` method.
  // The maximum number of significant digits of the result of a calculation or base conversion.
  // E.g. `Decimal.config({ precision: 20 });`
  precision: 20,
  // 1 to MAX_DIGITS
  // The rounding mode used when rounding to `precision`.
  //
  // ROUND_UP         0 Away from zero.
  // ROUND_DOWN       1 Towards zero.
  // ROUND_CEIL       2 Towards +Infinity.
  // ROUND_FLOOR      3 Towards -Infinity.
  // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
  // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
  // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
  // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
  // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
  //
  // E.g.
  // `Decimal.rounding = 4;`
  // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
  rounding: 4,
  // 0 to 8
  // The modulo mode used when calculating the modulus: a mod n.
  // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
  // The remainder (r) is calculated as: r = a - n * q.
  //
  // UP         0 The remainder is positive if the dividend is negative, else is negative.
  // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
  // FLOOR      3 The remainder has the same sign as the divisor (Python %).
  // HALF_EVEN  6 The IEEE 754 remainder function.
  // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
  //
  // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
  // division (9) are commonly used for the modulus operation. The other rounding modes can also
  // be used, but they may not give useful results.
  modulo: 1,
  // 0 to 9
  // The exponent value at and beneath which `toString` returns exponential notation.
  // JavaScript numbers: -7
  toExpNeg: -7,
  // 0 to -EXP_LIMIT
  // The exponent value at and above which `toString` returns exponential notation.
  // JavaScript numbers: 21
  toExpPos: 21,
  // 0 to EXP_LIMIT
  // The minimum exponent value, beneath which underflow to zero occurs.
  // JavaScript numbers: -324  (5e-324)
  minE: -EXP_LIMIT,
  // -1 to -EXP_LIMIT
  // The maximum exponent value, above which overflow to Infinity occurs.
  // JavaScript numbers: 308  (1.7976931348623157e+308)
  maxE: EXP_LIMIT,
  // 1 to EXP_LIMIT
  // Whether to use cryptographically-secure random number generation, if available.
  crypto: false
  // true/false
};
var inexact;
var quadrant;
var external = true;
var decimalError = "[DecimalError] ";
var invalidArgument = decimalError + "Invalid argument: ";
var precisionLimitExceeded = decimalError + "Precision limit exceeded";
var cryptoUnavailable = decimalError + "crypto unavailable";
var tag = "[object Decimal]";
var mathfloor = Math.floor;
var mathpow = Math.pow;
var isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i;
var isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i;
var isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i;
var isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
var BASE = 1e7;
var LOG_BASE = 7;
var MAX_SAFE_INTEGER = 9007199254740991;
var LN10_PRECISION = LN10.length - 1;
var PI_PRECISION = PI.length - 1;
var P = { toStringTag: tag };
P.absoluteValue = P.abs = function() {
  var x = new this.constructor(this);
  if (x.s < 0)
    x.s = 1;
  return finalise(x);
};
P.ceil = function() {
  return finalise(new this.constructor(this), this.e + 1, 2);
};
P.clampedTo = P.clamp = function(min2, max2) {
  var k, x = this, Ctor = x.constructor;
  min2 = new Ctor(min2);
  max2 = new Ctor(max2);
  if (!min2.s || !max2.s)
    return new Ctor(NaN);
  if (min2.gt(max2))
    throw Error(invalidArgument + max2);
  k = x.cmp(min2);
  return k < 0 ? min2 : x.cmp(max2) > 0 ? max2 : new Ctor(x);
};
P.comparedTo = P.cmp = function(y) {
  var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;
  if (!xd || !yd) {
    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
  }
  if (!xd[0] || !yd[0])
    return xd[0] ? xs : yd[0] ? -ys : 0;
  if (xs !== ys)
    return xs;
  if (x.e !== y.e)
    return x.e > y.e ^ xs < 0 ? 1 : -1;
  xdL = xd.length;
  ydL = yd.length;
  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
    if (xd[i] !== yd[i])
      return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
  }
  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
};
P.cosine = P.cos = function() {
  var pr, rm, x = this, Ctor = x.constructor;
  if (!x.d)
    return new Ctor(NaN);
  if (!x.d[0])
    return new Ctor(1);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
  Ctor.rounding = 1;
  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
};
P.cubeRoot = P.cbrt = function() {
  var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;
  if (!x.isFinite() || x.isZero())
    return new Ctor(x);
  external = false;
  s = x.s * mathpow(x.s * x, 1 / 3);
  if (!s || Math.abs(s) == 1 / 0) {
    n = digitsToString(x.d);
    e = x.e;
    if (s = (e - n.length + 1) % 3)
      n += s == 1 || s == -2 ? "0" : "00";
    s = mathpow(n, 1 / 3);
    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
    if (s == 1 / 0) {
      n = "5e" + e;
    } else {
      n = s.toExponential();
      n = n.slice(0, n.indexOf("e") + 1) + e;
    }
    r = new Ctor(n);
    r.s = x.s;
  } else {
    r = new Ctor(s.toString());
  }
  sd = (e = Ctor.precision) + 3;
  for (; ; ) {
    t = r;
    t3 = t.times(t).times(t);
    t3plusx = t3.plus(x);
    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
      n = n.slice(sd - 3, sd + 1);
      if (n == "9999" || !rep && n == "4999") {
        if (!rep) {
          finalise(t, e + 1, 0);
          if (t.times(t).times(t).eq(x)) {
            r = t;
            break;
          }
        }
        sd += 4;
        rep = 1;
      } else {
        if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
          finalise(r, e + 1, 1);
          m = !r.times(r).times(r).eq(x);
        }
        break;
      }
    }
  }
  external = true;
  return finalise(r, e, Ctor.rounding, m);
};
P.decimalPlaces = P.dp = function() {
  var w, d = this.d, n = NaN;
  if (d) {
    w = d.length - 1;
    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
    w = d[w];
    if (w)
      for (; w % 10 == 0; w /= 10)
        n--;
    if (n < 0)
      n = 0;
  }
  return n;
};
P.dividedBy = P.div = function(y) {
  return divide(this, new this.constructor(y));
};
P.dividedToIntegerBy = P.divToInt = function(y) {
  var x = this, Ctor = x.constructor;
  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
};
P.equals = P.eq = function(y) {
  return this.cmp(y) === 0;
};
P.floor = function() {
  return finalise(new this.constructor(this), this.e + 1, 3);
};
P.greaterThan = P.gt = function(y) {
  return this.cmp(y) > 0;
};
P.greaterThanOrEqualTo = P.gte = function(y) {
  var k = this.cmp(y);
  return k == 1 || k === 0;
};
P.hyperbolicCosine = P.cosh = function() {
  var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);
  if (!x.isFinite())
    return new Ctor(x.s ? 1 / 0 : NaN);
  if (x.isZero())
    return one;
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
  Ctor.rounding = 1;
  len = x.d.length;
  if (len < 32) {
    k = Math.ceil(len / 3);
    n = (1 / tinyPow(4, k)).toString();
  } else {
    k = 16;
    n = "2.3283064365386962890625e-10";
  }
  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
  var cosh2_x, i = k, d8 = new Ctor(8);
  for (; i--; ) {
    cosh2_x = x.times(x);
    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
  }
  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
};
P.hyperbolicSine = P.sinh = function() {
  var k, pr, rm, len, x = this, Ctor = x.constructor;
  if (!x.isFinite() || x.isZero())
    return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
  Ctor.rounding = 1;
  len = x.d.length;
  if (len < 3) {
    x = taylorSeries(Ctor, 2, x, x, true);
  } else {
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;
    x = x.times(1 / tinyPow(5, k));
    x = taylorSeries(Ctor, 2, x, x, true);
    var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
    for (; k--; ) {
      sinh2_x = x.times(x);
      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
    }
  }
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return finalise(x, pr, rm, true);
};
P.hyperbolicTangent = P.tanh = function() {
  var pr, rm, x = this, Ctor = x.constructor;
  if (!x.isFinite())
    return new Ctor(x.s);
  if (x.isZero())
    return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + 7;
  Ctor.rounding = 1;
  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
};
P.inverseCosine = P.acos = function() {
  var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;
  if (k !== -1) {
    return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);
  }
  if (x.isZero())
    return getPi(Ctor, pr + 4, rm).times(0.5);
  Ctor.precision = pr + 6;
  Ctor.rounding = 1;
  x = x.asin();
  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return halfPi.minus(x);
};
P.inverseHyperbolicCosine = P.acosh = function() {
  var pr, rm, x = this, Ctor = x.constructor;
  if (x.lte(1))
    return new Ctor(x.eq(1) ? 0 : NaN);
  if (!x.isFinite())
    return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
  Ctor.rounding = 1;
  external = false;
  x = x.times(x).minus(1).sqrt().plus(x);
  external = true;
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return x.ln();
};
P.inverseHyperbolicSine = P.asinh = function() {
  var pr, rm, x = this, Ctor = x.constructor;
  if (!x.isFinite() || x.isZero())
    return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
  Ctor.rounding = 1;
  external = false;
  x = x.times(x).plus(1).sqrt().plus(x);
  external = true;
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return x.ln();
};
P.inverseHyperbolicTangent = P.atanh = function() {
  var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;
  if (!x.isFinite())
    return new Ctor(NaN);
  if (x.e >= 0)
    return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  xsd = x.sd();
  if (Math.max(xsd, pr) < 2 * -x.e - 1)
    return finalise(new Ctor(x), pr, rm, true);
  Ctor.precision = wpr = xsd - x.e;
  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
  Ctor.precision = pr + 4;
  Ctor.rounding = 1;
  x = x.ln();
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return x.times(0.5);
};
P.inverseSine = P.asin = function() {
  var halfPi, k, pr, rm, x = this, Ctor = x.constructor;
  if (x.isZero())
    return new Ctor(x);
  k = x.abs().cmp(1);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  if (k !== -1) {
    if (k === 0) {
      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
      halfPi.s = x.s;
      return halfPi;
    }
    return new Ctor(NaN);
  }
  Ctor.precision = pr + 6;
  Ctor.rounding = 1;
  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return x.times(2);
};
P.inverseTangent = P.atan = function() {
  var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;
  if (!x.isFinite()) {
    if (!x.s)
      return new Ctor(NaN);
    if (pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.5);
      r.s = x.s;
      return r;
    }
  } else if (x.isZero()) {
    return new Ctor(x);
  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
    r = getPi(Ctor, pr + 4, rm).times(0.25);
    r.s = x.s;
    return r;
  }
  Ctor.precision = wpr = pr + 10;
  Ctor.rounding = 1;
  k = Math.min(28, wpr / LOG_BASE + 2 | 0);
  for (i = k; i; --i)
    x = x.div(x.times(x).plus(1).sqrt().plus(1));
  external = false;
  j = Math.ceil(wpr / LOG_BASE);
  n = 1;
  x2 = x.times(x);
  r = new Ctor(x);
  px = x;
  for (; i !== -1; ) {
    px = px.times(x2);
    t = r.minus(px.div(n += 2));
    px = px.times(x2);
    r = t.plus(px.div(n += 2));
    if (r.d[j] !== void 0)
      for (i = j; r.d[i] === t.d[i] && i--; )
        ;
  }
  if (k)
    r = r.times(2 << k - 1);
  external = true;
  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
};
P.isFinite = function() {
  return !!this.d;
};
P.isInteger = P.isInt = function() {
  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
};
P.isNaN = function() {
  return !this.s;
};
P.isNegative = P.isNeg = function() {
  return this.s < 0;
};
P.isPositive = P.isPos = function() {
  return this.s > 0;
};
P.isZero = function() {
  return !!this.d && this.d[0] === 0;
};
P.lessThan = P.lt = function(y) {
  return this.cmp(y) < 0;
};
P.lessThanOrEqualTo = P.lte = function(y) {
  return this.cmp(y) < 1;
};
P.logarithm = P.log = function(base) {
  var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;
  if (base == null) {
    base = new Ctor(10);
    isBase10 = true;
  } else {
    base = new Ctor(base);
    d = base.d;
    if (base.s < 0 || !d || !d[0] || base.eq(1))
      return new Ctor(NaN);
    isBase10 = base.eq(10);
  }
  d = arg.d;
  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
  }
  if (isBase10) {
    if (d.length > 1) {
      inf = true;
    } else {
      for (k = d[0]; k % 10 === 0; )
        k /= 10;
      inf = k !== 1;
    }
  }
  external = false;
  sd = pr + guard;
  num = naturalLogarithm(arg, sd);
  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
  r = divide(num, denominator, sd, 1);
  if (checkRoundingDigits(r.d, k = pr, rm)) {
    do {
      sd += 10;
      num = naturalLogarithm(arg, sd);
      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
      r = divide(num, denominator, sd, 1);
      if (!inf) {
        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
        break;
      }
    } while (checkRoundingDigits(r.d, k += 10, rm));
  }
  external = true;
  return finalise(r, pr, rm);
};
P.minus = P.sub = function(y) {
  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;
  y = new Ctor(y);
  if (!x.d || !y.d) {
    if (!x.s || !y.s)
      y = new Ctor(NaN);
    else if (x.d)
      y.s = -y.s;
    else
      y = new Ctor(y.d || x.s !== y.s ? x : NaN);
    return y;
  }
  if (x.s != y.s) {
    y.s = -y.s;
    return x.plus(y);
  }
  xd = x.d;
  yd = y.d;
  pr = Ctor.precision;
  rm = Ctor.rounding;
  if (!xd[0] || !yd[0]) {
    if (yd[0])
      y.s = -y.s;
    else if (xd[0])
      y = new Ctor(x);
    else
      return new Ctor(rm === 3 ? -0 : 0);
    return external ? finalise(y, pr, rm) : y;
  }
  e = mathfloor(y.e / LOG_BASE);
  xe = mathfloor(x.e / LOG_BASE);
  xd = xd.slice();
  k = xe - e;
  if (k) {
    xLTy = k < 0;
    if (xLTy) {
      d = xd;
      k = -k;
      len = yd.length;
    } else {
      d = yd;
      e = xe;
      len = xd.length;
    }
    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
    if (k > i) {
      k = i;
      d.length = 1;
    }
    d.reverse();
    for (i = k; i--; )
      d.push(0);
    d.reverse();
  } else {
    i = xd.length;
    len = yd.length;
    xLTy = i < len;
    if (xLTy)
      len = i;
    for (i = 0; i < len; i++) {
      if (xd[i] != yd[i]) {
        xLTy = xd[i] < yd[i];
        break;
      }
    }
    k = 0;
  }
  if (xLTy) {
    d = xd;
    xd = yd;
    yd = d;
    y.s = -y.s;
  }
  len = xd.length;
  for (i = yd.length - len; i > 0; --i)
    xd[len++] = 0;
  for (i = yd.length; i > k; ) {
    if (xd[--i] < yd[i]) {
      for (j = i; j && xd[--j] === 0; )
        xd[j] = BASE - 1;
      --xd[j];
      xd[i] += BASE;
    }
    xd[i] -= yd[i];
  }
  for (; xd[--len] === 0; )
    xd.pop();
  for (; xd[0] === 0; xd.shift())
    --e;
  if (!xd[0])
    return new Ctor(rm === 3 ? -0 : 0);
  y.d = xd;
  y.e = getBase10Exponent(xd, e);
  return external ? finalise(y, pr, rm) : y;
};
P.modulo = P.mod = function(y) {
  var q, x = this, Ctor = x.constructor;
  y = new Ctor(y);
  if (!x.d || !y.s || y.d && !y.d[0])
    return new Ctor(NaN);
  if (!y.d || x.d && !x.d[0]) {
    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
  }
  external = false;
  if (Ctor.modulo == 9) {
    q = divide(x, y.abs(), 0, 3, 1);
    q.s *= y.s;
  } else {
    q = divide(x, y, 0, Ctor.modulo, 1);
  }
  q = q.times(y);
  external = true;
  return x.minus(q);
};
P.naturalExponential = P.exp = function() {
  return naturalExponential(this);
};
P.naturalLogarithm = P.ln = function() {
  return naturalLogarithm(this);
};
P.negated = P.neg = function() {
  var x = new this.constructor(this);
  x.s = -x.s;
  return finalise(x);
};
P.plus = P.add = function(y) {
  var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;
  y = new Ctor(y);
  if (!x.d || !y.d) {
    if (!x.s || !y.s)
      y = new Ctor(NaN);
    else if (!x.d)
      y = new Ctor(y.d || x.s === y.s ? x : NaN);
    return y;
  }
  if (x.s != y.s) {
    y.s = -y.s;
    return x.minus(y);
  }
  xd = x.d;
  yd = y.d;
  pr = Ctor.precision;
  rm = Ctor.rounding;
  if (!xd[0] || !yd[0]) {
    if (!yd[0])
      y = new Ctor(x);
    return external ? finalise(y, pr, rm) : y;
  }
  k = mathfloor(x.e / LOG_BASE);
  e = mathfloor(y.e / LOG_BASE);
  xd = xd.slice();
  i = k - e;
  if (i) {
    if (i < 0) {
      d = xd;
      i = -i;
      len = yd.length;
    } else {
      d = yd;
      e = k;
      len = xd.length;
    }
    k = Math.ceil(pr / LOG_BASE);
    len = k > len ? k + 1 : len + 1;
    if (i > len) {
      i = len;
      d.length = 1;
    }
    d.reverse();
    for (; i--; )
      d.push(0);
    d.reverse();
  }
  len = xd.length;
  i = yd.length;
  if (len - i < 0) {
    i = len;
    d = yd;
    yd = xd;
    xd = d;
  }
  for (carry = 0; i; ) {
    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
    xd[i] %= BASE;
  }
  if (carry) {
    xd.unshift(carry);
    ++e;
  }
  for (len = xd.length; xd[--len] == 0; )
    xd.pop();
  y.d = xd;
  y.e = getBase10Exponent(xd, e);
  return external ? finalise(y, pr, rm) : y;
};
P.precision = P.sd = function(z) {
  var k, x = this;
  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)
    throw Error(invalidArgument + z);
  if (x.d) {
    k = getPrecision(x.d);
    if (z && x.e + 1 > k)
      k = x.e + 1;
  } else {
    k = NaN;
  }
  return k;
};
P.round = function() {
  var x = this, Ctor = x.constructor;
  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
};
P.sine = P.sin = function() {
  var pr, rm, x = this, Ctor = x.constructor;
  if (!x.isFinite())
    return new Ctor(NaN);
  if (x.isZero())
    return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
  Ctor.rounding = 1;
  x = sine(Ctor, toLessThanHalfPi(Ctor, x));
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
};
P.squareRoot = P.sqrt = function() {
  var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;
  if (s !== 1 || !d || !d[0]) {
    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
  }
  external = false;
  s = Math.sqrt(+x);
  if (s == 0 || s == 1 / 0) {
    n = digitsToString(d);
    if ((n.length + e) % 2 == 0)
      n += "0";
    s = Math.sqrt(n);
    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
    if (s == 1 / 0) {
      n = "5e" + e;
    } else {
      n = s.toExponential();
      n = n.slice(0, n.indexOf("e") + 1) + e;
    }
    r = new Ctor(n);
  } else {
    r = new Ctor(s.toString());
  }
  sd = (e = Ctor.precision) + 3;
  for (; ; ) {
    t = r;
    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
      n = n.slice(sd - 3, sd + 1);
      if (n == "9999" || !rep && n == "4999") {
        if (!rep) {
          finalise(t, e + 1, 0);
          if (t.times(t).eq(x)) {
            r = t;
            break;
          }
        }
        sd += 4;
        rep = 1;
      } else {
        if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
          finalise(r, e + 1, 1);
          m = !r.times(r).eq(x);
        }
        break;
      }
    }
  }
  external = true;
  return finalise(r, e, Ctor.rounding, m);
};
P.tangent = P.tan = function() {
  var pr, rm, x = this, Ctor = x.constructor;
  if (!x.isFinite())
    return new Ctor(NaN);
  if (x.isZero())
    return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + 10;
  Ctor.rounding = 1;
  x = x.sin();
  x.s = 1;
  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
};
P.times = P.mul = function(y) {
  var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;
  y.s *= x.s;
  if (!xd || !xd[0] || !yd || !yd[0]) {
    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);
  }
  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
  xdL = xd.length;
  ydL = yd.length;
  if (xdL < ydL) {
    r = xd;
    xd = yd;
    yd = r;
    rL = xdL;
    xdL = ydL;
    ydL = rL;
  }
  r = [];
  rL = xdL + ydL;
  for (i = rL; i--; )
    r.push(0);
  for (i = ydL; --i >= 0; ) {
    carry = 0;
    for (k = xdL + i; k > i; ) {
      t = r[k] + yd[i] * xd[k - i - 1] + carry;
      r[k--] = t % BASE | 0;
      carry = t / BASE | 0;
    }
    r[k] = (r[k] + carry) % BASE | 0;
  }
  for (; !r[--rL]; )
    r.pop();
  if (carry)
    ++e;
  else
    r.shift();
  y.d = r;
  y.e = getBase10Exponent(r, e);
  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
};
P.toBinary = function(sd, rm) {
  return toStringBinary(this, 2, sd, rm);
};
P.toDecimalPlaces = P.toDP = function(dp, rm) {
  var x = this, Ctor = x.constructor;
  x = new Ctor(x);
  if (dp === void 0)
    return x;
  checkInt32(dp, 0, MAX_DIGITS);
  if (rm === void 0)
    rm = Ctor.rounding;
  else
    checkInt32(rm, 0, 8);
  return finalise(x, dp + x.e + 1, rm);
};
P.toExponential = function(dp, rm) {
  var str, x = this, Ctor = x.constructor;
  if (dp === void 0) {
    str = finiteToString(x, true);
  } else {
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
    x = finalise(new Ctor(x), dp + 1, rm);
    str = finiteToString(x, true, dp + 1);
  }
  return x.isNeg() && !x.isZero() ? "-" + str : str;
};
P.toFixed = function(dp, rm) {
  var str, y, x = this, Ctor = x.constructor;
  if (dp === void 0) {
    str = finiteToString(x);
  } else {
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
    y = finalise(new Ctor(x), dp + x.e + 1, rm);
    str = finiteToString(y, false, dp + y.e + 1);
  }
  return x.isNeg() && !x.isZero() ? "-" + str : str;
};
P.toFraction = function(maxD) {
  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;
  if (!xd)
    return new Ctor(x);
  n1 = d0 = new Ctor(1);
  d1 = n0 = new Ctor(0);
  d = new Ctor(d1);
  e = d.e = getPrecision(xd) - x.e - 1;
  k = e % LOG_BASE;
  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
  if (maxD == null) {
    maxD = e > 0 ? d : n1;
  } else {
    n = new Ctor(maxD);
    if (!n.isInt() || n.lt(n1))
      throw Error(invalidArgument + n);
    maxD = n.gt(d) ? e > 0 ? d : n1 : n;
  }
  external = false;
  n = new Ctor(digitsToString(xd));
  pr = Ctor.precision;
  Ctor.precision = e = xd.length * LOG_BASE * 2;
  for (; ; ) {
    q = divide(n, d, 0, 1, 1);
    d2 = d0.plus(q.times(d1));
    if (d2.cmp(maxD) == 1)
      break;
    d0 = d1;
    d1 = d2;
    d2 = n1;
    n1 = n0.plus(q.times(d2));
    n0 = d2;
    d2 = d;
    d = n.minus(q.times(d2));
    n = d2;
  }
  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
  n0 = n0.plus(d2.times(n1));
  d0 = d0.plus(d2.times(d1));
  n0.s = n1.s = x.s;
  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
  Ctor.precision = pr;
  external = true;
  return r;
};
P.toHexadecimal = P.toHex = function(sd, rm) {
  return toStringBinary(this, 16, sd, rm);
};
P.toNearest = function(y, rm) {
  var x = this, Ctor = x.constructor;
  x = new Ctor(x);
  if (y == null) {
    if (!x.d)
      return x;
    y = new Ctor(1);
    rm = Ctor.rounding;
  } else {
    y = new Ctor(y);
    if (rm === void 0) {
      rm = Ctor.rounding;
    } else {
      checkInt32(rm, 0, 8);
    }
    if (!x.d)
      return y.s ? x : y;
    if (!y.d) {
      if (y.s)
        y.s = x.s;
      return y;
    }
  }
  if (y.d[0]) {
    external = false;
    x = divide(x, y, 0, rm, 1).times(y);
    external = true;
    finalise(x);
  } else {
    y.s = x.s;
    x = y;
  }
  return x;
};
P.toNumber = function() {
  return +this;
};
P.toOctal = function(sd, rm) {
  return toStringBinary(this, 8, sd, rm);
};
P.toPower = P.pow = function(y) {
  var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));
  if (!x.d || !y.d || !x.d[0] || !y.d[0])
    return new Ctor(mathpow(+x, yn));
  x = new Ctor(x);
  if (x.eq(1))
    return x;
  pr = Ctor.precision;
  rm = Ctor.rounding;
  if (y.eq(1))
    return finalise(x, pr, rm);
  e = mathfloor(y.e / LOG_BASE);
  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
    r = intPow(Ctor, x, k, pr);
    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
  }
  s = x.s;
  if (s < 0) {
    if (e < y.d.length - 1)
      return new Ctor(NaN);
    if ((y.d[e] & 1) == 0)
      s = 1;
    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
      x.s = s;
      return x;
    }
  }
  k = mathpow(+x, yn);
  e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log("0." + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + "").e;
  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1)
    return new Ctor(e > 0 ? s / 0 : 0);
  external = false;
  Ctor.rounding = x.s = 1;
  k = Math.min(12, (e + "").length);
  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
  if (r.d) {
    r = finalise(r, pr + 5, 1);
    if (checkRoundingDigits(r.d, pr, rm)) {
      e = pr + 10;
      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
        r = finalise(r, pr + 1, 0);
      }
    }
  }
  r.s = s;
  external = true;
  Ctor.rounding = rm;
  return finalise(r, pr, rm);
};
P.toPrecision = function(sd, rm) {
  var str, x = this, Ctor = x.constructor;
  if (sd === void 0) {
    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
  } else {
    checkInt32(sd, 1, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
    x = finalise(new Ctor(x), sd, rm);
    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
  }
  return x.isNeg() && !x.isZero() ? "-" + str : str;
};
P.toSignificantDigits = P.toSD = function(sd, rm) {
  var x = this, Ctor = x.constructor;
  if (sd === void 0) {
    sd = Ctor.precision;
    rm = Ctor.rounding;
  } else {
    checkInt32(sd, 1, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
  }
  return finalise(new Ctor(x), sd, rm);
};
P.toString = function() {
  var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
  return x.isNeg() && !x.isZero() ? "-" + str : str;
};
P.truncated = P.trunc = function() {
  return finalise(new this.constructor(this), this.e + 1, 1);
};
P.valueOf = P.toJSON = function() {
  var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
  return x.isNeg() ? "-" + str : str;
};
function digitsToString(d) {
  var i, k, ws, indexOfLastWord = d.length - 1, str = "", w = d[0];
  if (indexOfLastWord > 0) {
    str += w;
    for (i = 1; i < indexOfLastWord; i++) {
      ws = d[i] + "";
      k = LOG_BASE - ws.length;
      if (k)
        str += getZeroString(k);
      str += ws;
    }
    w = d[i];
    ws = w + "";
    k = LOG_BASE - ws.length;
    if (k)
      str += getZeroString(k);
  } else if (w === 0) {
    return "0";
  }
  for (; w % 10 === 0; )
    w /= 10;
  return str + w;
}
function checkInt32(i, min2, max2) {
  if (i !== ~~i || i < min2 || i > max2) {
    throw Error(invalidArgument + i);
  }
}
function checkRoundingDigits(d, i, rm, repeating) {
  var di, k, r, rd;
  for (k = d[0]; k >= 10; k /= 10)
    --i;
  if (--i < 0) {
    i += LOG_BASE;
    di = 0;
  } else {
    di = Math.ceil((i + 1) / LOG_BASE);
    i %= LOG_BASE;
  }
  k = mathpow(10, LOG_BASE - i);
  rd = d[di] % k | 0;
  if (repeating == null) {
    if (i < 3) {
      if (i == 0)
        rd = rd / 100 | 0;
      else if (i == 1)
        rd = rd / 10 | 0;
      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 5e4 || rd == 0;
    } else {
      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
    }
  } else {
    if (i < 4) {
      if (i == 0)
        rd = rd / 1e3 | 0;
      else if (i == 1)
        rd = rd / 100 | 0;
      else if (i == 2)
        rd = rd / 10 | 0;
      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
    } else {
      r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1e3 | 0) == mathpow(10, i - 3) - 1;
    }
  }
  return r;
}
function convertBase(str, baseIn, baseOut) {
  var j, arr = [0], arrL, i = 0, strL = str.length;
  for (; i < strL; ) {
    for (arrL = arr.length; arrL--; )
      arr[arrL] *= baseIn;
    arr[0] += NUMERALS.indexOf(str.charAt(i++));
    for (j = 0; j < arr.length; j++) {
      if (arr[j] > baseOut - 1) {
        if (arr[j + 1] === void 0)
          arr[j + 1] = 0;
        arr[j + 1] += arr[j] / baseOut | 0;
        arr[j] %= baseOut;
      }
    }
  }
  return arr.reverse();
}
function cosine(Ctor, x) {
  var k, len, y;
  if (x.isZero())
    return x;
  len = x.d.length;
  if (len < 32) {
    k = Math.ceil(len / 3);
    y = (1 / tinyPow(4, k)).toString();
  } else {
    k = 16;
    y = "2.3283064365386962890625e-10";
  }
  Ctor.precision += k;
  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
  for (var i = k; i--; ) {
    var cos2x = x.times(x);
    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
  }
  Ctor.precision -= k;
  return x;
}
var divide = function() {
  function multiplyInteger(x, k, base) {
    var temp, carry = 0, i = x.length;
    for (x = x.slice(); i--; ) {
      temp = x[i] * k + carry;
      x[i] = temp % base | 0;
      carry = temp / base | 0;
    }
    if (carry)
      x.unshift(carry);
    return x;
  }
  function compare(a, b, aL, bL) {
    var i, r;
    if (aL != bL) {
      r = aL > bL ? 1 : -1;
    } else {
      for (i = r = 0; i < aL; i++) {
        if (a[i] != b[i]) {
          r = a[i] > b[i] ? 1 : -1;
          break;
        }
      }
    }
    return r;
  }
  function subtract2(a, b, aL, base) {
    var i = 0;
    for (; aL--; ) {
      a[aL] -= i;
      i = a[aL] < b[aL] ? 1 : 0;
      a[aL] = i * base + a[aL] - b[aL];
    }
    for (; !a[0] && a.length > 1; )
      a.shift();
  }
  return function(x, y, pr, rm, dp, base) {
    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign2 = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;
    if (!xd || !xd[0] || !yd || !yd[0]) {
      return new Ctor(
        // Return NaN if either NaN, or both Infinity or 0.
        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : (
          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          xd && xd[0] == 0 || !yd ? sign2 * 0 : sign2 / 0
        )
      );
    }
    if (base) {
      logBase = 1;
      e = x.e - y.e;
    } else {
      base = BASE;
      logBase = LOG_BASE;
      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
    }
    yL = yd.length;
    xL = xd.length;
    q = new Ctor(sign2);
    qd = q.d = [];
    for (i = 0; yd[i] == (xd[i] || 0); i++)
      ;
    if (yd[i] > (xd[i] || 0))
      e--;
    if (pr == null) {
      sd = pr = Ctor.precision;
      rm = Ctor.rounding;
    } else if (dp) {
      sd = pr + (x.e - y.e) + 1;
    } else {
      sd = pr;
    }
    if (sd < 0) {
      qd.push(1);
      more = true;
    } else {
      sd = sd / logBase + 2 | 0;
      i = 0;
      if (yL == 1) {
        k = 0;
        yd = yd[0];
        sd++;
        for (; (i < xL || k) && sd--; i++) {
          t = k * base + (xd[i] || 0);
          qd[i] = t / yd | 0;
          k = t % yd | 0;
        }
        more = k || i < xL;
      } else {
        k = base / (yd[0] + 1) | 0;
        if (k > 1) {
          yd = multiplyInteger(yd, k, base);
          xd = multiplyInteger(xd, k, base);
          yL = yd.length;
          xL = xd.length;
        }
        xi = yL;
        rem = xd.slice(0, yL);
        remL = rem.length;
        for (; remL < yL; )
          rem[remL++] = 0;
        yz = yd.slice();
        yz.unshift(0);
        yd0 = yd[0];
        if (yd[1] >= base / 2)
          ++yd0;
        do {
          k = 0;
          cmp = compare(yd, rem, yL, remL);
          if (cmp < 0) {
            rem0 = rem[0];
            if (yL != remL)
              rem0 = rem0 * base + (rem[1] || 0);
            k = rem0 / yd0 | 0;
            if (k > 1) {
              if (k >= base)
                k = base - 1;
              prod = multiplyInteger(yd, k, base);
              prodL = prod.length;
              remL = rem.length;
              cmp = compare(prod, rem, prodL, remL);
              if (cmp == 1) {
                k--;
                subtract2(prod, yL < prodL ? yz : yd, prodL, base);
              }
            } else {
              if (k == 0)
                cmp = k = 1;
              prod = yd.slice();
            }
            prodL = prod.length;
            if (prodL < remL)
              prod.unshift(0);
            subtract2(rem, prod, remL, base);
            if (cmp == -1) {
              remL = rem.length;
              cmp = compare(yd, rem, yL, remL);
              if (cmp < 1) {
                k++;
                subtract2(rem, yL < remL ? yz : yd, remL, base);
              }
            }
            remL = rem.length;
          } else if (cmp === 0) {
            k++;
            rem = [0];
          }
          qd[i++] = k;
          if (cmp && rem[0]) {
            rem[remL++] = xd[xi] || 0;
          } else {
            rem = [xd[xi]];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] !== void 0) && sd--);
        more = rem[0] !== void 0;
      }
      if (!qd[0])
        qd.shift();
    }
    if (logBase == 1) {
      q.e = e;
      inexact = more;
    } else {
      for (i = 1, k = qd[0]; k >= 10; k /= 10)
        i++;
      q.e = i + e * logBase - 1;
      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
    }
    return q;
  };
}();
function finalise(x, sd, rm, isTruncated) {
  var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;
  out:
    if (sd != null) {
      xd = x.d;
      if (!xd)
        return x;
      for (digits = 1, k = xd[0]; k >= 10; k /= 10)
        digits++;
      i = sd - digits;
      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];
        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;
        if (xdi >= k) {
          if (isTruncated) {
            for (; k++ <= xdi; )
              xd.push(0);
            w = rd = 0;
            digits = 1;
            i %= LOG_BASE;
            j = i - LOG_BASE + 1;
          } else {
            break out;
          }
        } else {
          w = k = xd[xdi];
          for (digits = 1; k >= 10; k /= 10)
            digits++;
          i %= LOG_BASE;
          j = i - LOG_BASE + digits;
          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
        }
      }
      isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
      roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
      (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
      if (sd < 1 || !xd[0]) {
        xd.length = 0;
        if (roundUp) {
          sd -= x.e + 1;
          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = -sd || 0;
        } else {
          xd[0] = x.e = 0;
        }
        return x;
      }
      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i);
        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
      }
      if (roundUp) {
        for (; ; ) {
          if (xdi == 0) {
            for (i = 1, j = xd[0]; j >= 10; j /= 10)
              i++;
            j = xd[0] += k;
            for (k = 1; j >= 10; j /= 10)
              k++;
            if (i != k) {
              x.e++;
              if (xd[0] == BASE)
                xd[0] = 1;
            }
            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE)
              break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      }
      for (i = xd.length; xd[--i] === 0; )
        xd.pop();
    }
  if (external) {
    if (x.e > Ctor.maxE) {
      x.d = null;
      x.e = NaN;
    } else if (x.e < Ctor.minE) {
      x.e = 0;
      x.d = [0];
    }
  }
  return x;
}
function finiteToString(x, isExp, sd) {
  if (!x.isFinite())
    return nonFiniteToString(x);
  var k, e = x.e, str = digitsToString(x.d), len = str.length;
  if (isExp) {
    if (sd && (k = sd - len) > 0) {
      str = str.charAt(0) + "." + str.slice(1) + getZeroString(k);
    } else if (len > 1) {
      str = str.charAt(0) + "." + str.slice(1);
    }
    str = str + (x.e < 0 ? "e" : "e+") + x.e;
  } else if (e < 0) {
    str = "0." + getZeroString(-e - 1) + str;
    if (sd && (k = sd - len) > 0)
      str += getZeroString(k);
  } else if (e >= len) {
    str += getZeroString(e + 1 - len);
    if (sd && (k = sd - e - 1) > 0)
      str = str + "." + getZeroString(k);
  } else {
    if ((k = e + 1) < len)
      str = str.slice(0, k) + "." + str.slice(k);
    if (sd && (k = sd - len) > 0) {
      if (e + 1 === len)
        str += ".";
      str += getZeroString(k);
    }
  }
  return str;
}
function getBase10Exponent(digits, e) {
  var w = digits[0];
  for (e *= LOG_BASE; w >= 10; w /= 10)
    e++;
  return e;
}
function getLn10(Ctor, sd, pr) {
  if (sd > LN10_PRECISION) {
    external = true;
    if (pr)
      Ctor.precision = pr;
    throw Error(precisionLimitExceeded);
  }
  return finalise(new Ctor(LN10), sd, 1, true);
}
function getPi(Ctor, sd, rm) {
  if (sd > PI_PRECISION)
    throw Error(precisionLimitExceeded);
  return finalise(new Ctor(PI), sd, rm, true);
}
function getPrecision(digits) {
  var w = digits.length - 1, len = w * LOG_BASE + 1;
  w = digits[w];
  if (w) {
    for (; w % 10 == 0; w /= 10)
      len--;
    for (w = digits[0]; w >= 10; w /= 10)
      len++;
  }
  return len;
}
function getZeroString(k) {
  var zs = "";
  for (; k--; )
    zs += "0";
  return zs;
}
function intPow(Ctor, x, n, pr) {
  var isTruncated, r = new Ctor(1), k = Math.ceil(pr / LOG_BASE + 4);
  external = false;
  for (; ; ) {
    if (n % 2) {
      r = r.times(x);
      if (truncate(r.d, k))
        isTruncated = true;
    }
    n = mathfloor(n / 2);
    if (n === 0) {
      n = r.d.length - 1;
      if (isTruncated && r.d[n] === 0)
        ++r.d[n];
      break;
    }
    x = x.times(x);
    truncate(x.d, k);
  }
  external = true;
  return r;
}
function isOdd(n) {
  return n.d[n.d.length - 1] & 1;
}
function maxOrMin(Ctor, args, ltgt) {
  var y, x = new Ctor(args[0]), i = 0;
  for (; ++i < args.length; ) {
    y = new Ctor(args[i]);
    if (!y.s) {
      x = y;
      break;
    } else if (x[ltgt](y)) {
      x = y;
    }
  }
  return x;
}
function naturalExponential(x, sd) {
  var denominator, guard, j, pow3, sum2, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
  if (!x.d || !x.d[0] || x.e > 17) {
    return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
  }
  if (sd == null) {
    external = false;
    wpr = pr;
  } else {
    wpr = sd;
  }
  t = new Ctor(0.03125);
  while (x.e > -2) {
    x = x.times(t);
    k += 5;
  }
  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
  wpr += guard;
  denominator = pow3 = sum2 = new Ctor(1);
  Ctor.precision = wpr;
  for (; ; ) {
    pow3 = finalise(pow3.times(x), wpr, 1);
    denominator = denominator.times(++i);
    t = sum2.plus(divide(pow3, denominator, wpr, 1));
    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
      j = k;
      while (j--)
        sum2 = finalise(sum2.times(sum2), wpr, 1);
      if (sd == null) {
        if (rep < 3 && checkRoundingDigits(sum2.d, wpr - guard, rm, rep)) {
          Ctor.precision = wpr += 10;
          denominator = pow3 = t = new Ctor(1);
          i = 0;
          rep++;
        } else {
          return finalise(sum2, Ctor.precision = pr, rm, external = true);
        }
      } else {
        Ctor.precision = pr;
        return sum2;
      }
    }
    sum2 = t;
  }
}
function naturalLogarithm(y, sd) {
  var c, c0, denominator, e, numerator, rep, sum2, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
  }
  if (sd == null) {
    external = false;
    wpr = pr;
  } else {
    wpr = sd;
  }
  Ctor.precision = wpr += guard;
  c = digitsToString(xd);
  c0 = c.charAt(0);
  if (Math.abs(e = x.e) < 15e14) {
    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
      x = x.times(y);
      c = digitsToString(x.d);
      c0 = c.charAt(0);
      n++;
    }
    e = x.e;
    if (c0 > 1) {
      x = new Ctor("0." + c);
      e++;
    } else {
      x = new Ctor(c0 + "." + c.slice(1));
    }
  } else {
    t = getLn10(Ctor, wpr + 2, pr).times(e + "");
    x = naturalLogarithm(new Ctor(c0 + "." + c.slice(1)), wpr - guard).plus(t);
    Ctor.precision = pr;
    return sd == null ? finalise(x, pr, rm, external = true) : x;
  }
  x1 = x;
  sum2 = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
  x2 = finalise(x.times(x), wpr, 1);
  denominator = 3;
  for (; ; ) {
    numerator = finalise(numerator.times(x2), wpr, 1);
    t = sum2.plus(divide(numerator, new Ctor(denominator), wpr, 1));
    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
      sum2 = sum2.times(2);
      if (e !== 0)
        sum2 = sum2.plus(getLn10(Ctor, wpr + 2, pr).times(e + ""));
      sum2 = divide(sum2, new Ctor(n), wpr, 1);
      if (sd == null) {
        if (checkRoundingDigits(sum2.d, wpr - guard, rm, rep)) {
          Ctor.precision = wpr += guard;
          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
          x2 = finalise(x.times(x), wpr, 1);
          denominator = rep = 1;
        } else {
          return finalise(sum2, Ctor.precision = pr, rm, external = true);
        }
      } else {
        Ctor.precision = pr;
        return sum2;
      }
    }
    sum2 = t;
    denominator += 2;
  }
}
function nonFiniteToString(x) {
  return String(x.s * x.s / 0);
}
function parseDecimal(x, str) {
  var e, i, len;
  if ((e = str.indexOf(".")) > -1)
    str = str.replace(".", "");
  if ((i = str.search(/e/i)) > 0) {
    if (e < 0)
      e = i;
    e += +str.slice(i + 1);
    str = str.substring(0, i);
  } else if (e < 0) {
    e = str.length;
  }
  for (i = 0; str.charCodeAt(i) === 48; i++)
    ;
  for (len = str.length; str.charCodeAt(len - 1) === 48; --len)
    ;
  str = str.slice(i, len);
  if (str) {
    len -= i;
    x.e = e = e - i - 1;
    x.d = [];
    i = (e + 1) % LOG_BASE;
    if (e < 0)
      i += LOG_BASE;
    if (i < len) {
      if (i)
        x.d.push(+str.slice(0, i));
      for (len -= LOG_BASE; i < len; )
        x.d.push(+str.slice(i, i += LOG_BASE));
      str = str.slice(i);
      i = LOG_BASE - str.length;
    } else {
      i -= len;
    }
    for (; i--; )
      str += "0";
    x.d.push(+str);
    if (external) {
      if (x.e > x.constructor.maxE) {
        x.d = null;
        x.e = NaN;
      } else if (x.e < x.constructor.minE) {
        x.e = 0;
        x.d = [0];
      }
    }
  } else {
    x.e = 0;
    x.d = [0];
  }
  return x;
}
function parseOther(x, str) {
  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;
  if (str.indexOf("_") > -1) {
    str = str.replace(/(\d)_(?=\d)/g, "$1");
    if (isDecimal.test(str))
      return parseDecimal(x, str);
  } else if (str === "Infinity" || str === "NaN") {
    if (!+str)
      x.s = NaN;
    x.e = NaN;
    x.d = null;
    return x;
  }
  if (isHex.test(str)) {
    base = 16;
    str = str.toLowerCase();
  } else if (isBinary.test(str)) {
    base = 2;
  } else if (isOctal.test(str)) {
    base = 8;
  } else {
    throw Error(invalidArgument + str);
  }
  i = str.search(/p/i);
  if (i > 0) {
    p = +str.slice(i + 1);
    str = str.substring(2, i);
  } else {
    str = str.slice(2);
  }
  i = str.indexOf(".");
  isFloat = i >= 0;
  Ctor = x.constructor;
  if (isFloat) {
    str = str.replace(".", "");
    len = str.length;
    i = len - i;
    divisor = intPow(Ctor, new Ctor(base), i, i * 2);
  }
  xd = convertBase(str, base, BASE);
  xe = xd.length - 1;
  for (i = xe; xd[i] === 0; --i)
    xd.pop();
  if (i < 0)
    return new Ctor(x.s * 0);
  x.e = getBase10Exponent(xd, xe);
  x.d = xd;
  external = false;
  if (isFloat)
    x = divide(x, divisor, len * 4);
  if (p)
    x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
  external = true;
  return x;
}
function sine(Ctor, x) {
  var k, len = x.d.length;
  if (len < 3) {
    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
  }
  k = 1.4 * Math.sqrt(len);
  k = k > 16 ? 16 : k | 0;
  x = x.times(1 / tinyPow(5, k));
  x = taylorSeries(Ctor, 2, x, x);
  var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
  for (; k--; ) {
    sin2_x = x.times(x);
    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
  }
  return x;
}
function taylorSeries(Ctor, n, x, y, isHyperbolic) {
  var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);
  external = false;
  x2 = x.times(x);
  u = new Ctor(y);
  for (; ; ) {
    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
    u = isHyperbolic ? y.plus(t) : y.minus(t);
    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
    t = u.plus(y);
    if (t.d[k] !== void 0) {
      for (j = k; t.d[j] === u.d[j] && j--; )
        ;
      if (j == -1)
        break;
    }
    j = u;
    u = y;
    y = t;
    t = j;
    i++;
  }
  external = true;
  t.d.length = k + 1;
  return t;
}
function tinyPow(b, e) {
  var n = b;
  while (--e)
    n *= b;
  return n;
}
function toLessThanHalfPi(Ctor, x) {
  var t, isNeg2 = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);
  x = x.abs();
  if (x.lte(halfPi)) {
    quadrant = isNeg2 ? 4 : 1;
    return x;
  }
  t = x.divToInt(pi);
  if (t.isZero()) {
    quadrant = isNeg2 ? 3 : 2;
  } else {
    x = x.minus(t.times(pi));
    if (x.lte(halfPi)) {
      quadrant = isOdd(t) ? isNeg2 ? 2 : 3 : isNeg2 ? 4 : 1;
      return x;
    }
    quadrant = isOdd(t) ? isNeg2 ? 1 : 4 : isNeg2 ? 3 : 2;
  }
  return x.minus(pi).abs();
}
function toStringBinary(x, baseOut, sd, rm) {
  var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;
  if (isExp) {
    checkInt32(sd, 1, MAX_DIGITS);
    if (rm === void 0)
      rm = Ctor.rounding;
    else
      checkInt32(rm, 0, 8);
  } else {
    sd = Ctor.precision;
    rm = Ctor.rounding;
  }
  if (!x.isFinite()) {
    str = nonFiniteToString(x);
  } else {
    str = finiteToString(x);
    i = str.indexOf(".");
    if (isExp) {
      base = 2;
      if (baseOut == 16) {
        sd = sd * 4 - 3;
      } else if (baseOut == 8) {
        sd = sd * 3 - 2;
      }
    } else {
      base = baseOut;
    }
    if (i >= 0) {
      str = str.replace(".", "");
      y = new Ctor(1);
      y.e = str.length - i;
      y.d = convertBase(finiteToString(y), 10, base);
      y.e = y.d.length;
    }
    xd = convertBase(str, 10, base);
    e = len = xd.length;
    for (; xd[--len] == 0; )
      xd.pop();
    if (!xd[0]) {
      str = isExp ? "0p+0" : "0";
    } else {
      if (i < 0) {
        e--;
      } else {
        x = new Ctor(x);
        x.d = xd;
        x.e = e;
        x = divide(x, y, sd, rm, 0, base);
        xd = x.d;
        e = x.e;
        roundUp = inexact;
      }
      i = xd[sd];
      k = base / 2;
      roundUp = roundUp || xd[sd + 1] !== void 0;
      roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
      xd.length = sd;
      if (roundUp) {
        for (; ++xd[--sd] > base - 1; ) {
          xd[sd] = 0;
          if (!sd) {
            ++e;
            xd.unshift(1);
          }
        }
      }
      for (len = xd.length; !xd[len - 1]; --len)
        ;
      for (i = 0, str = ""; i < len; i++)
        str += NUMERALS.charAt(xd[i]);
      if (isExp) {
        if (len > 1) {
          if (baseOut == 16 || baseOut == 8) {
            i = baseOut == 16 ? 4 : 3;
            for (--len; len % i; len++)
              str += "0";
            xd = convertBase(str, base, baseOut);
            for (len = xd.length; !xd[len - 1]; --len)
              ;
            for (i = 1, str = "1."; i < len; i++)
              str += NUMERALS.charAt(xd[i]);
          } else {
            str = str.charAt(0) + "." + str.slice(1);
          }
        }
        str = str + (e < 0 ? "p" : "p+") + e;
      } else if (e < 0) {
        for (; ++e; )
          str = "0" + str;
        str = "0." + str;
      } else {
        if (++e > len)
          for (e -= len; e--; )
            str += "0";
        else if (e < len)
          str = str.slice(0, e) + "." + str.slice(e);
      }
    }
    str = (baseOut == 16 ? "0x" : baseOut == 2 ? "0b" : baseOut == 8 ? "0o" : "") + str;
  }
  return x.s < 0 ? "-" + str : str;
}
function truncate(arr, len) {
  if (arr.length > len) {
    arr.length = len;
    return true;
  }
}
function abs(x) {
  return new this(x).abs();
}
function acos(x) {
  return new this(x).acos();
}
function acosh(x) {
  return new this(x).acosh();
}
function add(x, y) {
  return new this(x).plus(y);
}
function asin(x) {
  return new this(x).asin();
}
function asinh(x) {
  return new this(x).asinh();
}
function atan(x) {
  return new this(x).atan();
}
function atanh(x) {
  return new this(x).atanh();
}
function atan2(y, x) {
  y = new this(y);
  x = new this(x);
  var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;
  if (!y.s || !x.s) {
    r = new this(NaN);
  } else if (!y.d && !x.d) {
    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
    r.s = y.s;
  } else if (!x.d || y.isZero()) {
    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
    r.s = y.s;
  } else if (!y.d || x.isZero()) {
    r = getPi(this, wpr, 1).times(0.5);
    r.s = y.s;
  } else if (x.s < 0) {
    this.precision = wpr;
    this.rounding = 1;
    r = this.atan(divide(y, x, wpr, 1));
    x = getPi(this, wpr, 1);
    this.precision = pr;
    this.rounding = rm;
    r = y.s < 0 ? r.minus(x) : r.plus(x);
  } else {
    r = this.atan(divide(y, x, wpr, 1));
  }
  return r;
}
function cbrt(x) {
  return new this(x).cbrt();
}
function ceil(x) {
  return finalise(x = new this(x), x.e + 1, 2);
}
function clamp(x, min2, max2) {
  return new this(x).clamp(min2, max2);
}
function config(obj) {
  if (!obj || typeof obj !== "object")
    throw Error(decimalError + "Object expected");
  var i, p, v, useDefaults = obj.defaults === true, ps = [
    "precision",
    1,
    MAX_DIGITS,
    "rounding",
    0,
    8,
    "toExpNeg",
    -EXP_LIMIT,
    0,
    "toExpPos",
    0,
    EXP_LIMIT,
    "maxE",
    0,
    EXP_LIMIT,
    "minE",
    -EXP_LIMIT,
    0,
    "modulo",
    0,
    9
  ];
  for (i = 0; i < ps.length; i += 3) {
    if (p = ps[i], useDefaults)
      this[p] = DEFAULTS[p];
    if ((v = obj[p]) !== void 0) {
      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2])
        this[p] = v;
      else
        throw Error(invalidArgument + p + ": " + v);
    }
  }
  if (p = "crypto", useDefaults)
    this[p] = DEFAULTS[p];
  if ((v = obj[p]) !== void 0) {
    if (v === true || v === false || v === 0 || v === 1) {
      if (v) {
        if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
          this[p] = true;
        } else {
          throw Error(cryptoUnavailable);
        }
      } else {
        this[p] = false;
      }
    } else {
      throw Error(invalidArgument + p + ": " + v);
    }
  }
  return this;
}
function cos(x) {
  return new this(x).cos();
}
function cosh(x) {
  return new this(x).cosh();
}
function clone(obj) {
  var i, p, ps;
  function Decimal2(v) {
    var e, i2, t, x = this;
    if (!(x instanceof Decimal2))
      return new Decimal2(v);
    x.constructor = Decimal2;
    if (isDecimalInstance(v)) {
      x.s = v.s;
      if (external) {
        if (!v.d || v.e > Decimal2.maxE) {
          x.e = NaN;
          x.d = null;
        } else if (v.e < Decimal2.minE) {
          x.e = 0;
          x.d = [0];
        } else {
          x.e = v.e;
          x.d = v.d.slice();
        }
      } else {
        x.e = v.e;
        x.d = v.d ? v.d.slice() : v.d;
      }
      return;
    }
    t = typeof v;
    if (t === "number") {
      if (v === 0) {
        x.s = 1 / v < 0 ? -1 : 1;
        x.e = 0;
        x.d = [0];
        return;
      }
      if (v < 0) {
        v = -v;
        x.s = -1;
      } else {
        x.s = 1;
      }
      if (v === ~~v && v < 1e7) {
        for (e = 0, i2 = v; i2 >= 10; i2 /= 10)
          e++;
        if (external) {
          if (e > Decimal2.maxE) {
            x.e = NaN;
            x.d = null;
          } else if (e < Decimal2.minE) {
            x.e = 0;
            x.d = [0];
          } else {
            x.e = e;
            x.d = [v];
          }
        } else {
          x.e = e;
          x.d = [v];
        }
        return;
      } else if (v * 0 !== 0) {
        if (!v)
          x.s = NaN;
        x.e = NaN;
        x.d = null;
        return;
      }
      return parseDecimal(x, v.toString());
    } else if (t !== "string") {
      throw Error(invalidArgument + v);
    }
    if ((i2 = v.charCodeAt(0)) === 45) {
      v = v.slice(1);
      x.s = -1;
    } else {
      if (i2 === 43)
        v = v.slice(1);
      x.s = 1;
    }
    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
  }
  Decimal2.prototype = P;
  Decimal2.ROUND_UP = 0;
  Decimal2.ROUND_DOWN = 1;
  Decimal2.ROUND_CEIL = 2;
  Decimal2.ROUND_FLOOR = 3;
  Decimal2.ROUND_HALF_UP = 4;
  Decimal2.ROUND_HALF_DOWN = 5;
  Decimal2.ROUND_HALF_EVEN = 6;
  Decimal2.ROUND_HALF_CEIL = 7;
  Decimal2.ROUND_HALF_FLOOR = 8;
  Decimal2.EUCLID = 9;
  Decimal2.config = Decimal2.set = config;
  Decimal2.clone = clone;
  Decimal2.isDecimal = isDecimalInstance;
  Decimal2.abs = abs;
  Decimal2.acos = acos;
  Decimal2.acosh = acosh;
  Decimal2.add = add;
  Decimal2.asin = asin;
  Decimal2.asinh = asinh;
  Decimal2.atan = atan;
  Decimal2.atanh = atanh;
  Decimal2.atan2 = atan2;
  Decimal2.cbrt = cbrt;
  Decimal2.ceil = ceil;
  Decimal2.clamp = clamp;
  Decimal2.cos = cos;
  Decimal2.cosh = cosh;
  Decimal2.div = div;
  Decimal2.exp = exp;
  Decimal2.floor = floor;
  Decimal2.hypot = hypot;
  Decimal2.ln = ln;
  Decimal2.log = log;
  Decimal2.log10 = log10;
  Decimal2.log2 = log2;
  Decimal2.max = max;
  Decimal2.min = min;
  Decimal2.mod = mod;
  Decimal2.mul = mul;
  Decimal2.pow = pow;
  Decimal2.random = random;
  Decimal2.round = round;
  Decimal2.sign = sign;
  Decimal2.sin = sin;
  Decimal2.sinh = sinh;
  Decimal2.sqrt = sqrt;
  Decimal2.sub = sub;
  Decimal2.sum = sum;
  Decimal2.tan = tan;
  Decimal2.tanh = tanh;
  Decimal2.trunc = trunc;
  if (obj === void 0)
    obj = {};
  if (obj) {
    if (obj.defaults !== true) {
      ps = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"];
      for (i = 0; i < ps.length; )
        if (!obj.hasOwnProperty(p = ps[i++]))
          obj[p] = this[p];
    }
  }
  Decimal2.config(obj);
  return Decimal2;
}
function div(x, y) {
  return new this(x).div(y);
}
function exp(x) {
  return new this(x).exp();
}
function floor(x) {
  return finalise(x = new this(x), x.e + 1, 3);
}
function hypot() {
  var i, n, t = new this(0);
  external = false;
  for (i = 0; i < arguments.length; ) {
    n = new this(arguments[i++]);
    if (!n.d) {
      if (n.s) {
        external = true;
        return new this(1 / 0);
      }
      t = n;
    } else if (t.d) {
      t = t.plus(n.times(n));
    }
  }
  external = true;
  return t.sqrt();
}
function isDecimalInstance(obj) {
  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
}
function ln(x) {
  return new this(x).ln();
}
function log(x, y) {
  return new this(x).log(y);
}
function log2(x) {
  return new this(x).log(2);
}
function log10(x) {
  return new this(x).log(10);
}
function max() {
  return maxOrMin(this, arguments, "lt");
}
function min() {
  return maxOrMin(this, arguments, "gt");
}
function mod(x, y) {
  return new this(x).mod(y);
}
function mul(x, y) {
  return new this(x).mul(y);
}
function pow(x, y) {
  return new this(x).pow(y);
}
function random(sd) {
  var d, e, k, n, i = 0, r = new this(1), rd = [];
  if (sd === void 0)
    sd = this.precision;
  else
    checkInt32(sd, 1, MAX_DIGITS);
  k = Math.ceil(sd / LOG_BASE);
  if (!this.crypto) {
    for (; i < k; )
      rd[i++] = Math.random() * 1e7 | 0;
  } else if (crypto.getRandomValues) {
    d = crypto.getRandomValues(new Uint32Array(k));
    for (; i < k; ) {
      n = d[i];
      if (n >= 429e7) {
        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
      } else {
        rd[i++] = n % 1e7;
      }
    }
  } else if (crypto.randomBytes) {
    d = crypto.randomBytes(k *= 4);
    for (; i < k; ) {
      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 127) << 24);
      if (n >= 214e7) {
        crypto.randomBytes(4).copy(d, i);
      } else {
        rd.push(n % 1e7);
        i += 4;
      }
    }
    i = k / 4;
  } else {
    throw Error(cryptoUnavailable);
  }
  k = rd[--i];
  sd %= LOG_BASE;
  if (k && sd) {
    n = mathpow(10, LOG_BASE - sd);
    rd[i] = (k / n | 0) * n;
  }
  for (; rd[i] === 0; i--)
    rd.pop();
  if (i < 0) {
    e = 0;
    rd = [0];
  } else {
    e = -1;
    for (; rd[0] === 0; e -= LOG_BASE)
      rd.shift();
    for (k = 1, n = rd[0]; n >= 10; n /= 10)
      k++;
    if (k < LOG_BASE)
      e -= LOG_BASE - k;
  }
  r.e = e;
  r.d = rd;
  return r;
}
function round(x) {
  return finalise(x = new this(x), x.e + 1, this.rounding);
}
function sign(x) {
  x = new this(x);
  return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
}
function sin(x) {
  return new this(x).sin();
}
function sinh(x) {
  return new this(x).sinh();
}
function sqrt(x) {
  return new this(x).sqrt();
}
function sub(x, y) {
  return new this(x).sub(y);
}
function sum() {
  var i = 0, args = arguments, x = new this(args[i]);
  external = false;
  for (; x.s && ++i < args.length; )
    x = x.plus(args[i]);
  external = true;
  return finalise(x, this.precision, this.rounding);
}
function tan(x) {
  return new this(x).tan();
}
function tanh(x) {
  return new this(x).tanh();
}
function trunc(x) {
  return finalise(x = new this(x), x.e + 1, 1);
}
P[Symbol.for("nodejs.util.inspect.custom")] = P.toString;
P[Symbol.toStringTag] = "Decimal";
var Decimal = P.constructor = clone(DEFAULTS);
LN10 = new Decimal(LN10);
PI = new Decimal(PI);
var decimal_default = Decimal;
var import_complex20 = __toESM(require_complex());
function stringToCodepoints(string) {
  const result = [];
  for (let i = 0; i < string.length; i++) {
    let code = string.charCodeAt(i);
    if (code >= 55296 && code <= 56319) {
      const nextCode = string.charCodeAt(i + 1);
      if (nextCode >= 56320 && nextCode <= 57343) {
        const lead = code - 55296;
        const trail = nextCode - 56320;
        code = 2 ** 16 + lead * 2 ** 10 + trail;
        i++;
      }
    }
    result.push(code);
  }
  return result;
}
var ZWJ = 8205;
var REGIONAL_INDICATOR = [127462, 127487];
function isEmojiCombinator(code) {
  if (code === ZWJ)
    return true;
  if (code === 65038 || code === 65039)
    return true;
  if (code >= 127995 && code <= 127995 + 5)
    return true;
  if (code >= 129456 && code <= 129456 + 4)
    return true;
  if (code >= 917536 && code <= 917536 + 96)
    return true;
  return false;
}
function isRegionalIndicator(code) {
  return code >= REGIONAL_INDICATOR[0] && code <= REGIONAL_INDICATOR[1];
}
function splitGraphemes(string) {
  if (/^[\u0020-\u00FF]*$/.test(string))
    return string;
  const result = [];
  const codePoints = stringToCodepoints(string);
  let index = 0;
  while (index < codePoints.length) {
    const code = codePoints[index++];
    const next = codePoints[index];
    if (next === ZWJ) {
      const baseIndex = index - 1;
      index += 2;
      while (codePoints[index] === ZWJ) {
        index += 2;
      }
      result.push(
        String.fromCodePoint(
          ...codePoints.slice(baseIndex, 2 * index - baseIndex + 1)
        )
      );
    } else if (isEmojiCombinator(next)) {
      const baseIndex = index - 1;
      while (isEmojiCombinator(codePoints[index])) {
        index += codePoints[index] === ZWJ ? 2 : 1;
      }
      result.push(
        String.fromCodePoint(
          ...codePoints.slice(baseIndex, 2 * index - baseIndex - 1)
        )
      );
    } else if (isRegionalIndicator(code)) {
      index += 1;
      result.push(String.fromCodePoint(...codePoints.slice(index - 2, 2)));
    } else {
      result.push(String.fromCodePoint(code));
    }
  }
  return result;
}
var Tokenizer = class {
  constructor(s) {
    this.obeyspaces = false;
    s = s.replace(/[\u200E\u200F\u2066-\u2069\u202A-\u202E]/g, "");
    this.s = splitGraphemes(s);
    this.pos = 0;
  }
  /**
   * @return True if we reached the end of the stream
   */
  end() {
    return this.pos >= this.s.length;
  }
  /**
   * Return the next char and advance
   */
  get() {
    return this.pos < this.s.length ? this.s[this.pos++] : "";
  }
  /**
   * Return the next char, but do not advance
   */
  peek() {
    return this.s[this.pos];
  }
  /**
   * Return the next substring matching regEx and advance.
   */
  match(regEx) {
    let execResult;
    if (typeof this.s === "string") {
      execResult = regEx.exec(this.s.slice(this.pos));
    } else {
      execResult = regEx.exec(this.s.slice(this.pos).join(""));
    }
    if (execResult == null ? void 0 : execResult[0]) {
      this.pos += execResult[0].length;
      return execResult[0];
    }
    return null;
  }
  /**
   * Return the next token, or null.
   */
  next() {
    if (this.end())
      return null;
    if (!this.obeyspaces && this.match(/^[ \f\n\r\t\v\xA0\u2028\u2029]+/)) {
      return "<space>";
    } else if (this.obeyspaces && this.match(/^[ \f\n\r\t\v\xA0\u2028\u2029]/)) {
      return "<space>";
    }
    const next = this.get();
    if (next === "\\") {
      if (!this.end()) {
        let command = this.match(/^[a-zA-Z*]+/);
        if (command) {
          this.match(/^[ \f\n\r\t\v\xA0\u2028\u2029]*/);
        } else {
          command = this.get();
          if (command === " ") {
            return "<space>";
          }
        }
        return "\\" + command;
      }
    } else if (next === "{") {
      return "<{>";
    } else if (next === "}") {
      return "<}>";
    } else if (next === "^") {
      if (this.peek() === "^") {
        this.get();
        const hex = this.match(
          /^(\^(\^(\^(\^[0-9a-f])?[0-9a-f])?[0-9a-f])?[0-9a-f])?[0-9a-f][0-9a-f]/
        );
        if (hex) {
          return String.fromCodePoint(
            parseInt(hex.slice(hex.lastIndexOf("^") + 1), 16)
          );
        }
      }
      return next;
    } else if (next === "#") {
      if (!this.end()) {
        let isParam = false;
        if (/[0-9?]/.test(this.peek())) {
          isParam = true;
          if (this.pos + 1 < this.s.length) {
            const after = this.s[this.pos + 1];
            isParam = /[^0-9A-Za-z]/.test(after);
          }
        }
        if (isParam) {
          return "#" + this.get();
        }
        return "#";
      }
    } else if (next === "$") {
      if (this.peek() === "$") {
        this.get();
        return "<$$>";
      }
      return "<$>";
    }
    return next;
  }
};
function expand(lex2, args) {
  var _a, _b, _c, _d;
  let token = lex2.next();
  if (!token)
    return [];
  let result = [];
  if (token === "\\relax") {
  } else if (token === "\\noexpand") {
    token = lex2.next();
    if (token) {
      result.push(token);
    }
  } else if (token === "\\obeyspaces") {
    lex2.obeyspaces = true;
  } else if (token === "\\space" || token === "~") {
    result.push("<space>");
  } else if (token === "\\bgroup") {
    result.push("<{>");
  } else if (token === "\\egroup") {
    result.push("<}>");
  } else if (token === "\\string") {
    token = lex2.next();
    if (token) {
      if (token[0] === "\\") {
        Array.from(token).forEach(
          (x) => result.push(x === "\\" ? "\\backslash" : x)
        );
      } else if (token === "<{>") {
        result.push("\\{");
      } else if (token === "<space>") {
        result.push("~");
      } else if (token === "<}>") {
        result.push("\\}");
      }
    }
  } else if (token === "\\csname") {
    while (lex2.peek() === "<space>") {
      lex2.next();
    }
    let command = "";
    let done = false;
    let tokens = [];
    do {
      if (tokens.length === 0) {
        if (/^#[0-9?]$/.test(lex2.peek())) {
          const param = lex2.get().slice(1);
          tokens = tokenize(
            (_b = (_a = args == null ? void 0 : args[param]) != null ? _a : args == null ? void 0 : args["?"]) != null ? _b : "\\placeholder{}",
            args
          );
          token = tokens[0];
        } else {
          token = lex2.next();
          tokens = token ? [token] : [];
        }
      }
      done = tokens.length === 0;
      if (!done && token === "\\endcsname") {
        done = true;
        tokens.shift();
      }
      if (!done) {
        done = token === "<$>" || token === "<$$>" || token === "<{>" || token === "<}>" || !!token && token.length > 1 && token[0] === "\\";
      }
      if (!done) {
        command += tokens.shift();
      }
    } while (!done);
    if (command) {
      result.push("\\" + command);
    }
    result = result.concat(tokens);
  } else if (token === "\\endcsname") {
  } else if (token.length > 1 && token[0] === "#") {
    const param = token.slice(1);
    result = result.concat(
      tokenize((_d = (_c = args == null ? void 0 : args[param]) != null ? _c : args == null ? void 0 : args["?"]) != null ? _d : "\\placeholder{}", args)
    );
  } else {
    result.push(token);
  }
  return result;
}
function tokenize(s, args) {
  const lines = s.toString().split(/\r?\n/);
  let stream = "";
  let sep = "";
  for (const line of lines) {
    stream += sep;
    sep = " ";
    const m = line.match(/((?:\\%)|[^%])*/);
    if (m !== null)
      stream += m[0];
  }
  const tokenizer = new Tokenizer(stream);
  const result = [];
  do
    result.push(...expand(tokenizer, args));
  while (!tokenizer.end());
  return result;
}
function countTokens(s) {
  return tokenize(s, []).length;
}
function joinLatex(segments) {
  let sep = "";
  let result = "";
  for (const segment of segments) {
    if (segment) {
      if (/[a-zA-Z*]/.test(segment[0])) {
        result += sep;
      }
      if (/\\[a-zA-Z]+\*?$/.test(segment)) {
        sep = " ";
      } else {
        sep = "";
      }
      result += segment;
    }
  }
  return result;
}
function tokensToString(tokens) {
  let flat = [];
  if (Array.isArray(tokens)) {
    for (const item of tokens) {
      if (Array.isArray(item)) {
        flat = [...flat, ...item];
      } else {
        flat.push(item);
      }
    }
  } else {
    flat = [tokens];
  }
  const result = joinLatex(
    flat.map((token) => {
      var _a;
      return (_a = {
        "<space>": " ",
        "<$$>": "$$",
        "<$>": "$",
        "<{>": "{",
        "<}>": "}"
      }[token]) != null ? _a : token;
    })
  );
  return result;
}
var DEFINITIONS_ALGEBRA = [
  {
    name: "To",
    latexTrigger: ["\\to"],
    kind: "infix",
    precedence: 270
    // MathML rightwards arrow
  }
];
var MISSING = ["Error", "'missing'"];
function isNumberExpression(expr) {
  if (expr === null)
    return false;
  if (typeof expr === "number" || isNumberObject(expr))
    return true;
  if (typeof expr === "string" && /^[+-]?[0-9\.]/.test(expr))
    return true;
  return false;
}
function isNumberObject(expr) {
  return expr !== null && typeof expr === "object" && "num" in expr;
}
function isSymbolObject(expr) {
  return expr !== null && typeof expr === "object" && "sym" in expr;
}
function isStringObject(expr) {
  return expr !== null && typeof expr === "object" && "str" in expr;
}
function isFunctionObject(expr) {
  return expr !== null && typeof expr === "object" && "fn" in expr;
}
var recommendedScriptsRegex;
function isRecommendedScripts(text) {
  if (!recommendedScriptsRegex) {
    const recommendedScripts = [
      "Zyyy",
      "Zinh",
      "Arab",
      "Armn",
      "Beng",
      "Bopo",
      "Cyrl",
      "Deva",
      "Ethi",
      "Geor",
      "Grek",
      "Gujr",
      "Guru",
      "Hang",
      "Hani",
      "Hebr",
      "Hira",
      "Kana",
      "Knda",
      "Khmr",
      "Laoo",
      "Latn",
      "Mlym",
      "Mymr",
      "Orya",
      "Sinh",
      "Taml",
      "Telu",
      "Thaa",
      "Thai",
      "Tibt"
    ];
    const regexPattern = `^[${recommendedScripts.map((x) => `\\p{Script=${x}}`).join("")}]*$`;
    recommendedScriptsRegex = new RegExp(regexPattern, "u");
  }
  return recommendedScriptsRegex.test(text);
}
function isValidIdentifier(s) {
  if (/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(s))
    return true;
  if (ONLY_EMOJIS.test(s))
    return true;
  if (!isRecommendedScripts(s))
    return false;
  return /^[\p{XIDS}_]\p{XIDC}*$/u.test(s);
}
var VS16 = "\\u{FE0F}";
var KEYCAP = "\\u{20E3}";
var ZWJ2 = "\\u{200D}";
var FLAG_SEQUENCE = "\\p{RI}\\p{RI}";
var TAG_MOD = `(?:[\\u{E0020}-\\u{E007E}]+\\u{E007F})`;
var EMOJI_MOD = `(?:\\p{EMod}|${VS16}${KEYCAP}?|${TAG_MOD})`;
var EMOJI_NOT_IDENTIFIER = `(?:(?=\\P{XIDC})\\p{Emoji})`;
var ZWJ_ELEMENT = `(?:${EMOJI_NOT_IDENTIFIER}${EMOJI_MOD}*|\\p{Emoji}${EMOJI_MOD}+|${FLAG_SEQUENCE})`;
var POSSIBLE_EMOJI = `(?:${ZWJ_ELEMENT})(${ZWJ2}${ZWJ_ELEMENT})*`;
var SOME_EMOJI = new RegExp(`(?:${POSSIBLE_EMOJI})+`, "u");
var ONLY_EMOJIS = new RegExp(`^(?:${POSSIBLE_EMOJI})+$`, "u");
function validateIdentifier(s) {
  if (typeof s !== "string")
    return "not-a-string";
  if (s === "")
    return "empty-string";
  if (s.normalize() !== s)
    return "expected-nfc";
  if (/[\u200E\u200F\u2066-\u2069\u202A-\u202E]/.test(s))
    return "unexpected-bidi-marker";
  if (ONLY_EMOJIS.test(s))
    return "valid";
  if (/\p{XIDC}/u.test(s) && SOME_EMOJI.test(s))
    return "unexpected-mixed-emoji";
  if (!isRecommendedScripts(s))
    return "unexpected-script";
  if (!isValidIdentifier(s)) {
    if (!isValidIdentifier(s[0]))
      return "invalid-first-char";
    return "invalid-char";
  }
  return "valid";
}
function stringValue(expr) {
  if (expr === null || expr === void 0)
    return null;
  if (typeof expr === "object" && "str" in expr)
    return expr.str;
  if (typeof expr !== "string")
    return null;
  if (expr.length < 2)
    return null;
  if (expr[0] !== "'" || expr[expr.length - 1] !== "'")
    return null;
  return expr.substring(1, expr.length - 1);
}
function stripText(expr) {
  var _a;
  if (expr === null || expr === void 0 || stringValue(expr) !== null)
    return null;
  const h = head(expr);
  if (h !== null) {
    return [
      h,
      ...((_a = ops(expr)) != null ? _a : []).map((x) => stripText(x)).filter((x) => x !== null)
    ];
  }
  return expr;
}
function head(expr) {
  if (expr === null || expr === void 0)
    return null;
  if (Array.isArray(expr)) {
    if (typeof expr[0] === "string" && !isValidIdentifier(expr[0])) {
      console.error(
        `Invalid identifier "${expr[0]}": ${validateIdentifier(expr[0])}`
      );
      return null;
    }
    return expr[0];
  }
  if (isFunctionObject(expr))
    return expr.fn[0];
  return null;
}
function headName(expr) {
  const h = head(expr);
  return typeof h === "string" ? h : "";
}
function ops(expr) {
  if (expr === null || expr === void 0)
    return null;
  if (Array.isArray(expr))
    return expr.slice(1);
  if (isFunctionObject(expr))
    return expr.fn.slice(1);
  return null;
}
function op(expr, n) {
  var _a, _b;
  if (expr === null || expr === void 0)
    return null;
  if (Array.isArray(expr))
    return (_a = expr[n]) != null ? _a : null;
  if (isFunctionObject(expr))
    return (_b = expr.fn[n]) != null ? _b : null;
  return null;
}
function op1(expr) {
  return op(expr, 1);
}
function op2(expr) {
  return op(expr, 2);
}
function nops(expr) {
  if (expr === null || expr === void 0)
    return 0;
  if (Array.isArray(expr))
    return Math.max(0, expr.length - 1);
  if (isFunctionObject(expr))
    return Math.max(0, expr.fn.length - 1);
  return 0;
}
function symbol(expr) {
  if (expr === null || expr === void 0)
    return null;
  if (typeof expr === "string") {
    if (/^[+\-\.0-9]/.test(expr))
      return null;
    if (expr.length >= 2 && expr[0] === "'" && expr[expr.length - 1] === "'")
      return null;
  }
  const s = isSymbolObject(expr) ? expr.sym : expr;
  if (typeof s !== "string")
    return null;
  return s;
}
function isListLike(expr) {
  if (expr === null)
    return false;
  const h = head(expr);
  if (!h || typeof h !== "string")
    return false;
  return /^(List|Sequence|Tuple|Single|Pair|Triple)$/.test(h);
}
function keyValuePair(expr) {
  var _a;
  const h = head(expr);
  if (h === "KeyValuePair" || h === "Tuple" || h === "Pair") {
    const key = stringValue(op1(expr));
    if (!key)
      return null;
    return [key, (_a = op2(expr)) != null ? _a : "Nothing"];
  }
  return null;
}
function dictionary(expr) {
  if (expr === null)
    return null;
  if (typeof expr === "object" && "dict" in expr)
    return expr.dict;
  const kv = keyValuePair(expr);
  if (kv)
    return { [kv[0]]: kv[1] };
  const h = head(expr);
  if (h === "Dictionary") {
    const result = {};
    for (let i = 1; i < nops(expr); i++) {
      const kv2 = keyValuePair(op(expr, i));
      if (kv2)
        result[kv2[0]] = kv2[1];
    }
    return result;
  }
  return null;
}
function machineValueOfString(s) {
  var _a;
  s = s.toLowerCase().replace(/[nd]$/g, "").replace(/[\u0009-\u000d\u0020\u00a0]/g, "");
  if (s === "nan")
    return NaN;
  if (s === "+infinity")
    return Infinity;
  if (s === "-infinity")
    return -Infinity;
  if (/\([0-9]+\)/.test(s)) {
    const [_, body, repeat, trail] = (_a = s.match(/(.+)\(([0-9]+)\)(.*)$/)) != null ? _a : [];
    s = body + repeat.repeat(Math.ceil(16 / repeat.length)) + (trail != null ? trail : "");
  }
  return parseFloat(s);
}
function machineValue(expr) {
  if (expr === null || expr === void 0)
    return null;
  if (typeof expr === "number")
    return expr;
  if (typeof expr === "string")
    return machineValueOfString(expr);
  if (isNumberObject(expr))
    return machineValue(expr.num);
  return null;
}
function rationalValue(expr) {
  var _a, _b;
  if (expr === void 0 || expr === null)
    return null;
  if (symbol(expr) === "Half")
    return [1, 2];
  const h = head(expr);
  if (!h)
    return null;
  let numer = null;
  let denom = null;
  if (h === "Negate") {
    const r = rationalValue(op1(expr));
    if (r)
      return [-r[0], r[1]];
  }
  if (h === "Rational" || h === "Divide") {
    numer = (_a = machineValue(op1(expr))) != null ? _a : NaN;
    denom = (_b = machineValue(op2(expr))) != null ? _b : NaN;
  }
  if (h === "Power") {
    const exponent = machineValue(op2(expr));
    if (exponent === 1) {
      numer = machineValue(op1(expr));
      denom = 1;
    } else if (exponent === -1) {
      numer = 1;
      denom = machineValue(op1(expr));
    }
  }
  if (h === "Multiply" && head(op2(expr)) === "Power" && machineValue(op2(op2(expr))) === -1) {
    numer = machineValue(op1(expr));
    denom = machineValue(op1(op2(expr)));
  }
  if (numer === null || denom === null)
    return null;
  if (Number.isInteger(numer) && Number.isInteger(denom))
    return [numer, denom];
  return null;
}
function subs(expr, s) {
  var _a;
  const h = head(expr);
  if (h !== null)
    return [subs(h, s), ...((_a = ops(expr)) != null ? _a : []).map((x) => subs(x, s))];
  const dict = dictionary(expr);
  if (dict !== null) {
    const keys = Object.keys(dict);
    const result = {};
    for (const key of keys)
      result[key] = subs(dict[key], s);
    return { dict: result };
  }
  const sym = symbol(expr);
  if (sym && s[sym])
    return s[sym];
  return expr;
}
function mapArgs(expr, fn) {
  let args = null;
  if (Array.isArray(expr))
    args = expr;
  if (isFunctionObject(expr))
    args = expr.fn;
  if (args === null)
    return [];
  let i = 1;
  const result = [];
  while (i < args.length) {
    result.push(fn(args[i]));
    i += 1;
  }
  return result;
}
function applyAssociativeOperator(op3, lhs, rhs, associativity = "both") {
  var _a, _b, _c, _d, _e, _f;
  if (associativity === "non")
    return [op3, lhs, rhs];
  const lhsName = head(lhs);
  const rhsName = head(rhs);
  if (associativity === "left") {
    if (lhsName === op3)
      return [op3, ...(_a = ops(lhs)) != null ? _a : [], rhs];
    return [op3, lhs, rhs];
  }
  if (associativity === "right") {
    if (rhsName === op3)
      return [op3, lhs, ...(_b = ops(rhs)) != null ? _b : []];
    return [op3, lhs, rhs];
  }
  if (lhsName === op3 && rhsName === op3) {
    return [op3, ...(_c = ops(lhs)) != null ? _c : [], ...(_d = ops(rhs)) != null ? _d : []];
  }
  if (lhsName === op3)
    return [op3, ...(_e = ops(lhs)) != null ? _e : [], rhs];
  if (rhsName === op3)
    return [op3, lhs, ...(_f = ops(rhs)) != null ? _f : []];
  return [op3, lhs, rhs];
}
function getSequence(expr) {
  var _a;
  if (expr === null)
    return null;
  let h = head(expr);
  if (h === "Delimiter") {
    expr = op(expr, 1);
    if (expr === null)
      return [];
    if (head(expr) !== "Sequence")
      return [expr];
  }
  h = head(expr);
  if (h !== "Sequence")
    return null;
  return (_a = ops(expr)) != null ? _a : [];
}
function isEmptySequence(expr) {
  return expr !== null && head(expr) === "Sequence" && nops(expr) === 0;
}
function missingIfEmpty(expr) {
  if (expr === null || isEmptySequence(expr))
    return MISSING;
  return expr;
}
function countFunctionLeaves(xs) {
  if (xs[0] === "Square") {
    return countFunctionLeaves(xs.slice(1)) + 2;
  }
  return xs.reduce((acc, x) => acc + countLeaves(x), 0);
}
function countLeaves(expr) {
  if (expr === null)
    return 0;
  if (typeof expr === "number" || typeof expr === "string")
    return 1;
  if (isNumberExpression(expr) || isSymbolObject(expr) || isStringObject(expr))
    return 1;
  if (Array.isArray(expr))
    return countFunctionLeaves(expr);
  if ("fn" in expr)
    return countFunctionLeaves(expr.fn);
  const dict = dictionary(expr);
  if (dict) {
    const keys = Object.keys(dict);
    return 1 + keys.length + keys.reduce((acc, x) => acc + countLeaves(dict[x]), 0);
  }
  return 0;
}
function getApplyFunctionStyle(_expr, _level) {
  return "paren";
}
function getGroupStyle(_expr, _level) {
  return "paren";
}
function getRootStyle(_expr, level) {
  return level > 2 ? "solidus" : "radical";
}
function getFractionStyle(expr, level) {
  if (level > 3)
    return "inline-solidus";
  if (head(expr) === "Divide") {
    const [n, d] = [countLeaves(op1(expr)), countLeaves(op2(expr))];
    if (d <= 2 && n > 5)
      return "factor";
    if (n <= 2 && d > 5)
      return "reciprocal";
  }
  return "quotient";
}
function getLogicStyle(_expr, _level) {
  return "boolean";
}
function getPowerStyle(_expr, _level) {
  return "solidus";
}
function getNumericSetStyle(_expr, _level) {
  return "compact";
}
function numeratorDenominator(expr) {
  var _a, _b;
  if (head(expr) !== "Multiply")
    return [[], []];
  const numerator = [];
  const denominator = [];
  const args = (_a = ops(expr)) != null ? _a : [];
  for (const arg of args) {
    if (head(arg) === "Power") {
      const op12 = op(arg, 1);
      const op22 = op(arg, 2);
      if (head(op22) === "Negate") {
        const b = op(op22, 1);
        if (op12 && b)
          denominator.push(["Power", op12, b]);
      } else {
        const exponentVal = (_b = machineValue(op22)) != null ? _b : NaN;
        if (exponentVal === -1) {
          if (op12)
            denominator.push(op12);
        } else if (exponentVal < 0) {
          if (op12)
            denominator.push(["Power", op12, -exponentVal]);
        } else {
          numerator.push(arg);
        }
      }
    } else if (head(arg) === "Rational" && nops(arg) === 2) {
      const op12 = op(arg, 1);
      const op22 = op(arg, 2);
      if (machineValue(op12) !== 1)
        numerator.push(op12);
      if (machineValue(op22) !== 1)
        denominator.push(op22);
    } else {
      const r = rationalValue(arg);
      if (r !== null) {
        if (r[0] !== 1)
          numerator.push(r[0]);
        denominator.push(r[1]);
      } else
        numerator.push(arg);
    }
  }
  return [numerator, denominator];
}
function parseRoot(parser) {
  var _a;
  const degree = parser.parseOptionalGroup();
  const base = (_a = parser.parseGroup()) != null ? _a : parser.parseToken();
  if (base === null || isEmptySequence(base)) {
    if (degree !== null)
      return ["Root", MISSING, missingIfEmpty(degree)];
    return ["Sqrt", MISSING];
  }
  if (degree !== null)
    return ["Root", base, degree];
  return ["Sqrt", base];
}
function serializeRoot(serializer, style, base, degree) {
  if (base === null)
    return "\\sqrt{}";
  degree = degree != null ? degree : 2;
  if (style === "solidus") {
    return serializer.wrapShort(base) + "^{1\\/" + serializer.serialize(degree) + "}";
  } else if (style === "quotient") {
    return serializer.wrapShort(base) + "^{\\frac{1}{" + serializer.serialize(degree) + "}}";
  }
  const degreeValue = machineValue(degree);
  if (degreeValue === 2)
    return "\\sqrt{" + serializer.serialize(base) + "}";
  return "\\sqrt[" + serializer.serialize(degree) + "]{" + serializer.serialize(base) + "}";
}
function serializeAdd(serializer, expr) {
  var _a, _b;
  serializer.level -= 1;
  const name = head(expr);
  let result = "";
  let arg = op(expr, 1);
  if (name === "Negate") {
    result = "-" + serializer.wrap(arg, 276);
  } else if (name === "Add") {
    if (serializer.canonical && nops(expr) === 2 && serializer.options.invisiblePlus !== "+") {
      const [op12, op22] = [op(expr, 1), op(expr, 2)];
      let [lhs, rhs] = [op12, op22];
      let lhsValue = machineValue(lhs);
      let rhsValue = rationalValue(rhs);
      if (lhsValue === null || rhsValue === null) {
        [lhs, rhs] = [op22, op12];
        lhsValue = machineValue(lhs);
        rhsValue = rationalValue(rhs);
      }
      if (lhsValue !== null && rhsValue !== null) {
        if (isFinite(lhsValue) && Number.isInteger(lhsValue) && lhsValue >= 0 && lhsValue <= 1e3 && isFinite(rhsValue[0]) && isFinite(rhsValue[1]) && rhsValue[0] > 0 && rhsValue[0] <= 100 && rhsValue[1] <= 100) {
          result = joinLatex([
            serializer.serialize(lhs),
            serializer.options.invisiblePlus,
            serializer.serialize(rhs)
          ]);
          serializer.level += 1;
          return result;
        }
      }
    }
    let val = (_a = machineValue(arg)) != null ? _a : NaN;
    result = serializer.serialize(arg);
    const last = nops(expr) + 1;
    for (let i = 2; i < last; i++) {
      arg = op(expr, i);
      val = (_b = machineValue(arg)) != null ? _b : NaN;
      if (val < 0) {
        result += serializer.serialize(arg);
      } else if (head(arg) === "Negate") {
        result += serializer.wrap(arg, 275);
      } else {
        const term = serializer.wrap(arg, 275);
        if (term[0] === "-" || term[0] === "+")
          result += term;
        else
          result += "+" + term;
      }
    }
  } else if (name === "Subtract") {
    result = serializer.wrap(arg, 275);
    const arg2 = op(expr, 2);
    if (arg2 !== null) {
      const term = serializer.wrap(arg2, 275);
      if (term[0] === "-")
        result += "+" + term.slice(1);
      else if (term[0] === "+")
        result += "-" + term.slice(1);
      else
        result = result + "-" + term;
    }
  }
  serializer.level += 1;
  return result;
}
function serializeMultiply(serializer, expr) {
  var _a;
  if (expr === null)
    return "";
  serializer.level -= 1;
  let result = "";
  if (serializer.canonical === true) {
    const [numer, denom] = numeratorDenominator(expr);
    if (denom.length > 0) {
      if (denom.length === 1 && denom[0] === 1) {
        if (numer.length === 0)
          result = "1";
        else if (numer.length === 1)
          result = serializer.serialize(numer[0]);
        else
          result = serializeMultiply(serializer, ["Multiply", ...numer]);
      } else {
        result = serializer.serialize([
          "Divide",
          numer.length === 1 ? numer[0] : ["Multiply", ...numer],
          denom.length === 1 ? denom[0] : ["Multiply", ...denom]
        ]);
      }
    }
  }
  if (result) {
    serializer.level += 1;
    return result;
  }
  let isNegative = false;
  let arg = null;
  const count = nops(expr) + 1;
  let prevWasNumber = false;
  for (let i = 1; i < count; i++) {
    arg = op(expr, i);
    if (arg === null)
      continue;
    let term;
    if (isNumberExpression(arg)) {
      term = serializer.serialize(arg);
      if (term === "-1" && !result) {
        result = "";
        isNegative = !isNegative;
      } else {
        if (term[0] === "-") {
          term = term.slice(1);
          isNegative = !isNegative;
        }
        result = !result ? term : joinLatex([result, serializer.options.multiply, term]);
      }
      prevWasNumber = true;
      continue;
    }
    if (head(arg) === "Power") {
      const r = rationalValue(op(arg, 2));
      if (r) {
        const [n, d] = r;
        if (n === 1 && d !== null) {
          result += serializeRoot(
            serializer,
            getRootStyle(arg, serializer.level),
            op(arg, 1),
            d
          );
          prevWasNumber = false;
          continue;
        }
      }
    }
    if (head(arg) === "Power" && !isNaN((_a = machineValue(op(arg, 1))) != null ? _a : NaN)) {
      term = serializer.serialize(arg);
      result = !result ? term : joinLatex([result, serializer.options.multiply, term]);
      prevWasNumber = true;
      continue;
    }
    if (head(arg) === "Negate") {
      arg = op(arg, 1);
      isNegative = !isNegative;
    }
    term = serializer.wrap(arg, 390);
    if (!result) {
      result = term;
    } else {
      const h = head(arg);
      if (prevWasNumber && (h === "Divide" || h === "Rational")) {
        result = joinLatex([result, serializer.options.multiply, term]);
      } else if (!serializer.options.invisibleMultiply) {
        result = joinLatex([result, term]);
      } else {
        result = joinLatex([
          result,
          serializer.options.invisibleMultiply,
          term
        ]);
      }
    }
    prevWasNumber = false;
  }
  serializer.level += 1;
  return isNegative ? "-" + result : result;
}
function parseFraction(parser) {
  var _a, _b;
  let numer = parser.parseGroup();
  let denom = null;
  if (numer === null) {
    numer = parser.parseToken();
    denom = parser.parseToken();
  } else {
    denom = parser.parseGroup();
  }
  numer = missingIfEmpty(numer);
  denom = missingIfEmpty(denom);
  if (head(numer) === "PartialDerivative" && (head(denom) === "PartialDerivative" || head(denom) === "Multiply" && head(op(denom, 1)) === "PartialDerivative")) {
    const degree = (_a = op(numer, 3)) != null ? _a : null;
    let fn = op(numer, 1);
    if (fn === null)
      fn = missingIfEmpty(parser.parseExpression());
    let vars = [];
    if (head(denom) === "Multiply") {
      for (const arg of (_b = ops(denom)) != null ? _b : []) {
        if (head(arg) === "PartialDerivative") {
          const v = op(arg, 2);
          if (v)
            vars.push(v);
        }
      }
    } else {
      const v = op(denom, 2);
      if (v)
        vars.push(v);
    }
    if (vars.length > 1) {
      vars = ["List", ...vars];
    }
    return ["PartialDerivative", fn, ...vars, degree === null ? 1 : degree];
  }
  return ["Divide", numer, denom];
}
function serializeFraction(serializer, expr) {
  if (expr === null)
    return "";
  const numer = missingIfEmpty(op(expr, 1));
  const denom = missingIfEmpty(op(expr, 2));
  const style = serializer.canonical ? getFractionStyle(expr, serializer.level) : "quotient";
  if (style === "inline-solidus" || style === "nice-solidus") {
    const numerStr = serializer.wrapShort(numer);
    const denomStr = serializer.wrapShort(denom);
    if (style === "inline-solidus")
      return `${numerStr}\\/${denomStr}`;
    return `{}^{${numerStr}}\\!\\!/\\!{}_{${denomStr}}`;
  } else if (style === "reciprocal") {
    if (machineValue(numer) === 1)
      return serializer.wrap(denom) + "^{-1}";
    return serializer.wrap(numer) + serializer.wrap(denom) + "^{-1}";
  } else if (style === "factor") {
    if (machineValue(denom) === 1)
      return serializer.wrap(numer);
    return "\\frac{1}{" + serializer.serialize(denom) + "}{" + serializer.wrap(numer) + "}";
  }
  const numerLatex = serializer.serialize(numer);
  const denomLatex = serializer.serialize(denom);
  return `\\frac{${numerLatex}}{${denomLatex}}`;
}
function serializePower(serializer, expr) {
  var _a;
  const name = head(expr);
  const base = missingIfEmpty(op(expr, 1));
  if (name === "Sqrt") {
    return serializeRoot(
      serializer,
      getRootStyle(expr, serializer.level - 1),
      base,
      2
    );
  }
  const exp2 = missingIfEmpty(op(expr, 2));
  if (name === "Root")
    return serializeRoot(
      serializer,
      getRootStyle(expr, serializer.level - 1),
      base,
      exp2
    );
  if (serializer.canonical) {
    const val2 = (_a = machineValue(exp2)) != null ? _a : 1;
    if (val2 === -1) {
      return serializer.serialize(["Divide", "1", base]);
    } else if (val2 < 0) {
      return serializer.serialize(["Divide", "1", ["Power", base, -val2]]);
    } else if (head(exp2) === "Divide" || head(exp2) === "Rational") {
      if (machineValue(op(exp2, 1)) === 1) {
        const style = getRootStyle(expr, serializer.level);
        return serializeRoot(serializer, style, base, op(exp2, 2));
      }
      if (machineValue(op(exp2, 2)) === 2) {
        return `${serializer.serialize(["Sqrt", base])}^{${serializer.serialize(
          op(exp2, 1)
        )}}`;
      }
    } else if (head(exp2) === "Power") {
      if (machineValue(op(exp2, 2)) === -1) {
        const style = getRootStyle(expr, serializer.level);
        return serializeRoot(serializer, style, base, op(exp2, 1));
      }
    }
  }
  return serializer.wrapShort(base) + "^{" + serializer.serialize(exp2) + "}";
}
var DEFINITIONS_ARITHMETIC = [
  // Constants
  { name: "CatalanConstant", serialize: "G" },
  { name: "GoldenRatio", serialize: "\\varphi" },
  { name: "EulerGamma", serialize: "\\gamma" },
  {
    name: "Degrees",
    latexTrigger: ["\\degree"],
    kind: "postfix",
    precedence: 880,
    parse: (_parser, lhs) => ["Degrees", lhs],
    serialize: (serializer, expr) => {
      return joinLatex([serializer.serialize(op(expr, 1)), "\\degree"]);
    }
  },
  {
    latexTrigger: ["\\degree"],
    kind: "postfix",
    precedence: 880,
    parse: (_parser, lhs) => ["Degrees", lhs]
  },
  {
    latexTrigger: ["^", "<{>", "\\circ", "<}>"],
    kind: "postfix",
    parse: (_parser, lhs) => ["Degrees", lhs]
  },
  {
    latexTrigger: ["^", "\\circ"],
    kind: "postfix",
    parse: (_parser, lhs) => ["Degrees", lhs]
  },
  {
    latexTrigger: ["\xB0"],
    kind: "postfix",
    precedence: 880,
    parse: (_parser, lhs) => ["Degrees", lhs]
  },
  {
    latexTrigger: ["\\ang"],
    parse: (parser) => {
      const arg = parser.parseGroup();
      return arg === null ? ["Degrees"] : ["Degrees", arg];
    }
  },
  {
    latexTrigger: ["\\infty"],
    parse: { num: "+Infinity" }
  },
  {
    name: "ComplexInfinity",
    latexTrigger: ["\\tilde", "\\infty"],
    serialize: "\\tilde\\infty"
  },
  {
    latexTrigger: ["\\tilde", "<{>", "\\infty", "<}>"],
    parse: "ComplexInfinity"
  },
  { name: "Pi", kind: "symbol", latexTrigger: ["\\pi"] },
  { latexTrigger: ["\u03C0"], parse: "Pi" },
  {
    name: "ExponentialE",
    latexTrigger: ["\\exponentialE"],
    parse: "ExponentialE",
    serialize: "\\exponentialE"
  },
  {
    latexTrigger: "\\operatorname{e}",
    parse: "ExponentialE"
  },
  {
    latexTrigger: "\\mathrm{e}",
    parse: "ExponentialE"
  },
  {
    kind: "function",
    identifierTrigger: "exp",
    parse: "Exp"
  },
  {
    latexTrigger: "\\exp",
    parse: "Exp"
  },
  {
    name: "ImaginaryUnit",
    latexTrigger: ["\\imaginaryI"]
  },
  {
    latexTrigger: "\\operatorname{i}",
    parse: "ImaginaryUnit"
  },
  {
    latexTrigger: "\\mathrm{i}",
    parse: "ImaginaryUnit"
  },
  // Operations
  {
    /** Could be the determinant if the argument is a matrix */
    /** @todo: domain check */
    /** If a literal matrix, the `serialize` should be custom, the parens are
     * replaced with bars */
    name: "Abs",
    kind: "matchfix",
    openTrigger: "|",
    closeTrigger: "|",
    parse: (_parser, body) => isEmptySequence(body) ? null : ["Abs", body]
  },
  {
    identifierTrigger: "abs",
    kind: "function",
    parse: "Abs"
  },
  {
    name: "Add",
    latexTrigger: ["+"],
    kind: "infix",
    associativity: "both",
    precedence: 275,
    parse: (parser, lhs, until) => {
      if (until && 275 < until.minPrec)
        return null;
      const rhs = parser.parseExpression({ ...until, minPrec: 275 });
      if (rhs === null)
        return null;
      return applyAssociativeOperator("Add", lhs, rhs);
    },
    serialize: serializeAdd
  },
  {
    kind: "prefix",
    latexTrigger: ["+"],
    precedence: 275,
    parse: (parser, until) => {
      if (until && 275 < until.minPrec)
        return null;
      return parser.parseExpression({ ...until, minPrec: 400 });
    }
  },
  {
    name: "Ceil",
    kind: "matchfix",
    openTrigger: "\\lceil",
    closeTrigger: "\\rceil",
    parse: (_parser, body) => isEmptySequence(body) ? null : ["Ceil", body]
  },
  {
    kind: "matchfix",
    openTrigger: ["\u2308"],
    closeTrigger: ["\u2309"],
    parse: (_parser, body) => isEmptySequence(body) ? null : ["Ceil", body]
  },
  {
    identifierTrigger: "ceil",
    kind: "function",
    parse: "Ceil"
  },
  { name: "Chop", identifierTrigger: "chop", kind: "function", parse: "Chop" },
  {
    name: "Complex",
    precedence: 274,
    // One less than precedence of `Add`: used for correct wrapping
    serialize: (serializer, expr) => {
      const re = machineValue(op(expr, 1));
      const im = machineValue(op(expr, 2));
      if (im === 0)
        return serializer.serialize(op(expr, 1));
      const imPart = im === 1 ? "\\imaginaryI" : im === -1 ? "-\\imaginaryI" : joinLatex([serializer.serialize(op(expr, 2)), "\\imaginaryI"]);
      if (re === 0)
        return imPart;
      if (im !== null && im < 0)
        return joinLatex([serializer.serialize(op(expr, 1)), imPart]);
      return joinLatex([serializer.serialize(op(expr, 1)), "+", imPart]);
    }
  },
  {
    name: "Divide",
    latexTrigger: "\\frac",
    precedence: 660,
    // For \frac specifically, not for \div, etc..
    // handles Leibnitz notation for partial derivatives
    parse: parseFraction,
    serialize: serializeFraction
  },
  {
    kind: "infix",
    latexTrigger: "\\over",
    precedence: 660,
    parse: "Divide"
  },
  {
    latexTrigger: ["\\/"],
    kind: "infix",
    associativity: "non",
    precedence: 660,
    // ??? MathML has 265, but it's wrong.
    // It has to be at least higher than multiply
    // e.g. `1/2+3*x` -> `1/2 + 3*x` , not `1/(2+3*x)`
    parse: "Divide"
  },
  {
    latexTrigger: ["/"],
    kind: "infix",
    associativity: "non",
    precedence: 660,
    parse: "Divide"
  },
  {
    latexTrigger: ["\\div"],
    kind: "infix",
    associativity: "non",
    precedence: 660,
    // ??? according to MathML
    parse: "Divide"
  },
  {
    name: "Exp",
    serialize: (serializer, expr) => {
      const op12 = op(expr, 1);
      if (symbol(op12) || machineValue(op12) !== null)
        return joinLatex(["\\exponentialE^{", serializer.serialize(op12)]);
      return joinLatex(["\\exp", serializer.wrap(missingIfEmpty(op12))]);
    }
  },
  {
    name: "Factorial",
    latexTrigger: ["!"],
    kind: "postfix",
    precedence: 810
  },
  {
    name: "Factorial2",
    latexTrigger: ["!", "!"],
    kind: "postfix",
    precedence: 810
  },
  {
    name: "Floor",
    kind: "matchfix",
    openTrigger: "\\lfloor",
    closeTrigger: "\\rfloor",
    parse: (_parser, body) => isEmptySequence(body) ? null : ["Floor", body]
  },
  {
    kind: "matchfix",
    openTrigger: ["\u230A"],
    closeTrigger: ["\u230B"],
    parse: (_parser, body) => isEmptySequence(body) ? null : ["Floor", body]
  },
  {
    identifierTrigger: "floor",
    kind: "function",
    parse: "Floor"
  },
  {
    latexTrigger: ["\\Gamma"],
    parse: "Gamma"
  },
  {
    name: "Gcd",
    identifierTrigger: "gcd",
    kind: "function"
  },
  {
    name: "Half",
    serialize: "\\frac12"
  },
  {
    name: "Lg",
    latexTrigger: ["\\lg"],
    serialize: (serializer, expr) => "\\log_{10}" + serializer.wrapArguments(expr),
    parse: (parser) => {
      const args = parser.parseArguments("implicit");
      if (args === null)
        return "Lg";
      return ["Log", ...args, 10];
    }
  },
  {
    name: "Lb",
    latexTrigger: "\\lb",
    parse: (parser) => {
      const args = parser.parseArguments("implicit");
      if (args === null)
        return "Log";
      return ["Log", ...args, 2];
    }
  },
  {
    name: "Ln",
    latexTrigger: ["\\ln"],
    serialize: (serializer, expr) => "\\ln" + serializer.wrapArguments(expr),
    parse: (parser) => parseLog("Ln", parser)
  },
  {
    name: "Log",
    latexTrigger: ["\\log"],
    parse: (parser) => parseLog("Log", parser),
    serialize: (serializer, expr) => {
      const base = op2(expr);
      if (base)
        return joinLatex([
          "\\log_{",
          base.toString(),
          "}",
          serializer.wrap(op1(expr))
        ]);
      return "\\log" + serializer.wrapArguments(expr);
    }
  },
  {
    name: "Lcm",
    identifierTrigger: "lcm",
    kind: "function"
  },
  { name: "Max", identifierTrigger: "max", kind: "function" },
  { name: "Min", identifierTrigger: "min", kind: "function" },
  {
    name: "MinusPlus",
    latexTrigger: ["\\mp"],
    kind: "infix",
    associativity: "both",
    precedence: 270
  },
  {
    name: "Multiply",
    latexTrigger: ["\\times"],
    kind: "infix",
    associativity: "both",
    precedence: 390,
    serialize: serializeMultiply
  },
  {
    latexTrigger: ["\\cdot"],
    kind: "infix",
    associativity: "both",
    precedence: 390,
    parse: (parser, lhs, terminator) => {
      const rhs = parser.parseExpression({ ...terminator, minPrec: 392 });
      if (rhs === null)
        return ["Multiply", lhs, MISSING];
      return applyAssociativeOperator("Multiply", lhs, rhs);
    }
  },
  {
    latexTrigger: ["*"],
    kind: "infix",
    associativity: "both",
    precedence: 390,
    parse: (parser, lhs, terminator) => {
      const rhs = parser.parseExpression({ ...terminator, minPrec: 392 });
      if (rhs === null)
        return ["Multiply", lhs, MISSING];
      return applyAssociativeOperator("Multiply", lhs, rhs);
    }
  },
  {
    name: "Negate",
    latexTrigger: ["-"],
    kind: "prefix",
    parse: (parser, terminator) => {
      const rhs = parser.parseExpression({ ...terminator, minPrec: 400 });
      return ["Negate", missingIfEmpty(rhs)];
    },
    precedence: 275
  },
  // {
  //   /** If the argument is a vector */
  //   /** @todo: domain check */
  //   name: 'Norm',
  //   kind: 'matchfix',
  //   openDelimiter: '|',
  //   closeDelimiter: '|',
  // },
  // {
  //   /** If the argument is a set */
  //   /** @todo: domain check */
  //   name: 'Cardinality',
  //   kind: 'matchfix',
  //   openDelimiter: '|',
  //   closeDelimiter: '|',
  // },
  {
    //   /** If the argument is a vector */
    /** @todo: domain check */
    kind: "matchfix",
    openTrigger: "||",
    closeTrigger: "||",
    parse: (_parser, expr) => isEmptySequence(expr) ? null : ["Norm", expr]
  },
  {
    //   /** If the argument is a vector */
    /** @todo: domain check */
    name: "Norm",
    kind: "matchfix",
    openTrigger: ["\\left", "\\Vert"],
    closeTrigger: ["\\right", "\\Vert"],
    parse: (_parser, expr) => isEmptySequence(expr) ? null : ["Norm", expr]
  },
  {
    name: "PlusMinus",
    latexTrigger: ["\\pm"],
    kind: "infix",
    associativity: "both",
    precedence: 270,
    serialize: (serializer, expr) => {
      const op12 = op(expr, 1);
      if (op12 === null)
        return "\\pm";
      if (nops(expr) === 1)
        return joinLatex(["\\pm", serializer.serialize(op12)]);
      const op22 = op(expr, 2);
      return joinLatex([
        serializer.serialize(op12),
        "\\pm",
        serializer.serialize(op22)
      ]);
    }
  },
  {
    latexTrigger: ["\\pm"],
    kind: "prefix",
    precedence: 270,
    parse: (parser, terminator) => {
      const rhs = parser.parseExpression({ ...terminator, minPrec: 400 });
      return ["PlusMinus", missingIfEmpty(rhs)];
    }
  },
  {
    latexTrigger: ["\\plusmn"],
    kind: "infix",
    associativity: "both",
    precedence: 270,
    parse: (parser, lhs, terminator) => {
      const rhs = parser.parseExpression({ ...terminator, minPrec: 400 });
      return ["PlusMinus", lhs, missingIfEmpty(rhs)];
    }
  },
  {
    latexTrigger: ["\\plusmn"],
    kind: "prefix",
    precedence: 270,
    parse: (parser, terminator) => {
      const rhs = parser.parseExpression({ ...terminator, minPrec: 400 });
      return ["PlusMinus", missingIfEmpty(rhs)];
    }
  },
  {
    name: "Power",
    latexTrigger: ["^"],
    kind: "infix",
    serialize: serializePower
  },
  {
    latexTrigger: "\\prod",
    precedence: 390,
    name: "Product",
    parse: parseBigOp("Product", 390),
    serialize: serializeBigOp("\\prod")
  },
  // {
  //   trigger: ['*', '*'],
  //   kind: 'infix',
  //   associativity: 'non',
  //   precedence: 720,
  // },
  {
    name: "Rational",
    precedence: 660,
    serialize: (serializer, expr) => {
      if (expr && nops(expr) === 1)
        return "\\operatorname{Rational}" + serializer.wrapArguments(expr);
      return serializeFraction(serializer, expr);
    }
  },
  {
    name: "Root",
    serialize: serializePower
  },
  {
    name: "Round",
    identifierTrigger: "round",
    kind: "function"
  },
  {
    name: "Square",
    precedence: 720,
    serialize: (serializer, expr) => serializer.wrapShort(op(expr, 1)) + "^2"
  },
  {
    latexTrigger: ["\\sum"],
    precedence: 275,
    name: "Sum",
    parse: parseBigOp("Sum", 275),
    serialize: serializeBigOp("\\sum")
  },
  {
    name: "Sign",
    // As per ISO 80000-2, "signum" is 'sgn'
    identifierTrigger: "sgn",
    kind: "function"
  },
  {
    name: "Sqrt",
    latexTrigger: ["\\sqrt"],
    parse: parseRoot,
    serialize: serializePower
  },
  {
    name: "Subtract",
    latexTrigger: ["-"],
    kind: "infix",
    associativity: "both",
    precedence: 275,
    parse: (parser, lhs, terminator) => {
      const rhs = parser.parseExpression({ ...terminator, minPrec: 277 });
      return ["Subtract", lhs, missingIfEmpty(rhs)];
    }
  }
];
function parseBigOp(name, prec) {
  return (parser) => {
    var _a, _b, _c, _d;
    parser.skipSpace();
    let sup = null;
    let sub2 = null;
    while (!(sub2 && sup) && (parser.peek === "_" || parser.peek === "^")) {
      if (parser.match("_"))
        sub2 = (_a = parser.parseGroup()) != null ? _a : parser.parseToken();
      else if (parser.match("^"))
        sup = (_b = parser.parseGroup()) != null ? _b : parser.parseToken();
      parser.skipSpace();
    }
    if (sub2 === "Nothing" || isEmptySequence(sub2))
      sub2 = null;
    if (sup === "Nothing" || isEmptySequence(sup))
      sup = null;
    let index = null;
    let lower = null;
    if (head(sub2) === "Equal") {
      index = op(sub2, 1);
      lower = op(sub2, 2);
    } else {
      index = sub2;
    }
    const sym = symbol(index);
    if (sym)
      (_c = parser.computeEngine) == null ? void 0 : _c.pushScope({ [sym]: { domain: "Integer" } });
    const fn = parser.parseExpression({ minPrec: prec + 1 });
    if (sym)
      (_d = parser.computeEngine) == null ? void 0 : _d.popScope();
    if (!fn)
      return [name];
    if (sup)
      return [
        name,
        fn,
        ["Tuple", index ? ["Hold", index] : "Nothing", lower != null ? lower : 1, sup]
      ];
    if (lower)
      return [name, fn, ["Tuple", index ? ["Hold", index] : "Nothing", lower]];
    if (index)
      return [name, fn, ["Tuple", ["Hold", index]]];
    return [name, fn];
  };
}
function serializeBigOp(command) {
  return (serializer, expr) => {
    if (!op(expr, 1))
      return command;
    let arg = op(expr, 2);
    const h = head(arg);
    if (h !== "Tuple" && h !== "Triple" && h !== "Pair" && h !== "Single")
      arg = null;
    let index = op(arg, 1);
    if (index && head(index) === "Hold")
      index = op(index, 1);
    const fn = op(expr, 1);
    if (!arg) {
      if (!op(expr, 2))
        return joinLatex([command, "_n", serializer.serialize(fn)]);
      return joinLatex([
        command,
        "_{",
        serializer.serialize(op(expr, 2)),
        "}",
        serializer.serialize(fn)
      ]);
    }
    const lower = op(arg, 2);
    let sub2 = [];
    if (index && symbol(index) !== "Nothing" && lower)
      sub2 = [serializer.serialize(index), "=", serializer.serialize(lower)];
    else if (index && symbol(index) !== "Nothing")
      sub2 = [serializer.serialize(index)];
    else if (lower)
      sub2 = [serializer.serialize(lower)];
    if (sub2.length > 0)
      sub2 = ["_{", ...sub2, "}"];
    let sup = [];
    if (op(arg, 3))
      sup = ["^{", serializer.serialize(op(arg, 3)), "}"];
    return joinLatex([command, ...sup, ...sub2, serializer.serialize(fn)]);
  };
}
function parseLog(command, parser) {
  var _a, _b;
  let sub2 = null;
  let base = null;
  if (parser.match("_")) {
    sub2 = (_b = (_a = parser.parseStringGroup()) == null ? void 0 : _a.trim()) != null ? _b : parser.nextToken();
    base = Number.parseFloat(sub2 != null ? sub2 : "10");
  }
  const args = parser.parseArguments("implicit");
  if (args === null)
    return [command];
  if (base === 10)
    return ["Log", args[0]];
  if (base === 2)
    return ["Lb", ...args];
  if (sub2 === null)
    return [command, ...args];
  return ["Log", ...args, sub2];
}
function parseSequence(parser, terminator, lhs, prec, sep) {
  /* @__PURE__ */ console.assert(lhs !== null);
  if (terminator.minPrec >= prec)
    return null;
  const result = [lhs];
  let done = false;
  while (!done) {
    done = true;
    parser.skipSpace();
    while (parser.match(sep)) {
      result.push("Nothing");
      parser.skipSpace();
    }
    if (parser.atTerminator(terminator)) {
      result.push("Nothing");
    } else {
      const rhs = parser.parseExpression({ ...terminator, minPrec: prec });
      result.push(rhs != null ? rhs : "Nothing");
      done = rhs === null;
    }
    if (!done) {
      parser.skipSpace();
      done = !parser.match(sep);
    }
  }
  return result;
}
function serializeOps(sep = "") {
  return (serializer, expr) => {
    var _a;
    return ((_a = ops(expr)) != null ? _a : []).map((x) => serializer.serialize(x)).join(sep);
  };
}
var DEFINITIONS_CORE = [
  //
  // Constants
  //
  {
    latexTrigger: ["\\placeholder"],
    kind: "symbol",
    parse: (parser) => {
      while (parser.match("<space>")) {
      }
      if (parser.match("["))
        while (!parser.match("]") && !parser.atBoundary)
          parser.nextToken();
      while (parser.match("<space>")) {
      }
      if (parser.match("<{>"))
        while (!parser.match("<}>") && !parser.atBoundary)
          parser.nextToken();
      return "Nothing";
    }
  },
  //
  // Functions
  //
  {
    name: "Apply",
    kind: "function",
    identifierTrigger: "apply",
    serialize: (serializer, expr) => serializer.serializeFunction(ops(expr))
  },
  {
    latexTrigger: "\\rhd",
    kind: "infix",
    precedence: 20,
    parse: "Apply"
  },
  {
    latexTrigger: "\\lhd",
    kind: "infix",
    precedence: 20,
    parse: (parser, lhs) => {
      var _a;
      const rhs = (_a = parser.parseExpression({ minPrec: 20 })) != null ? _a : "Nothing";
      return ["Apply", rhs, lhs];
    }
  },
  {
    name: "BaseForm",
    serialize: (serializer, expr) => {
      var _a, _b;
      const radix = (_a = machineValue(op(expr, 2))) != null ? _a : NaN;
      if (isFinite(radix) && radix >= 2 && radix <= 36) {
        const num = (_b = machineValue(op(expr, 1))) != null ? _b : NaN;
        if (isFinite(num) && Number.isInteger(num)) {
          let digits = Number(num).toString(radix);
          let groupLength = 0;
          if (radix === 2) {
            groupLength = 4;
          } else if (radix === 10) {
            groupLength = 4;
          } else if (radix === 16) {
            groupLength = 2;
          } else if (radix > 16) {
            groupLength = 4;
          }
          if (groupLength > 0) {
            const oldDigits = digits;
            digits = "";
            for (let i = 0; i < oldDigits.length; i++) {
              if (i > 0 && i % groupLength === 0)
                digits = "\\, " + digits;
              digits = oldDigits[oldDigits.length - i - 1] + digits;
            }
          }
          return `(\\text{${digits}}_{${radix}}`;
        }
      }
      return "\\operatorname{BaseForm}(" + serializer.serialize(op(expr, 1)) + ", " + serializer.serialize(op(expr, 2)) + ")";
    }
  },
  {
    name: "Delimiter",
    serialize: (serializer, expr) => {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const argCount = nops(expr);
      if (argCount === 0)
        return "";
      const style = serializer.options.groupStyle(expr, serializer.level + 1);
      const arg1 = op(expr, 1);
      const h1 = head(arg1);
      const defaultFence = (_a = { List: "[],", Sequence: "" }[typeof h1 === "string" ? h1 : ""]) != null ? _a : "(),";
      let open = (_b = defaultFence[0]) != null ? _b : "";
      let close = (_c = defaultFence[1]) != null ? _c : "";
      let sep = (_d = defaultFence[2]) != null ? _d : "";
      if (argCount > 1) {
        const op22 = (_e = stringValue(op(expr, 2))) != null ? _e : "";
        open = (_f = op22[0]) != null ? _f : defaultFence[0];
        close = (_g = op22[1]) != null ? _g : defaultFence[1];
        sep = (_h = op22[2]) != null ? _h : defaultFence[2];
      }
      const body = isListLike(arg1) ? serializeOps(sep)(serializer, arg1) : serializer.serialize(arg1);
      return serializer.wrapString(body, style, open + close);
    }
  },
  {
    name: "Domain",
    serialize: (serializer, expr) => {
      if (head(expr) === "Error")
        return serializer.serialize(expr);
      return `\\mathbf{${serializer.serialize(op(expr, 1))}}`;
    }
  },
  {
    latexTrigger: ["\\mathtip"],
    parse: (parser) => {
      const op12 = parser.parseGroup();
      const op22 = parser.parseGroup();
      return op12;
    }
  },
  {
    latexTrigger: ["\\texttip"],
    parse: (parser) => {
      const op12 = parser.parseGroup();
      const op22 = parser.parseGroup();
      return op12;
    }
  },
  {
    latexTrigger: ["\\error"],
    parse: (parser) => ["Error", parser.parseGroup()]
  },
  {
    name: "Error",
    serialize: (serializer, expr) => {
      var _a;
      if (stringValue(op(expr, 1)) === "missing")
        return `\\error{${(_a = serializer.options.missingSymbol) != null ? _a : "\\placeholder{}"}}`;
      const where = errorContextAsLatex(serializer, expr) || "\\blacksquare";
      const op12 = op(expr, 1);
      const code = head(op12) === "ErrorCode" ? stringValue(op(op12, 1)) : stringValue(op12);
      if (code === "incompatible-domain") {
        return `\\mathtip{\\error{${where}}}{\\in ${serializer.serialize(
          op(op12, 3)
        )}\\notin ${serializer.serialize(op(op12, 2))}}`;
      }
      if (typeof code === "string")
        return `\\error{${where}}`;
      return `\\error{${where}}`;
    }
  },
  {
    name: "ErrorCode",
    serialize: (serializer, expr) => {
      var _a;
      const code = stringValue(op(expr, 1));
      if (code === "missing")
        return (_a = serializer.options.missingSymbol) != null ? _a : "\\placeholder{}";
      if (code === "unexpected-command" || code === "unexpected-operator" || code === "unexpected-token" || code === "invalid-identifier" || code === "unknown-environment" || code === "unexpected-base" || code === "incompatible-domain" || code === "invalid-domain") {
        return "";
      }
      return `\\texttip{\\error{\\blacksquare}}{\\mathtt{${code}}}`;
    }
  },
  {
    name: "FromLatex",
    serialize: (_serializer, expr) => {
      return `\\texttt{${sanitizeLatex(stringValue(op(expr, 1)))}}`;
    }
  },
  {
    name: "Latex",
    serialize: (serializer, expr) => {
      if (expr === null)
        return "";
      return joinLatex(
        mapArgs(expr, (x) => {
          var _a;
          return (_a = stringValue(x)) != null ? _a : serializer.serialize(x);
        })
      );
    }
  },
  {
    name: "LatexString",
    serialize: (serializer, expr) => {
      if (expr === null)
        return "";
      return joinLatex(mapArgs(expr, (x) => serializer.serialize(x)));
    }
  },
  { name: "LatexTokens", serialize: serializeLatexTokens },
  {
    name: "List",
    kind: "matchfix",
    openTrigger: "\\lbrack",
    closeTrigger: "\\rbrack",
    parse: parseList,
    serialize: (serializer, expr) => {
      return joinLatex([
        "\\lbrack",
        serializeOps(", ")(serializer, expr),
        "\\rbrack"
      ]);
    }
  },
  // Synonyms for List
  {
    kind: "matchfix",
    openTrigger: "[",
    closeTrigger: "]",
    parse: parseList
  },
  {
    kind: "matchfix",
    openTrigger: "\\[",
    closeTrigger: "\\]",
    parse: parseList
  },
  // Synonyms for Delimiter
  {
    kind: "matchfix",
    openTrigger: "(",
    closeTrigger: ")",
    parse: parseDelimiter
  },
  {
    kind: "matchfix",
    openTrigger: "\\lparen",
    closeTrigger: "\\rparen",
    parse: parseDelimiter
  },
  {
    latexTrigger: [","],
    kind: "infix",
    precedence: 20,
    // Unlike the matchfix version of List,
    // when the comma operator is used, the lhs and rhs are flattened,
    // i.e. `1,2,3` -> `["Delimiter", ["List", 1, 2, 3],  ","]`,
    // and `1, (2, 3)` -> `["Delimiter",
    // ["Sequence", 1, ["Delimiter", ["List", 2, 3],  "()", ","]]],
    parse: (parser, lhs, terminator) => {
      const seq = parseSequence(parser, terminator, lhs, 20, ",");
      if (seq === null)
        return null;
      return ["Sequence", ...seq];
    }
  },
  {
    name: "Sequence",
    serialize: serializeOps("")
  },
  {
    latexTrigger: [";"],
    kind: "infix",
    precedence: 19,
    parse: (parser, lhs, terminator) => {
      const seq = parseSequence(parser, terminator, lhs, 19, ";");
      if (seq === null)
        return null;
      return [
        "Sequence",
        ...seq.map(
          (x) => {
            var _a;
            return head(x) === "Sequence" ? ["List", ...(_a = ops(x)) != null ? _a : []] : x;
          }
        )
      ];
    }
  },
  {
    name: "String",
    latexTrigger: ["\\text"],
    parse: (scanner) => parseTextRun(scanner),
    serialize: (serializer, expr) => {
      const args = ops(expr);
      if (args === null || args.length === 0)
        return "\\text{}";
      return joinLatex([
        "\\text{",
        args.map((x) => serializer.serialize(x)).join(""),
        "}"
      ]);
    }
  },
  {
    name: "Subscript",
    latexTrigger: ["_"],
    kind: "infix",
    serialize: (serializer, expr) => {
      if (nops(expr) === 2) {
        return serializer.serialize(op(expr, 1)) + "_{" + serializer.serialize(op(expr, 2)) + "}";
      }
      return "_{" + serializer.serialize(op(expr, 1)) + "}";
    }
  },
  { name: "Superplus", latexTrigger: ["^", "+"], kind: "postfix" },
  { name: "Subplus", latexTrigger: ["_", "+"], kind: "postfix" },
  { name: "Superminus", latexTrigger: ["^", "-"], kind: "postfix" },
  { name: "Subminus", latexTrigger: ["_", "-"], kind: "postfix" },
  {
    latexTrigger: ["^", "*"],
    kind: "postfix",
    parse: (_parser, lhs) => ["Superstar", lhs]
  },
  // { name: 'Superstar', latexTrigger: ['^', '\\star'], kind: 'postfix' },
  {
    latexTrigger: ["_", "*"],
    kind: "postfix",
    parse: (_parser, lhs) => ["Substar", lhs]
  },
  { name: "Substar", latexTrigger: ["_", "\\star"], kind: "postfix" },
  { name: "Superdagger", latexTrigger: ["^", "\\dagger"], kind: "postfix" },
  {
    latexTrigger: ["^", "\\dag"],
    kind: "postfix",
    parse: (_parser, lhs) => ["Superdagger", lhs]
  },
  {
    name: "Prime",
    latexTrigger: ["^", "\\prime"],
    // Note: we don't need a precedence because the trigger is '^'
    // and '^' (and '_') are treated specially by the parser.
    kind: "postfix",
    parse: (parser, lhs) => parsePrime(parser, lhs, 1),
    serialize: (serializer, expr) => {
      var _a;
      const n2 = (_a = machineValue(op(expr, 2))) != null ? _a : 1;
      const base = serializer.serialize(op(expr, 1));
      if (n2 === 1)
        return base + "^\\prime";
      if (n2 === 2)
        return base + "^\\doubleprime";
      if (n2 === 3)
        return base + "^\\tripleprime";
      return base + "^{(" + serializer.serialize(op(expr, 2)) + ")}";
    }
  },
  {
    latexTrigger: "^{\\prime\\prime}",
    kind: "postfix",
    parse: (parser, lhs) => parsePrime(parser, lhs, 2)
  },
  {
    latexTrigger: "^{\\prime\\prime\\prime}",
    kind: "postfix",
    parse: (parser, lhs) => parsePrime(parser, lhs, 3)
  },
  {
    latexTrigger: ["^", "\\doubleprime"],
    kind: "postfix",
    parse: (parser, lhs) => parsePrime(parser, lhs, 2)
  },
  {
    latexTrigger: ["^", "\\tripleprime"],
    kind: "postfix",
    parse: (parser, lhs) => parsePrime(parser, lhs, 3)
  },
  {
    latexTrigger: "'",
    kind: "postfix",
    precedence: 810,
    parse: (parser, lhs) => parsePrime(parser, lhs, 1)
  },
  {
    latexTrigger: "\\prime",
    kind: "postfix",
    precedence: 810,
    parse: (parser, lhs) => parsePrime(parser, lhs, 1)
  },
  {
    latexTrigger: "\\doubleprime",
    kind: "postfix",
    precedence: 810,
    parse: (parser, lhs) => parsePrime(parser, lhs, 2)
  },
  {
    latexTrigger: "\\tripleprime",
    kind: "postfix",
    precedence: 810,
    parse: (parser, lhs) => parsePrime(parser, lhs, 3)
  },
  {
    latexTrigger: ["^", "<{>", "("],
    kind: "postfix",
    parse: (parser, lhs) => {
      var _a, _b;
      if (!((_b = (_a = parser.computeEngine) == null ? void 0 : _a.box(lhs)) == null ? void 0 : _b.domain.isFunction))
        return null;
      const start = parser.index;
      parser.addBoundary([")"]);
      const expr = parser.parseExpression();
      if (!parser.matchBoundary()) {
        parser.index = start;
        return null;
      }
      if (!parser.match("<}>")) {
        parser.index = start;
        return null;
      }
      return ["Derivative", lhs, expr];
    }
  },
  {
    name: "InverseFunction",
    latexTrigger: "^{-1}",
    kind: "postfix",
    parse: (parser, lhs) => {
      var _a, _b;
      if ((_b = (_a = parser.computeEngine) == null ? void 0 : _a.box(lhs)) == null ? void 0 : _b.domain.isFunction)
        return ["InverseFunction", lhs];
      return ["Power", missingIfEmpty(lhs), -1];
    },
    serialize: (serializer, expr) => serializer.serialize(op(expr, 1)) + "^{-1}"
  },
  {
    name: "Derivative",
    serialize: (serializer, expr) => {
      var _a;
      const degree = (_a = machineValue(op(expr, 2))) != null ? _a : 1;
      const base = serializer.serialize(op(expr, 1));
      if (degree === 1)
        return base + "^{\\prime}";
      if (degree === 2)
        return base + "^{\\doubleprime}";
      if (degree === 3)
        return base + "^{\\tripleprime}";
      return base + "^{(" + serializer.serialize(op(expr, 2)) + ")}";
    }
  },
  {
    kind: "environment",
    name: "Which",
    identifierTrigger: "cases",
    parse: (parser) => {
      var _a;
      const tabular = parser.parseTabular();
      if (!tabular)
        return ["Which"];
      const result = ["Which"];
      for (const row of tabular) {
        if (row.length === 1) {
          result.push("True");
          result.push(row[0]);
        } else if (row.length === 2) {
          const s = stringValue(row[1]);
          result.push(s ? "True" : (_a = stripText(row[1])) != null ? _a : "True");
          result.push(row[0]);
        }
      }
      return result;
    },
    serialize: (serialize2, expr) => {
      const rows = [];
      const args = ops(expr);
      if (args) {
        for (let i = 0; i <= args.length - 2; i += 2) {
          const row = [];
          row.push(serialize2.serialize(args[i + 1]));
          row.push(serialize2.serialize(args[i]));
          rows.push(row.join("&"));
        }
      }
      return joinLatex(["\\begin{cases}", rows.join("\\\\"), "\\end{cases}"]);
    }
  }
];
function parseTextRun(parser, style) {
  var _a, _b, _c;
  if (!parser.match("<{>"))
    return "''";
  const runs = [];
  let text = "";
  let runinStyle = null;
  while (!parser.atEnd && !parser.match("<}>")) {
    if (parser.peek === "<{>") {
      runs.push(parseTextRun(parser));
    } else if (parser.match("\\textbf") && parser.match("<{>")) {
      runs.push(parseTextRun(parser, { "font-weight": "bold" }));
    } else if (parser.match("\\color")) {
      const color = parser.parseStringGroup();
      if (color !== null) {
        if (runinStyle !== null && text) {
          runs.push(["Style", text, { dict: runinStyle }]);
        } else if (text) {
          runs.push(["String", text]);
        }
        text = "";
        runinStyle = { color };
      }
    } else if (parser.match("<space>")) {
      text += " ";
    } else if (parser.match("<$>")) {
      const index = parser.index;
      const expr = (_a = parser.parseExpression()) != null ? _a : ["Sequence"];
      parser.skipSpace();
      if (parser.match("<$>")) {
        runs.push(expr);
      } else {
        text += "$";
        parser.index = index;
      }
    } else if (parser.match("<$$>")) {
      const index = parser.index;
      const expr = (_b = parser.parseExpression()) != null ? _b : ["Sequence"];
      parser.skipSpace();
      if (parser.match("<$$>")) {
        runs.push(expr);
      } else {
        text += "$$";
        parser.index = index;
      }
    } else
      text += (_c = parser.matchChar()) != null ? _c : parser.nextToken();
  }
  if (runinStyle !== null && text) {
    runs.push(["Style", `'${text}'`, { dict: runinStyle }]);
  } else if (text) {
    runs.push(`'${text}'`);
  }
  let body;
  if (runs.length === 1)
    body = runs[0];
  else {
    if (runs.every((x) => stringValue(x) !== null))
      body = "'" + runs.map((x) => stringValue(x)).join() + "'";
    else
      body = ["String", ...runs];
  }
  return style ? ["Style", body, { dict: style }] : body;
}
function serializeLatexTokens(serializer, expr) {
  if (expr === null)
    return "";
  return joinLatex(
    mapArgs(expr, (x) => {
      const s = stringValue(x);
      if (s === null)
        return serializer.serialize(x);
      if (s === "<{>")
        return "{";
      if (s === "<}>")
        return "}";
      if (s === "<$>")
        return "$";
      if (s === "<$$>")
        return "$$";
      if (s === "<space>")
        return " ";
      return s;
    })
  );
}
function sanitizeLatex(s) {
  if (s === null)
    return "";
  return s.replace(
    /[{}\[\]\\:\-\$%]/g,
    (c) => {
      var _a;
      return (_a = {
        "{": "\\lbrace ",
        "}": "\\rbrace ",
        "[": "\\lbrack ",
        "]": "\\rbrack ",
        ":": "\\colon ",
        "\\": "\\backslash "
      }[c]) != null ? _a : "\\" + c;
    }
  );
}
function errorContextAsLatex(serializer, error) {
  var _a;
  const arg = op(error, 2);
  if (!arg)
    return "";
  if (head(arg) === "Latex")
    return `\\texttt{${sanitizeLatex((_a = stringValue(op(arg, 1))) != null ? _a : "")}}`;
  if (head(arg) === "Hold")
    return serializer.serialize(op(arg, 1));
  return serializer.serialize(arg);
}
function parsePrime(parser, lhs, order2) {
  var _a, _b, _c;
  const lhsh = head(lhs);
  if (lhsh === "Derivative" || lhsh === "Prime") {
    const n = (_a = machineValue(op(lhs, 2))) != null ? _a : 1;
    return [lhsh, missingIfEmpty(op(lhs, 1)), n + order2];
  }
  if ((_c = (_b = parser.computeEngine) == null ? void 0 : _b.box(lhs)) == null ? void 0 : _c.domain.isFunction) {
    if (order2 === 1)
      return ["Derivative", lhs];
    return ["Derivative", lhs, order2];
  }
  if (order2 === 1)
    return ["Prime", missingIfEmpty(lhs)];
  return ["Prime", missingIfEmpty(lhs), order2];
}
function parseDelimiter(parser, body) {
  var _a;
  if (body === null || isEmptySequence(body))
    return ["Sequence"];
  if (head(body) === "Sequence") {
    if (nops(body) === 0)
      return ["Delimiter"];
    return ["Delimiter", ["Sequence", ...(_a = ops(body)) != null ? _a : []]];
  }
  return ["Delimiter", body];
}
function parseList(_parser, body) {
  var _a;
  if (body === null || isEmptySequence(body))
    return ["List"];
  if (head(body) !== "Sequence" && head(body) !== "List")
    return ["List", body];
  return ["List", ...(_a = ops(body)) != null ? _a : []];
}
var DEFINITIONS_INEQUALITIES = [
  {
    latexTrigger: ["\\not", "<"],
    kind: "infix",
    associativity: "right",
    precedence: 246,
    parse: "NotLess"
  },
  {
    name: "NotLess",
    latexTrigger: ["\\nless"],
    kind: "infix",
    associativity: "right",
    precedence: 246
  },
  {
    latexTrigger: ["<"],
    kind: "infix",
    associativity: "right",
    precedence: 245,
    parse: "Less"
  },
  {
    name: "Less",
    latexTrigger: ["\\lt"],
    kind: "infix",
    associativity: "right",
    precedence: 245
  },
  {
    latexTrigger: ["<", "="],
    kind: "infix",
    associativity: "right",
    precedence: 241,
    parse: "LessEqual"
  },
  {
    name: "LessEqual",
    latexTrigger: ["\\le"],
    kind: "infix",
    associativity: "right",
    precedence: 241
  },
  {
    latexTrigger: ["\\leq"],
    kind: "infix",
    associativity: "right",
    precedence: 241,
    parse: "LessEqual"
  },
  {
    latexTrigger: ["\\leqslant"],
    kind: "infix",
    associativity: "right",
    precedence: 265,
    // Note different precedence than `<=` as per MathML
    parse: "LessEqual"
  },
  {
    name: "LessNotEqual",
    latexTrigger: ["\\lneqq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "NotLessNotEqual",
    latexTrigger: ["\\nleqq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "LessOverEqual",
    latexTrigger: ["\\leqq"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "GreaterOverEqual",
    latexTrigger: ["\\geqq"],
    kind: "infix",
    associativity: "right",
    precedence: 265,
    parse: "GreaterEqual"
  },
  {
    name: "Equal",
    latexTrigger: ["="],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    latexTrigger: ["*", "="],
    kind: "infix",
    associativity: "right",
    precedence: 260,
    parse: "StarEqual"
  },
  {
    name: "StarEqual",
    latexTrigger: ["\\star", "="],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "PlusEqual",
    latexTrigger: ["+", "="],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "MinusEqual",
    latexTrigger: ["-", "="],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "SlashEqual",
    latexTrigger: ["/", "="],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "EqualEqual",
    latexTrigger: ["=", "="],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "EqualEqualEqual",
    latexTrigger: ["=", "=", "="],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "TildeFullEqual",
    // MathML: approximately equal to
    latexTrigger: ["\\cong"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "NotTildeFullEqual",
    // MathML: approximately but not actually equal to
    latexTrigger: ["\\ncong"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    latexTrigger: [":", "="],
    kind: "infix",
    associativity: "right",
    precedence: 260,
    parse: "Assign"
  },
  {
    name: "Assign",
    latexTrigger: ["\\coloneq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "Approx",
    // Note: Mathematica TildeTilde
    latexTrigger: ["\\approx"],
    kind: "infix",
    associativity: "right",
    precedence: 247
  },
  {
    name: "NotApprox",
    // Note: Mathematica TildeTilde
    latexTrigger: ["\\not", "\\approx"],
    kind: "infix",
    associativity: "right",
    precedence: 247
  },
  {
    name: "ApproxEqual",
    // Note: Mathematica TildeEqual, MathML: `asymptotically equal to`
    latexTrigger: ["\\approxeq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "NotApproxEqual",
    // Note: Mathematica NotTildeEqual
    latexTrigger: ["\\not", "\\approxeq"],
    kind: "infix",
    // Note: no LaTeX symbol for char U+2249
    associativity: "right",
    precedence: 250
  },
  {
    name: "NotEqual",
    latexTrigger: ["\\ne"],
    kind: "infix",
    associativity: "right",
    precedence: 255
  },
  {
    name: "Unequal",
    latexTrigger: ["!", "="],
    kind: "infix",
    associativity: "right",
    precedence: 260
    // Note different precendence than \\ne per MathML
  },
  {
    name: "GreaterEqual",
    latexTrigger: ["\\ge"],
    kind: "infix",
    associativity: "right",
    precedence: 242
    // Note: different precendence than `>=` as per MathML
  },
  {
    latexTrigger: ["\\geq"],
    kind: "infix",
    associativity: "right",
    precedence: 242,
    // Note: different precendence than `>=` as per MathML
    parse: "GreaterEqual"
  },
  {
    latexTrigger: [">", "="],
    kind: "infix",
    associativity: "right",
    precedence: 243,
    parse: "GreaterEqual"
  },
  {
    latexTrigger: ["\\geqslant"],
    kind: "infix",
    associativity: "right",
    precedence: 265,
    // Note: different precendence than `>=` as per MathML
    parse: "GreaterEqual"
  },
  {
    name: "GreaterNotEqual",
    latexTrigger: ["\\gneqq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "NotGreaterNotEqual",
    latexTrigger: ["\\ngeqq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    latexTrigger: [">"],
    kind: "infix",
    associativity: "right",
    precedence: 245,
    parse: "Greater"
  },
  {
    name: "Greater",
    latexTrigger: ["\\gt"],
    kind: "infix",
    associativity: "right",
    precedence: 245
  },
  {
    name: "NotGreater",
    latexTrigger: ["\\ngtr"],
    kind: "infix",
    associativity: "right",
    precedence: 244
  },
  {
    latexTrigger: ["\\not", ">"],
    kind: "infix",
    associativity: "right",
    precedence: 244,
    parse: "NotGreater"
  },
  {
    name: "RingEqual",
    latexTrigger: ["\\circeq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "TriangleEqual",
    // MathML: delta equal to
    latexTrigger: ["\\triangleq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "DotEqual",
    // MathML: approaches the limit
    latexTrigger: ["\\doteq"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "DotEqualDot",
    // MathML: Geometrically equal
    latexTrigger: ["\\doteqdot"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "FallingDotEqual",
    // MathML: approximately equal to or the image of
    latexTrigger: ["\\fallingdotseq"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "RisingDotEqual",
    // MathML: image of or approximately equal to
    latexTrigger: ["\\fallingdotseq"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "QuestionEqual",
    latexTrigger: ["\\questeq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "MuchLess",
    latexTrigger: ["\\ll"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "MuchGreater",
    latexTrigger: ["\\gg"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "Precedes",
    latexTrigger: ["\\prec"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "Succeeds",
    latexTrigger: ["\\succ"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "PrecedesEqual",
    latexTrigger: ["\\preccurlyeq"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "SucceedsEqual",
    latexTrigger: ["\\curlyeqprec"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "NotPrecedes",
    latexTrigger: ["\\nprec"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "NotSucceeds",
    latexTrigger: ["\\nsucc"],
    kind: "infix",
    associativity: "right",
    precedence: 260
  },
  {
    name: "Between",
    latexTrigger: ["\\between"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  }
];
var DEFINITIONS_LOGIC = [
  // Constants
  {
    name: "True",
    kind: "symbol",
    latexTrigger: ["\\top"]
    // ⊤ U+22A4
  },
  {
    kind: "symbol",
    latexTrigger: "\\mathrm{True}",
    parse: "True"
  },
  {
    kind: "symbol",
    latexTrigger: "\\operator{True}",
    parse: "True"
  },
  {
    kind: "symbol",
    latexTrigger: "\\mathsf{T}",
    parse: "True"
  },
  {
    name: "False",
    kind: "symbol",
    latexTrigger: ["\\bot"]
    // ⊥ U+22A5
  },
  {
    kind: "symbol",
    latexTrigger: "\\operator{False}",
    parse: "True"
  },
  {
    kind: "symbol",
    latexTrigger: "\\mathsf{F}",
    parse: "True"
  },
  {
    name: "Maybe",
    kind: "symbol",
    latexTrigger: "\\operatorname{Maybe}",
    serialize: "\\operatorname{Maybe}"
  },
  {
    kind: "symbol",
    latexTrigger: "\\mathrm{Maybe}",
    parse: "Maybe"
  },
  // Operators
  {
    name: "And",
    kind: "infix",
    latexTrigger: ["\\land"],
    precedence: 317
    // serialize: '\\land',
  },
  { kind: "infix", latexTrigger: ["\\wedge"], parse: "And", precedence: 317 },
  { kind: "infix", latexTrigger: "\\&", parse: "And", precedence: 317 },
  {
    kind: "infix",
    latexTrigger: "\\operatorname{and}",
    parse: "And",
    precedence: 317
  },
  {
    name: "Or",
    kind: "infix",
    latexTrigger: ["\\lor"],
    precedence: 310
  },
  { kind: "infix", latexTrigger: ["\\vee"], parse: "Or", precedence: 310 },
  { kind: "infix", latexTrigger: "\\parallel", parse: "Or", precedence: 310 },
  {
    kind: "infix",
    latexTrigger: "\\operatorname{or}",
    parse: "And",
    precedence: 310
  },
  {
    name: "Xor",
    kind: "infix",
    latexTrigger: ["\\veebar"],
    precedence: 315
  },
  // Possible alt: \oplus ⊕ U+2295
  {
    name: "Not",
    kind: "prefix",
    latexTrigger: ["\\lnot"],
    precedence: 880
  },
  {
    name: "Nand",
    kind: "infix",
    latexTrigger: ["\\barwedge"],
    precedence: 315
    // serialize: '\\mid',
  },
  {
    name: "Nor",
    kind: "infix",
    latexTrigger: ["\u22BD"],
    // bar vee
    precedence: 315
    // serialize: '\\downarrow',
  },
  // Functions
  {
    kind: "function",
    identifierTrigger: "and",
    parse: "And"
  },
  {
    kind: "function",
    identifierTrigger: "or",
    parse: "Or"
  },
  {
    kind: "function",
    identifierTrigger: "not",
    parse: "Not"
  },
  // Relations
  {
    name: "Implies",
    kind: "infix",
    precedence: 220,
    associativity: "right",
    latexTrigger: ["\\implies"],
    serialize: "\\implies"
  },
  {
    latexTrigger: ["\\Rightarrow"],
    kind: "infix",
    precedence: 220,
    associativity: "right",
    parse: "Implies"
  },
  {
    name: "Equivalent",
    // MathML: identical to, Mathematica: Congruent
    latexTrigger: ["\\iff"],
    kind: "infix",
    associativity: "right",
    precedence: 219
  },
  {
    latexTrigger: ["\\Leftrightarrow"],
    kind: "infix",
    associativity: "right",
    precedence: 219,
    parse: "Equivalent"
  },
  {
    latexTrigger: ["\\equiv"],
    kind: "infix",
    associativity: "right",
    precedence: 219,
    parse: "Equivalent"
  },
  {
    name: "Proves",
    kind: "infix",
    latexTrigger: ["\\vdash"],
    precedence: 220,
    associativity: "right",
    serialize: "\\vdash"
  },
  {
    name: "Entails",
    kind: "infix",
    latexTrigger: ["\\vDash"],
    precedence: 220,
    associativity: "right",
    serialize: "\\vDash"
  },
  {
    name: "Satisfies",
    kind: "infix",
    latexTrigger: ["\\models"],
    precedence: 220,
    associativity: "right",
    serialize: "\\models"
  }
];
function parseSingleArg(cmd) {
  return (parser) => {
    const arg = parser.parseGroup();
    return arg === null ? [cmd] : [cmd, arg];
  };
}
var DEFINITIONS_OTHERS = [
  {
    name: "Overscript",
    latexTrigger: ["\\overset"],
    kind: "infix",
    precedence: 700
    // @todo: not in MathML
  },
  {
    name: "Underscript",
    latexTrigger: ["\\underset"],
    kind: "infix",
    precedence: 700
    // @todo: not in MathML
  },
  {
    name: "Increment",
    latexTrigger: ["+", "+"],
    kind: "postfix",
    precedence: 880
  },
  {
    name: "Decrement",
    latexTrigger: ["-", "-"],
    kind: "postfix",
    precedence: 880
  },
  {
    name: "PreIncrement",
    latexTrigger: ["+", "+"],
    kind: "prefix",
    precedence: 880
  },
  {
    name: "PreDecrement",
    latexTrigger: ["-", "-"],
    kind: "prefix",
    precedence: 880
  },
  {
    name: "Ring",
    // Aka 'Composition', i.e. function composition
    latexTrigger: ["\\circ"],
    kind: "infix",
    precedence: 265
    // @todo: MathML is 950
    // @todo: check lhs and rhs are functions
  },
  {
    name: "Transpose",
    latexTrigger: ["^", "T"],
    kind: "postfix"
    // @todo: if lhs is a list/tensor
  },
  {
    // @todo: if lhs is a list/tensor
    name: "ConjugateTranspose",
    latexTrigger: ["^", "H"],
    kind: "postfix"
  },
  {
    name: "StringJoin",
    // @todo From Mathematica...?
    latexTrigger: ["\\lt", "\\gt"],
    kind: "infix",
    precedence: 780
  },
  {
    name: "Starstar",
    latexTrigger: ["\\star", "\\star"],
    kind: "infix",
    precedence: 780
  },
  {
    // Partial derivative using a variation of the Euler notation: `∂_xf(x)`
    // (the Euler notation uses `D_1f(x)` where "1" is for the first variable
    // For the Leibniz notation see 'Divide' that handles `∂f/∂x`
    name: "PartialDerivative",
    // PartialDerivative(expr, {lists of vars}, degree)
    latexTrigger: ["\\partial"],
    kind: "prefix",
    parse: (parser) => {
      var _a, _b, _c, _d;
      let done = false;
      let sup = "Nothing";
      let sub2 = "Nothing";
      while (!done) {
        parser.skipSpace();
        if (parser.match("_")) {
          sub2 = (_a = parser.parseGroup()) != null ? _a : parser.parseToken();
        } else if (parser.match("^")) {
          sup = (_b = parser.parseGroup()) != null ? _b : parser.parseToken();
        } else {
          done = true;
        }
      }
      const seq = getSequence(sub2);
      if (seq)
        sub2 = ["List", ...seq];
      if (sub2 === null || sup === null)
        return null;
      let rhs = (_c = parser.parseGroup()) != null ? _c : "Nothing";
      if (rhs !== "Nothing" && !isEmptySequence(rhs)) {
        const args = (_d = parser.parseArguments()) != null ? _d : ["Nothing"];
        rhs = [rhs, ...args];
      }
      return ["PartialDerivative", rhs, sub2, sup];
    },
    serialize: (serializer, expr) => {
      var _a;
      let result = "\\partial";
      const fn = op(expr, 1);
      const vars = op(expr, 2);
      const degree = op(expr, 3);
      if (vars !== null && vars !== "Nothing") {
        if (head(vars) === "List") {
          result += "_{" + serializer.serialize(["Sequence", ...(_a = ops(vars)) != null ? _a : []]) + "}";
        } else {
          result += "_{" + serializer.serialize(vars) + "}";
        }
      }
      if (degree !== null && degree !== "Nothing")
        result += "^{" + serializer.serialize(degree) + "}";
      if (fn !== null && fn !== "Nothing")
        result += serializer.serialize(fn);
      return result;
    },
    precedence: 740
  },
  {
    name: "OverBar",
    latexTrigger: ["\\overline"],
    parse: parseSingleArg("OverBar")
  },
  {
    name: "UnderBar",
    latexTrigger: ["\\underline"],
    parse: parseSingleArg("UnderBar")
  },
  {
    name: "OverVector",
    latexTrigger: ["\\vec"],
    parse: parseSingleArg("OverVector")
  },
  {
    name: "OverTilde",
    latexTrigger: ["\\tilde"],
    parse: parseSingleArg("OverTilde")
  },
  {
    name: "OverHat",
    latexTrigger: ["\\hat"],
    parse: parseSingleArg("OverHat")
  },
  {
    name: "OverRightArrow",
    latexTrigger: ["\\overrightarrow"],
    parse: parseSingleArg("OverRightArrow")
  },
  {
    name: "OverLeftArrow",
    latexTrigger: ["\\overleftarrow"],
    parse: parseSingleArg("OverLeftArrow")
  },
  {
    name: "OverRightDoubleArrow",
    latexTrigger: ["\\Overrightarrow"],
    parse: parseSingleArg("OverRightDoubleArrow")
  },
  {
    name: "OverLeftHarpoon",
    latexTrigger: ["\\overleftharpoon"],
    parse: parseSingleArg("OverLeftHarpoon")
  },
  {
    name: "OverRightHarpoon",
    latexTrigger: ["\\overrightharpoon"],
    parse: parseSingleArg("OverRightHarpoon")
  },
  {
    name: "OverLeftRightArrow",
    latexTrigger: ["\\overleftrightarrow"],
    parse: parseSingleArg("OverLeftRightArrow")
  },
  {
    name: "OverBrace",
    latexTrigger: ["\\overbrace"],
    parse: parseSingleArg("OverBrace")
  },
  {
    name: "OverLineSegment",
    latexTrigger: ["\\overlinesegment"],
    parse: parseSingleArg("OverLineSegment")
  },
  {
    name: "OverGroup",
    latexTrigger: ["\\overgroup"],
    parse: parseSingleArg("OverGroup")
  },
  {
    latexTrigger: ["\\displaystyle"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\textstyle"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\scriptstyle"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\scriptscriptstyle"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\tiny"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\scriptsize"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\footnotesize"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\small"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\normalsize"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\large"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\Large"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\LARGE"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\huge"],
    parse: () => ["Sequence"]
  },
  {
    latexTrigger: ["\\Huge"],
    parse: () => ["Sequence"]
  },
  {
    name: "Style",
    serialize: (serializer, expr) => {
      let result = serializer.serialize(op(expr, 1));
      const dict = dictionary(op(expr, 2));
      if (dict === null)
        return result;
      if (stringValue(dict.display) === "block")
        result = joinLatex(["{\\displaystyle", result, "}"]);
      else if (stringValue(dict.display) === "inline")
        result = joinLatex(["{\\textstyle", result, "}"]);
      else if (stringValue(dict.display) === "script")
        result = joinLatex(["{\\scriptstyle", result, "}"]);
      else if (stringValue(dict.display) === "scriptscript")
        result = joinLatex(["{\\scriptscriptstyle", result, "}"]);
      const v = machineValue(dict.size);
      if (v !== null && v >= 1 && v <= 10) {
        result = joinLatex([
          "{",
          {
            1: "\\tiny",
            2: "\\scriptsize",
            3: "\\footnotesize",
            4: "\\small",
            5: "\\normalsize",
            6: "\\large",
            7: "\\Large",
            8: "\\LARGE",
            9: "\\huge",
            10: "\\Huge"
          }[v],
          result,
          "}"
        ]);
      }
      return result;
    }
  },
  {
    latexTrigger: ["\\!"],
    parse: () => ["HorizontalSpacing", -3]
  },
  {
    latexTrigger: ["\\ "],
    parse: () => ["HorizontalSpacing", 6]
  },
  {
    latexTrigger: ["\\:"],
    parse: () => ["HorizontalSpacing", 4]
  },
  {
    latexTrigger: ["\\enskip"],
    parse: () => ["HorizontalSpacing", 9]
  },
  {
    latexTrigger: ["\\quad"],
    parse: () => ["HorizontalSpacing", 18]
  },
  {
    latexTrigger: ["\\qquad"],
    parse: () => ["HorizontalSpacing", 36]
  },
  {
    latexTrigger: ["\\,"],
    parse: () => ["HorizontalSpacing", 3]
  },
  {
    latexTrigger: ["\\;"],
    parse: () => ["HorizontalSpacing", 5]
  },
  {
    latexTrigger: ["\\enspace"],
    parse: () => ["HorizontalSpacing", 9]
  },
  {
    name: "HorizontalSpacing",
    // The `HorizontalSpacing` function has two forms
    // `["HorizontalSpacing", number]` -> indicate a space of mu units
    // `["HorizontalSpacing", expr, 'op'|'bin'|rel]` -> indicate a spacing around and expression, i.e. `\mathbin{x}`, etc...
    serialize: (serializer, expr) => {
      var _a;
      if (op(expr, 2)) {
        return serializer.serialize(op(expr, 1));
      }
      const v = machineValue(op(expr, 1));
      if (v === null)
        return "";
      return (_a = {
        "-3": "\\!",
        6: "\\ ",
        3: "\\,",
        4: "\\:",
        5: "\\;",
        9: "\\enspace",
        18: "\\quad",
        36: "\\qquad"
      }[v]) != null ? _a : "";
    }
  }
  // if (
  //   [
  //     '\\!',
  //     '\\:',
  //     '\\enskip',
  //     '\\quad',
  //     '\\,',
  //     '\\;',
  //     '\\enspace',
  //     '\\qquad',
  //     '\\selectfont',
  //   ].includes(token)
  // ) {
  //   return 'skip';
  // }
  // {
  //     name: '',
  //     trigger: '\\mathring',
  // },
  // {
  //     name: '',
  //     trigger: '\\check',
  // },
];
function parseTrig(op3) {
  return (parser, until) => {
    var _a, _b;
    const head2 = (_b = (_a = {
      "\\arcsin": "Arcsin",
      "\\arccos": "Arccos",
      "\\arctan": "Arctan",
      "\\arctg": "Arctan",
      "\\arcctg": "Arctan",
      "\\arcsec": "Arcsec",
      "\\arccsc": " Arccsc",
      "\\arsinh": "Arsinh",
      "\\arcosh": "Arcosh",
      "\\artanh": "Artanh",
      "\\arcsech": "Arcsech",
      "\\arccsch": "Arcsch",
      // '\\arg',
      "\\ch": "Cosh",
      "\\cos": "Cos",
      "\\cosec": "Csc",
      "\\cosh": "Csch",
      "\\cot": "Cot",
      "\\cotg": "Cot",
      "\\coth": "Coth",
      "\\csc": "Csc",
      "\\ctg": "Cot",
      "\\cth": "Coth",
      "\\sec": "Sec",
      "\\sin": "Sin",
      "\\sinh": "Sinh",
      "\\sh": "Sinh",
      "\\tan": "Tan",
      "\\tanh": "Tanh",
      "\\tg": "Tan",
      "\\th": "Tanh"
    }[op3 != null ? op3 : ""]) != null ? _a : op3) != null ? _b : "";
    if (parser.atTerminator(until))
      return head2;
    const fn = parser.parsePostfixOperator(head2, until);
    if (fn !== null)
      return fn;
    const args = parser.parseArguments("implicit", until);
    return args === null ? head2 : [head2, ...args];
  };
}
var DEFINITIONS_TRIGONOMETRY = [
  {
    name: "Arcsin",
    latexTrigger: ["\\arcsin"],
    parse: parseTrig("Arcsin")
  },
  {
    name: "Arccos",
    latexTrigger: ["\\arccos"],
    parse: parseTrig("Arccos")
  },
  {
    name: "Arctan",
    latexTrigger: ["\\arctan"],
    parse: parseTrig("Arctan")
  },
  {
    latexTrigger: ["\\arctg"],
    parse: parseTrig("Arctan")
  },
  {
    name: "Arccot",
    latexTrigger: ["\\arcctg"],
    parse: parseTrig("Arccot")
  },
  {
    name: "Arcsec",
    latexTrigger: "arcsec",
    parse: parseTrig("Arcsec")
  },
  {
    name: "Arccsc",
    latexTrigger: ["\\arccsc"],
    parse: parseTrig("Arccsc")
  },
  {
    name: "Arsinh",
    latexTrigger: ["\\arsinh"],
    parse: parseTrig("Arsinh")
  },
  {
    name: "Arcosh",
    latexTrigger: ["\\arcosh"],
    parse: parseTrig("Arcosh")
  },
  {
    name: "Artanh",
    latexTrigger: ["\\artanh"],
    parse: parseTrig("Artanh")
  },
  {
    name: "Arsech",
    latexTrigger: ["\\arsech"],
    parse: parseTrig("Arsech")
  },
  {
    name: "Arcsch",
    latexTrigger: ["\\arcsch"],
    parse: parseTrig("Arcsch")
  },
  {
    // Rusian hyperbolic cosine
    latexTrigger: ["\\ch"],
    parse: parseTrig("Cosh")
  },
  {
    name: "Cosec",
    latexTrigger: ["\\cosec"],
    parse: parseTrig("Cosec")
  },
  {
    name: "Cosh",
    latexTrigger: ["\\cosh"],
    parse: parseTrig("Cosh")
  },
  {
    name: "Cot",
    latexTrigger: ["\\cot"],
    parse: parseTrig("Cot")
  },
  {
    latexTrigger: ["\\cotg"],
    parse: parseTrig("Cot")
  },
  {
    name: "Coth",
    latexTrigger: ["\\coth"],
    parse: parseTrig("Coth")
  },
  {
    name: "Csc",
    latexTrigger: ["\\csc"],
    parse: parseTrig("Csc")
  },
  {
    // Rusian cotangent
    latexTrigger: ["\\ctg"],
    parse: parseTrig("Cot")
  },
  {
    latexTrigger: ["\\cth"],
    parse: parseTrig("Cotanh")
  },
  {
    name: "Sec",
    latexTrigger: ["\\sec"],
    parse: parseTrig("Sec")
  },
  {
    name: "Sinh",
    latexTrigger: ["\\sinh"],
    parse: parseTrig("Sinh")
  },
  {
    latexTrigger: ["\\sh"],
    parse: parseTrig("Sinh")
  },
  {
    name: "Tan",
    latexTrigger: ["\\tan"],
    parse: parseTrig("Tan")
  },
  {
    latexTrigger: ["\\tg"],
    parse: parseTrig("Tan")
  },
  {
    name: "Tanh",
    latexTrigger: ["\\tanh"],
    parse: parseTrig("Tanh")
  },
  {
    latexTrigger: ["\\th"],
    parse: parseTrig("Tanh")
  },
  {
    name: "Cos",
    latexTrigger: ["\\cos"],
    parse: parseTrig("Cos")
  },
  {
    name: "Sin",
    latexTrigger: ["\\sin"],
    parse: parseTrig("Sin")
  }
];
var DEFINITIONS_SETS = [
  // Constants
  { name: "AlgebraicNumber", latexTrigger: "\\bar\\Q" },
  { name: "ComplexNumber", latexTrigger: ["\\C"] },
  { latexTrigger: "\\mathbb{C}", parse: "ComplexNumber" },
  { name: "ImaginaryNumber", latexTrigger: ["\\imaginaryI", "\\R"] },
  { name: "ExtendedComplexNumber", latexTrigger: ["\\bar", "\\C"] },
  { name: "EmptySet", latexTrigger: ["\\emptyset"] },
  { latexTrigger: ["\\varnothing"], parse: "EmptySet" },
  // Parsing only
  { name: "Integer", latexTrigger: ["\\Z"] },
  { latexTrigger: "\\mathbb{Z}", parse: "Integer" },
  { name: "RationalNumber", latexTrigger: ["\\Q"] },
  { name: "RealNumber", latexTrigger: ["\\R"] },
  { latexTrigger: "\\mathbb{R}", parse: "RealNumber" },
  { name: "ExtendedRealNumber", latexTrigger: ["\\bar", "\\R"] },
  { name: "TranscendentalNumber", latexTrigger: "\\R-\\bar\\Q" },
  { latexTrigger: "\\R\\backslash\\bar\\Q", parse: "TranscendentalNumber" },
  // Real numbers < 0
  { name: "NegativeNumber", latexTrigger: "\\R^-" },
  { latexTrigger: "\\R^{-}", parse: "NegativeNumber" },
  { latexTrigger: "\\R_-", parse: "NegativeNumber" },
  { latexTrigger: "\\R_{-}", parse: "NegativeNumber" },
  { latexTrigger: "\\R^{\\lt}", parse: "NegativeNumber" },
  // Real numbers > 0
  { name: "PositiveNumber", latexTrigger: "\\R^+" },
  { latexTrigger: "\\R^{+}", parse: "PositiveNumber" },
  { latexTrigger: "\\R_+", parse: "PositiveNumber" },
  { latexTrigger: "\\R_{+}", parse: "PositiveNumber" },
  { latexTrigger: "\\R^{\\gt}", parse: "PositiveNumber" },
  // Real numbers <= 0
  { name: "NonPositiveNumber", latexTrigger: "\\R^{0-}" },
  { latexTrigger: "\\R^{-0}", parse: "NonPositiveNumber" },
  { latexTrigger: "\\R^{\\leq}", parse: "NonPositiveNumber" },
  // Integers < 0
  { name: "NegativeInteger", latexTrigger: "\\Z^-" },
  { latexTrigger: "\\Z^-", parse: "NegativeInteger" },
  { latexTrigger: "\\Z^{-}", parse: "NegativeInteger" },
  { latexTrigger: "\\Z_-", parse: "NegativeInteger" },
  { latexTrigger: "\\Z_{-}", parse: "NegativeInteger" },
  { latexTrigger: "\\Z^{\\lt}", parse: "NegativeInteger" },
  // Integers >  0
  { name: "PositiveInteger", latexTrigger: "\\Z^+" },
  { latexTrigger: "\\Z^{+}", parse: "PositiveInteger" },
  { latexTrigger: "\\Z_+", parse: "PositiveInteger" },
  { latexTrigger: "\\Z_{+}", parse: "PositiveInteger" },
  { latexTrigger: "\\Z^{\\gt}", parse: "PositiveInteger" },
  { latexTrigger: "\\Z^{\\gt0}", parse: "PositiveInteger" },
  { latexTrigger: "\\N^+", parse: "PositiveInteger" },
  { latexTrigger: "\\N^{+}", parse: "PositiveInteger" },
  { latexTrigger: "\\N^*", parse: "PositiveInteger" },
  { latexTrigger: "\\N^{*}", parse: "PositiveInteger" },
  { latexTrigger: "\\N^\\star", parse: "PositiveInteger" },
  { latexTrigger: "\\N^{\\star}", parse: "PositiveInteger" },
  { latexTrigger: "\\N_1", parse: "PositiveInteger" },
  { latexTrigger: "\\N_{1}", parse: "PositiveInteger" },
  // https://mathvault.ca/hub/higher-math/math-symbols/algebra-symbols/
  // Integers >=  0
  { name: "NonNegativeInteger", latexTrigger: ["\\N"] },
  { latexTrigger: "\\Z^{+0}", parse: "NonNegativeInteger" },
  { latexTrigger: "\\Z^{\\geq}", parse: "NonNegativeInteger" },
  { latexTrigger: "\\Z^{\\geq0}", parse: "NonNegativeInteger" },
  { latexTrigger: "\\Z^{0+}", parse: "NonNegativeInteger" },
  { latexTrigger: "\\mathbb{N}", parse: "NonNegativeInteger" },
  { latexTrigger: "\\N_0", parse: "NonNegativeInteger" },
  { latexTrigger: "\\N_{0}", parse: "NonNegativeInteger" },
  //
  // Set Expressions
  //
  // @todo: could also have a `CartesianPower` function with a number `rhs`
  {
    name: "CartesianProduct",
    latexTrigger: ["\\times"],
    kind: "infix",
    associativity: "right",
    // Caution: cartesian product is not associative
    precedence: 390,
    // Same as Multiply?
    parse: (parser, lhs, until) => {
      if (390 < until.minPrec)
        return null;
      const ce = parser.computeEngine;
      if (!ce || !ce.box(lhs).domain.isCompatible("Set"))
        return null;
      const index = parser.index;
      const rhs = parser.parseExpression({ ...until, minPrec: 390 });
      if (rhs === null || ce.box(lhs).domain.isCompatible("Set") !== true) {
        parser.index = index;
        return null;
      }
      return ["CartesianProduct", lhs, rhs];
    }
  },
  {
    latexTrigger: ["^", "\\complement"],
    kind: "postfix",
    parse: (_parser, lhs) => {
      return ["Complement", lhs];
    }
    // precedence: 240,
    // @todo: serialize for the multiple argument case
  },
  {
    name: "Complement",
    latexTrigger: ["^", "<{>", "\\complement", "<}>"],
    kind: "postfix"
    // precedence: 240,
    // @todo: serialize for the multiple argument case
  },
  {
    name: "Intersection",
    latexTrigger: ["\\cap"],
    kind: "infix",
    precedence: 350
  },
  {
    name: "Interval",
    // @todo: parse opening '[' or ']' or '('
    serialize: serializeSet
  },
  {
    name: "Multiple",
    // @todo: parse
    serialize: serializeSet
  },
  {
    name: "Union",
    latexTrigger: ["\\cup"],
    kind: "infix",
    precedence: 350
  },
  {
    name: "Range",
    // @todo: parse opening '[' or ']' or '('
    serialize: serializeSet
  },
  // {
  //   name: 'Set',
  //   kind: 'matchfix',
  //   openDelimiter: '{',
  //   closeDelimiter: '}',
  //   precedence: 20,
  //   // @todo: the set syntax can also include conditions...
  // },
  {
    name: "SetMinus",
    latexTrigger: ["\\setminus"],
    kind: "infix",
    precedence: 650
  },
  {
    name: "SymmetricDifference",
    latexTrigger: ["\\triangle"],
    // or \\ominus
    kind: "infix",
    // @todo: parser could check that lhs and rhs are sets
    precedence: 260
  },
  // Predicates/Relations
  {
    latexTrigger: ["\\ni"],
    kind: "infix",
    associativity: "right",
    precedence: 160,
    // As per MathML, lower precedence
    parse: (parser, lhs, terminator) => {
      const rhs = parser.parseExpression(terminator);
      return rhs === null ? null : ["Element", rhs, lhs];
    }
  },
  {
    name: "Element",
    latexTrigger: ["\\in"],
    kind: "infix",
    precedence: 240
  },
  {
    name: "NotElement",
    latexTrigger: ["\\notin"],
    kind: "infix",
    precedence: 240
  },
  {
    name: "NotSubset",
    latexTrigger: ["\\nsubset"],
    kind: "infix",
    associativity: "right",
    precedence: 240
  },
  {
    name: "NotSuperset",
    latexTrigger: ["\\nsupset"],
    kind: "infix",
    associativity: "right",
    precedence: 240
  },
  {
    name: "NotSubsetNotEqual",
    latexTrigger: ["\\nsubseteq"],
    kind: "infix",
    associativity: "right",
    precedence: 240
  },
  {
    name: "NotSupersetNotEqual",
    latexTrigger: ["\\nsupseteq"],
    kind: "infix",
    associativity: "right",
    precedence: 240
  },
  {
    name: "SquareSubset",
    // MathML: square image of
    latexTrigger: ["\\sqsubset"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "SquareSubsetEqual",
    // MathML: square image of or equal to
    latexTrigger: ["\\sqsubseteq"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "SquareSuperset",
    // MathML: square original of
    latexTrigger: ["\\sqsupset"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "SquareSupersetEqual",
    // MathML: square original of or equal
    latexTrigger: ["\\sqsupseteq"],
    kind: "infix",
    associativity: "right",
    precedence: 265
  },
  {
    name: "Subset",
    latexTrigger: ["\\subset"],
    kind: "infix",
    associativity: "right",
    precedence: 240
  },
  {
    latexTrigger: ["\\subsetneq"],
    kind: "infix",
    associativity: "right",
    precedence: 240,
    parse: "Subset"
  },
  {
    latexTrigger: ["\\varsubsetneqq"],
    kind: "infix",
    associativity: "right",
    precedence: 240,
    parse: "Subset"
  },
  {
    name: "SubsetEqual",
    latexTrigger: ["\\subseteq"],
    kind: "infix",
    precedence: 240
  },
  {
    name: "Superset",
    latexTrigger: ["\\supset"],
    kind: "infix",
    associativity: "right",
    precedence: 240
  },
  {
    latexTrigger: ["\\supsetneq"],
    kind: "infix",
    associativity: "right",
    precedence: 240,
    parse: "Superset"
  },
  {
    latexTrigger: ["\\varsupsetneq"],
    kind: "infix",
    associativity: "right",
    precedence: 240,
    parse: "Superset"
  },
  {
    name: "SupersetEqual",
    latexTrigger: ["\\supseteq"],
    kind: "infix",
    associativity: "right",
    precedence: 240
  }
];
function serializeSet(serializer, expr) {
  var _a;
  if (expr === null)
    return "";
  const h = head(expr);
  if (h === null)
    return "";
  if (h === "Set") {
    if (nops(expr) === 0)
      return "\\emptyset";
    if (nops(expr) === 2 && head(op(expr, 2)) === "Condition") {
      return joinLatex([
        "\\left\\lbrace",
        serializer.serialize(op(expr, 1)),
        "\\middle\\mid",
        serializer.serialize(op(expr, 2)),
        "\\right\\rbrace"
      ]);
    }
    return joinLatex([
      "\\left\\lbrace",
      ...((_a = ops(expr)) != null ? _a : []).map((x) => serializer.serialize(x) + " ,"),
      "\\right\\rbrace"
    ]);
  }
  if (h === "Multiple") {
  }
  if (h === "Range") {
    return joinLatex([
      "\\mathopen\\lbrack",
      serializer.serialize(op(expr, 1)),
      ", ",
      serializer.serialize(op(expr, 2)),
      "\\mathclose\\rbrack"
    ]);
  }
  if (h === "Interval") {
    let op12 = op(expr, 1);
    let op22 = op(expr, 2);
    let openLeft = false;
    let openRight = false;
    if (head(op12) === "Open") {
      op12 = op(op12, 1);
      openLeft = true;
    }
    if (head(op22) === "Open") {
      op22 = op(op22, 1);
      openRight = true;
    }
    return joinLatex([
      `\\mathopen${openLeft ? "\\rbrack" : "\\lbrack"}`,
      serializer.serialize(op12),
      ", ",
      serializer.serialize(op22),
      `\\mathclose${openRight ? "\\lbrack" : "\\rbrack"}`
    ]);
  }
  const style = serializer.numericSetStyle(expr, serializer.level);
  if (style === "compact") {
  } else if (style === "interval") {
  } else if (style === "regular") {
  } else if (style === "set-builder") {
  }
  return "";
}
function parseIntegral(command, n = 1) {
  return (parser) => {
    var _a, _b, _c;
    parser.skipSpace();
    let sup = null;
    let sub2 = null;
    while (!(sub2 !== null && sup !== null) && (parser.peek === "_" || parser.peek === "^")) {
      if (parser.match("_"))
        sub2 = (_a = parser.parseGroup()) != null ? _a : parser.parseToken();
      else if (parser.match("^")) {
        sup = (_b = parser.parseGroup()) != null ? _b : parser.parseToken();
      }
      parser.skipSpace();
    }
    if (sub2 === "Nothing" || isEmptySequence(sub2))
      sub2 = null;
    if (sup === "Nothing" || isEmptySequence(sup))
      sup = null;
    let [fn, index] = parseIntegralBody(parser, n);
    if (fn && !index) {
      if (head(fn) === "Add" || head(fn) === "Subtract") {
        const newOp = [];
        const rest = [];
        for (const op3 of (_c = ops(fn)) != null ? _c : []) {
          if (index)
            rest.push(op3);
          else {
            let op22;
            [op22, index] = parseIntegralBodyExpression(op3);
            newOp.push(op22 != null ? op22 : op3);
          }
        }
        if (index !== null && rest.length > 0) {
          return [
            "Add",
            makeIntegral(
              parser,
              command,
              ["Add", ...newOp],
              [{ index, sub: sub2, sup }]
            ),
            ...rest
          ];
        }
      } else if (head(fn) === "Divide") {
        let altNumerator;
        [altNumerator, index] = parseIntegralBodyExpression(op(fn, 1));
        if (altNumerator !== null && index !== null) {
          fn = ["Divide", altNumerator, op(fn, 2)];
        }
      }
    }
    return makeIntegral(parser, command, fn, [{ index, sub: sub2, sup }]);
  };
}
function makeIntegral(parser, command, fn, ranges) {
  if (fn && ranges.length === 0)
    return [command, fn];
  fn != null ? fn : fn = "Nothing";
  if (parser.computeEngine) {
    const ce = parser.computeEngine;
    let hasIndex = false;
    const idTable = {};
    for (const r of ranges)
      if (r.index) {
        hasIndex = true;
        idTable[r.index] = { domain: "ExtendedRealNumber" };
      }
    if (hasIndex)
      ce.pushScope(idTable);
    fn = ce.box(fn).json;
    if (hasIndex)
      ce.popScope();
  }
  return [command, fn, ...ranges.map((r) => makeRange(r))];
}
function makeRange(range) {
  var _a;
  const heldIndex = range.index ? ["Hold", range.index] : "Nothing";
  if (range.sup !== null)
    return ["Tuple", heldIndex, (_a = range.sub) != null ? _a : "Nothing", range.sup];
  if (range.sub !== null)
    return ["Tuple", heldIndex, range.sub];
  return heldIndex;
}
function parseIntegralBody(parser, n = 1) {
  var _a;
  const start = parser.index;
  let found = false;
  let fn = parser.parseExpression({
    minPrec: 266,
    condition: () => {
      if (parser.matchAll(["\\mathrm", "<{>", "d", "<}>"]))
        found = true;
      else if (parser.matchAll(["\\operatorname", "<{>", "d", "<}>"]))
        found = true;
      return found;
    }
  });
  if (!found) {
    parser.index = start;
    fn = parser.parseExpression({
      minPrec: 266,
      condition: () => {
        if (parser.match("d"))
          found = true;
        return found;
      }
    });
  }
  if (fn && !found)
    return parseIntegralBodyExpression(fn);
  const indexes = parseIndexes(parser, n);
  return [fn, (_a = indexes[0]) != null ? _a : null];
}
function parseIndexes(parser, n = 1) {
  parser.skipSpace();
  const result = [];
  const index = symbol(parser.parseSymbol());
  if (index === null)
    return [];
  result.push(index);
  return result;
}
function parseIntegralBodyExpression(expr) {
  const h = head(expr);
  const op12 = op(expr, 1);
  if (!op12)
    return [expr, null];
  if (h === "Multiply") {
    const args = ops(expr);
    if (args && args.length > 1) {
      const sym = symbol(args[args.length - 2]);
      if (sym === "d" || sym === "d_upright") {
        if (args.length === 2)
          return [null, symbol(args[1])];
        if (args.length === 3)
          return [args[0], symbol(args[2])];
        return [
          ["Multiply", ...args.slice(0, -2)],
          symbol(args[args.length - 1])
        ];
      }
      const [fn2, index] = parseIntegralBodyExpression(args[args.length - 1]);
      if (fn2)
        return [["Multiply", ...args.slice(0, -1), fn2], index];
    }
  } else if (h === "Delimiter") {
    const [fn2, index] = parseIntegralBodyExpression(op12);
    if (index) {
      if (!fn2)
        return [null, index];
      return [["Delimiter", fn2, ...ops(expr).slice(1)], index];
    }
  } else if (h === "Add") {
    const args = ops(expr);
    if (args && args.length > 0) {
      const [fn2, index] = parseIntegralBodyExpression(args[args.length - 1]);
      if (index) {
        if (fn2)
          return [["Add", ...args.slice(0, -1), fn2], index];
        if (args.length > 2)
          return [["Add", ...args.slice(0, -1)], index];
        if (args.length > 2)
          return [args[0], index];
      }
    }
  } else if (h === "Negate") {
    const [fn2, index] = parseIntegralBodyExpression(op12);
    if (index)
      return [fn2 ? ["Negate", fn2] : null, index];
  } else if (h === "Divide") {
    const [fn2, index] = parseIntegralBodyExpression(op12);
    if (index)
      return [["Divide", fn2 != null ? fn2 : 1, op(expr, 2)], index];
  } else {
    const args = ops(expr);
    if ((args == null ? void 0 : args.length) === 1) {
      const [arg2, index] = parseIntegralBodyExpression(args[0]);
      if (index)
        return [[head(expr), arg2], index];
    }
  }
  return [expr, null];
}
function serializeIntegral(command) {
  return (serializer, expr) => {
    var _a;
    if (!op(expr, 1))
      return command;
    let arg = op(expr, 2);
    const h = head(arg);
    let indexExpr = null;
    if (h === "Tuple" || h === "Triple" || h === "Pair" || h === "Single") {
      indexExpr = op(arg, 1);
    } else if (h === "Hold") {
      indexExpr = op(arg, 1);
    } else {
      indexExpr = (_a = op(arg, 1)) != null ? _a : "x";
      arg = null;
    }
    if (head(indexExpr) === "Hold")
      indexExpr = op(indexExpr, 1);
    const index = indexExpr !== null ? symbol(indexExpr) : null;
    let fn = op(expr, 1);
    if (head(fn) === "Lambda" && op(fn, 1))
      fn = subs(op(fn, 1), { _: index != null ? index : "x", _1: index != null ? index : "x" });
    if (!arg) {
      if (!index || index === "Nothing")
        return joinLatex([command, "\\!", serializer.serialize(fn)]);
      return joinLatex([
        command,
        "\\!",
        serializer.serialize(fn),
        "\\,\\operatorname{d}",
        serializer.serialize(index)
      ]);
    }
    const subSymbol = op(arg, 2) ? symbol(op(arg, 2)) : null;
    let sub2 = arg && subSymbol !== "Nothing" ? serializer.serialize(op(arg, 2)) : "";
    if (sub2.length > 0)
      sub2 = `_{${sub2}}`;
    let sup = "";
    const supSymbol = op(arg, 3) ? symbol(op(arg, 3)) : null;
    if (op(arg, 3) && supSymbol !== "Nothing")
      sup = `^{${serializer.serialize(op(arg, 3))}}`;
    return joinLatex([
      command,
      sup,
      sub2,
      "\\!",
      serializer.serialize(fn),
      ...index && symbol(index) !== "Nothing" ? ["\\,\\operatorname{d}", serializer.serialize(index)] : []
    ]);
  };
}
var DEFINITIONS_CALCULUS = [
  {
    kind: "expression",
    name: "Integrate",
    latexTrigger: ["\\int"],
    parse: parseIntegral("Integrate"),
    serialize: serializeIntegral("\\int")
  },
  {
    kind: "expression",
    latexTrigger: ["\\iint"],
    parse: parseIntegral("Integrate", 2)
  },
  {
    kind: "expression",
    latexTrigger: ["\\iiint"],
    parse: parseIntegral("Integrate", 3)
  },
  {
    kind: "expression",
    name: "CircularIntegrate",
    latexTrigger: ["\\oint"],
    parse: parseIntegral("CircularIntegrate"),
    serialize: serializeIntegral("\\oint")
  },
  {
    kind: "expression",
    latexTrigger: ["\\oiint"],
    parse: parseIntegral("CircularIntegrate", 2)
  },
  {
    kind: "expression",
    latexTrigger: ["\\oiiint"],
    parse: parseIntegral("CircularIntegrate", 3)
  }
];
var SYMBOLS = [
  // Greek
  ["alpha", "\\alpha", 945],
  ["beta", "\\beta", 946],
  ["gamma", "\\gamma", 947],
  ["delta", "\\delta", 948],
  ["epsilon", "\\epsilon", 949],
  ["epsilonSymbol", "\\varepsilon", 1013],
  // GREEK LUNATE EPSILON SYMBOL
  ["zeta", "\\zeta", 950],
  ["eta", "\\eta", 951],
  ["theta", "\\theta", 952],
  ["thetaSymbol", "\\vartheta", 977],
  // Unicode GREEK THETA SYMBOL
  ["iota", "\\iota", 953],
  ["kappa", "\\kappa", 954],
  ["kappaSymbol", "\\varkappa", 1008],
  // GREEK KAPPA SYMBOL
  ["lambda", "\\lambda", 955],
  ["mu", "\\mu", 956],
  ["nu", "\\nu", 957],
  ["xi", "\\xi", 958],
  ["omicron", "\\omicron", 959],
  ["pi", "\\pi", 960],
  ["piSymbol", "\\varpi", 982],
  // GREEK PI SYMBOL
  ["rho", "\\rho", 961],
  ["rhoSymbol", "\\varrho", 1009],
  // GREEK RHO SYMBOL
  ["sigma", "\\sigma", 963],
  ["finalSigma", "\\varsigma", 962],
  //GREEK SMALL LETTER FINAL SIGMA
  ["tau", "\\tau", 964],
  ["phi", "\\phi", 981],
  // Note GREEK PHI SYMBOL, but common usage in math
  ["phiLetter", "\\varphi", 966],
  ["upsilon", "\\upsilon", 965],
  ["chi", "\\chi", 967],
  ["psi", "\\psi", 968],
  ["omega", "\\omega", 969],
  ["Alpha", "\\Alpha", 913],
  ["Beta", "\\Beta", 914],
  ["Gamma", "\\Gamma", 915],
  ["Delta", "\\Delta", 916],
  ["Epsilon", "\\Epsilon", 917],
  ["Zeta", "\\Zeta", 918],
  ["Eta", "\\Eta", 919],
  ["Theta", "\\Theta", 920],
  ["Iota", "\\Iota", 921],
  ["Kappa", "\\Kappa", 922],
  ["Lambda", "\\Lambda", 923],
  ["Mu", "\\Mu", 924],
  ["Nu", "\\Nu", 925],
  ["Xi", "\\Xi", 926],
  ["Omicron", "\\Omicron", 927],
  // ['Pi', '\\Pi', 0x03a0],
  ["Rho", "\\Rho", 929],
  ["Sigma", "\\Sigma", 931],
  ["Tau", "\\Tau", 932],
  ["Phi", "\\Phi", 934],
  ["Upsilon", "\\Upsilon", 933],
  ["Chi", "\\Chi", 935],
  ["Psi", "\\Psi", 936],
  ["Omega", "\\Omega", 937],
  ["digamma", "\\digamma", 989],
  // Hebrew
  ["aleph", "\\aleph", 8501],
  // Unicode ALEF SYMBOL
  ["bet", "\\beth", 8502],
  ["gimel", "\\gimel", 8503],
  ["dalet", "\\daleth", 8504],
  // Letter-like
  ["ell", "\\ell", 8499],
  // Unicode SCRIPT SMALL L
  ["turnedCapitalF", "\\Finv", 8498],
  // Unicode TURNED CAPITAL F'
  ["turnedCapitalG", "\\Game", 8513],
  // TURNED SANS-SERIF CAPITAL G
  ["weierstrass", "\\wp", 8472],
  // Unicode SCRIPT CAPITAL P
  ["eth", "\\eth", 240],
  ["invertedOhm", "\\mho", 8487],
  // Unicode INVERTED OHM SIGN
  ["hBar", "\\hbar", 295],
  // Unicode LATIN SMALL LETTER H WITH STROKE
  ["hSlash", "\\hslash", 8463],
  // Unicode PLANCK CONSTANT OVER TWO PI
  // Symbols
  ["blackClubSuit", "\\clubsuit", 9827],
  ["whiteHeartSuit", "\\heartsuit", 9825],
  ["blackSpadeSuit", "\\spadesuit", 9824],
  ["whiteDiamondSuit", "\\diamondsuit", 9826],
  ["sharp", "\\sharp", 9839],
  ["flat", "\\flat", 9837],
  ["natural", "\\natural", 9838]
];
var DEFINITIONS_SYMBOLS = [
  ...SYMBOLS.map(([symbol2, latex, _codepoint]) => {
    return {
      kind: "symbol",
      name: symbol2,
      latexTrigger: [latex],
      parse: symbol2
    };
  }),
  ...SYMBOLS.map(([symbol2, _latex, codepoint]) => {
    return {
      kind: "symbol",
      latexTrigger: [String.fromCodePoint(codepoint)],
      parse: symbol2
    };
  })
];
var DEFINITIONS_COMPLEX = [
  {
    name: "Real",
    kind: "function",
    latexTrigger: ["\\Re"]
  },
  {
    name: "Imaginary",
    kind: "function",
    latexTrigger: ["\\Im"]
  },
  {
    name: "Argument",
    kind: "function",
    latexTrigger: ["\\arg"]
  },
  {
    name: "Conjugate",
    latexTrigger: ["^", "\\star"],
    kind: "postfix"
  }
];
var DEFINITIONS_STATISTICS = [
  {
    name: "Mean",
    kind: "function",
    identifierTrigger: "mean"
  },
  {
    name: "Median",
    kind: "function",
    identifierTrigger: "median"
  },
  {
    name: "StandarDeviation",
    kind: "function",
    identifierTrigger: "stddev"
  },
  {
    latexTrigger: ["\\bar"],
    kind: "expression",
    parse: (parser, _until) => {
      var _a;
      const expr = (_a = parser.parseGroup()) != null ? _a : parser.parseToken();
      if (!expr || !symbol(expr))
        return null;
      return ["Mean", expr];
    }
  }
];
var DEFAULT_DELIMITER = {
  "(": "(",
  ")": ")",
  "[": "\\lbrack",
  "]": "\\rbrack",
  "{": "\\lbrace",
  "}": "\\rbrace",
  "<": "\\langle",
  ">": "\\rangle",
  "|": "\\vert",
  "||": "\\Vert",
  "\\lceil": "\\lceil",
  "\\lfloor": "\\lfloor",
  "\\rceil": "\\rceil",
  "\\rfloor": "\\rfloor"
};
function addEntry(result, entry, onError) {
  const indexedEntry = makeIndexedEntry(entry, onError);
  if (indexedEntry === null)
    return;
  const kind = "kind" in entry ? entry.kind : "expression";
  const latexTrigger = indexedEntry.latexTrigger;
  if (typeof latexTrigger === "string")
    result.lookahead = Math.max(result.lookahead, countTokens(latexTrigger));
  const tokensTrigger = tokenize(latexTrigger != null ? latexTrigger : "", []);
  if ((latexTrigger == null ? void 0 : latexTrigger[1]) === "\\prime")
    ;
  if (tokensTrigger.length === 2 && /[_^]/.test(tokensTrigger[0]) && tokensTrigger[1] !== "<{>" && kind !== "function" && kind !== "environment" && kind !== "matchfix") {
    let parse = entry.parse;
    if (!parse && entry.name) {
      if (kind === "postfix" || kind === "prefix")
        parse = (_parser, expr) => [entry.name, expr];
      else
        parse = entry.name;
    }
    addEntry(
      result,
      {
        ...entry,
        kind,
        name: void 0,
        serialize: void 0,
        parse,
        latexTrigger: [tokensTrigger[0], "<{>", tokensTrigger[1], "<}>"]
      },
      onError
    );
  }
  result.defs.push(indexedEntry);
  if (indexedEntry.name !== void 0) {
    if (result.ids.has(indexedEntry.name)) {
      onError({
        severity: "warning",
        message: [
          "invalid-dictionary-entry",
          indexedEntry.name,
          "Duplicate definition. The name (MathJSON identifier) must be unique, but triggers can be shared by multiple definitions."
        ]
      });
    }
    result.ids.set(indexedEntry.name, indexedEntry);
  }
}
function indexLatexDictionary(dic, onError) {
  const result = {
    lookahead: 1,
    ids: /* @__PURE__ */ new Map(),
    defs: []
  };
  for (const entry of dic)
    addEntry(result, entry, onError);
  return result;
}
function makeIndexedEntry(entry, onError) {
  var _a, _b, _c, _d;
  if (!isValidEntry(entry, onError))
    return null;
  const result = {
    kind: "kind" in entry ? entry.kind : "expression"
  };
  let tokensTrigger = null;
  if ("latexTrigger" in entry) {
    if (typeof entry.latexTrigger === "string")
      tokensTrigger = tokenize(entry.latexTrigger, []);
    else
      tokensTrigger = entry.latexTrigger;
  }
  let idTrigger = null;
  if ("identifierTrigger" in entry) {
    idTrigger = entry.identifierTrigger;
  }
  if (tokensTrigger !== null)
    result.latexTrigger = tokensToString(tokensTrigger);
  if (idTrigger !== null)
    result.identifierTrigger = idTrigger;
  if (entry.name) {
    result.name = entry.name;
    result.serialize = makeSerializeHandler(entry, tokensTrigger, idTrigger);
  }
  if (result.kind === "matchfix" && isMatchfixEntry(entry)) {
    result.openDelimiter = entry.openTrigger;
    result.closeDelimiter = entry.closeTrigger;
  }
  if (result.kind === "symbol" && isSymbolEntry(entry)) {
    result.precedence = (_a = entry.precedence) != null ? _a : 1e4;
  }
  if ((result.kind === "prefix" || result.kind === "postfix") && (isPrefixEntry(entry) || isPostfixEntry(entry))) {
    if (tokensTrigger && (tokensTrigger[0] === "^" || tokensTrigger[0] === "_")) {
      result.precedence = 720;
      /* @__PURE__ */ console.assert(
        entry.precedence === void 0,
        "'precedence' is fixed and cannot be modified with ^ and _ triggers"
      );
    } else
      result.precedence = (_b = entry.precedence) != null ? _b : 1e4;
  }
  if (result.kind === "infix" && isInfixEntry(entry)) {
    /* @__PURE__ */ console.assert(
      !tokensTrigger || tokensTrigger[0] !== "^" && tokensTrigger[0] !== "_" || !entry.associativity || entry.associativity === "non"
    );
    result.associativity = (_c = entry.associativity) != null ? _c : "non";
    result.precedence = (_d = entry.precedence) != null ? _d : 1e4;
  }
  const parse = makeParseHandler(entry, tokensTrigger, idTrigger);
  if (parse)
    result.parse = parse;
  return result;
}
function makeSerializeHandler(entry, latexTrigger, idTrigger) {
  var _a, _b, _c, _d;
  if (typeof entry.serialize === "function")
    return entry.serialize;
  const kind = (_a = entry["kind"]) != null ? _a : "expression";
  if (kind === "environment") {
    const envName = (_c = (_b = entry["identifierTrigger"]) != null ? _b : entry.name) != null ? _c : "unknown";
    return (serializer, expr) => joinLatex([
      `\\begin{${envName}}`,
      serializer.serialize(op(expr, 1)),
      `\\end{${envName}}`
    ]);
  }
  if (isMatchfixEntry(entry)) {
    const openDelim = typeof entry.openTrigger === "string" ? DEFAULT_DELIMITER[entry.openTrigger] : tokensToString(entry["openDelimiter"]);
    const closeDelim = typeof entry.closeTrigger === "string" ? DEFAULT_DELIMITER[entry.closeTrigger] : tokensToString(entry["closeDelimiter"]);
    return (serializer, expr) => joinLatex([openDelim, serializer.serialize(op(expr, 1)), closeDelim]);
  }
  let latex = entry.serialize;
  if (latex === void 0 && latexTrigger)
    latex = tokensToString(latexTrigger);
  if (latex) {
    if (kind === "postfix")
      return (serializer, expr) => joinLatex([serializer.serialize(op(expr, 1)), latex]);
    if (kind === "prefix")
      return (serializer, expr) => joinLatex([latex, serializer.serialize(op(expr, 1))]);
    if (kind === "infix") {
      return (serializer, expr) => {
        var _a2;
        return joinLatex(
          ((_a2 = ops(expr)) != null ? _a2 : []).flatMap(
            (val, i) => i < nops(expr) - 1 ? [serializer.serialize(val), latex] : [serializer.serialize(val)]
          )
        );
      };
    }
    return (serializer, expr) => head(expr) ? joinLatex([latex, serializer.wrapArguments(expr)]) : latex;
  }
  const id = (_d = idTrigger != null ? idTrigger : entry.name) != null ? _d : "unknown";
  if (kind === "postfix")
    return (serializer, expr) => joinLatex([
      serializer.serialize(op(expr, 1)),
      serializer.serializeSymbol(id)
    ]);
  if (kind === "prefix")
    return (serializer, expr) => joinLatex([
      serializer.serializeSymbol(id),
      serializer.serialize(op(expr, 1))
    ]);
  if (kind === "infix")
    return (serializer, expr) => joinLatex([
      serializer.serialize(op(expr, 1)),
      serializer.serializeSymbol(id),
      serializer.serialize(op(expr, 2))
    ]);
  return (serializer, expr) => head(expr) ? joinLatex([
    serializer.serializeSymbol(id),
    serializer.wrapArguments(expr)
  ]) : serializer.serializeSymbol(id);
}
function makeParseHandler(entry, latexTrigger, idTrigger) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;
  if ("parse" in entry && typeof entry.parse === "function")
    return entry.parse;
  const kind = "kind" in entry ? entry.kind : "expression";
  if (kind === "environment") {
    const envName = (_b = (_a = entry.parse) != null ? _a : entry.name) != null ? _b : idTrigger;
    if (envName)
      return (parser, _until) => {
        const array = parser.parseTabular();
        if (array === null)
          return null;
        return [envName, ["List", array.map((row) => ["List", ...row])]];
      };
  }
  if (kind === "function") {
    const fnName = (_d = (_c = entry.parse) != null ? _c : entry.name) != null ? _d : idTrigger;
    if (fnName)
      return (parser, until) => {
        const args = parser.parseArguments("enclosure", until);
        return args === null ? fnName : [fnName, ...args];
      };
  }
  if (kind === "symbol") {
    const symName = (_f = (_e = entry.parse) != null ? _e : entry.name) != null ? _f : idTrigger;
    if (symName)
      return (_parser, _terminator) => symName;
  }
  if (kind === "prefix") {
    const h = (_h = (_g = entry.parse) != null ? _g : entry.name) != null ? _h : idTrigger;
    if (h) {
      const prec = (_i = entry["precedence"]) != null ? _i : 1e4;
      return (parser, until) => {
        const rhs = parser.parseExpression({
          ...until != null ? until : [],
          minPrec: prec
        });
        return rhs === null ? null : [h, rhs];
      };
    }
  }
  if (kind === "postfix") {
    const h = (_j = entry.parse) != null ? _j : entry.name;
    if (h)
      return (_parser, lhs) => lhs === null ? null : [h, lhs];
  }
  if (kind === "infix") {
    if (/[_^]/.test((_k = latexTrigger == null ? void 0 : latexTrigger[0]) != null ? _k : "")) {
      const h2 = (_l = entry.name) != null ? _l : entry.parse;
      return (_parser, arg) => [
        h2,
        missingIfEmpty(op(arg, 1)),
        missingIfEmpty(op(arg, 2))
      ];
    }
    const h = (_n = (_m = entry.parse) != null ? _m : entry.name) != null ? _n : idTrigger;
    const prec = (_o = entry["precedence"]) != null ? _o : 1e4;
    const associativity = (_p = entry["associativity"]) != null ? _p : "non";
    if (h)
      return (parser, lhs, until) => {
        if (lhs === null)
          return null;
        if (prec < until.minPrec)
          return null;
        const rhs = missingIfEmpty(
          parser.parseExpression({ ...until, minPrec: prec })
        );
        return typeof h === "string" ? applyAssociativeOperator(h, lhs, rhs, associativity) : [h, lhs, rhs];
      };
  }
  if (kind === "matchfix") {
    const h = (_q = entry.parse) != null ? _q : entry.name;
    if (h)
      return (_parser, body) => {
        if (body === null || isEmptySequence(body))
          return null;
        return [h, body];
      };
  }
  if (kind === "expression") {
    const parseResult = (_s = (_r = entry.parse) != null ? _r : entry.name) != null ? _s : idTrigger;
    if (parseResult)
      return () => parseResult;
  }
  if ("parse" in entry) {
    const parseResult = entry.parse;
    return () => parseResult;
  }
  return void 0;
}
function isValidEntry(entry, onError) {
  var _a, _b, _c;
  let subject = (_c = (_b = (_a = entry.name) != null ? _a : entry["latexTrigger"]) != null ? _b : entry["identifierTrigger"]) != null ? _c : entry["openDelimiter"];
  if (!subject) {
    try {
      subject = JSON.stringify(entry);
    } catch (e) {
      subject = "???";
    }
  }
  if (Array.isArray(subject))
    subject = tokensToString(subject);
  if ("trigger" in entry) {
    onError({
      severity: "warning",
      message: [
        "invalid-dictionary-entry",
        subject,
        `The 'trigger' property is deprecated. Use 'latexTrigger' or 'identifierTrigger' instead`
      ]
    });
  }
  if ("kind" in entry && ![
    "expression",
    "symbol",
    "function",
    "infix",
    "postfix",
    "prefix",
    "matchfix",
    "environment"
  ].includes(entry.kind)) {
    onError({
      severity: "warning",
      message: [
        "invalid-dictionary-entry",
        subject,
        `The 'kind' property must be one of 'expression', 'symbol', 'function', 'infix', 'postfix', 'prefix', 'matchfix', 'environment'`
      ]
    });
  }
  if (entry.serialize !== void 0 && !entry.name) {
    onError({
      severity: "warning",
      message: [
        "invalid-dictionary-entry",
        subject,
        `A 'name' property must be provided if a 'serialize' handler is provided`
      ]
    });
    return false;
  }
  if ("identifierTrigger" in entry) {
    if (typeof entry.identifierTrigger !== "string" || !isValidIdentifier(entry.identifierTrigger)) {
      onError({
        severity: "warning",
        message: [
          "invalid-dictionary-entry",
          subject,
          `The 'identifierTrigger' property must be a valid identifier`
        ]
      });
    }
  }
  if ("name" in entry) {
    if (typeof entry.name !== "string") {
      if (entry.name !== void 0)
        onError({
          severity: "warning",
          message: [
            "invalid-dictionary-entry",
            subject,
            `The 'name' property must be a string`
          ]
        });
    } else if (!isValidIdentifier(entry.name)) {
      onError({
        severity: "warning",
        message: [
          "invalid-dictionary-entry",
          entry.name,
          `The 'name' property must be a valid identifier`
        ]
      });
    }
  }
  if (isMatchfixEntry(entry)) {
    if ("latexTrigger" in entry || "identifierTrigger" in isPrefixEntry) {
      onError({
        severity: "warning",
        message: [
          "invalid-dictionary-entry",
          subject,
          `'matchfix' operators use a 'openDelimiter' and 'closeDelimiter' instead of a 'latexTrigger' or 'identifierTrigger'. `
        ]
      });
      return false;
    }
    if (!entry.openTrigger || !entry.closeTrigger) {
      onError({
        severity: "warning",
        message: [
          "invalid-dictionary-entry",
          subject,
          "Expected `openDelimiter` and a `closeDelimiter` for matchfix operator"
        ]
      });
      return false;
    }
    if (typeof entry.openTrigger !== typeof entry.closeTrigger) {
      onError({
        severity: "warning",
        message: [
          "invalid-dictionary-entry",
          subject,
          "Expected `openDelimiter` and `closeDelimiter` to both be strings or array of LatexToken"
        ]
      });
      return false;
    }
  }
  if (isInfixEntry(entry) || isPostfixEntry(entry) || isPrefixEntry(entry)) {
    if (Array.isArray(entry.latexTrigger) && (entry.latexTrigger[0] === "_" || entry.latexTrigger[0] === "^") || typeof entry.latexTrigger === "string" && (entry.latexTrigger.startsWith("^") || entry.latexTrigger.startsWith("_"))) {
      if (entry.precedence !== void 0 || entry["associativity"] !== void 0) {
        onError({
          severity: "warning",
          message: [
            "invalid-dictionary-entry",
            subject,
            `Unexpected "precedence" or "associativity" for superscript/subscript operator`
          ]
        });
        return false;
      }
    } else if (entry.precedence === void 0) {
      onError({
        severity: "warning",
        message: [
          "invalid-dictionary-entry",
          subject,
          `Expected a "precedence" for ${entry.kind} operator`
        ]
      });
      return false;
    }
  } else {
    if (entry["associativity"] !== void 0) {
      onError({
        severity: "warning",
        message: [
          "invalid-dictionary-entry",
          subject,
          'Unexpected "associativity" operator'
        ]
      });
      return false;
    }
  }
  if (!isMatchfixEntry(entry) && !isEnvironmentEntry(entry)) {
    if (!entry.latexTrigger && !entry.identifierTrigger && !entry.name) {
      onError({
        severity: "warning",
        message: [
          "invalid-dictionary-entry",
          subject,
          `Expected a 'name', a 'latexTrigger' or a 'identifierTrigger'`
        ]
      });
      return false;
    }
  }
  if (entry["parse"] === void 0 && entry.name === void 0) {
    onError({
      severity: "warning",
      message: [
        "invalid-dictionary-entry",
        subject,
        `Expected a 'parse' or 'name'`
      ]
    });
    return false;
  }
  return true;
}
var DEFAULT_LATEX_DICTIONARY = {
  algebra: DEFINITIONS_ALGEBRA,
  arithmetic: DEFINITIONS_ARITHMETIC,
  calculus: DEFINITIONS_CALCULUS,
  complex: DEFINITIONS_COMPLEX,
  core: DEFINITIONS_CORE,
  logic: DEFINITIONS_LOGIC,
  relop: DEFINITIONS_INEQUALITIES,
  other: DEFINITIONS_OTHERS,
  physics: [
    {
      name: "mu0",
      kind: "symbol",
      latexTrigger: "\\mu_0"
    }
  ],
  sets: DEFINITIONS_SETS,
  statistics: DEFINITIONS_STATISTICS,
  symbols: DEFINITIONS_SYMBOLS,
  trigonometry: DEFINITIONS_TRIGONOMETRY
};
var IDENTIFIER_PREFIX = {
  // Those are "grouping" prefix that also specify spacing
  // around the symbol. We ignore the spacing, though.
  "\\mathord": "",
  "\\mathop": "",
  "\\mathbin": "",
  "\\mathrel": "",
  "\\mathopen": "",
  "\\mathclose": "",
  "\\mathpunct": "",
  "\\mathinner": "",
  // This is the preferred way to specify an identifier
  // it defines both spacing and font. By default, identifiers
  // are wrapper with `\\operatorname{}`.
  "\\operatorname": "",
  // These styling commands are used to change the font of an identifier
  // They may be problematic, as adjacent identifiers may be merged
  // into a single identifier when used in editors, such a MathLive.
  // For example `\mathrm{speed}\mathrm{sound}` can be confused with `\mathrm{speedsound}`
  "\\mathrm": "_upright",
  "\\mathit": "_italic",
  "\\mathbf": "_bold",
  "\\mathscr": "_script",
  "\\mathcal": "_calligraphic",
  "\\mathfrak": "_fraktur",
  "\\mathsf": "_sansserif",
  "\\mathtt": "_monospace",
  "\\mathbb": "_doublestruck"
};
var IDENTIFIER_MODIFIER = {
  "\\mathring": "_ring",
  "\\hat": "_hat",
  "\\tilde": "_tilde",
  "\\vec": "_vec",
  "\\overline": "_bar",
  "\\underline": "_underbar",
  "\\dot": "_dot",
  "\\ddot": "_ddot",
  "\\dddot": "_dddot",
  "\\ddddot": "_ddddot",
  "\\acute": "_acute",
  "\\grave": "_grave",
  "\\breve": "_breve",
  "\\check": "_check"
};
function parseIdentifierToken(parser, options) {
  var _a;
  if (parser.atEnd)
    return null;
  const token = parser.peek;
  let special = {
    "\\_": "_",
    "\\#": "hash"
  }[token];
  if (!special && !options.toplevel) {
    special = {
      "+": "plus",
      "-": "minus",
      "\\plusmn": "pm",
      "\\pm": "pm",
      "\\ast": "ast",
      "\\dag": "dag",
      "\\ddag": "ddag",
      "\\bot": "bottom",
      "\\top": "top",
      "\\bullet": "bullet",
      "\\cir": "circle",
      "\\diamond": "diamond",
      "\\times": "times",
      "\\square": "square",
      "\\star": "star"
    }[token];
  }
  if (special) {
    parser.nextToken();
    return special;
  }
  const i = SYMBOLS.findIndex((x) => x[1] === token);
  if (i >= 0) {
    parser.nextToken();
    return SYMBOLS[i][0];
  }
  return (_a = parser.matchChar()) != null ? _a : parser.nextToken();
}
function parseIdentifierBody(parser) {
  var _a;
  let id = matchPrefixedIdentifier(parser);
  const start = parser.index;
  const prefix = (_a = IDENTIFIER_MODIFIER[parser.peek]) != null ? _a : null;
  if (prefix) {
    parser.nextToken();
    if (!parser.match("<{>")) {
      parser.index = start;
      return null;
    }
    const body = parseIdentifierBody(parser);
    if (body === null || !parser.match("<}>")) {
      parser.index = start;
      return null;
    }
    id = `${body}${prefix}`;
  }
  if (id === null) {
    id = "";
    while (!parser.atEnd) {
      const token = parser.peek;
      if (token === "<}>" || token === "_" || token === "^")
        break;
      const next = parseIdentifierToken(parser, { toplevel: false });
      if (next === null) {
        parser.index = start;
        return null;
      }
      id += next;
    }
    while (!parser.atEnd && /\d/.test(parser.peek))
      id += parser.nextToken();
  }
  while (!parser.atEnd) {
    if (parser.match("\\degree"))
      id += "_deg";
    else if (parser.matchAll(["^", "\\prime"]))
      id += "_prime";
    else if (parser.matchAll(["^", "<{>", "\\prime", "<}>"]))
      id += "_prime";
    else if (parser.matchAll(["^", "<{>", "\\doubleprime", "<}>"]))
      id += "_dprime";
    else if (parser.matchAll(["^", "<{>", "\\prime", "\\prime", "<}>"]))
      id += "_dprime";
    else
      break;
  }
  const sups = [];
  const subs2 = [];
  while (!parser.atEnd) {
    if (parser.match("_")) {
      const hasBrace = parser.match("<{>");
      const sub2 = parseIdentifierBody(parser);
      if (hasBrace && !parser.match("<}>") || sub2 === null) {
        parser.index = start;
        return null;
      }
      subs2.push(sub2);
    } else if (parser.match("^")) {
      const hasBrace = parser.match("<{>");
      const sup = parseIdentifierBody(parser);
      if (hasBrace && !parser.match("<}>") || sup === null) {
        parser.index = start;
        return null;
      }
      sups.push(sup);
    } else
      break;
  }
  if (sups.length > 0)
    id += "__" + sups.join("");
  if (subs2.length > 0)
    id += "_" + subs2.join("");
  return id;
}
function matchPrefixedIdentifier(parser) {
  var _a, _b;
  const start = parser.index;
  const prefix = (_a = IDENTIFIER_PREFIX[parser.peek]) != null ? _a : null;
  if (prefix === null)
    return null;
  parser.nextToken();
  if (parser.match("<{>")) {
    let body = "";
    const digit = (_b = {
      0: "zero",
      1: "one",
      2: "two",
      3: "three",
      4: "four",
      5: "five",
      6: "six",
      7: "seven",
      8: "eight",
      9: "nine"
    }[parser.peek]) != null ? _b : "";
    if (digit) {
      body = digit;
      parser.nextToken();
    }
    body += parseIdentifierBody(parser);
    if (body === null || !parser.match("<}>")) {
      parser.index = start;
      return null;
    }
    if (prefix === "_upright" && body.length > 1)
      return body;
    return body + prefix;
  }
  parser.index = start;
  return null;
}
function parseInvalidIdentifier(parser) {
  const start = parser.index;
  const id = matchPrefixedIdentifier(parser);
  if (id === null || isValidIdentifier(id)) {
    parser.index = start;
    return null;
  }
  return parser.error(
    ["invalid-identifier", { str: validateIdentifier(id) }],
    start
  );
}
function parseIdentifier(parser) {
  if (/^[a-zA-Z]$/.test(parser.peek) || /^\p{XIDS}$/u.test(parser.peek))
    return parser.nextToken();
  const start = parser.index;
  let id = matchPrefixedIdentifier(parser);
  if (!id) {
    id = "";
    while (!parser.atEnd && ONLY_EMOJIS.test(id + parser.peek))
      id += parser.nextToken();
    if (!id)
      id = null;
  }
  id != null ? id : id = parseIdentifierToken(parser, { toplevel: true });
  if (id) {
    id = id.normalize();
    if (isValidIdentifier(id))
      return id;
  }
  parser.index = start;
  return null;
}
var DELIMITER_SHORTHAND = {
  "(": ["\\lparen", "("],
  ")": ["\\rparen", ")"],
  "[": ["\\lbrack"],
  "]": ["\\rbrack"],
  "<": ["<", "\\langle"],
  ">": [">", "\\rangle"],
  "{": ["\\{", "\\lbrace"],
  "}": ["\\}", "\\rbrace"],
  ":": [":", "\\colon"],
  "|": ["|", "\\|", "\\lvert", "\\rvert"],
  //special: '\lvert` when open, `\rvert` when close
  "||": ["||", "\\Vert", "\\lVert", "\\rVert"],
  // special: `\lVert` when open, `\rVert` when close
  "\\lfloor": ["\\lfloor"],
  "\\rfloor": ["\\rfloor"],
  "\\lceil": ["\\lceil"],
  "\\rceil": ["\\rceil"],
  "\\ulcorner": ["\\ulcorner"],
  "\\urcorner": ["\\urcorner"],
  "\\llcorner": ["\\llcorner"],
  "\\lrcorner": ["\\lrcorner"],
  "\\lgroup": ["\\lgroup"],
  "\\rgroup": ["\\rgroup"],
  "\\lmoustache": ["\\lmoustache"],
  "\\rmoustache": ["\\rmoustache"]
};
var OPEN_DELIMITER_PREFIX = {
  "\\left": "\\right",
  "\\bigl": "\\bigr",
  "\\Bigl": "\\Bigr",
  "\\biggl": "\\biggr",
  "\\Biggl": "\\Biggr",
  "\\big": "\\big",
  "\\Big": "\\Big",
  "\\bigg": "\\bigg",
  "\\Bigg": "\\Bigg"
};
var CLOSE_DELIMITER = {
  "(": ")",
  "[": "]",
  "\\{": "\\}",
  "\\lbrace": "\\rbrace",
  "\\lparen": "\\rparen",
  "\\langle": "\\rangle",
  "\\lfloor": "\\rfloor",
  "\\lceil": "\\rceil",
  "\\vert": "\\vert",
  "\\lvert": "\\rvert",
  "\\Vert": "\\Vert",
  "\\lVert": "\\rVert",
  "\\lbrack": "\\rbrack",
  "\\ulcorner": "\\urcorner",
  "\\llcorner": "\\lrcorner",
  "\\lgroup": "\\rgroup",
  "\\lmoustache": "\\rmoustache"
};
var DEFAULT_LATEX_NUMBER_OPTIONS = {
  precision: 6,
  // with machine numbers, up to 15 assuming 2^53 bits floating points
  positiveInfinity: "\\infty",
  negativeInfinity: "-\\infty",
  notANumber: "\\operatorname{NaN}",
  decimalMarker: ".",
  // Use `{,}` for comma as a decimal marker
  groupSeparator: "\\,",
  // for thousands, etc...
  exponentProduct: "\\cdot",
  beginExponentMarker: "10^{",
  // could be 'e'
  endExponentMarker: "}",
  notation: "auto",
  truncationMarker: "\\ldots",
  beginRepeatingDigits: "\\overline{",
  endRepeatingDigits: "}",
  imaginaryUnit: "\\imaginaryI",
  avoidExponentsInRange: [-7, 20]
};
var DEFAULT_PARSE_LATEX_OPTIONS = {
  applyInvisibleOperator: "auto",
  skipSpace: true,
  parseArgumentsOfUnknownLatexCommands: true,
  parseNumbers: true,
  parseUnknownIdentifier: (id, parser) => {
    var _a;
    return ((_a = parser.computeEngine) == null ? void 0 : _a.lookupFunction(id)) !== void 0 ? "function" : "symbol";
  },
  preserveLatex: false
};
var _Parser = class {
  constructor(tokens, options, dictionary2, computeEngine) {
    this.index = 0;
    this._boundaries = [];
    this._lastPeek = "";
    this._peekCounter = 0;
    this._tokens = tokens;
    this.options = {
      ...DEFAULT_LATEX_NUMBER_OPTIONS,
      ...DEFAULT_PARSE_LATEX_OPTIONS,
      ...options
    };
    this._dictionary = dictionary2;
    this.computeEngine = computeEngine;
    this._positiveInfinityTokens = tokenize(this.options.positiveInfinity, []);
    this._negativeInfinityTokens = tokenize(this.options.negativeInfinity, []);
    this._notANumberTokens = tokenize(this.options.notANumber, []);
    this._decimalMarkerTokens = tokenize(this.options.decimalMarker, []);
    this._groupSeparatorTokens = tokenize(this.options.groupSeparator, []);
    this._exponentProductTokens = tokenize(this.options.exponentProduct, []);
    this._beginExponentMarkerTokens = tokenize(
      this.options.beginExponentMarker,
      []
    );
    this._endExponentMarkerTokens = tokenize(
      this.options.endExponentMarker,
      []
    );
    this._truncationMarkerTokens = tokenize(this.options.truncationMarker, []);
    this._beginRepeatingDigitsTokens = tokenize(
      this.options.beginRepeatingDigits,
      []
    );
    this._endRepeatingDigitsTokens = tokenize(
      this.options.endRepeatingDigits,
      []
    );
    this._imaginaryNumberTokens = tokenize(this.options.imaginaryUnit, []);
  }
  updateOptions(opt) {
    for (const [k, v] of Object.entries(opt))
      if (k in this.options) {
        this.options[k] = v;
        if (typeof v === "string") {
          if (k === "positiveInfinity")
            this._positiveInfinityTokens = tokenize(v, []);
          if (k === "negativeInfinity")
            this._negativeInfinityTokens = tokenize(v, []);
          if (k === "notANumber")
            this._notANumberTokens = tokenize(v, []);
          if (k === "decimalMarker")
            this._decimalMarkerTokens = tokenize(v, []);
          if (k === "groupSeparator")
            this._groupSeparatorTokens = tokenize(v, []);
          if (k === "exponentProduct")
            this._exponentProductTokens = tokenize(v, []);
          if (k === "beginExponentMarker")
            this._beginExponentMarkerTokens = tokenize(v, []);
          if (k === "endExponentMarker")
            this._endExponentMarkerTokens = tokenize(v, []);
          if (k === "truncationMarker")
            this._truncationMarkerTokens = tokenize(v, []);
          if (k === "beginRepeatingDigits")
            this._beginRepeatingDigitsTokens = tokenize(v, []);
          if (k === "endRepeatingDigits")
            this._endRepeatingDigitsTokens = tokenize(v, []);
          if (k === "imaginaryNumber")
            this._imaginaryNumberTokens = tokenize(v, []);
        }
      } else
        throw Error(`Unexpected option "${k}"`);
  }
  get atEnd() {
    return this.index >= this._tokens.length;
  }
  get peek() {
    const peek = this._tokens[this.index];
    if (peek === this._lastPeek)
      this._peekCounter += 1;
    else
      this._peekCounter = 0;
    if (this._peekCounter >= 1024) {
      console.error(
        `Infinite loop detected while parsing "${this.latex(0)}" at "${this._lastPeek}" (index ${this.index})`
      );
      throw new Error(
        `Infinite loop detected while parsing "${this.latex(0)}" at ${this._lastPeek} (index ${this.index})`
      );
    }
    this._lastPeek = peek;
    return peek;
  }
  nextToken() {
    return this._tokens[this.index++];
  }
  /**
   * Return true if
   * - at end of the token stream
   * - the `t.condition` function returns true
   * Note: the `minPrec` condition is not checked. It should be checked separately.
   */
  atTerminator(t) {
    var _a;
    return this.atBoundary || ((_a = (t == null ? void 0 : t.condition) && t.condition(this)) != null ? _a : false);
  }
  /**
   * True if the current token matches any of the boundaries we are
   * waiting for.
   */
  get atBoundary() {
    if (this.atEnd)
      return true;
    const start = this.index;
    for (const boundary of this._boundaries) {
      if (this.matchAll(boundary.tokens)) {
        this.index = start;
        return true;
      }
    }
    return false;
  }
  addBoundary(boundary) {
    this._boundaries.push({ index: this.index, tokens: boundary });
  }
  removeBoundary() {
    this._boundaries.pop();
  }
  matchBoundary() {
    const currentBoundary = this._boundaries[this._boundaries.length - 1];
    const match2 = currentBoundary && this.matchAll(currentBoundary.tokens);
    if (match2)
      this._boundaries.pop();
    return match2;
  }
  boundaryError(msg) {
    const currentBoundary = this._boundaries[this._boundaries.length - 1];
    this._boundaries.pop();
    return this.error(msg, currentBoundary.index);
  }
  latex(start, end) {
    return tokensToString(this._tokens.slice(start, end));
  }
  latexAhead(n) {
    return this.latex(this.index, this.index + n);
  }
  // latexBefore(): string {
  //   return this.latex(0, this.index);
  // }
  // latexAfter(): string {
  //   return this.latex(this.index);
  // }
  /**
   * Return at most `this._dictionary.lookahead` LaTeX tokens.
   *
   * The index in the returned array correspond to the number of tokens.
   * Note that since a token can be longer than one char ('\\pi', but also
   * some astral plane unicode characters), the length of the string
   * does not match that index. However, knowing the index is important
   * to know by how many tokens to advance.
   *
   * For example:
   *
   * `[empty, '\\sqrt', '\\sqrt{', '\\sqrt{2', '\\sqrt{2}']`
   *
   */
  lookAhead() {
    let n = Math.min(
      this._dictionary.lookahead,
      this._tokens.length - this.index
    );
    if (n <= 0)
      return [];
    const result = [];
    while (n > 0)
      result.push([n, this.latexAhead(n--)]);
    return result;
  }
  peekDefinitions(kind) {
    const result = [];
    const defs = [...this.getDefs(kind)];
    for (const def of defs)
      if (def.latexTrigger === "")
        result.push([def, 0]);
    for (const [n, tokens] of this.lookAhead()) {
      for (const def of defs)
        if (def.latexTrigger === tokens)
          result.push([def, n]);
    }
    for (const def of defs) {
      if (def.identifierTrigger) {
        const n = parseComplexId(this, def.identifierTrigger);
        if (n > 0)
          result.push([def, n]);
      }
    }
    return result;
  }
  /** Skip strictly `<space>` tokens.
   * To also skip `{}` see `skipSpace()`.
   * To skip visual space (e.g. `\,`) see `skipVisualSpace()`.
   */
  skipSpaceTokens() {
    while (this.match("<space>")) {
    }
  }
  /** While parsing in math mode, skip applicable spaces, which includes `{}`.
   * Do not use to skip spaces while parsing a string. See  `skipSpaceTokens()`
   * instead.
   */
  skipSpace() {
    if (!this.atEnd && this.peek === "<{>") {
      const index = this.index;
      this.nextToken();
      while (this.match("<space>")) {
      }
      if (this.nextToken() === "<}>") {
        this.skipSpace();
        return true;
      }
      this.index = index;
    }
    if (!this.options.skipSpace)
      return false;
    let result = false;
    while (this.match("<space>"))
      result = true;
    if (result)
      this.skipSpace();
    return result;
  }
  skipVisualSpace() {
    if (!this.options.skipSpace)
      return;
    this.skipSpace();
    if ([
      "\\!",
      "\\,",
      "\\:",
      "\\;",
      "\\enskip",
      "\\enspace",
      "\\space",
      "\\quad",
      "\\qquad"
    ].includes(this.peek)) {
      this.nextToken();
      this.skipVisualSpace();
    }
    this.skipSpace();
  }
  match(token) {
    if (this._tokens[this.index] === token) {
      this.index++;
      return true;
    }
    return false;
  }
  matchAll(tokens) {
    /* @__PURE__ */ console.assert(Array.isArray(tokens));
    if (tokens.length === 0)
      return false;
    let matched = true;
    let i = 0;
    do {
      matched = this._tokens[this.index + i] === tokens[i++];
    } while (matched && i < tokens.length);
    if (matched)
      this.index += i;
    return matched;
  }
  matchAny(tokens) {
    if (tokens.includes(this._tokens[this.index]))
      return this._tokens[this.index++];
    return "";
  }
  matchChar() {
    var _a;
    const index = this.index;
    let caretCount = 0;
    while (this.match("^"))
      caretCount += 1;
    if (caretCount < 2)
      this.index = index;
    if (caretCount >= 2) {
      let digits = "";
      let n = 0;
      while (n != caretCount) {
        const digit = this.matchAny([
          "0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "a",
          "b",
          "c",
          "d",
          "e",
          "f"
        ]);
        if (!digit)
          break;
        digits += digit;
        n += 1;
      }
      if (digits.length === caretCount)
        return String.fromCodePoint(Number.parseInt(digits, 16));
    } else if (this.match("\\char")) {
      let codepoint = Math.floor((_a = this.matchLatexNumber()) != null ? _a : Number.NaN);
      if (!Number.isFinite(codepoint) || codepoint < 0 || codepoint > 1114111) {
        codepoint = 10067;
      }
      return String.fromCodePoint(codepoint);
    } else if (this.match("\\unicode")) {
      this.skipSpaceTokens();
      if (this.match("<{>")) {
        const codepoint = this.matchLatexNumber();
        if (this.match("<}>") && codepoint !== null && codepoint >= 0 && codepoint <= 1114111) {
          return String.fromCodePoint(codepoint);
        }
      } else {
        const codepoint = this.matchLatexNumber();
        if (codepoint !== null && codepoint >= 0 && codepoint <= 1114111)
          return String.fromCodePoint(codepoint);
      }
    }
    this.index = index;
    return null;
  }
  /** If the next token matches the open delimiter, set a boundary with
   * the close token and return true.
   *
   * Note this method handles generic delimiters, i.e. '(' will math both
   * '(', '\left(', '\bigl(', etc...
   *
   * Note that the definitions for matchfix may need to include synonyms
   * for example:
   *
   * {
   *    openDelimiter: '(',
   *    closeDelimiter: ')'
   * }
   *
   * and
   *
   * {
   *   openDelimiter: '\\lparen',
   *   closeDelimiter: '\\rparen'
   * }
   *
   * For:
   * - '[': '\\lbrack' and '\\['
   * - ']': '\\rbrack' and '\\]'
   * - '{': '\\lbrace' and '\\}'
   * - '}': '\\rbrace' and '\\}'
   * - '<': '\\langle'
   * - '>': '\\rangle'
   * - '|': '\\vert'
   * - '||': '\\Vert'
   * - '|': '\\lvert' and '\\rvert'
   * - '||': '\\lVert' and '\\rVert'
   */
  matchDelimiter(open, close) {
    if (this.peek === "[")
      return false;
    if (Array.isArray(open)) {
      /* @__PURE__ */ console.assert(Array.isArray(close));
      if (this.matchAll(open)) {
        this.addBoundary(close);
        return true;
      }
      return false;
    }
    const start = this.index;
    const closePrefix = OPEN_DELIMITER_PREFIX[this.peek];
    if (closePrefix)
      this.nextToken();
    if (open === "||" && this.matchAll(["|", "|"])) {
      this.addBoundary(["|", "|"]);
      return true;
    }
    if (!this.match(open)) {
      this.index = start;
      return false;
    }
    this.addBoundary(closePrefix ? [closePrefix, close] : [close]);
    return true;
  }
  parseGroup() {
    const start = this.index;
    this.skipSpaceTokens();
    if (this.match("<{>")) {
      this.addBoundary(["<}>"]);
      const expr = this.parseExpression();
      this.skipSpace();
      if (this.matchBoundary())
        return expr != null ? expr : ["Sequence"];
      const from = this.index;
      while (!this.matchBoundary() && !this.atEnd)
        this.nextToken();
      const err = this.error("syntax-error", from);
      return expr ? ["Sequence", expr, err] : err;
    }
    this.index = start;
    return null;
  }
  // Some LaTeX commands (but not all) can accept an argument without braces,
  // for example `^` , `\sqrt` or `\frac`.
  // This argument will usually be a single token, but can be a sequence of
  // tokens (e.g. `\sqrt\frac12` or `\sqrt\operatorname{speed}`).
  parseToken() {
    var _a;
    const excluding = [
      ...'!"#$%&(),/;:?@[]\\`|~'.split(""),
      "\\left",
      "\\bigl"
    ];
    if (excluding.includes(this.peek))
      return null;
    if (/^[0-9]$/.test(this.peek))
      return parseInt(this.nextToken());
    const result = (_a = this.parseGenericExpression()) != null ? _a : this.parseSymbol();
    if (!result)
      return null;
    return result;
  }
  parseOptionalGroup() {
    const index = this.index;
    this.skipSpaceTokens();
    if (this.match("[")) {
      this.addBoundary(["]"]);
      const expr = this.parseExpression();
      this.skipSpace();
      if (this.matchBoundary())
        return expr;
      return this.boundaryError("expected-closing-delimiter");
    }
    this.index = index;
    return null;
  }
  /**
   * Parse an expression in a tabular format, where rows are separated by `\\`
   * and columns by `&`.
   *
   * Return rows of sparse columns: empty rows are indicated with `Nothing`,
   * and empty cells are also indicated with `Nothing`.
   */
  parseTabular() {
    var _a;
    const result = [];
    let row = [];
    let expr = null;
    while (!this.atBoundary) {
      this.skipSpace();
      if (this.match("&")) {
        row.push(expr != null ? expr : "Nothing");
        expr = null;
      } else if (this.match("\\\\") || this.match("\\cr")) {
        this.skipSpace();
        this.parseOptionalGroup();
        if (expr !== null)
          row.push(expr);
        result.push(row);
        row = [];
        expr = null;
      } else {
        const cell = [];
        let peek = this.peek;
        while (peek !== "&" && peek !== "\\\\" && peek !== "\\cr" && !this.atBoundary) {
          expr = this.parseExpression({
            minPrec: 0,
            condition: (p) => {
              const peek2 = p.peek;
              return peek2 === "&" || peek2 === "\\\\" || peek2 === "\\cr";
            }
          });
          if (expr)
            cell.push(expr);
          else {
            cell.push(["Error", ["'unexpected-token'", peek]]);
            this.nextToken();
          }
          this.skipSpace();
          peek = this.peek;
        }
        if (cell.length > 1)
          expr = ["Sequence", ...cell];
        else
          expr = (_a = cell[0]) != null ? _a : "Nothing";
      }
    }
    if (expr !== null)
      row.push(expr);
    if (row.length > 0)
      result.push(row);
    return result;
  }
  /** Parse a group as a a string, for example for `\operatorname` or `\begin` */
  parseStringGroup() {
    const start = this.index;
    while (this.match("<space>")) {
    }
    if (this.match("<{>")) {
      this.addBoundary(["<}>"]);
      const arg = this.parseStringGroupContent();
      if (this.matchBoundary())
        return arg;
      this.removeBoundary();
    }
    this.index = start;
    return null;
  }
  /** Parse an environment: `\begin{env}...\end{end}`
   */
  parseEnvironment(until) {
    var _a;
    const index = this.index;
    if (!this.match("\\begin"))
      return null;
    const name = (_a = this.parseStringGroup()) == null ? void 0 : _a.trim();
    if (!name)
      return this.error("expected-environment-name", index);
    this.addBoundary(["\\end", "<{>", ...name.split(""), "<}>"]);
    for (const def of this.getDefs("environment"))
      if (def.identifierTrigger === name) {
        const expr = def.parse(this, until);
        this.skipSpace();
        if (!this.matchBoundary())
          return this.boundaryError("unbalanced-environment");
        if (expr !== null)
          return this.decorate(expr, index);
        this.index = index;
        return null;
      }
    this.parseTabular();
    this.skipSpace();
    if (!this.matchBoundary())
      return this.boundaryError("unbalanced-environment");
    return this.error(["unknown-environment", { str: name }], index);
  }
  /** If the next token matches a `+` or `-` sign, return it and advance the index.
   * Otherwise return `''` and do not advance */
  parseOptionalSign() {
    let isNegative = !!this.matchAny(["-", "\u2212"]);
    while (this.matchAny(["+", "\uFE62"]) || this.skipSpace())
      if (this.matchAny(["-", "\u2212"]))
        isNegative = !isNegative;
    return isNegative ? "-" : "+";
  }
  parseDecimalDigits(options) {
    var _a;
    options != null ? options : options = {};
    (_a = options.withGrouping) != null ? _a : options.withGrouping = false;
    const result = [];
    let done = false;
    while (!done) {
      while (/^[0-9]$/.test(this.peek)) {
        result.push(this.nextToken());
        this.skipVisualSpace();
      }
      done = true;
      if (options.withGrouping && this.options.groupSeparator) {
        const savedIndex = this.index;
        this.skipVisualSpace();
        if (this.matchAll(this._groupSeparatorTokens)) {
          this.skipVisualSpace();
          if (/^[0-9]$/.test(this.peek))
            done = false;
          else
            this.index = savedIndex;
        }
      }
    }
    return result.join("");
  }
  parseSignedInteger(options) {
    var _a;
    options != null ? options : options = {};
    (_a = options.withGrouping) != null ? _a : options.withGrouping = false;
    const start = this.index;
    const sign2 = this.parseOptionalSign();
    const result = this.parseDecimalDigits(options);
    if (result)
      return sign2 === "-" ? "-" + result : result;
    this.index = start;
    return "";
  }
  parseExponent() {
    const start = this.index;
    if (this.matchAny(["e", "E"])) {
      const exponent = this.parseSignedInteger({ withGrouping: false });
      if (exponent)
        return "e" + exponent;
    }
    this.index = start;
    if (this.match("\\times")) {
      this.skipSpaceTokens();
      if (this.match("1") && this.match("0") && this.match("^")) {
        if (/^[0-9]$/.test(this.peek))
          return "e" + this.nextToken();
        if (this.match("<{>")) {
          this.skipSpaceTokens();
          const exponent = this.parseSignedInteger();
          this.skipSpaceTokens();
          if (this.match("<}>") && exponent)
            return "e" + exponent;
        }
      }
    }
    this.index = start;
    this.skipSpaceTokens();
    if (this.match("\\%"))
      return `e-2`;
    this.index = start;
    if (this.matchAll(this._exponentProductTokens)) {
      this.skipSpaceTokens();
      if (this.matchAll(this._beginExponentMarkerTokens)) {
        this.skipSpaceTokens();
        const exponent = this.parseSignedInteger();
        this.skipSpaceTokens();
        if (this.matchAll(this._endExponentMarkerTokens) && exponent)
          return "e" + exponent;
      }
    }
    this.index = start;
    return "";
  }
  parseRepeatingDecimal() {
    const start = this.index;
    let repeatingDecimals2 = "";
    if (this.match("(")) {
      repeatingDecimals2 = this.parseDecimalDigits();
      if (repeatingDecimals2 && this.match(")"))
        return "(" + repeatingDecimals2 + ")";
      this.index = start;
      return "";
    }
    this.index = start;
    if (this.matchAll([`\\left`, "("])) {
      repeatingDecimals2 = this.parseDecimalDigits();
      if (repeatingDecimals2 && this.matchAll([`\\right`, ")"]))
        return "(" + repeatingDecimals2 + ")";
      this.index = start;
      return "";
    }
    this.index = start;
    if (this.matchAll([`\\overline`, "<{>"])) {
      repeatingDecimals2 = this.parseDecimalDigits();
      if (repeatingDecimals2 && this.match("<}>"))
        return "(" + repeatingDecimals2 + ")";
      this.index = start;
      return "";
    }
    this.index = start;
    if (this.matchAll(this._beginRepeatingDigitsTokens)) {
      repeatingDecimals2 = this.parseDecimalDigits();
      if (repeatingDecimals2 && this.matchAll(this._endRepeatingDigitsTokens))
        return "(" + repeatingDecimals2 + ")";
      this.index = start;
      return "";
    }
    this.index = start;
    return "";
  }
  /**
   * Parse a number, with an optional sign, exponent, decimal marker,
   * repeating decimals, etc...
   */
  parseNumber() {
    if (!this.options.parseNumbers)
      return null;
    const start = this.index;
    this.skipVisualSpace();
    this.match("+");
    let result = "";
    let dotPrefix = false;
    if (this.match(".") || this.matchAll(this._decimalMarkerTokens)) {
      const peek = this.peek;
      if (peek !== "\\overline" && peek !== this._beginRepeatingDigitsTokens[0] && !/[0-9\(]/.test(peek)) {
        this.index = start;
        return null;
      }
      dotPrefix = true;
    } else {
      result = this.parseDecimalDigits({ withGrouping: true });
      if (!result) {
        this.index = start;
        return null;
      }
    }
    let hasDecimal = true;
    if (!dotPrefix && (this.match(".") || this.matchAll(this._decimalMarkerTokens)))
      result += "." + this.parseDecimalDigits({ withGrouping: true });
    else if (dotPrefix)
      result = "0." + this.parseDecimalDigits({ withGrouping: true });
    else
      hasDecimal = false;
    if (hasDecimal) {
      const repeat = this.parseRepeatingDecimal();
      if (repeat)
        result += repeat;
      else if (this.match("\\ldots") || this.matchAll(this._truncationMarkerTokens)) {
      }
    }
    this.skipVisualSpace();
    return result + this.parseExponent();
  }
  /**
   * A Latex number can be a decimal, hex or octal number.
   * It is used in some Latex commands, such as `\char`
   *
   * From TeX:8695 (scan_int):
   * > An integer number can be preceded by any number of spaces and `+' or
   * > `-' signs. Then comes either a decimal constant (i.e., radix 10), an
   * > octal constant (i.e., radix 8, preceded by '), a hexadecimal constant
   * > (radix 16, preceded by "), an alphabetic constant (preceded by `), or
   * > an internal variable.
   */
  matchLatexNumber(isInteger = true) {
    var _a, _b;
    let negative = false;
    let token = this.peek;
    while (token === "<space>" || token === "+" || token === "-") {
      if (token === "-")
        negative = !negative;
      this.nextToken();
      token = this.peek;
    }
    let radix = 10;
    let digits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    if (this.match("'")) {
      radix = 8;
      digits = ["0", "1", "2", "3", "4", "5", "6", "7"];
      isInteger = true;
    } else if (this.match('"') || this.match("x")) {
      radix = 16;
      digits = [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F"
      ];
      isInteger = true;
    } else if (this.match("`")) {
      token = this.nextToken();
      if (token) {
        if (token.startsWith("\\") && token.length === 2) {
          return (negative ? -1 : 1) * ((_a = token.codePointAt(1)) != null ? _a : 0);
        }
        return (negative ? -1 : 1) * ((_b = token.codePointAt(0)) != null ? _b : 0);
      }
      return null;
    }
    let value = "";
    while (digits.includes(this.peek)) {
      value += this.nextToken();
    }
    if (!isInteger && this.match(".")) {
      value += ".";
      while (digits.includes(this.peek)) {
        value += this.nextToken();
      }
    }
    const result = isInteger ? Number.parseInt(value, radix) : Number.parseFloat(value);
    if (Number.isNaN(result))
      return null;
    return negative ? -result : result;
  }
  parsePrefixOperator(until) {
    if (!until)
      until = { minPrec: 0 };
    if (!until.minPrec)
      until = { ...until, minPrec: 0 };
    const start = this.index;
    for (const [def, n] of this.peekDefinitions("prefix")) {
      this.index = start + n;
      const rhs = def.parse(this, until);
      if (rhs)
        return rhs;
    }
    this.index = start;
    return null;
  }
  parseInfixOperator(lhs, until) {
    until != null ? until : until = { minPrec: 0 };
    /* @__PURE__ */ console.assert(until.minPrec !== void 0);
    if (until.minPrec === void 0)
      until = { ...until, minPrec: 0 };
    const start = this.index;
    for (const [def, n] of this.peekDefinitions("infix")) {
      if (def.precedence >= until.minPrec) {
        this.index = start + n;
        const rhs = def.parse(this, lhs, until);
        if (rhs)
          return rhs;
      }
    }
    this.index = start;
    return null;
  }
  /**
   * This returns an array of arguments (as in a function application),
   * or null if there is no match.
   *
   * - 'enclosure' : will look for an argument inside an enclosure
   *   (open/close fence)
   * - 'implicit': either an expression inside a pair of `()`, or just a product
   *  (i.e. we interpret `\cos 2x + 1` as `\cos(2x) + 1`)
   *
   */
  parseArguments(kind = "enclosure", until) {
    var _a, _b;
    if (this.atTerminator(until))
      return null;
    const savedIndex = this.index;
    const group = this.parseEnclosure();
    if (kind === "enclosure") {
      if (group === null)
        return null;
      return (_a = getSequence(group)) != null ? _a : [];
    }
    if (kind === "implicit") {
      if (head(group) === "Delimiter")
        return (_b = getSequence(group)) != null ? _b : [];
      if (group !== null)
        return [group];
      const primary = this.parseExpression({ ...until, minPrec: 390 });
      return primary === null ? null : [primary];
    }
    this.index = savedIndex;
    return null;
  }
  /** If matches the normalized open delimiter, return the
   * expected closing delimiter.
   *
   * For example, if `delimiter` is `(`, it would match `\left\lparen` and
   * return `['\right', '\rparen']`, which can be matched with `matchAll()`
   *
   * If you need to match several tokens, use `matchAll()`
   *
   * @internal
   */
  matchOpenDelimiter(openDelim, closeDelim) {
    var _a;
    const index = this.index;
    const closePrefix = OPEN_DELIMITER_PREFIX[this.peek];
    if (closePrefix)
      this.nextToken();
    const alternatives = (_a = DELIMITER_SHORTHAND[openDelim]) != null ? _a : [openDelim];
    const result = closePrefix ? [closePrefix] : [];
    if (alternatives.includes("||") && this.matchAll(["|", "|"])) {
      result.push("|");
      result.push("|");
      return result;
    }
    if (!alternatives.includes(this.peek)) {
      this.index = index;
      return null;
    }
    if (CLOSE_DELIMITER[openDelim] === closeDelim) {
      result.push(CLOSE_DELIMITER[this.peek]);
    } else {
      result.push(closeDelim);
    }
    this.nextToken();
    return result;
  }
  // matchMiddleDelimiter(delimiter: '|' | ':' | LatexToken): boolean {
  //   const delimiters = MIDDLE_DELIMITER[delimiter] ?? [delimiter];
  //   if (MIDDLE_DELIMITER_PREFIX.includes(this.peek)) {
  //     const index = this.index;
  //     this.nextToken();
  //     if (delimiters.includes(this.peek)) {
  //       this.nextToken();
  //       return true;
  //     }
  //     this.index = index;
  //     return false;
  //   } else if (delimiters.include(this.peek)) {
  //     this.nextToken();
  //     return true;
  //   }
  //   return false;
  // }
  /** For error handling, when there is potentially a mismatched delimiter.
   * Return a LaTeX fragment of the expected closing delimiter
   *
   * @internal
   */
  matchEnclosureOpen() {
    const defs = this.getDefs("matchfix");
    const start = this.index;
    for (const def of defs) {
      this.index = start;
      if (Array.isArray(def.openDelimiter)) {
        if (this.matchAll(def.openDelimiter))
          return tokensToString(def.closeDelimiter);
        continue;
      }
      const closeDelimiter = this.matchOpenDelimiter(
        def.openDelimiter,
        def.closeDelimiter
      );
      if (closeDelimiter !== null)
        return tokensToString(closeDelimiter);
    }
    this.index = start;
    return null;
  }
  /**
   * Used for error handling
   * @internal */
  matchEnclosureClose() {
    const defs = this.getDefs("matchfix");
    const start = this.index;
    for (const def of defs) {
      this.index = start;
      if (Array.isArray(def.closeDelimiter)) {
        if (this.matchAll(def.closeDelimiter))
          return tokensToString(def.openDelimiter);
        continue;
      }
      this.index = start;
      let peek = this.peek;
      const prefix = Object.keys(OPEN_DELIMITER_PREFIX).find(
        (x) => OPEN_DELIMITER_PREFIX[x] === peek
      );
      if (prefix)
        this.nextToken();
      let openDelimiter = [];
      peek = this.peek;
      const matchingDelim = Object.keys(CLOSE_DELIMITER).find(
        (x) => CLOSE_DELIMITER[x] === peek
      );
      if (matchingDelim)
        openDelimiter = [matchingDelim];
      if (prefix)
        openDelimiter = [prefix, ...openDelimiter];
      if (openDelimiter.length > 0) {
        this.nextToken();
        return tokensToString(openDelimiter);
      }
    }
    this.index = start;
    return null;
  }
  /**
   * An enclosure is an opening matchfix operator, an optional expression,
   * optionally followed multiple times by a separator and another expression,
   * and finally a closing matching operator.
   */
  parseEnclosure() {
    const defs = this.getDefs("matchfix");
    const start = this.index;
    for (const def of defs) {
      this.index = start;
      if (!this.matchDelimiter(def.openDelimiter, def.closeDelimiter))
        continue;
      const bodyStart = this.index;
      this.skipSpace();
      let body = this.parseExpression();
      this.skipSpace();
      if (!this.matchBoundary()) {
        const boundary = this._boundaries[this._boundaries.length - 1].tokens;
        this.removeBoundary();
        this.index = bodyStart;
        this.skipSpace();
        body = this.parseExpression();
        this.skipSpace();
        if (!this.matchAll(boundary)) {
          if (!this.atEnd)
            continue;
          this.index = start;
          return null;
        }
      }
      const result = def.parse(this, body != null ? body : ["Sequence"]);
      if (result !== null)
        return result;
    }
    this.index = start;
    return null;
  }
  /**
   * A generic expression is used for dictionary entries that take do
   * some complex (non-standard) parsing. This includes trig functions (to
   * parse implicit arguments), and integrals (to parse the integrand and
   * limits and the "dx" terminator).
   */
  parseGenericExpression(until) {
    var _a;
    if (this.atTerminator(until))
      return null;
    const start = this.index;
    let expr = null;
    const fnDefs = (_a = this.peekDefinitions("expression")) != null ? _a : [];
    for (const [def, tokenCount] of fnDefs) {
      this.index = start + tokenCount;
      if (typeof def.parse === "function") {
        expr = def.parse(this, until);
        if (expr !== null)
          return expr;
      } else {
        return def.name;
      }
    }
    this.index = start;
    return null;
  }
  /**
   * A function is an identifier followed by postfix operators
   * (`\prime`...) and some arguments.
   */
  parseFunction(until) {
    if (this.atTerminator(until))
      return null;
    const start = this.index;
    let fn = null;
    for (const [def, tokenCount] of this.peekDefinitions("function")) {
      this.index = start + tokenCount;
      if (typeof def.parse === "function") {
        fn = def.parse(this, until);
        if (fn !== null)
          break;
      } else {
        fn = def.name;
        break;
      }
    }
    if (fn === null) {
      this.index = start;
      fn = parseIdentifier(this);
      if (!this.isFunctionHead(fn)) {
        this.index = start;
        return null;
      }
    }
    do {
      const pf = this.parsePostfixOperator(fn);
      if (pf === null)
        break;
      fn = pf;
    } while (true);
    const seq = this.isFunctionHead(fn) ? this.parseArguments() : null;
    return seq ? [fn, ...seq] : fn;
  }
  parseSymbol(until) {
    var _a, _b;
    if (this.atTerminator(until))
      return null;
    const start = this.index;
    for (const [def, tokenCount] of this.peekDefinitions("symbol")) {
      this.index = start + tokenCount;
      if (typeof def.parse === "function") {
        const result = def.parse(this, until);
        if (result)
          return result;
      } else
        return def.name;
    }
    this.index = start;
    const id = parseIdentifier(this);
    if (id === null)
      return null;
    if (((_b = (_a = this.options).parseUnknownIdentifier) == null ? void 0 : _b.call(_a, id, this)) === "symbol")
      return id;
    this.index = start;
    return null;
  }
  /**
   * Parse a sequence superfix/subfix operator, e.g. `^{*}`
   *
   * Superfix and subfix need special handling:
   *
   * - they act mostly like an infix operator, but they are commutative, i.e.
   * `x_a^b` should be parsed identically to `x^b_a`.
   *
   * - furthermore, in LaTeX `x^a^b` parses the same as `x^a{}^b`.
   *
   */
  parseSupsub(lhs) {
    var _a, _b, _c;
    /* @__PURE__ */ console.assert(lhs !== null);
    const index = this.index;
    this.skipSpace();
    const superscripts = [];
    const subscripts = [];
    let subIndex = index;
    while (this.peek === "_" || this.peek === "^") {
      if (this.match("_")) {
        subIndex = this.index;
        if (this.match("_") || this.match("^"))
          subscripts.push(this.error("syntax-error", subIndex));
        else {
          const sub2 = (_b = (_a = this.parseGroup()) != null ? _a : this.parseToken()) != null ? _b : this.parseStringGroup();
          if (sub2 === null)
            return this.error("missing", index);
          subscripts.push(sub2);
        }
      } else if (this.match("^")) {
        subIndex = this.index;
        if (this.match("_") || this.match("^"))
          superscripts.push(this.error("syntax-error", subIndex));
        else {
          const sup = (_c = this.parseGroup()) != null ? _c : this.parseToken();
          if (sup === null)
            return this.error("missing", index);
          superscripts.push(sup);
        }
      }
      subIndex = this.index;
      this.skipSpace();
    }
    if (superscripts.length === 0 && subscripts.length === 0) {
      this.index = index;
      return lhs;
    }
    let result = lhs;
    if (subscripts.length > 0) {
      const defs = [...this.getDefs("infix")].filter(
        (x) => x.latexTrigger === "_"
      );
      if (defs) {
        const arg = [
          "Subscript",
          result,
          subscripts.length === 1 ? subscripts[0] : ["List", ...subscripts]
        ];
        for (const def of defs) {
          if (typeof def.parse === "function")
            result = def.parse(this, arg, { minPrec: 0 });
          else
            result = arg;
          if (result)
            break;
        }
      }
    }
    if (superscripts.length > 0) {
      const defs = [...this.getDefs("infix")].filter(
        (x) => x.latexTrigger === "^"
      );
      if (defs) {
        const arg = [
          "Superscript",
          result,
          superscripts.length === 1 ? superscripts[0] : ["List", ...superscripts]
        ];
        for (const def of defs) {
          if (typeof def.parse === "function")
            result = def.parse(this, arg, { minPrec: 0 });
          else
            result = arg;
          if (result)
            break;
        }
      }
    }
    if (result === null)
      this.index = index;
    return result;
  }
  parsePostfixOperator(lhs, until) {
    /* @__PURE__ */ console.assert(lhs !== null);
    if (lhs === null)
      return null;
    const start = this.index;
    for (const [def, n] of this.peekDefinitions("postfix")) {
      this.index = start + n;
      const result = def.parse(this, lhs, until);
      if (result !== null)
        return result;
    }
    this.index = start;
    return null;
  }
  /** Match a string used as a LaTeX identifier, for example an environment
   * name.
   * Not suitable for general purpose text, e.g. argument of a `\text{}
   * command. See `matchChar()` instead.
   */
  parseStringGroupContent() {
    const start = this.index;
    let result = "";
    let level = 0;
    while (!this.atBoundary || level > 0) {
      const token = this.nextToken();
      if (token === "<$>" || token === "<$$>") {
        this.index = start;
        return "";
      }
      if (token === "<{>") {
        level += 1;
        result += "\\{";
      } else if (token === "<}>") {
        level -= 1;
        result += "\\}";
      } else if (token === "<space>") {
        result += " ";
      } else if (token[0] === "\\") {
        result += token;
      } else {
        result += token;
      }
    }
    return result;
  }
  /**
   * Apply an invisible operator between two expressions.
   *
   * If the `lhs` is an literal integer and the `rhs` is a literal rational
   * -> 'invisible plus'
   *
   * That is '2 3/4' -> ['Add', 2, ['Rational', 3, 4]]
   *
   * If `lhs` is a number and `rhs` is a number but not a literal -> 'invisible multiply'.
   * - 2x
   * - 2(x+1)
   * - x(x+1)
   * - f(x)g(y)
   * - 2 sin(x)
   * - 2 f(x)
   * - x f(x)
   * - (x-1)(x+1)
   * - (x+1)2 -> no
   * - x2 -> no
   * => lhs is a number, rhs is a number, but not a literal
   */
  applyInvisibleOperator(until, lhs) {
    var _a;
    if (lhs === null || this.options.applyInvisibleOperator === null || head(lhs) === "Error" || symbol(lhs) === "Nothing" || isEmptySequence(lhs) || this.atTerminator(until))
      return null;
    if (this.peekDefinitions("operator").length > 0)
      return null;
    if (this.isFunctionHead(lhs)) {
      const args = this.parseArguments("enclosure", { ...until, minPrec: 0 });
      if (args === null)
        return null;
      return [lhs, ...args];
    }
    const start = this.index;
    const rhs = this.parseExpression({ ...until, minPrec: 390 });
    if (rhs === null || symbol(rhs) === "Nothing" || isEmptySequence(rhs)) {
      this.index = start;
      return null;
    }
    if (head(rhs) === "Error")
      return applyAssociativeOperator("Sequence", lhs, rhs);
    if (typeof this.options.applyInvisibleOperator === "function")
      return this.options.applyInvisibleOperator(this, lhs, rhs);
    if (this.isFunctionHead(lhs)) {
      const seq = getSequence(rhs);
      return seq ? [lhs, ...seq] : lhs;
    }
    const lhsNumber = machineValue(lhs);
    if (lhsNumber !== null && Number.isInteger(lhsNumber)) {
      const rhsHead = head(rhs);
      if (rhsHead === "Divide" || rhsHead === "Rational") {
        const [n, d] = [machineValue(op(rhs, 1)), machineValue(op(rhs, 2))];
        if (n !== null && d !== null && n > 0 && n <= 1e3 && d > 1 && d <= 1e3 && Number.isInteger(n) && Number.isInteger(d))
          return ["Add", lhs, rhs];
      }
    }
    if (head(rhs) === "Delimiter") {
      if (head(op(rhs, 1)) === "Sequence")
        return [lhs, ...(_a = ops(op(rhs, 1))) != null ? _a : []];
      if (!op(rhs, 1) || symbol(op(rhs, 1)) === "Nothing")
        return applyAssociativeOperator(
          "Sequence",
          lhs,
          this.error("expected-expression", start)
        );
    }
    if (head(rhs) === "Sequence" || head(lhs) === "Sequence" || stringValue(lhs) !== null || stringValue(rhs) !== null || dictionary(lhs) !== null || dictionary(rhs) !== null)
      return applyAssociativeOperator("Sequence", lhs, rhs);
    return applyAssociativeOperator("Multiply", lhs, rhs);
  }
  /**
   * This is an error handling method. We've encountered a LaTeX command
   * but were not able to match it to any entry in the LaTeX dictionary,
   * or ran into it in an unexpected context (postfix operator lacking an
   * argument, for example)
   */
  parseUnexpectedLatexCommand() {
    var _a, _b;
    const start = this.index;
    let opDefs = this.peekDefinitions("operator");
    if (opDefs.length > 0) {
      opDefs = this.peekDefinitions("postfix");
      if (opDefs.length > 0) {
        const [def, n] = opDefs[0];
        this.index += n;
        if (typeof def.parse === "function") {
          const result = def.parse(this, this.error("missing", start));
          if (result)
            return result;
        }
        if (def.name)
          return [def.name, this.error("missing", start)];
        return this.error("unexpected-operator", start);
      }
      opDefs = this.peekDefinitions("prefix");
      if (opDefs.length > 0) {
        const [def, n] = opDefs[0];
        this.index += n;
        if (typeof def.parse === "function") {
          const result = def.parse(this, { minPrec: 0 });
          if (result)
            return result;
        }
        if (def.name)
          return [
            def.name,
            // @todo: pass a precedence?
            (_a = this.parseExpression()) != null ? _a : this.error("missing", start)
          ];
        return this.error("unexpected-operator", start);
      }
      opDefs = this.peekDefinitions("infix");
      if (opDefs.length > 0) {
        const [def, n] = opDefs[0];
        this.index += n;
        if (typeof def.parse === "function") {
          const result = def.parse(this, this.error("missing", start), {
            minPrec: 0
          });
          if (result)
            return result;
        }
        if (def.name)
          return [
            def.name,
            this.error("missing", start),
            (_b = this.parseExpression()) != null ? _b : this.error("missing", start)
          ];
        return this.error("unexpected-operator", start);
      }
    }
    const command = this.peek;
    if (!command || command[0] !== "\\")
      return null;
    this.nextToken();
    this.skipSpaceTokens();
    if (command === "\\end") {
      const name = this.parseStringGroup();
      if (name === null)
        return this.error("expected-environment-name", start);
      return this.error(["unbalanced-environment", { str: name }], start);
    }
    while (this.match("[")) {
      let level = 0;
      while (!this.atEnd && level === 0 && this.peek !== "]") {
        if (this.peek === "[")
          level += 1;
        if (this.peek === "]")
          level -= 1;
        this.nextToken();
      }
      this.match("]");
    }
    const index = this.index;
    this.index = start;
    const closeDelimiter = this.matchEnclosureOpen();
    if (closeDelimiter)
      return this.error(
        ["expected-close-delimiter", { str: closeDelimiter }],
        index
      );
    const openDelimiter = this.matchEnclosureClose();
    if (openDelimiter)
      return this.error(
        ["expected-open-delimiter", { str: openDelimiter }],
        start
      );
    this.index = index;
    while (this.match("<{>")) {
      let level = 0;
      while (!this.atEnd && level === 0 && this.peek !== "<}>") {
        if (this.peek === "<{>")
          level += 1;
        if (this.peek === "<}>")
          level -= 1;
        this.nextToken();
      }
      this.match("<}>");
    }
    return this.error(["unexpected-command", { str: command }], start);
  }
  /**
   * <primary> :=
   *  (<number> | <symbol> | <environment> | <matchfix-expr>)
   *    <subsup>* <postfix-operator>*
   *
   * <symbol> ::=
   *  (<symbol-id> | (<latex-command><latex-arguments>)) <arguments>
   *
   * <matchfix-expr> :=
   *  <matchfix-op-open>
   *  <expression>
   *  (<matchfix-op-separator> <expression>)*
   *  <matchfix-op-close>
   *
   */
  parsePrimary(until) {
    var _a, _b, _c;
    if (this.atBoundary)
      return null;
    if (this.atTerminator(until))
      return null;
    let result = null;
    const start = this.index;
    if (this.match("<}>"))
      return this.error("unexpected-closing-delimiter", start);
    if (this.match("<{>")) {
      result = this.parseExpression({
        minPrec: 0,
        condition: (p) => p.peek === "<}>"
      });
      if (result === null)
        return this.error("expected-expression", start);
      if (!this.match("<}>")) {
        return this.decorate(
          ["Sequence", result, this.error("expected-closing-delimiter", start)],
          start
        );
      }
    }
    if (result === null) {
      const num = this.parseNumber();
      if (num !== null)
        result = { num };
    }
    result != null ? result : result = this.parseEnclosure();
    result != null ? result : result = this.parseEnvironment(until);
    if (result === null && this.matchAll(this._positiveInfinityTokens))
      result = { num: "+Infinity" };
    if (result === null && this.matchAll(this._negativeInfinityTokens))
      result = { num: "-Infinity" };
    if (result === null && this.matchAll(this._notANumberTokens))
      result = { num: "NaN" };
    result != null ? result : result = (_c = (_b = (_a = this.parseGenericExpression(until)) != null ? _a : this.parseFunction(until)) != null ? _b : this.parseSymbol(until)) != null ? _c : parseInvalidIdentifier(this);
    if (result !== null) {
      result = this.decorate(result, start);
      let postfix = null;
      let index = this.index;
      do {
        postfix = this.parsePostfixOperator(result, until);
        result = postfix != null ? postfix : result;
        if (this.index === index && postfix !== null) {
          /* @__PURE__ */ console.assert(this.index !== index, "No token consumed");
          break;
        }
        index = this.index;
      } while (postfix !== null);
    }
    if (result !== null)
      result = this.parseSupsub(result);
    return this.decorate(result, start);
  }
  /**
   *  Parse an expression:
   *
   * <expression> ::=
   *  | <primary>
   *  | <prefix-op> <primary>
   *  | <primary> <infix-op> <expression>
   *
   * Stop when an operator of precedence less than `until.minPrec`
   * is encountered
   */
  parseExpression(until) {
    const start = this.index;
    this.skipSpace();
    if (this.atBoundary) {
      this.index = start;
      return null;
    }
    until != null ? until : until = { minPrec: 0 };
    /* @__PURE__ */ console.assert(until.minPrec !== void 0);
    if (until.minPrec === void 0)
      until = { ...until, minPrec: 0 };
    let lhs = this.parsePrefixOperator({ ...until, minPrec: 0 });
    if (lhs === null) {
      lhs = this.parsePrimary(until);
      if (head(lhs) === "Sequence" && nops(lhs) === 0)
        lhs = null;
    }
    if (lhs) {
      let done = false;
      while (!done && !this.atTerminator(until)) {
        this.skipSpace();
        let result = this.parseInfixOperator(lhs, until);
        if (result === null) {
          result = this.applyInvisibleOperator(until, lhs);
        }
        if (result !== null) {
          lhs = result;
        } else {
          done = true;
        }
      }
    }
    lhs != null ? lhs : lhs = this.parseUnexpectedLatexCommand();
    return this.decorate(lhs, start);
  }
  /**
   * Add LaTeX or other requested metadata to the expression
   */
  decorate(expr, start) {
    if (expr === null)
      return null;
    if (!this.options.preserveLatex)
      return expr;
    const latex = this.latex(start, this.index);
    if (Array.isArray(expr)) {
      expr = { latex, fn: expr };
    } else if (typeof expr === "number") {
      expr = { latex, num: Number(expr).toString() };
    } else if (typeof expr === "string") {
      expr = { latex, sym: expr };
    } else if (typeof expr === "object" && expr !== null) {
      expr.latex = latex;
    }
    return expr;
  }
  error(code, fromToken) {
    let msg;
    if (typeof code === "string") {
      /* @__PURE__ */ console.assert(!code.startsWith("'"));
      msg = { str: code };
    } else {
      /* @__PURE__ */ console.assert(!code[0].startsWith("'"));
      msg = ["ErrorCode", { str: code[0] }, ...code.slice(1)];
    }
    const latex = this.latex(fromToken, this.index);
    return latex ? ["Error", msg, ["Latex", { str: latex }]] : ["Error", msg];
  }
  isFunctionHead(expr) {
    var _a, _b;
    if (expr === null)
      return false;
    const s = symbol(expr);
    if (!s)
      return this.computeEngine.box(expr).domain.isFunction;
    if (this.computeEngine && this.computeEngine.lookupFunction(s) !== void 0)
      return true;
    if (((_b = (_a = this.options).parseUnknownIdentifier) == null ? void 0 : _b.call(_a, s, this)) === "function")
      return true;
    return false;
  }
  /** Return all defs of the specified kind */
  *getDefs(kind) {
    if (kind === "operator") {
      for (const def of this._dictionary.defs)
        if (/^prefix|infix|postfix/.test(def.kind))
          yield def;
    } else {
      for (const def of this._dictionary.defs)
        if (def.kind === kind)
          yield def;
    }
  }
};
function parseComplexId(parser, id) {
  var _a;
  const start = parser.index;
  const candidate = (_a = parseIdentifier(parser)) == null ? void 0 : _a.trim();
  if (candidate === null)
    return 0;
  const result = candidate !== id ? 0 : parser.index - start;
  parser.index = start;
  return result;
}
function formatFractionalPart(m, options) {
  const originalLength = m.length;
  const originalM = m;
  if (options.beginRepeatingDigits && options.endRepeatingDigits) {
    m = m.slice(0, -1);
    for (let i = 0; i < m.length - 16; i++) {
      const offset = m.substring(0, i);
      for (let j = 0; j < 17; j++) {
        const cycle = m.substring(i, i + j + 1);
        const times = Math.floor((m.length - offset.length) / cycle.length);
        if (times <= 3)
          break;
        if ((offset + cycle.repeat(times + 1)).startsWith(m)) {
          if (cycle === "0") {
            return offset.replace(/(\d{3})/g, "$1" + options.groupSeparator);
          }
          return offset.replace(/(\d{3})/g, "$1" + options.groupSeparator) + options.beginRepeatingDigits + cycle + options.endRepeatingDigits;
        }
      }
    }
  }
  const extraDigits = originalLength > options.precision - 1;
  m = originalM;
  if (extraDigits)
    m = m.substring(0, options.precision - 1);
  if (options.groupSeparator) {
    m = m.replace(/(\d{3})/g, "$1" + options.groupSeparator);
    if (m.endsWith(options.groupSeparator)) {
      m = m.slice(0, -options.groupSeparator.length);
    }
  }
  if (extraDigits)
    return m + options.truncationMarker;
  return m;
}
function formatExponent(exp2, options) {
  var _a;
  if (!exp2)
    return "";
  if (options.beginExponentMarker) {
    return options.beginExponentMarker + exp2 + ((_a = options.endExponentMarker) != null ? _a : "");
  }
  return "10^{" + exp2 + "}";
}
function serializeNumber(expr, options) {
  var _a;
  if (expr === null)
    return "";
  let num;
  if (typeof expr === "number" || typeof expr === "string") {
    num = expr;
  } else if (typeof expr === "object" && "num" in expr) {
    num = expr.num;
  } else
    return "";
  if (typeof num === "number") {
    if (num === Infinity)
      return options.positiveInfinity;
    else if (num === -Infinity)
      return options.negativeInfinity;
    else if (Number.isNaN(num))
      return options.notANumber;
    let result2 = void 0;
    if (options.notation === "engineering")
      result2 = serializeScientificNotationNumber(
        num.toExponential(),
        options,
        3
      );
    else if (options.notation === "scientific")
      result2 = serializeScientificNotationNumber(num.toExponential(), options);
    return result2 != null ? result2 : serializeAutoNotationNumber(num.toString(), options);
  }
  num = num.toLowerCase().replace(/[\u0009-\u000d\u0020\u00a0]/g, "");
  if (num === "infinity" || num === "+infinity")
    return options.positiveInfinity;
  else if (num === "-infinity")
    return options.negativeInfinity;
  else if (num === "nan")
    return options.notANumber;
  if (!/^[-+\.]?[0-9]/.test(num))
    return "";
  num = num.replace(/[nd]$/, "");
  if (/\([0-9]+\)/.test(num)) {
    const [_, body, repeat, trail] = (_a = num.match(/(.+)\(([0-9]+)\)(.*)$/)) != null ? _a : [];
    num = body + repeat.repeat(Math.ceil(options.precision / repeat.length)) + trail;
  }
  let sign2 = "";
  if (num[0] === "-") {
    sign2 = "-";
    num = num.substring(1);
  } else if (num[0] === "+") {
    num = num.substring(1);
  }
  while (num[0] === "0")
    num = num.substring(1);
  if (num.length === 0)
    num = "0";
  else if (num[0] === ".")
    num = "0" + num;
  let result = void 0;
  if (options.notation === "engineering")
    result = serializeScientificNotationNumber(num, options, 3);
  else if (options.notation === "scientific")
    result = serializeScientificNotationNumber(num, options);
  return sign2 + (result != null ? result : serializeAutoNotationNumber(num, options));
}
function serializeScientificNotationNumber(valString, options, expMultiple = 1) {
  var _a;
  let m = valString.match(/^(.*)[e|E]([-+]?[0-9]+)$/);
  if (!m) {
    let sign2 = "";
    if (valString[0] === "-") {
      sign2 = "-";
      valString = valString.substring(1);
    } else if (valString[0] === "+") {
      valString = valString.substring(1);
    }
    if (valString.indexOf(".") < 0) {
      if (valString.length === 1) {
        valString = sign2 + valString + "e+0";
      } else {
        valString = sign2 + valString[0] + "." + valString.slice(1) + "e+" + (valString.length - 1).toString();
      }
    } else {
      let [_, whole, fraction] = valString.match(/^(.*)\.(.*)$/);
      if (!fraction)
        fraction = "";
      while (whole.startsWith("0"))
        whole = whole.substring(1);
      if (!whole) {
        valString = sign2 + "0." + fraction + "e+0";
      } else {
        valString = sign2 + whole[0] + "." + whole.slice(1) + fraction + "e+" + (whole.length - 1).toString();
      }
    }
    m = valString.match(/^(.*)[e|E]([-+]?[0-9]+)$/);
  }
  /* @__PURE__ */ console.assert(m);
  if (!m)
    return serializeAutoNotationNumber(valString, options);
  let exponent = parseInt(m[2]);
  let mantissa = m[1];
  if (Math.abs(exponent) % expMultiple !== 0) {
    const adjust = exponent > 0 ? exponent % expMultiple : -((expMultiple + exponent) % expMultiple);
    exponent = exponent >= 0 ? exponent - adjust : exponent + adjust;
    let [_, whole, fraction] = (_a = mantissa.match(/^(.*)\.(.*)$/)) != null ? _a : [
      "",
      mantissa,
      ""
    ];
    mantissa = whole + (fraction + "00000000000000000").slice(0, Math.abs(adjust)) + "." + fraction.slice(Math.abs(adjust));
  }
  const avoid = options.avoidExponentsInRange;
  if (avoid && exponent >= avoid[0] && exponent <= avoid[1])
    return void 0;
  let fractionalPart = "";
  let wholePart = mantissa;
  m = wholePart.match(/^(.*)\.(.*)$/);
  if (m) {
    wholePart = m[1];
    fractionalPart = m[2];
  }
  const expString = exponent !== 0 ? formatExponent(Number(exponent).toString(), options) : "";
  if (options.groupSeparator) {
    wholePart = wholePart.replace(
      /\B(?=(\d{3})+(?!\d))/g,
      options.groupSeparator
    );
    fractionalPart = formatFractionalPart(fractionalPart, options);
  }
  if (fractionalPart)
    fractionalPart = options.decimalMarker + fractionalPart;
  if (!expString)
    return wholePart + fractionalPart;
  if (wholePart === "1" && !fractionalPart)
    return expString;
  return wholePart + fractionalPart + options.exponentProduct + expString;
}
function serializeAutoNotationNumber(valString, options) {
  var _a;
  let m = valString.match(/^(.*)[e|E]([-+]?[0-9]+)$/i);
  let exponent = void 0;
  if ((m == null ? void 0 : m[1]) && m[2]) {
    exponent = formatExponent(m[2], options);
  }
  let wholePart = (_a = m == null ? void 0 : m[1]) != null ? _a : valString;
  let fractionalPart = "";
  m = (exponent ? m[1] : valString).match(/^(.*)\.(.*)$/);
  if ((m == null ? void 0 : m[1]) && m[2]) {
    wholePart = m[1];
    fractionalPart = m[2];
  }
  if (options.groupSeparator) {
    wholePart = wholePart.replace(
      /\B(?=(\d{3})+(?!\d))/g,
      options.groupSeparator
    );
    fractionalPart = formatFractionalPart(fractionalPart, options);
  }
  if (fractionalPart)
    fractionalPart = options.decimalMarker + fractionalPart;
  if (!exponent)
    return wholePart + fractionalPart;
  if (wholePart === "1" && !fractionalPart)
    return exponent;
  return wholePart + fractionalPart + options.exponentProduct + exponent;
}
var ACCENT_MODIFIERS = {
  deg: (s) => `${s}\\degree`,
  prime: (s) => `${s}^{\\prime}`,
  dprime: (s) => `${s}^{\\doubleprime}`,
  ring: (s) => `\\mathring{${s}}`,
  hat: (s) => `\\hat{${s}}`,
  tilde: (s) => `\\tilde{${s}}`,
  vec: (s) => `\\vec{${s}}`,
  bar: (s) => `\\overline{${s}}`,
  underbar: (s) => `\\underline{${s}}`,
  dot: (s) => `\\dot{${s}}`,
  ddot: (s) => `\\ddot{${s}}`,
  tdot: (s) => `\\dddot{${s}}`,
  qdot: (s) => `\\ddddot{${s}}`,
  // Supplemental
  acute: (s) => `\\acute{${s}}`,
  grave: (s) => `\\grave{${s}}`,
  breve: (s) => `\\breve{${s}}`,
  check: (s) => `\\check{${s}}`
};
var STYLE_MODIFIERS = {
  upright: (s) => `\\mathrm{${s}}`,
  italic: (s) => `\\mathit{${s}}`,
  bold: (s) => `\\mathbf{${s}}`,
  script: (s) => `\\mathscr{${s}}`,
  fraktur: (s) => `\\mathfrak{${s}}`,
  // Note Unicode uses 'fraktur' for 'gothic'
  doublestruck: (s) => `\\mathbb{${s}}`,
  // Unicode uses 'double-struck' for 'blackboard'
  // Supplemental
  blackboard: (s) => `\\mathbb{${s}}`,
  calligraphic: (s) => `\\mathcal{${s}}`,
  gothic: (s) => `\\mathfrak{${s}}`,
  sansserif: (s) => `\\mathsf{${s}}`,
  monospace: (s) => `\\mathtt{${s}}`
};
var Serializer = class {
  constructor(options, dictionary2, onError) {
    this.level = -1;
    this.options = options;
    if (options.invisibleMultiply) {
      if (!/#1/.test(options.invisibleMultiply) || !/#2/.test(options.invisibleMultiply)) {
        onError([
          {
            severity: "warning",
            message: ["expected-argument", "invisibleMultiply"]
          }
        ]);
      }
    }
    this.onError = onError;
    this.dictionary = dictionary2;
    this.canonical = void 0;
  }
  updateOptions(opt) {
    for (const k of Object.keys(this.options))
      if (k in opt)
        this.options[k] = opt[k];
  }
  /**
   * Serialize the expression, and if the expression is an operator
   * of precedence less than or equal to prec, wrap it in some paren.
   * @todo: don't wrap Abs, Floor, Ceil, Delimiter
   */
  wrap(expr, prec) {
    if (expr === null)
      return "";
    if (prec === void 0) {
      return this.wrapString(
        this.serialize(expr),
        this.options.groupStyle(expr, this.level + 1)
      );
    }
    if (typeof expr === "number" || isNumberObject(expr) || typeof expr === "string" || isSymbolObject(expr)) {
      return this.serialize(expr);
    }
    const name = head(expr);
    if (typeof name === "string" && name !== "Delimiter" && name !== "Subscript") {
      const def = this.dictionary.ids.get(name);
      if (def && (def.kind === "symbol" || def.kind === "prefix" || def.kind === "infix" || def.kind === "postfix") && def.precedence < prec)
        return this.wrapString(
          this.serialize(expr),
          this.options.applyFunctionStyle(expr, this.level)
        );
    }
    return this.serialize(expr);
  }
  /**
   * If this is a "short" expression, wrap it.
   * Do not wrap identifiers, positive numbers or functions.
   *
   * This is called by the serializer for power and division (i.e. "(a+1)/b")
   *
   */
  wrapShort(expr) {
    if (expr === null)
      return "";
    const exprStr = this.serialize(expr);
    if (symbol(expr) !== null)
      return exprStr;
    if (head(expr) === "Delimiter" && nops(expr) === 1)
      return exprStr;
    const isNum = isNumberExpression(expr);
    if (isNum && !/^(-|\.)/.test(exprStr))
      return exprStr;
    const h = head(expr);
    if (h !== "Add" && h !== "Negate" && h !== "Subtract" && h !== "PlusMinus" && h !== "Multiply")
      return exprStr;
    return this.wrapString(
      exprStr,
      this.options.groupStyle(expr, this.level + 1)
    );
  }
  wrapString(s, style, fence) {
    var _a, _b;
    if (style === "none")
      return s;
    if (fence === void 0)
      fence = "()";
    const openFence = (_a = fence == null ? void 0 : fence[0]) != null ? _a : ".";
    const closeFence = (_b = fence == null ? void 0 : fence[1]) != null ? _b : ".";
    if ((openFence === "." || closeFence === ".") && style === "paren")
      style = "leftright";
    if (style === "leftright")
      return `\\left${openFence}${s}\\right${closeFence}}`;
    if (style === "big")
      return `${openFence === "." ? "" : `\\Bigl${openFence}`}${s}${closeFence === "." ? "" : `\\Bigr${closeFence}`})`;
    return openFence + s + closeFence;
  }
  wrapArguments(expr) {
    var _a;
    return this.wrapString(
      ((_a = ops(expr)) != null ? _a : []).map((x) => this.serialize(x)).join(", "),
      this.options.applyFunctionStyle(expr, this.level)
    );
  }
  serializeSymbol(expr, def) {
    var _a, _b, _c, _d, _e;
    /* @__PURE__ */ console.assert(typeof expr === "string" || isSymbolObject(expr));
    if ((def == null ? void 0 : def.kind) === "function") {
      return (_b = serializeIdentifier((_a = symbol(expr)) != null ? _a : "")) != null ? _b : "";
    }
    return (_e = (_d = (_c = def == null ? void 0 : def.serialize) == null ? void 0 : _c.call(def, this, expr)) != null ? _d : serializeIdentifier(symbol(expr))) != null ? _e : "";
  }
  serializeFunction(expr, def) {
    var _a;
    if (def == null ? void 0 : def.serialize)
      return def.serialize(this, expr);
    const h = head(expr);
    if (typeof h === "string")
      return serializeIdentifier(h, "auto") + this.wrapArguments(expr);
    const args = (_a = ops(expr)) != null ? _a : [];
    if (args.length === 1) {
      return joinLatex([
        this.serialize(args[0]),
        "\\rhd",
        this.wrapString(
          this.serialize(h),
          this.options.applyFunctionStyle(expr, this.level)
        )
      ]);
    }
    const style = this.options.applyFunctionStyle(expr, this.level);
    return joinLatex([
      "\\operatorname{apply}",
      this.wrapString(
        this.serialize(h) + ", " + this.serialize(["List", ...args]),
        style
      )
    ]);
  }
  serializeDictionary(dict) {
    return `\\left\\lbrack\\begin{array}{lll}${Object.keys(dict).map((x) => {
      return `\\textbf{${x}} & \\rightarrow & ${this.serialize(dict[x])}`;
    }).join("\\\\")}\\end{array}\\right\\rbrack`;
  }
  serialize(expr, options) {
    if (expr === null || expr === void 0)
      return "";
    options != null ? options : options = {};
    options = { ...options };
    if (!("canonical" in options))
      options.canonical = true;
    const savedCanonical = this.canonical;
    if (this.canonical === void 0)
      this.canonical = options.canonical;
    this.level += 1;
    try {
      const result = (() => {
        const numericValue = serializeNumber(expr, this.options);
        if (numericValue)
          return numericValue;
        const s = stringValue(expr);
        if (s !== null)
          return `\\text{${s}}`;
        const dict = dictionary(expr);
        if (dict !== null)
          return this.serializeDictionary(dict);
        const symbolName = symbol(expr);
        if (symbolName !== null) {
          return this.serializeSymbol(
            expr,
            this.dictionary.ids.get(symbolName)
          );
        }
        const fnName = headName(expr);
        if (fnName) {
          return this.serializeFunction(expr, this.dictionary.ids.get(fnName));
        }
        if (head(expr) !== null)
          return this.serializeFunction(expr);
        this.onError([
          {
            severity: "warning",
            message: [
              "syntax-error",
              expr ? JSON.stringify(expr) : "undefined"
            ]
          }
        ]);
      })();
      this.level -= 1;
      this.canonical = savedCanonical;
      return result != null ? result : "";
    } catch (e) {
    }
    this.level -= 1;
    this.canonical = savedCanonical;
    return "";
  }
  applyFunctionStyle(expr, level) {
    return this.options.applyFunctionStyle(expr, level);
  }
  groupStyle(expr, level) {
    return this.options.groupStyle(expr, level);
  }
  rootStyle(expr, level) {
    return this.options.rootStyle(expr, level);
  }
  fractionStyle(expr, level) {
    return this.options.fractionStyle(expr, level);
  }
  logicStyle(expr, level) {
    return this.options.logicStyle(expr, level);
  }
  powerStyle(expr, level) {
    return this.options.powerStyle(expr, level);
  }
  numericSetStyle(expr, level) {
    return this.options.numericSetStyle(expr, level);
  }
};
function specialName(s) {
  var _a, _b;
  const prefix = (_b = (_a = s.match(/^([^_]+)/)) == null ? void 0 : _a[1]) != null ? _b : "";
  let i = SYMBOLS.findIndex((x) => prefix === x[0]);
  if (i >= 0)
    return [SYMBOLS[i][1], s.substring(SYMBOLS[i][0].length)];
  const DIGITS = {
    zero: "0",
    one: "1",
    two: "2",
    three: "3",
    four: "4",
    five: "5",
    six: "6",
    seven: "7",
    eight: "8",
    nine: "9",
    ten: "10"
  };
  i = Object.keys(DIGITS).findIndex((x) => s.startsWith(x));
  if (i >= 0) {
    const key = Object.keys(DIGITS)[i];
    return [DIGITS[key], s.substring(key.length)];
  }
  const code = s.codePointAt(0);
  i = SYMBOLS.findIndex((x) => x[2] === code);
  if (i >= 0)
    return [SYMBOLS[i][1], s.substring(1)];
  const EXTRA_SYMBOLS = {
    plus: "+",
    minus: "-",
    pm: "\\pm",
    ast: "\\ast",
    dag: "\\dag",
    ddag: "\\ddag",
    hash: "\\#",
    bottom: "\\bot",
    top: "\\top",
    bullet: "\\bullet",
    circle: "\\circ",
    diamond: "\\diamond",
    times: "\\times",
    square: "\\square",
    star: "\\star"
  };
  i = Object.keys(EXTRA_SYMBOLS).findIndex((x) => prefix === x);
  if (i >= 0) {
    const key = Object.keys(EXTRA_SYMBOLS)[i];
    return [EXTRA_SYMBOLS[key], s.substring(key.length)];
  }
  return [prefix, s.substring(prefix.length)];
}
function parseModifiers(s) {
  let [body, rest] = specialName(s);
  const accent = [];
  while (rest.length > 0) {
    const m = rest.match(/^_([a-zA-Z]+)(.*)/);
    if (!m)
      break;
    if (!ACCENT_MODIFIERS[m[1]])
      break;
    accent.push(m[1]);
    rest = m[2];
  }
  const styles = [];
  while (rest.length > 0) {
    const m = rest.match(/^_([a-zA-Z]+)(.*)/);
    if (!m)
      break;
    if (!STYLE_MODIFIERS[m[1]])
      break;
    styles.push(m[1]);
    rest = m[2];
  }
  return [body, accent, styles, rest];
}
function parseIdentifierBody2(s, topLevel = true, style = "auto") {
  let [body, accents, styles, rest] = parseModifiers(s);
  for (const accent of accents) {
    if (ACCENT_MODIFIERS[accent])
      body = ACCENT_MODIFIERS[accent](body);
  }
  if (topLevel) {
    const sups = [];
    const subs2 = [];
    const m = body.match(/^([^\d].*?)(\d+)$/);
    if (m) {
      subs2.push(m[2]);
      body = m[1];
    }
    while (rest.length > 0) {
      if (rest.startsWith("__")) {
        const [sup, rest2] = parseIdentifierBody2(
          rest.substring(2),
          false,
          "none"
        );
        sups.push(sup);
        rest = rest2;
      } else if (rest.startsWith("_")) {
        const [sub2, rest2] = parseIdentifierBody2(
          rest.substring(1),
          false,
          "none"
        );
        subs2.push(sub2);
        rest = rest2;
      } else {
        break;
      }
    }
    if (sups.length > 0)
      body = `${body}^{${sups.join(",")}}`;
    if (subs2.length > 0)
      body = `${body}_{${subs2.join(",")}}`;
  }
  for (const style2 of styles) {
    if (STYLE_MODIFIERS[style2])
      body = STYLE_MODIFIERS[style2](body);
  }
  if (styles.length === 0 && style !== "none") {
    switch (style) {
      case "auto":
        if (countTokens(body) > 1)
          body = `\\mathrm{${body}}`;
        break;
      case "operator":
        body = `\\operatorname{${body}}`;
        break;
      case "italic":
        body = `\\mathit{${body}}`;
        break;
      case "upright":
        body = `\\mathrm{${body}}`;
        break;
    }
  }
  return [body, rest];
}
function serializeIdentifier(s, style = "auto") {
  if (s === null)
    return null;
  if (ONLY_EMOJIS.test(s))
    return s;
  const m = s.match(/^(_+)(.*)/);
  if (m) {
    const [body2, rest2] = parseIdentifierBody2(m[2], true, "none");
    return `\\operatorname{${"\\_".repeat(m[1].length) + body2 + rest2}}`;
  }
  const [body, rest] = parseIdentifierBody2(s, true, style);
  if (rest.length > 0)
    return `\\operatorname{${s}}`;
  return body;
}
var DEFAULT_SERIALIZE_LATEX_OPTIONS = {
  invisibleMultiply: "",
  // '\\cdot',
  invisiblePlus: "",
  // '+',
  // invisibleApply: '',
  multiply: "\\times",
  missingSymbol: "\\blacksquare",
  // openGroup: '(',
  // closeGroup: ')',
  // divide: '\\frac{#1}{#2}',
  // subtract: '#1-#2',
  // add: '#1+#2',
  // negate: '-#1',
  // squareRoot: '\\sqrt{#1}',
  // nthRoot: '\\sqrt[#2]{#1}',
  applyFunctionStyle: getApplyFunctionStyle,
  groupStyle: getGroupStyle,
  rootStyle: getRootStyle,
  fractionStyle: getFractionStyle,
  logicStyle: getLogicStyle,
  powerStyle: getPowerStyle,
  numericSetStyle: getNumericSetStyle
};
var LatexSyntax = class _LatexSyntax {
  constructor(options) {
    var _a, _b;
    const onError = (warnings) => {
      if (typeof window !== "undefined") {
        for (const warning of warnings)
          console.warn(warning.message);
      }
      return;
    };
    this.onError = (_a = options.onError) != null ? _a : onError;
    this.computeEngine = options.computeEngine;
    const opts = { ...options };
    delete opts.dictionary;
    delete opts.onError;
    this.options = {
      ...DEFAULT_LATEX_NUMBER_OPTIONS,
      ...DEFAULT_PARSE_LATEX_OPTIONS,
      ...DEFAULT_SERIALIZE_LATEX_OPTIONS,
      ...opts
    };
    this._dictionaryInput = (_b = options.dictionary) != null ? _b : _LatexSyntax.getDictionary();
    this._dictionary = indexLatexDictionary(
      this._dictionaryInput,
      (sig) => this.onError([sig])
    );
  }
  get dictionary() {
    return this._dictionaryInput;
  }
  set dictionary(val) {
    this._dictionaryInput = val;
    this._dictionary = indexLatexDictionary(val, (sig) => this.onError([sig]));
  }
  updateOptions(opt) {
    for (const k of Object.keys(this.options))
      if (k in opt)
        this.options[k] = opt[k];
    this.serializer.updateOptions(opt);
  }
  static getDictionary(category = "all") {
    if (category === "all") {
      const result = [];
      for (const domain of Object.keys(DEFAULT_LATEX_DICTIONARY))
        if (DEFAULT_LATEX_DICTIONARY[domain])
          result.push(...DEFAULT_LATEX_DICTIONARY[domain]);
      return result;
    }
    if (!DEFAULT_LATEX_DICTIONARY[category])
      return [];
    return Object.freeze([...DEFAULT_LATEX_DICTIONARY[category]]);
  }
  parse(latex) {
    const parser = new _Parser(
      tokenize(latex, []),
      this.options,
      this._dictionary,
      this.computeEngine
    );
    let expr = parser.parseExpression();
    if (!parser.atEnd) {
      const opDefs = parser.peekDefinitions("infix");
      if (opDefs.length > 0) {
        const start = parser.index;
        const [def, n] = opDefs[0];
        parser.index += n;
        const result = def.parse(
          parser,
          expr != null ? expr : parser.error("missing", start),
          { minPrec: 0 }
        );
        if (result)
          return result;
        if (def.name) {
          return [
            def.name,
            expr != null ? expr : parser.error("missing", start),
            parser.error("missing", start)
          ];
        }
        parser.index = start;
      }
      const index = parser.index;
      const id = parseIdentifier(parser);
      if (id) {
        const idError = parser.error(["unexpected-identifier", id], index);
        return expr ? ["Sequence", expr, idError] : idError;
      }
      let openDelimiter = parser.peek;
      const closeDelimiter = parser.matchEnclosureOpen();
      if (closeDelimiter) {
        parser.parseExpression();
        parser.match(closeDelimiter);
        const enclosureError = parser.error(
          ["unexpected-open-delimiter", { str: openDelimiter }],
          index
        );
        return expr ? ["Sequence", expr, enclosureError] : enclosureError;
      }
      openDelimiter = parser.matchEnclosureClose();
      if (openDelimiter) {
        const enclosureError = parser.error(
          ["expected-open-delimiter", { str: openDelimiter }],
          index
        );
        return expr ? ["Sequence", expr, enclosureError] : enclosureError;
      }
      const rest = parser.index;
      const token = parser.nextToken();
      while (!parser.atEnd)
        parser.nextToken();
      if (!token)
        return parser.error("syntax-error", rest);
      const error = parser.error(
        [
          token.length > 1 && token.startsWith("\\") ? "unexpected-command" : "unexpected-token",
          { str: tokensToString([token]) }
        ],
        rest
      );
      expr = expr ? ["Sequence", expr, error] : error;
    }
    expr != null ? expr : expr = ["Sequence"];
    if (this.options.preserveLatex) {
      if (Array.isArray(expr))
        expr = { latex, fn: expr };
      else if (typeof expr === "number")
        expr = { latex, num: Number(expr).toString() };
      else if (typeof expr === "string")
        expr = { latex, sym: expr };
      else if (typeof expr === "object" && expr !== null)
        expr.latex = latex;
    }
    return expr != null ? expr : ["Sequence"];
  }
  serialize(expr, options) {
    return this.serializer.serialize(expr, options);
  }
  get serializer() {
    if (this._serializer)
      return this._serializer;
    this._serializer = new Serializer(
      this.options,
      this._dictionary,
      this.onError
    );
    return this._serializer;
  }
};
var import_complex2 = __toESM(require_complex());
var import_complex = __toESM(require_complex());
var MACHINE_PRECISION_BITS = 53;
var MACHINE_PRECISION = Math.log10(
  Math.pow(2, MACHINE_PRECISION_BITS)
);
var MACHINE_TOLERANCE_BITS = 7;
var MACHINE_TOLERANCE = Math.pow(
  2,
  -(MACHINE_PRECISION_BITS - MACHINE_TOLERANCE_BITS)
);
var NUMERIC_TOLERANCE = Math.pow(10, -10);
var SMALL_INTEGER = 1e6;
var MAX_ITERATION = 1e6;
var MAX_SYMBOLIC_TERMS = 200;
var SMALL_PRIMES = /* @__PURE__ */ new Set([
  2,
  3,
  5,
  7,
  11,
  13,
  17,
  19,
  23,
  29,
  31,
  37,
  41,
  43,
  47,
  53,
  59,
  61,
  67,
  71,
  73,
  79,
  83,
  89,
  97,
  101,
  103,
  107,
  109,
  113,
  127,
  131,
  137,
  139,
  149,
  151,
  157,
  163,
  167,
  173,
  179,
  181,
  191,
  193,
  197,
  199,
  211,
  223,
  227,
  229,
  233,
  239,
  241,
  251,
  257,
  263,
  269,
  271,
  277,
  281,
  283,
  293,
  307,
  311,
  313,
  317,
  331,
  337,
  347,
  349,
  353,
  359,
  367,
  373,
  379,
  383,
  389,
  397,
  401,
  409,
  419,
  421,
  431,
  433,
  439,
  443,
  449,
  457,
  461,
  463,
  467,
  479,
  487,
  491,
  499,
  503,
  509,
  521,
  523,
  541,
  547,
  557,
  563,
  569,
  571,
  577,
  587,
  593,
  599,
  601,
  607,
  613,
  617,
  619,
  631,
  641,
  643,
  647,
  653,
  659,
  661,
  673,
  677,
  683,
  691,
  701,
  709,
  719,
  727,
  733,
  739,
  743,
  751,
  757,
  761,
  769,
  773,
  787,
  797,
  809,
  811,
  821,
  823,
  827,
  829,
  839,
  853,
  857,
  859,
  863,
  877,
  881,
  883,
  887,
  907,
  911,
  919,
  929,
  937,
  941,
  947,
  953,
  967,
  971,
  977,
  983,
  991,
  997,
  1009,
  1013,
  1019,
  1021,
  1031,
  1033,
  1039,
  1049,
  1051,
  1061,
  1063,
  1069,
  1087,
  1091,
  1093,
  1097,
  1103,
  1109,
  1117,
  1123,
  1129,
  1151,
  1153,
  1163,
  1171,
  1181,
  1187,
  1193,
  1201,
  1213,
  1217,
  1223,
  1229,
  1231,
  1237,
  1249,
  1259,
  1277,
  1279,
  1283,
  1289,
  1291,
  1297,
  1301,
  1303,
  1307,
  1319,
  1321,
  1327,
  1361,
  1367,
  1373,
  1381,
  1399,
  1409,
  1423,
  1427,
  1429,
  1433,
  1439,
  1447,
  1451,
  1453,
  1459,
  1471,
  1481,
  1483,
  1487,
  1489,
  1493,
  1499,
  1511,
  1523,
  1531,
  1543,
  1549,
  1553,
  1559,
  1567,
  1571,
  1579,
  1583,
  1597,
  1601,
  1607,
  1609,
  1613,
  1619,
  1621,
  1627,
  1637,
  1657,
  1663,
  1667,
  1669,
  1693,
  1697,
  1699,
  1709,
  1721,
  1723,
  1733,
  1741,
  1747,
  1753,
  1759,
  1777,
  1783,
  1787,
  1789,
  1801,
  1811,
  1823,
  1831,
  1847,
  1861,
  1867,
  1871,
  1873,
  1877,
  1879,
  1889,
  1901,
  1907,
  1913,
  1931,
  1933,
  1949,
  1951,
  1973,
  1979,
  1987,
  1993,
  1997,
  1999,
  2003,
  2011,
  2017,
  2027,
  2029,
  2039,
  2053,
  2063,
  2069,
  2081,
  2083,
  2087,
  2089,
  2099,
  2111,
  2113,
  2129,
  2131,
  2137,
  2141,
  2143,
  2153,
  2161,
  2179,
  2203,
  2207,
  2213,
  2221,
  2237,
  2239,
  2243,
  2251,
  2267,
  2269,
  2273,
  2281,
  2287,
  2293,
  2297,
  2309,
  2311,
  2333,
  2339,
  2341,
  2347,
  2351,
  2357,
  2371,
  2377,
  2381,
  2383,
  2389,
  2393,
  2399,
  2411,
  2417,
  2423,
  2437,
  2441,
  2447,
  2459,
  2467,
  2473,
  2477,
  2503,
  2521,
  2531,
  2539,
  2543,
  2549,
  2551,
  2557,
  2579,
  2591,
  2593,
  2609,
  2617,
  2621,
  2633,
  2647,
  2657,
  2659,
  2663,
  2671,
  2677,
  2683,
  2687,
  2689,
  2693,
  2699,
  2707,
  2711,
  2713,
  2719,
  2729,
  2731,
  2741,
  2749,
  2753,
  2767,
  2777,
  2789,
  2791,
  2797,
  2801,
  2803,
  2819,
  2833,
  2837,
  2843,
  2851,
  2857,
  2861,
  2879,
  2887,
  2897,
  2903,
  2909,
  2917,
  2927,
  2939,
  2953,
  2957,
  2963,
  2969,
  2971,
  2999,
  3001,
  3011,
  3019,
  3023,
  3037,
  3041,
  3049,
  3061,
  3067,
  3079,
  3083,
  3089,
  3109,
  3119,
  3121,
  3137,
  3163,
  3167,
  3169,
  3181,
  3187,
  3191,
  3203,
  3209,
  3217,
  3221,
  3229,
  3251,
  3253,
  3257,
  3259,
  3271,
  3299,
  3301,
  3307,
  3313,
  3319,
  3323,
  3329,
  3331,
  3343,
  3347,
  3359,
  3361,
  3371,
  3373,
  3389,
  3391,
  3407,
  3413,
  3433,
  3449,
  3457,
  3461,
  3463,
  3467,
  3469,
  3491,
  3499,
  3511,
  3517,
  3527,
  3529,
  3533,
  3539,
  3541,
  3547,
  3557,
  3559,
  3571,
  3581,
  3583,
  3593,
  3607,
  3613,
  3617,
  3623,
  3631,
  3637,
  3643,
  3659,
  3671,
  3673,
  3677,
  3691,
  3697,
  3701,
  3709,
  3719,
  3727,
  3733,
  3739,
  3761,
  3767,
  3769,
  3779,
  3793,
  3797,
  3803,
  3821,
  3823,
  3833,
  3847,
  3851,
  3853,
  3863,
  3877,
  3881,
  3889,
  3907,
  3911,
  3917,
  3919,
  3923,
  3929,
  3931,
  3943,
  3947,
  3967,
  3989,
  4001,
  4003,
  4007,
  4013,
  4019,
  4021,
  4027,
  4049,
  4051,
  4057,
  4073,
  4079,
  4091,
  4093,
  4099,
  4111,
  4127,
  4129,
  4133,
  4139,
  4153,
  4157,
  4159,
  4177,
  4201,
  4211,
  4217,
  4219,
  4229,
  4231,
  4241,
  4243,
  4253,
  4259,
  4261,
  4271,
  4273,
  4283,
  4289,
  4297,
  4327,
  4337,
  4339,
  4349,
  4357,
  4363,
  4373,
  4391,
  4397,
  4409,
  4421,
  4423,
  4441,
  4447,
  4451,
  4457,
  4463,
  4481,
  4483,
  4493,
  4507,
  4513,
  4517,
  4519,
  4523,
  4547,
  4549,
  4561,
  4567,
  4583,
  4591,
  4597,
  4603,
  4621,
  4637,
  4639,
  4643,
  4649,
  4651,
  4657,
  4663,
  4673,
  4679,
  4691,
  4703,
  4721,
  4723,
  4729,
  4733,
  4751,
  4759,
  4783,
  4787,
  4789,
  4793,
  4799,
  4801,
  4813,
  4817,
  4831,
  4861,
  4871,
  4877,
  4889,
  4903,
  4909,
  4919,
  4931,
  4933,
  4937,
  4943,
  4951,
  4957,
  4967,
  4969,
  4973,
  4987,
  4993,
  4999,
  5003,
  5009,
  5011,
  5021,
  5023,
  5039,
  5051,
  5059,
  5077,
  5081,
  5087,
  5099,
  5101,
  5107,
  5113,
  5119,
  5147,
  5153,
  5167,
  5171,
  5179,
  5189,
  5197,
  5209,
  5227,
  5231,
  5233,
  5237,
  5261,
  5273,
  5279,
  5281,
  5297,
  5303,
  5309,
  5323,
  5333,
  5347,
  5351,
  5381,
  5387,
  5393,
  5399,
  5407,
  5413,
  5417,
  5419,
  5431,
  5437,
  5441,
  5443,
  5449,
  5471,
  5477,
  5479,
  5483,
  5501,
  5503,
  5507,
  5519,
  5521,
  5527,
  5531,
  5557,
  5563,
  5569,
  5573,
  5581,
  5591,
  5623,
  5639,
  5641,
  5647,
  5651,
  5653,
  5657,
  5659,
  5669,
  5683,
  5689,
  5693,
  5701,
  5711,
  5717,
  5737,
  5741,
  5743,
  5749,
  5779,
  5783,
  5791,
  5801,
  5807,
  5813,
  5821,
  5827,
  5839,
  5843,
  5849,
  5851,
  5857,
  5861,
  5867,
  5869,
  5879,
  5881,
  5897,
  5903,
  5923,
  5927,
  5939,
  5953,
  5981,
  5987,
  6007,
  6011,
  6029,
  6037,
  6043,
  6047,
  6053,
  6067,
  6073,
  6079,
  6089,
  6091,
  6101,
  6113,
  6121,
  6131,
  6133,
  6143,
  6151,
  6163,
  6173,
  6197,
  6199,
  6203,
  6211,
  6217,
  6221,
  6229,
  6247,
  6257,
  6263,
  6269,
  6271,
  6277,
  6287,
  6299,
  6301,
  6311,
  6317,
  6323,
  6329,
  6337,
  6343,
  6353,
  6359,
  6361,
  6367,
  6373,
  6379,
  6389,
  6397,
  6421,
  6427,
  6449,
  6451,
  6469,
  6473,
  6481,
  6491,
  6521,
  6529,
  6547,
  6551,
  6553,
  6563,
  6569,
  6571,
  6577,
  6581,
  6599,
  6607,
  6619,
  6637,
  6653,
  6659,
  6661,
  6673,
  6679,
  6689,
  6691,
  6701,
  6703,
  6709,
  6719,
  6733,
  6737,
  6761,
  6763,
  6779,
  6781,
  6791,
  6793,
  6803,
  6823,
  6827,
  6829,
  6833,
  6841,
  6857,
  6863,
  6869,
  6871,
  6883,
  6899,
  6907,
  6911,
  6917,
  6947,
  6949,
  6959,
  6961,
  6967,
  6971,
  6977,
  6983,
  6991,
  6997,
  7001,
  7013,
  7019,
  7027,
  7039,
  7043,
  7057,
  7069,
  7079,
  7103,
  7109,
  7121,
  7127,
  7129,
  7151,
  7159,
  7177,
  7187,
  7193,
  7207,
  7211,
  7213,
  7219,
  7229,
  7237,
  7243,
  7247,
  7253,
  7283,
  7297,
  7307,
  7309,
  7321,
  7331,
  7333,
  7349,
  7351,
  7369,
  7393,
  7411,
  7417,
  7433,
  7451,
  7457,
  7459,
  7477,
  7481,
  7487,
  7489,
  7499,
  7507,
  7517,
  7523,
  7529,
  7537,
  7541,
  7547,
  7549,
  7559,
  7561,
  7573,
  7577,
  7583,
  7589,
  7591,
  7603,
  7607,
  7621,
  7639,
  7643,
  7649,
  7669,
  7673,
  7681,
  7687,
  7691,
  7699,
  7703,
  7717,
  7723,
  7727,
  7741,
  7753,
  7757,
  7759,
  7789,
  7793,
  7817,
  7823,
  7829,
  7841,
  7853,
  7867,
  7873,
  7877,
  7879,
  7883,
  7901,
  7907,
  7919
]);
var LARGEST_SMALL_PRIME = 7919;
function primeFactors(n) {
  var _a, _b;
  /* @__PURE__ */ console.assert(
    Number.isInteger(n) && n >= 0 && n < Number.MAX_SAFE_INTEGER,
    n
  );
  if (n <= 3)
    return { [n]: 1 };
  const result = {};
  let count = 0;
  while (n % 2 === 0) {
    count += 1;
    n /= 2;
  }
  if (count > 0)
    result[2] = count;
  count = 0;
  while (n % 3 === 0) {
    count += 1;
    n /= 3;
  }
  if (count > 0)
    result[3] = count;
  let done = false;
  while (!done) {
    if (n === 1)
      return result;
    const sr = Math.sqrt(n);
    done = true;
    for (let i = 6; i <= sr + 6; i += 6) {
      if (n % (i - 1) === 0) {
        result[i - 1] = ((_a = result[i - 1]) != null ? _a : 0) + 1;
        n /= i - 1;
        done = false;
        break;
      }
      if (n % (i + 1) === 0) {
        result[i + 1] = ((_b = result[i + 1]) != null ? _b : 0) + 1;
        n /= i + 1;
        done = false;
        break;
      }
    }
  }
  if (result[n] !== void 0)
    result[n] += 1;
  else
    result[n] = 1;
  return result;
}
function factorPower(n, exponent) {
  if (n >= Number.MAX_SAFE_INTEGER)
    return [1, n];
  /* @__PURE__ */ console.assert(Number.isInteger(n) && n > 0 && n < Number.MAX_SAFE_INTEGER);
  const factors = primeFactors(n);
  let f = 1;
  let r = 1;
  for (const k of Object.keys(factors)) {
    const v = parseInt(k);
    f = f * Math.pow(v, Math.floor(factors[k] / exponent));
    r = r * Math.pow(v, factors[k] % exponent);
  }
  return [f, r];
}
function gcd(a, b) {
  if (a === 0)
    return b;
  if (b === 0)
    return a;
  if (a === b)
    return a;
  if (!Number.isInteger(a) || !Number.isInteger(b))
    return NaN;
  while (b !== 0)
    [a, b] = [b, a % b];
  return a < 0 ? -a : a;
}
function lcm(a, b) {
  return a * b / gcd(a, b);
}
function factorial(n) {
  if (!Number.isInteger(n) || n < 0)
    return NaN;
  let val = 1;
  for (let i = 2; i <= n; i++)
    val = val * i;
  return val;
}
var gammaG = 7;
var lanczos_7_c = [
  0.9999999999998099,
  676.5203681218851,
  -1259.1392167224028,
  771.3234287776531,
  -176.6150291621406,
  12.507343278686905,
  -0.13857109526572012,
  9984369578019572e-21,
  15056327351493116e-23
];
var gammaGLn = 607 / 128;
var gammaPLn = [
  0.999999999999997,
  57.15623566586292,
  -59.59796035547549,
  14.13609797474174,
  -0.4919138160976202,
  3399464998481188e-20,
  4652362892704857e-20,
  -9837447530487956e-20,
  1580887032249125e-19,
  -21026444172410488e-20,
  2174396181152126e-19,
  -1643181065367639e-19,
  8441822398385274e-20,
  -261908384015814e-19,
  3689918265953162e-21
];
function lngamma(z) {
  if (z < 0)
    return NaN;
  let x = gammaPLn[0];
  for (let i = gammaPLn.length - 1; i > 0; --i)
    x += gammaPLn[i] / (z + i);
  const t = z + gammaGLn + 0.5;
  return 0.5 * Math.log(2 * Math.PI) + (z + 0.5) * Math.log(t) - t + Math.log(x) - Math.log(z);
}
function gamma(z) {
  if (z < 0.5)
    return Math.PI / (Math.sin(Math.PI * z) * gamma(1 - z));
  if (z > 100)
    return Math.exp(lngamma(z));
  z -= 1;
  let x = lanczos_7_c[0];
  for (let i = 1; i < gammaG + 2; i++)
    x += lanczos_7_c[i] / (z + i);
  const t = z + gammaG + 0.5;
  return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;
}
function fromDigits(s, base = 10) {
  let value = 0;
  for (let i = 0; i < s.length; i++) {
    const k = {
      " ": -1,
      "\xA0": -1,
      // NBS
      "\u2000": -1,
      // EN QUAD
      "\u2001": -1,
      // EM QUAD
      "\u2002": -1,
      // EN SPACE
      "\u2003": -1,
      // EM SPACE
      "\u2004": -1,
      // THREE-PER-EM SPACE
      "\u2005": -1,
      // FOUR-PER-EM SPACE
      "\u2006": -1,
      // SIX-PER-EM SPACE
      "\u2007": -1,
      // FIGURE SPACE
      "\u2008": -1,
      // PUNCTUATION SPACE
      "\u2009": -1,
      // THIN SPACE
      "\u200A": -1,
      // HAIR SPACE
      "\u200B": -1,
      // ZWS
      "\u202F": -1,
      // NARROW NBS
      "\u205F": -1,
      // MEDIUM MATHEMATICAL SPACE
      "_": -1,
      ",": -1,
      "0": 0,
      "1": 1,
      "2": 2,
      "3": 3,
      "4": 4,
      "5": 5,
      "6": 6,
      "7": 7,
      "8": 8,
      "9": 9,
      "a": 10,
      "b": 11,
      "c": 12,
      "d": 13,
      "e": 14,
      "f": 15,
      "g": 16,
      "h": 17,
      "i": 18,
      "j": 19,
      "k": 20,
      "l": 21,
      "m": 22,
      "n": 23,
      "o": 24,
      "p": 25,
      "q": 26,
      "r": 27,
      "s": 28,
      "t": 29,
      "u": 30,
      "v": 31,
      "w": 32,
      "x": 33,
      "y": 34,
      "z": 35
    }[s[i]];
    if (k !== -1) {
      if (k === void 0)
        return [value, s.substring(i)];
      if (k >= base)
        return [value, s.substring(i)];
      value = value * base + k;
    }
  }
  return [value, ""];
}
function asFloat(expr) {
  const num = expr.numericValue;
  if (num === null)
    return null;
  if (typeof num === "number")
    return num;
  if (num instanceof decimal_default)
    return num.toNumber();
  if (Array.isArray(num)) {
    const [n, d] = num;
    if (typeof n === "number" && typeof d === "number")
      return n / d;
    return Number(n) / Number(d);
  }
  /* @__PURE__ */ console.assert(!(num instanceof import_complex.default) || num.im !== 0);
  return null;
}
function asBignum(expr) {
  const num = expr.numericValue;
  if (num === null)
    return null;
  if (num instanceof decimal_default)
    return num;
  if (typeof num === "number")
    return expr.engine.bignum(num);
  if (Array.isArray(num)) {
    const [n, d] = num;
    if (typeof n === "number" && typeof d === "number")
      return expr.engine.bignum(n / d);
    return expr.engine.bignum(n).div(d.toString());
  }
  /* @__PURE__ */ console.assert(!(num instanceof import_complex.default) || num.im !== 0);
  return null;
}
function asSmallInteger(expr) {
  const num = expr.numericValue;
  if (num === null)
    return null;
  if (typeof num === "number") {
    if (Number.isInteger(num) && num >= -SMALL_INTEGER && num <= SMALL_INTEGER)
      return num;
    return null;
  }
  if (num instanceof decimal_default) {
    if (num.isInteger()) {
      const n = num.toNumber();
      if (n >= -SMALL_INTEGER && n <= SMALL_INTEGER)
        return n;
    }
    return null;
  }
  if (expr.isCanonical)
    return null;
  const r = num;
  if (Array.isArray(r)) {
    const [n, d] = r;
    let v;
    if (typeof n === "number" && typeof d === "number")
      v = n / d;
    else
      v = Number(n) / Number(d);
    if (Number.isInteger(v) && v >= -SMALL_INTEGER && v <= SMALL_INTEGER)
      return v;
    return null;
  }
  return null;
}
function chop(n, tolerance) {
  if (typeof n === "number" && Math.abs(n) <= tolerance)
    return 0;
  if (n instanceof decimal_default && n.abs().lte(tolerance))
    return 0;
  if (n instanceof import_complex.default && Math.abs(n.re) <= tolerance && Math.abs(n.im) <= tolerance)
    return 0;
  return n;
}
function erf(x) {
  const a1 = 0.254829592;
  const a2 = -0.284496736;
  const a3 = 1.421413741;
  const a4 = -1.453152027;
  const a5 = 1.061405429;
  const p = 0.3275911;
  const sign2 = x < 0 ? -1 : 1;
  x = Math.abs(x);
  const t = 1 / (1 + p * x);
  const y = ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t;
  return sign2 * (1 - y * Math.exp(-x * x));
}
function bigint(a) {
  var _a;
  if (typeof a === "bigint")
    return a;
  if (a instanceof decimal_default)
    return bigint(a.toString());
  let s = a.toString();
  const m = s.match(/([^\.]+)(?:\.([0-9]+))?e(.+)$/);
  if (m) {
    s = m[1] + ((_a = m[2]) != null ? _a : "") + "0".repeat(parseInt(m[3]) - (m[2] ? m[2].length : 0));
  }
  return BigInt(s);
}
function gcd2(a, b) {
  while (b !== BigInt(0))
    [a, b] = [b, a % b];
  return a < 0 ? -a : a;
}
var PRIME_WHEEL_INC = [
  BigInt(4),
  BigInt(2),
  BigInt(4),
  BigInt(2),
  BigInt(4),
  BigInt(6),
  BigInt(2),
  BigInt(6)
];
function primeFactors2(d) {
  var _a, _b;
  if (d < Number.MAX_SAFE_INTEGER) {
    const factors = primeFactors(Number(d));
    const result2 = /* @__PURE__ */ new Map();
    for (const f of Object.keys(factors))
      result2.set(bigint(f), factors[f]);
    return result2;
  }
  let n = d;
  const result = /* @__PURE__ */ new Map();
  let count2 = 0;
  let count3 = 0;
  let count5 = 0;
  let k = BigInt(10);
  while (n % k === BigInt(0)) {
    count2 += 1;
    count5 += 1;
    n = n / k;
  }
  k = BigInt(5);
  while (n % k === BigInt(0)) {
    count5 += 1;
    n = n / k;
  }
  k = BigInt(3);
  while (n % k === BigInt(0)) {
    count3 += 1;
    n = n / k;
  }
  k = BigInt(2);
  while (n % k === BigInt(0)) {
    count2 += 1;
    n = n / k;
  }
  if (count2 > 0)
    result.set("2", count2);
  if (count3 > 0)
    result.set("3", count3);
  if (count5 > 0)
    result.set("5", count5);
  k = BigInt(7);
  let kIndex = "";
  let i = 0;
  while (k * k < n) {
    if (n % k === BigInt(0)) {
      if (!kIndex)
        kIndex = k.toString();
      result.set(kIndex, ((_a = result.get(kIndex)) != null ? _a : 0) + 1);
      n = n / k;
    } else {
      k = k + PRIME_WHEEL_INC[i];
      kIndex = "";
      i = i < 7 ? i + 1 : 0;
    }
  }
  if (n !== BigInt(1))
    result.set(n.toString(), ((_b = result.get(n.toString())) != null ? _b : 0) + 1);
  const r = /* @__PURE__ */ new Map();
  for (const [k2, v] of result)
    r.set(bigint(k2), v);
  return r;
}
function factorPower2(n, exponent) {
  const factors = primeFactors2(n);
  let f = BigInt(1);
  let r = BigInt(1);
  const exp2 = bigint(exponent);
  for (const [k, v] of factors) {
    const v2 = bigint(v);
    f = f * k ** (v2 / exp2);
    r = r * k ** (v2 % exp2);
  }
  return [f, r];
}
function isLatexString(s) {
  if (typeof s === "string")
    return s.startsWith("$") && s.endsWith("$");
  return false;
}
function latexString(s) {
  if (typeof s === "string" && s.startsWith("$") && s.endsWith("$"))
    return s.slice(1, -1);
  return null;
}
function getImaginaryCoef(expr) {
  if (expr.symbol === "ImaginaryUnit")
    return 1;
  const z = expr.numericValue;
  if (z !== null && z instanceof import_complex2.default && z.re === 0)
    return z.im;
  if (expr.head === "Negate") {
    const v = getImaginaryCoef(expr.op1);
    if (v === null)
      return null;
    return -v;
  }
  if (expr.head === "Multiply" && expr.nops === 2) {
    if (expr.op1.symbol === "ImaginaryUnit")
      return asFloat(expr.op2);
    if (expr.op2.symbol === "ImaginaryUnit")
      return asFloat(expr.op1);
  }
  return 0;
}
function getFreeVars(expr, set) {
  if (expr.symbol) {
    const def = expr.engine.lookupSymbol(expr.symbol);
    if ((def == null ? void 0 : def.value) === void 0)
      set.add(expr.symbol);
    return;
  }
  if (!expr.ops && !expr.keys)
    return;
  if (expr.ops)
    for (const op3 of expr.ops)
      getFreeVars(op3, set);
  if (expr.keys)
    for (const key of expr.keys)
      getFreeVars(expr.getKey(key), set);
  return;
}
function getSymbols(expr, set) {
  if (expr.symbol) {
    set.add(expr.symbol);
    return;
  }
  if (!expr.ops && !expr.keys)
    return;
  if (expr.ops)
    for (const op3 of expr.ops)
      getSymbols(op3, set);
  if (expr.keys)
    for (const key of expr.keys)
      getSymbols(expr.getKey(key), set);
  return;
}
function getSubexpressions(expr, head2) {
  const result = !head2 || expr.head === head2 ? [expr] : [];
  if (expr.ops) {
    for (const op3 of expr.ops)
      result.push(...getSubexpressions(op3, head2));
  } else if (expr.keys) {
    for (const op3 of expr.keys)
      result.push(...getSubexpressions(expr.getKey(op3), head2));
  }
  return result;
}
function bignumPreferred(ce) {
  return ce.numericMode === "bignum" || ce.numericMode === "auto";
}
function complexAllowed(ce) {
  return ce.numericMode === "auto" || ce.numericMode === "complex";
}
function hashCode(s) {
  let hash2 = 0;
  for (let i = 0; i < s.length; i++)
    hash2 = Math.imul(31, hash2) + s.charCodeAt(i) | 0;
  return Math.abs(hash2);
}
function bigintValue(ce, expr) {
  var _a;
  if (expr === null || expr === void 0)
    return null;
  if (typeof expr === "number")
    return Number.isInteger(expr) ? bigint(expr) : null;
  if (isNumberExpression(expr)) {
    const num = isNumberObject(expr) ? expr.num.toString() : expr;
    let s = num.toLowerCase().replace(/[nd]$/g, "").replace(/[\u0009-\u000d\u0020\u00a0]/g, "");
    if (/\([0-9]+\)/.test(s)) {
      const [_, body, repeat, trail] = (_a = s.match(/(.+)\(([0-9]+)\)(.*)$/)) != null ? _a : [];
      s = body + repeat.repeat(Math.ceil(ce.precision / repeat.length)) + (trail != null ? trail : "");
    }
    if (s === "nan")
      return null;
    if (s === "infinity" || s === "+infinity")
      return null;
    if (s === "-infinity")
      return null;
    if (s.includes("."))
      return null;
    return bigint(s);
  }
  return null;
}
function asBigint(expr) {
  const num = expr.numericValue;
  if (num === null)
    return null;
  if (typeof num === "number" && Number.isInteger(num))
    return bigint(num);
  if (num instanceof decimal_default && num.isInteger())
    return bigint(num);
  return null;
}
function matchRules(expr, rules, sub2) {
  const result = [];
  for (const rule of rules) {
    const r = applyRule(rule, expr, sub2);
    if (r !== null)
      result.push(r);
  }
  return result;
}
function boxRules(ce, rs) {
  var _a;
  const result = /* @__PURE__ */ new Set();
  for (const [rawLhs, rawRhs, options] of rs) {
    let cond;
    const latex = latexString(options == null ? void 0 : options.condition);
    if (latex) {
      const condPattern = ce.pattern(latex);
      cond = (x) => {
        var _a2;
        return ((_a2 = condPattern.subs(x).value) == null ? void 0 : _a2.symbol) === "True";
      };
    } else
      cond = options == null ? void 0 : options.condition;
    result.add([
      ce.pattern(rawLhs),
      ce.pattern(rawRhs),
      (_a = options == null ? void 0 : options.priority) != null ? _a : 0,
      cond
    ]);
  }
  return result;
}
function applyRule([lhs, rhs, _priority, condition], expr, substitution, options) {
  const sub2 = lhs.match(expr, { substitution, ...options });
  if (sub2 === null)
    return null;
  if (typeof condition === "function" && !condition(sub2))
    return null;
  return rhs.subs(sub2, { canonical: true });
}
function replace(expr, ruleSet, options) {
  var _a, _b;
  const iterationLimit = (_a = options == null ? void 0 : options.iterationLimit) != null ? _a : 1;
  let iterationCount = 0;
  const once = (_b = options == null ? void 0 : options.once) != null ? _b : false;
  let done = false;
  let atLeastOneRule = false;
  try {
    while (!done && iterationCount < iterationLimit) {
      done = true;
      for (const rule of ruleSet) {
        const result = applyRule(rule, expr, {}, options);
        if (result !== null && result !== expr) {
          if (once)
            return result;
          done = false;
          atLeastOneRule = true;
          expr = result;
        }
      }
      iterationCount += 1;
    }
  } catch (e) {
    console.error(e);
  }
  return atLeastOneRule ? expr : null;
}
function getWildcardName(s) {
  const m = s.match(/^(__?_?[a-zA-Z0-9]+)/);
  if (m === null)
    return "";
  return m[1];
}
var import_complex3 = __toESM(require_complex());
function totalDegree(expr) {
  if (expr.head === "Power" && expr.op2.numericValue !== null) {
    const deg = asSmallInteger(expr.op2);
    if (deg !== null && deg > 0)
      return deg;
    return 1;
  }
  if (expr.head === "Multiply") {
    let deg = 1;
    for (const arg of expr.ops) {
      const t = totalDegree(arg);
      if (t > 1)
        deg = deg + t;
    }
    return deg;
  }
  return 1;
}
function maxDegree(expr) {
  if (expr.head === "Power" && expr.op2.numericValue !== null) {
    const deg = asSmallInteger(expr.op2);
    if (deg !== null && deg > 0)
      return deg;
    return 1;
  }
  if (expr.head === "Multiply") {
    let deg = 1;
    for (const arg of expr.ops)
      deg = Math.max(deg, totalDegree(arg));
    return deg;
  }
  return 1;
}
function lex(expr) {
  if (expr.symbol)
    return expr.symbol;
  if (expr.ops) {
    const h = typeof expr.head === "string" ? expr.head : lex(expr.head);
    return h + '"' + expr.ops.map((x) => lex(x)).filter((x) => x.length > 0).join('"');
  }
  return "";
}
var DEFAULT_COMPLEXITY = 1e5;
function sortAdd(ce, ops2) {
  return ops2.sort((a, b) => {
    const aLex = lex(a);
    const bLex = lex(b);
    if (!aLex && !bLex)
      return order(a, b);
    if (!aLex)
      return 1;
    if (!bLex)
      return -1;
    if (aLex < bLex)
      return -1;
    if (aLex > bLex)
      return 1;
    const aTotalDeg = totalDegree(a);
    const bTotalDeg = totalDegree(b);
    if (aTotalDeg !== bTotalDeg)
      return bTotalDeg - aTotalDeg;
    const aMaxDeg = maxDegree(a);
    const bMaxDeg = maxDegree(b);
    if (aMaxDeg !== bMaxDeg)
      return aMaxDeg - bMaxDeg;
    return order(a, b);
  });
}
function order(a, b) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  if (a === b)
    return 0;
  if (a.numericValue !== null && a.numericValue === b.numericValue)
    return 0;
  const af = asFloat(a);
  if (af !== null) {
    const bf = asFloat(b);
    if (bf !== null)
      return af - bf;
    return -1;
  }
  if (a.numericValue instanceof import_complex3.default) {
    if (b.numericValue instanceof import_complex3.default) {
      if (a.numericValue.re === b.numericValue.re) {
        if (Math.abs(a.numericValue.im) === Math.abs(b.numericValue.im)) {
          return a.numericValue.im - b.numericValue.im;
        }
        return Math.abs(a.numericValue.im) - Math.abs(b.numericValue.im);
      }
      return a.numericValue.re - b.numericValue.re;
    }
    if (b.numericValue !== null)
      return 1;
    return -1;
  }
  if (a.numericValue) {
    if (b.numericValue) {
      return 1;
    }
    return -1;
  }
  if (a.head === "Sqrt" && a.op1.numericValue) {
    if (b.head === "Sqrt" && b.op1.numericValue)
      return order(a.op1, b.op1);
    return -1;
  }
  if (a.symbol) {
    if (b.symbol) {
      if (a.symbol === b.symbol)
        return 0;
      return a.symbol > b.symbol ? 1 : -1;
    }
    if (b.numericValue !== null)
      return 1;
    return -1;
  }
  if (a.ops) {
    if (b.ops) {
      const aComplexity = (_b = (_a = a.functionDefinition) == null ? void 0 : _a.complexity) != null ? _b : DEFAULT_COMPLEXITY;
      const bComplexity = (_d = (_c = b.functionDefinition) == null ? void 0 : _c.complexity) != null ? _d : DEFAULT_COMPLEXITY;
      if (aComplexity === bComplexity) {
        if (typeof a.head === "string" && typeof b.head === "string") {
          if (a.head === b.head) {
            return getLeafCount(a) - getLeafCount(b);
          }
          if (a.head < b.head)
            return 1;
          return -1;
        }
        return getLeafCount(a) - getLeafCount(b);
      }
      return aComplexity - bComplexity;
    }
    if (b.numericValue !== null || b.symbol)
      return 1;
    return -1;
  }
  if (a.string) {
    if (b.string) {
      if (a.string.length !== b.string.length)
        return b.string.length - a.string.length;
      if (b.string < a.string)
        return -1;
      if (a.string > b.string)
        return 1;
      return 0;
    }
    if (b.keys)
      return -1;
    return 1;
  }
  if (a.keys && b.keys) {
    if (a.keysCount !== b.keysCount)
      return b.keysCount - a.keysCount;
    let bComplexity = 0;
    let aComplexity = 0;
    for (const key of b.keys)
      bComplexity += (_e = b.getKey(key).complexity) != null ? _e : DEFAULT_COMPLEXITY;
    for (const key of a.keys)
      aComplexity += (_f = a.getKey(key).complexity) != null ? _f : DEFAULT_COMPLEXITY;
    return aComplexity - bComplexity;
  }
  return ((_g = a.complexity) != null ? _g : DEFAULT_COMPLEXITY) - ((_h = b.complexity) != null ? _h : DEFAULT_COMPLEXITY);
}
function getLeafCount(expr) {
  if (expr.keys !== null)
    return 1 + expr.keysCount;
  if (!expr.ops)
    return 1;
  return (typeof expr.head === "string" ? 1 : getLeafCount(expr.head)) + [...expr.ops].reduce((acc, x) => acc + getLeafCount(x), 0);
}
function flattenOps(ops2, head2) {
  if (!head2)
    return ops2;
  if (ops2.every((x) => !x.ops || x.head !== head2))
    return ops2;
  const result = [];
  for (const arg of ops2) {
    if (!arg.ops || arg.head !== head2)
      result.push(arg);
    else {
      result.push(...flattenOps(arg.ops, head2));
    }
  }
  /* @__PURE__ */ console.assert(result.length !== ops2.length);
  if (result.length === ops2.length)
    return ops2;
  return result;
}
function flattenSequence(xs) {
  if (xs.every((x) => x.head !== "Sequence"))
    return xs;
  const ys = [];
  for (const x of xs) {
    if (x.isValid && x.head === "Sequence") {
      if (x.ops)
        ys.push(...x.ops);
    } else
      ys.push(x);
  }
  return ys;
}
function canonical(xs) {
  return xs.every((x) => x.isCanonical) ? xs : xs.map((x) => x.canonical);
}
var import_complex4 = __toESM(require_complex());
function isRational(x) {
  return x !== null && Array.isArray(x);
}
function isMachineRational(x) {
  return x !== null && Array.isArray(x) && typeof x[0] === "number";
}
function isBigRational(x) {
  return x !== null && Array.isArray(x) && typeof x[0] === "bigint";
}
function isRationalZero(x) {
  return x[0] == 0;
}
function isRationalOne(x) {
  return x[0] === x[1];
}
function isRationalNegativeOne(x) {
  return x[0] === -x[1];
}
function machineNumerator(x) {
  return Number(x[0]);
}
function machineDenominator(x) {
  return Number(x[1]);
}
function isNeg(x) {
  return x[0] < 0;
}
function neg(x) {
  return [-x[0], x[1]];
}
function inverse(x) {
  return x[0] < 0 ? [-x[1], -x[0]] : [x[1], x[0]];
}
function asRational(expr) {
  const num = expr.numericValue;
  if (num === null)
    return void 0;
  if (Array.isArray(num))
    return num;
  if (typeof num === "number" && Number.isInteger(num))
    return [num, 1];
  if (num instanceof decimal_default && num.isInteger())
    return [bigint(num), BigInt(1)];
  return void 0;
}
function asMachineRational(r) {
  return [Number(r[0]), Number(r[1])];
}
function add2(lhs, rhs) {
  /* @__PURE__ */ console.assert(
    Array.isArray(rhs) || rhs.numericValue !== null && !(rhs instanceof import_complex4.default)
  );
  if (typeof lhs[0] === "number" && !Number.isFinite(lhs[0]))
    return lhs;
  const rhsNum = Array.isArray(rhs) ? rhs : rhs.numericValue;
  if (rhsNum === null)
    return lhs;
  if (Array.isArray(rhsNum)) {
    if (isBigRational(rhsNum)) {
      lhs = [bigint(lhs[0]), bigint(lhs[1])];
      return [rhsNum[1] * lhs[0] + rhsNum[0] * lhs[1], rhsNum[1] * lhs[1]];
    }
    if (!Number.isFinite(rhsNum[0]))
      return rhsNum;
    if (isBigRational(lhs)) {
      const bigRhs = [bigint(rhsNum[0]), bigint(rhsNum[1])];
      return [bigRhs[1] * lhs[0] + bigRhs[0] * lhs[1], bigRhs[1] * lhs[1]];
    }
    return [rhsNum[1] * lhs[0] + rhsNum[0] * lhs[1], rhsNum[1] * lhs[1]];
  }
  if (rhsNum instanceof decimal_default) {
    if (rhsNum.isNaN())
      return [Number.NaN, 1];
    if (!rhsNum.isFinite())
      return [rhsNum.isNegative() ? -Infinity : Infinity, 1];
    /* @__PURE__ */ console.assert(rhsNum.isInteger());
    if (isMachineRational(lhs))
      lhs = [bigint(lhs[0]), bigint(lhs[1])];
    return [lhs[0] + lhs[1] * bigint(rhsNum.toString()), lhs[1]];
  }
  if (rhsNum instanceof import_complex4.default)
    return [Number.NaN, 1];
  /* @__PURE__ */ console.assert(!Number.isFinite(rhsNum) || Number.isInteger(rhsNum));
  if (!Number.isFinite(rhsNum))
    return [rhsNum, 1];
  if (isMachineRational(lhs))
    return [lhs[0] + lhs[1] * rhsNum, lhs[1]];
  return [lhs[0] + lhs[1] * bigint(rhsNum), lhs[1]];
}
function mul2(lhs, rhs) {
  /* @__PURE__ */ console.assert(
    Array.isArray(rhs) || rhs.numericValue !== null && !(rhs instanceof import_complex4.default)
  );
  if (Array.isArray(rhs)) {
    if (isMachineRational(lhs) && isMachineRational(rhs))
      return [lhs[0] * rhs[0], lhs[1] * rhs[1]];
    if (isMachineRational(lhs))
      lhs = [bigint(lhs[0]), bigint(lhs[1])];
    if (isMachineRational(rhs))
      rhs = [bigint(rhs[0]), bigint(rhs[1])];
    return [lhs[0] * rhs[0], lhs[1] * rhs[1]];
  }
  const rhsNum = rhs.numericValue;
  if (rhsNum !== null && typeof rhsNum === "number") {
    /* @__PURE__ */ console.assert(Number.isInteger(rhsNum));
    if (isMachineRational(lhs))
      return [lhs[0] * rhsNum, lhs[1]];
    return [lhs[0] * bigint(rhsNum), lhs[1]];
  }
  if (rhsNum instanceof decimal_default) {
    /* @__PURE__ */ console.assert(rhsNum.isInteger());
    if (isMachineRational(lhs))
      return [bigint(rhsNum.toString()) * bigint(lhs[0]), bigint(lhs[1])];
    return [bigint(rhsNum.toString()) * lhs[0], lhs[1]];
  }
  if (Array.isArray(rhsNum)) {
    if (isBigRational(rhsNum))
      return [rhsNum[0] * bigint(lhs[0]), rhsNum[1] * bigint(lhs[1])];
    else if (isMachineRational(lhs))
      return [lhs[0] * rhsNum[0], lhs[1] * rhsNum[1]];
    return [lhs[0] * bigint(rhsNum[0]), lhs[1] * bigint(rhsNum[1])];
  }
  return lhs;
}
function pow2(r, exp2) {
  /* @__PURE__ */ console.assert(Number.isInteger(exp2));
  if (exp2 === 0)
    return [1, 1];
  if (exp2 < 0) {
    r = inverse(r);
    exp2 = -exp2;
  }
  if (exp2 === 1)
    return r;
  if (isMachineRational(r))
    return [Math.pow(r[0], exp2), Math.pow(r[1], exp2)];
  const bigexp = bigint(exp2);
  return [r[0] ** bigexp, r[1] ** bigexp];
}
function reducedRational(r) {
  if (isMachineRational(r)) {
    if (r[0] === 1 || r[1] === 1)
      return r;
    if (r[1] < 0)
      r = [-r[0], -r[1]];
    if (!Number.isFinite(r[1]))
      return [0, 1];
    const g2 = gcd(r[0], r[1]);
    return g2 <= 1 ? r : [r[0] / g2, r[1] / g2];
  }
  if (r[0] === BigInt(1) || r[1] === BigInt(1))
    return r;
  if (r[1] < 0)
    r = [-r[0], -r[1]];
  const g = gcd2(r[0], r[1]);
  if (g <= 1)
    return r;
  return [r[0] / g, r[1] / g];
}
function rationalize(x) {
  if (!Number.isFinite(x))
    return x;
  const fractional = x % 1;
  if (fractional === 0)
    return x;
  const eps = 1e-15;
  let a = Math.floor(x);
  let h1 = 1;
  let k1 = 0;
  let h = a;
  let k = 1;
  while (x - a > eps * k * k) {
    x = 1 / (x - a);
    a = Math.floor(x);
    const h2 = h1;
    h1 = h;
    const k2 = k1;
    k1 = k;
    h = h2 + a * h1;
    k = k2 + a * k1;
  }
  return [h, k];
}
function asCoefficient(expr) {
  /* @__PURE__ */ console.assert(expr.isCanonical);
  const ce = expr.engine;
  if (expr.head === "Multiply") {
    const rest = [];
    let coef = [1, 1];
    for (const arg of expr.ops) {
      const n2 = arg.numericValue;
      if (n2 !== null && (typeof n2 === "number" && Number.isInteger(n2) || n2 instanceof decimal_default && n2.isInteger() || isRational(n2)))
        coef = mul2(coef, arg);
      else
        rest.push(arg);
    }
    coef = reducedRational(coef);
    if (isRationalOne(coef))
      return [[1, 1], expr];
    if (rest.length === 0)
      return [coef, ce._ONE];
    if (rest.length === 1)
      return [coef, rest[0]];
    return [coef, ce.mul(rest)];
  }
  if (expr.head === "Divide") {
    let [coef1, numer] = asCoefficient(expr.op1);
    const [coef2, denom] = asCoefficient(expr.op2);
    const coef = reducedRational(mul2(coef1, inverse(coef2)));
    if (denom.isOne)
      return [coef, numer];
    return [coef, ce.div(numer, denom)];
  }
  if (expr.head === "Power") {
    if (expr.op2.numericValue === null)
      return [[1, 1], expr];
    let [coef, base] = asCoefficient(expr.op1);
    if (isRationalOne(coef))
      return [[1, 1], expr];
    const exponent = expr.op2;
    const e = asSmallInteger(exponent);
    if (e === -1)
      return [inverse(coef), ce.inv(base)];
    if (e !== null)
      return [pow2(coef, e), ce.pow(base, exponent)];
    if (exponent.numericValue !== null && Array.isArray(exponent.numericValue)) {
      const [en, ed] = asMachineRational(exponent.numericValue);
      const [numer, denom] = asMachineRational(coef);
      if (numer > 0 && Math.abs(en) === 1) {
        const [nCoef, nRest] = factorPower(numer, ed);
        const [dCoef, dRest] = factorPower(denom, ed);
        if (nCoef === 1 && dCoef === 1)
          return [[1, 1], expr];
        return [
          en === 1 ? [nCoef, dCoef] : [dCoef, nCoef],
          ce.pow(ce.mul([ce.number([nRest, dRest]), base]), exponent)
        ];
      }
    }
    return [[1, 1], expr];
  }
  if (expr.head === "Add") {
  }
  if (expr.head === "Negate") {
    const [coef, rest] = asCoefficient(expr.op1);
    return [neg(coef), rest];
  }
  const n = expr.numericValue;
  if (n !== null) {
    if (n instanceof decimal_default) {
      if (n.isInteger())
        return [[bigint(n.toString()), BigInt(1)], ce._ONE];
      if (n.isNegative())
        return [[-1, 1], ce.number(n.neg())];
    }
    if (typeof n === "number") {
      if (Number.isInteger(n))
        return [[n, 1], ce._ONE];
      if (n < 0)
        return [[-1, 1], ce.number(-n)];
    }
    if (isRational(n))
      return [n, ce._ONE];
    if (n instanceof import_complex4.default && n.re < 0)
      return [[-1, 1], ce.number(ce.complex(-n.re, -n.im))];
  }
  return [[1, 1], expr];
}
function signDiff(lhs, rhs, tolerance) {
  if (lhs === rhs)
    return 0;
  const lhsN = lhs.N();
  const rhsN = rhs.N();
  const lhsNum = lhsN.numericValue;
  const rhsNum = rhsN.numericValue;
  if (lhsNum === null || rhsNum === null) {
    const lhsS = lhs.sgn;
    const rhsS = rhs.sgn;
    if (typeof lhsS !== "number" || typeof rhsS !== "number")
      return void 0;
    if (lhsS === 0 && rhsS === 0)
      return 0;
    if (lhsS < 0 && rhsS > 0)
      return -1;
    if (lhsS > 0 && rhsS < 0)
      return 1;
    return void 0;
  }
  tolerance != null ? tolerance : tolerance = lhs.engine.tolerance;
  if (lhsNum instanceof import_complex4.default && rhsNum instanceof import_complex4.default)
    return chop(lhsNum.re - rhsNum.re, tolerance) === 0 && chop(lhsNum.im - rhsNum.im, tolerance) === 0 ? 0 : void 0;
  if (lhsNum instanceof import_complex4.default || rhsNum instanceof import_complex4.default)
    return void 0;
  if (isRational(lhsNum) || isRational(rhsNum))
    return void 0;
  if (typeof lhsNum === "number" && typeof rhsNum === "number") {
    if (chop(rhsNum - lhsNum, tolerance) === 0)
      return 0;
    return lhsNum < rhsNum ? -1 : 1;
  }
  const ce = lhs.engine;
  const delta = ce.bignum(rhsNum).sub(ce.bignum(lhsNum));
  if (chop(delta, tolerance) === 0)
    return 0;
  return delta.isPos() ? 1 : -1;
}
var import_complex5 = __toESM(require_complex());
var Sum = class {
  constructor(ce, xs, options) {
    this._isCanonical = true;
    this._imaginary = 0;
    this._posInfinityCount = 0;
    this._negInfinityCount = 0;
    this._naNCount = 0;
    this._terms = [];
    options != null ? options : options = {};
    if (!("canonical" in options))
      this._isCanonical = true;
    else
      this._isCanonical = options.canonical;
    this.engine = ce;
    this._rational = bignumPreferred(ce) ? [BigInt(0), BigInt(1)] : [0, 1];
    this._bignum = ce._BIGNUM_ZERO;
    this._number = 0;
    if (xs)
      for (const x of xs)
        this.addTerm(x);
  }
  get isEmpty() {
    if (!this._isCanonical)
      return this._terms.length === 0;
    return this._terms.length === 0 && isRationalZero(this._rational) && this._imaginary === 0 && this._number === 0 && this._bignum.isZero() && this._negInfinityCount === 0 && this._posInfinityCount === 0 && this._naNCount === 0;
  }
  /**
   * Add a term to the sum.
   *
   * A term is a rational coefficient and an expression.
   * Optionally, the term is multiplied by the constant `c` before being added.
   *
   * If the sum already has this term, the coefficient is added
   * to the previous one. Otherwise, a new entry is added.
   *
   * E.g. "2x + x + 1/5 y"
   *  -> [['x', [3, 1]], ['y', [1, 5]]]
   */
  addTerm(term, c) {
    if (term.isNothing)
      return;
    if (term.isNaN || term.isImaginary && !complexAllowed(this.engine)) {
      this._naNCount += 1;
      return;
    }
    if (this._isCanonical) {
      if (term.numericValue !== null) {
        if (term.isInfinity) {
          if (term.isPositive)
            this._posInfinityCount += 1;
          else
            this._negInfinityCount += 1;
          return;
        }
        const r = asRational(term);
        if (r) {
          this._rational = add2(this._rational, c === void 0 ? r : mul2(r, c));
          return;
        }
        const num = term.numericValue;
        if (num !== null && typeof num === "number") {
          /* @__PURE__ */ console.assert(!Number.isInteger(num));
          if (bignumPreferred(this.engine))
            this._bignum = this._bignum.add(num);
          else
            this._number += num;
          return;
        }
        if (num !== null && num instanceof decimal_default) {
          /* @__PURE__ */ console.assert(!num.isInteger());
          this._bignum = this._bignum.add(num);
          return;
        }
        if (num !== null && num instanceof import_complex5.default) {
          let re = num.re;
          let im = num.im;
          if (Number.isInteger(re)) {
            this._rational = add2(this._rational, mul2([re, 1], c != null ? c : [1, 1]));
            re = 0;
          } else {
            if (bignumPreferred(this.engine))
              this._bignum = this._bignum.add(re);
            else
              this._number += re;
            re = 0;
          }
          if (Number.isInteger(im)) {
            if (c === void 0)
              this._imaginary += im;
            else if (isMachineRational(c))
              this._imaginary += im * c[0] / c[1];
            else
              this._imaginary += this.engine.bignum(c[0]).mul(im).div(this.engine.bignum(c[1])).toNumber();
            im = 0;
          }
          if (re === 0 && im === 0)
            return;
          term = this.engine.number(this.engine.complex(re, im));
        }
      }
    }
    let coef;
    [coef, term] = asCoefficient(term);
    if (isRationalZero(coef))
      return;
    if (c !== void 0)
      coef = mul2(coef, c);
    if (term.head === "Negate") {
      this.addTerm(term.op1, neg(coef));
      return;
    }
    if (term.head === "Add") {
      for (const x of term.ops)
        this.addTerm(x, coef);
      return;
    }
    let hasTerm = false;
    if (term.numericValue === null) {
      if (this._terms.length > 500) {
        const h = term.hash;
        for (let i = 0; i < this._terms.length; i++) {
          if (this._terms[i].term.numericValue === null && h === this._terms[i].term.hash && term.isSame(this._terms[i].term)) {
            this._terms[i].coef = add2(this._terms[i].coef, coef);
            hasTerm = true;
            break;
          }
        }
      } else {
        for (let i = 0; i < this._terms.length; i++) {
          if (this._terms[i].term.numericValue === null && term.isSame(this._terms[i].term)) {
            this._terms[i].coef = add2(this._terms[i].coef, coef);
            hasTerm = true;
            break;
          }
        }
      }
    }
    if (!hasTerm)
      this._terms.push({ term, coef });
  }
  // For debugging
  toString() {
    const xs = this.terms("expression");
    if (xs.length === 0)
      return "0";
    return xs.map((x) => x.toString()).join("\\n");
  }
  terms(mode) {
    const ce = this.engine;
    if (this._naNCount > 0)
      return [ce._NAN];
    if (this._imaginary !== 0 && !complexAllowed(ce))
      return [ce._NAN];
    if (this._posInfinityCount > 0 && this._negInfinityCount > 0)
      return [ce._NAN];
    if (this._posInfinityCount > 0)
      return [ce._POSITIVE_INFINITY];
    if (this._negInfinityCount > 0)
      return [ce._NEGATIVE_INFINITY];
    const xs = [];
    for (const { coef, term } of this._terms) {
      if (!isRationalZero(coef)) {
        if (isRationalOne(coef))
          xs.push(term);
        else if (isRationalNegativeOne(coef))
          xs.push(ce.neg(term));
        else if (machineDenominator(coef) === 1)
          xs.push(ce.mul([ce.number(coef[0]), term]));
        else if (machineNumerator(coef) === 1)
          xs.push(ce.div(term, ce.number(coef[1])));
        else
          xs.push(ce.mul([ce.number(coef), term]));
      }
    }
    if (mode === "numeric") {
      if (bignumPreferred(this.engine)) {
        let sum2 = this._bignum.add(this._number);
        if (!isRationalZero(this._rational))
          sum2 = sum2.add(
            ce.bignum(this._rational[0]).div(ce.bignum(this._rational[1]))
          );
        if (this._imaginary !== 0)
          xs.push(ce.number(ce.complex(sum2.toNumber(), this._imaginary)));
        else if (!sum2.isZero())
          xs.push(ce.number(sum2));
      } else {
        let sum2 = this._bignum.toNumber() + this._number;
        if (!isRationalZero(this._rational))
          sum2 += machineNumerator(this._rational) / machineDenominator(this._rational);
        if (this._imaginary !== 0)
          xs.push(ce.number(ce.complex(sum2, this._imaginary)));
        else if (sum2 !== 0)
          xs.push(ce.number(sum2));
      }
    } else {
      if (!isRationalZero(this._rational))
        xs.push(ce.number(this._rational));
      if (this._imaginary !== 0) {
        if (!complexAllowed(ce))
          return [ce._NAN];
        xs.push(ce.number(ce.complex(0, this._imaginary)));
      }
      if (bignumPreferred(this.engine)) {
        const sum2 = this._bignum.add(this._number);
        if (!sum2.isZero())
          xs.push(ce.number(sum2));
      } else {
        if (!this._bignum.isZero())
          xs.push(ce.number(this._bignum));
        if (this._number !== 0)
          xs.push(ce.number(this._number));
      }
    }
    return flattenOps(xs, "Add");
  }
  asExpression(mode) {
    const ce = this.engine;
    const xs = this.terms(mode);
    if (xs.length === 0)
      return ce._ZERO;
    if (xs.length === 1)
      return xs[0];
    return ce._fn("Add", sortAdd(ce, xs));
  }
};
var DOMAIN_CONSTRUCTORS = [
  "InvalidDomain",
  "Dictionary",
  "Function",
  "List",
  "Tuple",
  "Intersection",
  "Union",
  "Maybe",
  "Sequence",
  "Interval",
  "Range",
  "Head",
  "Symbol",
  "Value"
];
var DOMAIN_ALIAS = {
  // Function: ['Function', ['Sequence', 'Anything'], 'Anything'],
  NumericFunction: ["Function", ["Sequence", "Number"], "Number"],
  RealFunction: [
    "Function",
    ["Sequence", "ExtendedRealNumber"],
    "ExtendedRealNumber"
  ],
  TrigonometricFunction: ["Function", "Number", "Number"],
  // HyperbolicFunction: ['Function', 'Number', 'Number'],
  LogicOperator: [
    "Function",
    "MaybeBoolean",
    ["Maybe", "MaybeBoolean"],
    "MaybeBoolean"
  ],
  Predicate: ["Function", ["Sequence", "Anything"], "MaybeBoolean"],
  RelationalOperator: ["Function", "Anything", "Anything", "MaybeBoolean"]
  // PositiveInteger: ['Range', 1, +Infinity],
  // NonNegativeInteger: ['Range', 0, +Infinity],
  // NegativeInteger: ['Range', -Infinity, -1],
  // NonPositiveInteger: ['Range', -Infinity, 0],
  // PositiveNumber: ['Interval', ['Open', 0], +Infinity],
  // NonNegativeNumber: ['Interval', 0, +Infinity],
  // NegativeNumber: ['Interval', -Infinity, ['Open', 0]],
  // NonPositiveNumber: ['Interval', -Infinity, 0],
};
var DOMAIN_LITERAL = {
  Anything: [],
  Value: "Anything",
  Domain: "Anything",
  DomainExpression: "Domain",
  Void: "Nothing",
  Nothing: [
    "DomainExpression",
    "Boolean",
    "String",
    "Symbol",
    "Tuple",
    "List",
    "Dictionary",
    "InfiniteSet",
    "FiniteSet",
    "ImaginaryNumber",
    "TranscendentalNumber",
    "PositiveInteger",
    "NegativeInteger",
    "NonPositiveInteger",
    "NonNegativeInteger",
    "PositiveNumber",
    "NegativeNumber",
    "NonPositiveNumber",
    "NonNegativeNumber",
    "Scalar",
    "TrigonometricFunction",
    "LogicOperator",
    "RelationalOperator"
  ],
  MaybeBoolean: "Value",
  Boolean: "MaybeBoolean",
  String: "Boolean",
  Symbol: "Boolean",
  Collection: "Value",
  List: "Collection",
  Dictionary: "Collection",
  Sequence: "Collection",
  Tuple: "Sequence",
  Set: "Collection",
  InfiniteSet: "Set",
  FiniteSet: "Set",
  //
  // Functional Domains
  //
  Function: "Anything",
  Predicate: "Function",
  LogicOperator: "Predicate",
  RelationalOperator: "Predicate",
  // https://en.wikipedia.org/wiki/List_of_mathematical_functions
  NumericFunction: "Function",
  RealFunction: "NumericFunction",
  TrigonometricFunction: "RealFunction",
  //
  // Numeric Domains
  //
  // https://en.wikipedia.org/wiki/Category_of_sets
  Number: "Value",
  ExtendedComplexNumber: "Number",
  ComplexNumber: "ExtendedComplexNumber",
  ImaginaryNumber: "ComplexNumber",
  ExtendedRealNumber: "ExtendedComplexNumber",
  RealNumber: ["ComplexNumber", "ExtendedRealNumber"],
  PositiveNumber: "NonNegativeNumber",
  NonNegativeNumber: "RealNumber",
  NonPositiveNumber: "NegativeNumber",
  NegativeNumber: "RealNumber",
  TranscendentalNumber: "RealNumber",
  AlgebraicNumber: "RealNumber",
  RationalNumber: "AlgebraicNumber",
  // NaturalNumber: 'Integer',
  Integer: "RationalNumber",
  PositiveInteger: "NonNegativeInteger",
  NonNegativeInteger: "Integer",
  NonPositiveInteger: "NegativeInteger",
  NegativeInteger: "Integer",
  //
  // Tensorial Domains
  //
  Tensor: "Value",
  Matrix: "Tensor",
  Scalar: ["Row", "Column"],
  Row: "Vector",
  Column: "Vector",
  Vector: "Matrix"
  // https://en.wikipedia.org/wiki/List_of_named_matrices
  // ComplexTensor: 'Tensor',
  // RealTensor: 'ComplexTensor',
  // IntegerTensor: 'RealTensor',
  // LogicalTensor: 'IntegerTensor',
  // SquareMatrix: 'Matrix',
  // MonomialMatrix: 'SquareMatrix',
  // TriangularMatrix: 'SquareMatrix',
  // UpperTriangularMatrix: 'TriangularMatrix',
  // LowerTriangularMatrix: 'TriangularMatrix',
  // PermutationMatrix: ['MonomialMatrix', 'LogicalTensor', 'OrthogonalMatrix'],
  // OrthogonalMatrix: ['SquareMatrix', 'RealTensor'],
  // DiagonalMatrix: ['UpperTriangularMatrix', 'LowerTriangularMatrix'],
  // IdentityMatrix: ['DiagonalMatrix', 'SymmetricMatrix', 'PermutationMatrix'],
  // ZeroMatrix: ['DiagonalMatrix', 'SymmetricMatrix', 'PermutationMatrix'],
  // SymmetricMatrix: ['HermitianMatrix', 'SquareMatrix', 'RealTensor'],
  // HermitianMatrix: 'ComplexTensor',
  // Quaternion: ['SquareMatrix', 'ComplexTensor'],
};
var gDomainLiterals;
function isDomainLiteral(s) {
  if (!s)
    return false;
  return DOMAIN_LITERAL[s] !== void 0;
}
function ancestors(dom) {
  if (!gDomainLiterals) {
    gDomainLiterals = {};
    ancestors("Void");
  }
  if (gDomainLiterals[dom])
    return Array.from(gDomainLiterals[dom]);
  let result = [];
  if (typeof dom !== "string" || !DOMAIN_LITERAL[dom]) {
    if (!Array.isArray(dom))
      throw Error(`Unknown domain literal ${dom}`);
    if (!DOMAIN_CONSTRUCTORS.includes(dom[0]))
      throw Error(`Unknown domain constructor ${dom[0]}`);
    if (dom[0] === "Function" || dom[0] === "Head")
      return ancestors("Function");
    if (dom[0] === "Symbol")
      return ancestors("Symbol");
    if (dom[0] === "Tuple")
      return ancestors("Tuple");
    if (dom[0] === "List")
      return ancestors("List");
    if (dom[0] === "Dictionary")
      return ancestors("Dictionary");
    if (dom[0] === "Range")
      return ancestors("Integer");
    if (dom[0] === "Interval")
      return ancestors("RealNumberExtended");
    if (dom[0] === "Maybe" || dom[0] === "Sequence")
      return ancestors(dom[1]);
    if (dom[0] === "Literal")
      return ["Anything"];
    if (dom[0] === "Union")
      return ["Anything"];
    if (dom[0] === "Intersection")
      return ["Anything"];
    return ["Anything"];
  }
  if (typeof DOMAIN_LITERAL[dom] === "string")
    result = [DOMAIN_LITERAL[dom], ...ancestors(DOMAIN_LITERAL[dom])];
  else if (Array.isArray(DOMAIN_LITERAL[dom]))
    for (const parent of DOMAIN_LITERAL[dom]) {
      result.push(parent);
      result.push(...ancestors(parent));
    }
  gDomainLiterals[dom] = new Set(result);
  return result;
}
function domainSetsLibrary() {
  const table = {};
  for (const dom of Object.keys(DOMAIN_LITERAL)) {
    if (dom !== "Domain" && dom !== "Nothing" && dom !== "String" && dom !== "Symbol" && dom !== "List" && dom !== "Tuple" && dom !== "Sequence")
      table[dom] = { domain: "Set" };
  }
  return table;
}
var import_complex6 = __toESM(require_complex());
function isSymbolDefinition(def) {
  return !!def && typeof def === "object" && ("domain" in def || "value" in def || "constant" in def);
}
function isFunctionDefinition(def) {
  if (def === void 0 || def === null)
    return false;
  if (typeof def !== "object")
    return false;
  if ("complexity" in def || "numeric" in def || "signature" in def)
    return true;
  if (!("domain" in def))
    return false;
  if (def.domain === void 0)
    return false;
  if (typeof def.domain === "string")
    return def.domain === "Function";
  return def.domain.isFunction;
}
function normalizeLimits(range) {
  var _a, _b;
  let lower = 1;
  let upper = lower + MAX_ITERATION;
  let index = "Nothing";
  let isFinite2 = true;
  if (range.head === "Tuple" || range.head === "Triple" || range.head === "Pair" || range.head === "Single") {
    index = (_a = range.op1.head === "Hold" ? range.op1.op1.symbol : range.op1.symbol) != null ? _a : "Nothing";
    lower = (_b = asSmallInteger(range.op2)) != null ? _b : 1;
    if (!Number.isFinite(lower))
      isFinite2 = false;
    if (range.op3.isNothing || range.op3.isInfinity) {
      isFinite2 = false;
    } else {
      const u = asSmallInteger(range.op3);
      if (u === null)
        isFinite2 = false;
      else {
        upper = u;
        if (!Number.isFinite(upper))
          isFinite2 = false;
      }
    }
    if (!isFinite2 && Number.isFinite(lower))
      upper = lower + MAX_ITERATION;
  }
  return [index, lower, upper, isFinite2];
}
var ComputeEngineFunction = class extends Function {
  constructor(body) {
    super("_SYS", "_", `return ${body}`);
    this.sys = {
      factorial,
      gamma,
      lngamma,
      gcd,
      lcm,
      chop
    };
    return new Proxy(this, {
      apply: (target, thisArg, argumentsList) => super.apply(thisArg, [this.sys, ...argumentsList]),
      get: (target, prop) => {
        if (prop === "toString")
          return () => body;
        return target[prop];
      }
    });
  }
};
function compileToJavascript(expr) {
  const js = compile(expr, expr.freeVars);
  try {
    return new ComputeEngineFunction(js);
  } catch (e) {
    console.error(`${e}
${expr.latex}
${js}`);
  }
  return void 0;
}
function compile(expr, freeVars = [], prec = 0) {
  var _a;
  const f = asFloat(expr);
  if (f !== null)
    return f.toString();
  const s = expr.symbol;
  if (s !== null) {
    const result = {
      True: "true",
      False: "false",
      Pi: "Math.PI",
      ExponentialE: "Math.E",
      I: "Math.I",
      NaN: "Number.NaN",
      ImaginaryUnit: "NaN",
      Half: "0.5",
      MachineEpsilon: "Number.EPSILON",
      GoldenRatio: "((1 + Math.sqrt(5)) / 2)",
      CatalanConstant: "0.91596559417721901",
      EulerGamma: "0.57721566490153286"
    }[s];
    if (result !== void 0)
      return result;
    if (freeVars.includes(s))
      return `_.${s}`;
    return s;
  }
  const str = expr.string;
  if (str !== null)
    return JSON.stringify(str);
  const keys = expr.keys;
  if (keys !== null) {
    const result = [];
    for (const key of keys) {
      const value = expr.getKey(key);
      if (value)
        result.push(`${key}: ${compile(value, freeVars, 0)}`);
    }
    return `{${result.join(", ")}}`;
  }
  const h = expr.head;
  if (typeof h === "string") {
    if (h === "Negate") {
      const arg = expr.op1;
      if (arg === null)
        return "";
      return `-${compile(arg, freeVars, 3)}`;
    }
    if (h === "Error")
      throw new Error("Error");
    if (h === "Sum")
      return compileLoop(expr, "+");
    if (h === "Product")
      return compileLoop(expr, "*");
    if (h === "Root") {
      const arg = expr.op1;
      if (arg === null)
        throw new Error("Root: no argument");
      const exp2 = expr.op2;
      if (exp2 === null)
        return `Math.sqrt(${compile(arg, freeVars, 0)})`;
      return `Math.pow(${compile(arg, freeVars)}, 1/${compile(exp2, freeVars)}`;
    }
    if (h === "Factorial") {
      const arg = expr.op1;
      if (arg === null)
        throw new Error("Factorial: no argument");
      return `_SYS.factorial(${compile(arg, freeVars)})`;
    }
    if (h === "Power") {
      const arg = expr.op1;
      if (arg === null)
        throw new Error("Power: no argument");
      const exp2 = asFloat(expr.op2);
      if (exp2 === 0.5)
        return `Math.sqrt(${compile(arg, freeVars)})`;
      if (exp2 === 1 / 3)
        return `Math.cbrt(${compile(arg, freeVars)})`;
      if (exp2 === 1)
        return compile(arg, freeVars);
      if (exp2 === -1)
        return `1 / ${compile(arg, freeVars)}`;
      if (exp2 === -0.5)
        return `1 / Math.sqrt(${compile(arg, freeVars)})`;
    }
    if (h === "Square") {
      const arg = expr.op1;
      if (arg === null)
        throw new Error("Square: no argument");
      return `Math.pow(${compile(arg, freeVars)}, 2)`;
    }
    const OPS = {
      Add: ["+", 11],
      Negate: ["-", 14],
      // Unary operator
      Subtract: ["-", 11],
      Multiply: ["*", 12],
      Divide: ["/", 13],
      Equal: ["===", 8],
      NotEqual: ["!==", 8],
      LessEqual: ["<=", 9],
      GreaterEqual: [">=", 9],
      Less: ["<", 9],
      Greater: [">", 9],
      And: ["&&", 4],
      Or: ["||", 3],
      Not: ["!", 14]
      // Unary operator
      // Xor: ['^', 6], // That's bitwise XOR, not logical XOR
      // Possible solution is to use `a ? !b : b` instead of `a ^ b`
    };
    const op3 = OPS[h];
    if (op3 !== void 0) {
      const args2 = expr.ops;
      if (args2 === null)
        return "";
      let resultStr;
      if (args2.length === 1) {
        resultStr = `${op3[0]}${compile(args2[0], freeVars, op3[1])}`;
      } else {
        resultStr = args2.map((arg) => compile(arg, freeVars, op3[1])).join(` ${op3[0]} `);
      }
      return op3[1] < prec ? `(${resultStr})` : resultStr;
    }
    const fn = (_a = {
      Abs: "Math.abs",
      Arccos: "Math.acos",
      Arcosh: "Math.acosh",
      Arsin: "Math.asin",
      Arsinh: "Math.asinh",
      Arctan: "Math.atan",
      Artanh: "Math.atanh",
      // Math.cbrt
      Ceiling: "Math.ceil",
      Chop: "_SYS.chop",
      Cos: "Math.cos",
      Cosh: "Math.cosh",
      Exp: "Math.exp",
      Floor: "Math.floor",
      Gamma: "_SYS.gamma",
      Gcd: "_SYS.gcd",
      // Math.hypot
      Lcm: "_SYS.lcm",
      Ln: "Math.log",
      Log: "Math.log10",
      LogGamma: "_SYS.lngamma",
      Lb: "Math.log2",
      Max: "Math.max",
      Min: "Math.min",
      Power: "Math.pow",
      Random: "Math.random",
      Round: "Math.round",
      Sgn: "Math.sign",
      Sin: "Math.sin",
      Sinh: "Math.sinh",
      Sqrt: "Math.sqrt",
      Tan: "Math.tan",
      Tanh: "Math.tanh"
      // Factorial: 'factorial',    // TODO: implement
      // Hallucinated by Copilot, but interesting ideas...
      // Cot: 'Math.cot',
      // Sec: 'Math.sec',
      // Csc: 'Math.csc',
      // ArcCot: 'Math.acot',
      // ArcSec: 'Math.asec',
      // ArcCsc: 'Math.acsc',
      // Coth: 'Math.coth',
      // Sech: 'Math.sech',
      // Csch: 'Math.csch',
      // ArcCoth: 'Math.acoth',
      // ArcSech: 'Math.asech',
      // ArcCsch: 'Math.acsch',
      // Root: 'Math.root',
      // Gamma: 'Math.gamma',
      // Erf: 'Math.erf',
      // Erfc: 'Math.erfc',
      // Erfi: 'Math.erfi',
      // Zeta: 'Math.zeta',
      // PolyGamma: 'Math.polygamma',
      // HurwitzZeta: 'Math.hurwitzZeta', $$\zeta (s,a)=\sum _{n=0}^{\infty }{\frac {1}{(n+a)^{s}}}$$
      // DirichletEta: 'Math.dirichletEta',
      // Beta: 'Math.beta',
      // Binomial: 'Math.binomial',
      // Mod: 'Math.mod',
      // Quotient: 'Math.quotient',
      // GCD: 'Math.gcd',
      // LCM: 'Math.lcm',
      // Divisors: 'Math.divisors',
      // PrimeQ: 'Math.isPrime',
      // PrimePi: 'Math.primePi',
      // Prime: 'Math.prime',
      // NextPrime: 'Math.nextPrime',
      // PreviousPrime: 'Math.prevPrime',
      // PrimePowerQ: 'Math.isPrimePower',
      // PrimePowerPi: 'Math.primePowerPi',
      // PrimePower: 'Math.primePower',
      // NextPrimePower: 'Math.nextPrimePower',
      // PreviousPrimePower: 'Math.prevPrimePower',
      // PrimeFactors: 'Math.primeFactors',
      // DivisorSigma: 'Math.divisorSigma',
      // DivisorSigma0: 'Math.divisorSigma0',
      // DivisorSigma1: 'Math.divisorSigma1',
      // DivisorSigma2: 'Math.divisorSigma2',
      // DivisorSigma3: 'Math.divisorSigma3',
      // DivisorSigma4: 'Math.divisorSigma4',
      // DivisorCount: 'Math.divisorCount',
      // DivisorSum: 'Math.divisorSum',
      // MoebiusMu: 'Math.moebiusMu',
      // LiouvilleLambda: 'Math.liouvilleLambda',
      // CarmichaelLambda: 'Math.carmichaelLambda',
      // EulerPhi: 'Math.eulerPhi',
      // EulerPsi: 'Math.eulerPsi',
      // EulerGamma: 'Math.eulerGamma',
      // HarmonicNumber: 'Math.harmonicNumber',
      // BernoulliB: 'Math.bernoulliB',
      // StirlingS1: 'Math.stirlingS1',
      // StirlingS2: 'Math.stirlingS2',
      // BellB: 'Math.bellB',
      // BellNumber: 'Math.bellNumber',
      // LahS: 'Math.lahS',
      // LahL: 'Math.lahL',
      // RiemannR: 'Math.riemannR',
      // RiemannZeta: 'Math.riemannZeta',
      // RiemannXi: 'Math.riemannXi',
      // RiemannH: 'Math.riemannH',
      // RiemannZ: 'Math.riemannZ',
      // RiemannS: 'Math.riemannS',
      // RiemannXiZero: 'Math.riemannXiZero',
      // RiemannZetaZero: 'Math.riemannZetaZero',
      // RiemannHZero: 'Math.riemannHZero',
      // RiemannSZero: 'Math.riemannSZero',
      // RiemannPrimeCount: 'Math.riemannPrimeCount',
      // RiemannRLog: 'Math.riemannRLog',
      // RiemannRLogDerivative: 'Math.riemannRLogDerivative',
      // RiemannRLogZero: 'Math.riemannRLogZero',
      // RiemannRLogZeroDerivative: 'Math.riemannRLogZeroDerivative',
      // RiemannRZero: 'Math.riemannRZero',
      // RiemannRDerivative: 'Math.riemannRDerivative',
      // RiemannXiZeroDerivative: 'Math.riemannXiZeroDerivative',
      // RiemannZetaZeroDerivative: 'Math.riemannZetaZeroDerivative',
      // RiemannHZeroDerivative: 'Math.riemannHZeroDerivative',
      // RiemannSZeroDerivative: 'Math.riemannSZeroDerivative',
      // RiemannSZeroDerivative2: 'Math.riemannSZeroDerivative2',
      // RiemannSZeroDerivative3: 'Math.riemannSZeroDerivative3',
      // RiemannSZeroDerivative4: 'Math.riemannSZeroDerivative4',
      // RiemannSZeroDerivative5: 'Math.riemannSZeroDerivative5',
      // RiemannSZeroDerivative6: 'Math.riemannSZeroDerivative6',
    }[h]) != null ? _a : h;
    const args = expr.ops;
    if (args !== null) {
      const result = [];
      for (const arg of args)
        result.push(compile(arg, freeVars));
      return `${fn}(${result.join(", ")})`;
    }
  }
  return "";
}
function compileLoop(expr, op3) {
  const args = expr.ops;
  if (args === null)
    throw new Error("Sum: no arguments");
  if (!expr.op1 || !expr.op2)
    throw new Error("Sum: no limits");
  const [index, lower, upper, isFinite2] = normalizeLimits(expr.op2);
  const fn = compile(expr.op1, [...expr.op1.freeVars, index], 0);
  return `(() => {
  let acc = ${op3 === "+" ? "0" : "1"};
  const fn = (_) => ${fn};
  for (let i = ${lower}; i <= ${upper}; i++)
    acc ${op3}= fn({ ..._, ${index}: i });
  return acc;
})()`;
}
var AbstractBoxedExpression = class {
  constructor(ce, metadata) {
    this.engine = ce;
    if ((metadata == null ? void 0 : metadata.latex) !== void 0)
      this._latex = metadata.latex;
    if ((metadata == null ? void 0 : metadata.wikidata) !== void 0)
      this._wikidata = metadata.wikidata;
  }
  /** `Object.valueOf()`: return a primitive value for the object
   *
   */
  valueOf() {
    var _a, _b, _c;
    if (this.symbol === "True")
      return true;
    if (this.symbol === "False")
      return false;
    return (_c = (_b = (_a = asFloat(this)) != null ? _a : this.string) != null ? _b : this.symbol) != null ? _c : JSON.stringify(this.json);
  }
  /** Object.toString() */
  toString() {
    if (this.symbol)
      return this.symbol;
    if (this.string)
      return this.string;
    const num = this.numericValue;
    if (num !== null) {
      if (typeof num === "number")
        return num.toString();
      if (isMachineRational(num))
        return `${num[0].toString()}/${num[1].toString()}`;
      if (isBigRational(num))
        return `${num[0].toString()}/${num[1].toString()}`;
      if (num instanceof import_complex6.Complex) {
        const im = num.im === 1 ? "" : num.im === -1 ? "-" : num.im.toString();
        if (num.re === 0)
          return im + "i";
        if (num.im < 0)
          return `${num.re.toString()}${im}i`;
        return `${num.re.toString()}+${im}i`;
      }
    }
    return JSON.stringify(this.json);
  }
  [Symbol.toPrimitive](hint) {
    if (hint === "number") {
      const v = this.valueOf();
      return typeof v === "number" ? v : null;
    }
    return this.toString();
  }
  /** Called by `JSON.stringify()` when serializing to json */
  toJSON() {
    return this.json;
  }
  /** @internal */
  get rawJson() {
    return this.json;
  }
  get scope() {
    return null;
  }
  /** Object.is() */
  is(rhs) {
    if (rhs === null || rhs === void 0)
      return false;
    return this.isSame(this.engine.box(rhs));
  }
  get latex() {
    var _a;
    return (_a = this._latex) != null ? _a : this.engine.serialize(this);
  }
  set latex(val) {
    this._latex = val;
  }
  get symbol() {
    return null;
  }
  get isNothing() {
    return false;
  }
  get string() {
    return null;
  }
  getSubexpressions(head2) {
    return getSubexpressions(this, head2);
  }
  get subexpressions() {
    return this.getSubexpressions("");
  }
  get symbols() {
    const set = /* @__PURE__ */ new Set();
    getSymbols(this, set);
    return Array.from(set);
  }
  get freeVars() {
    const set = /* @__PURE__ */ new Set();
    getFreeVars(this, set);
    return Array.from(set);
  }
  get errors() {
    return this.getSubexpressions("Error");
  }
  // Only return non-null for functions
  get ops() {
    return null;
  }
  get nops() {
    return 0;
  }
  get op1() {
    return this.engine.symbol("Nothing");
  }
  get op2() {
    return this.engine.symbol("Nothing");
  }
  get op3() {
    return this.engine.symbol("Nothing");
  }
  get isValid() {
    return true;
  }
  get isPure() {
    return false;
  }
  get isExact() {
    return true;
  }
  /** For a symbol, true if the symbol is a free variable (no value) */
  get isFree() {
    return false;
  }
  /** For a symbol, true if the symbol is a constant (unchangeable value) */
  get isConstant() {
    return false;
  }
  get canonical() {
    return this;
  }
  apply(_fn, _head) {
    return this;
  }
  subs(_sub, options) {
    if (options == null ? void 0 : options.canonical)
      return this.canonical;
    return this;
  }
  solve(_vars) {
    return null;
  }
  replace(_rules) {
    return null;
  }
  has(_v) {
    return false;
  }
  get isNaN() {
    return void 0;
  }
  get isZero() {
    return void 0;
  }
  get isNotZero() {
    return void 0;
  }
  get isOne() {
    return void 0;
  }
  get isNegativeOne() {
    return void 0;
  }
  get isInfinity() {
    return void 0;
  }
  // Not +- Infinity, not NaN
  get isFinite() {
    return void 0;
  }
  get isEven() {
    return void 0;
  }
  get isOdd() {
    return void 0;
  }
  get isPrime() {
    return void 0;
  }
  get isComposite() {
    return void 0;
  }
  get numericValue() {
    return null;
  }
  get sgn() {
    return null;
  }
  isLess(_rhs) {
    return void 0;
  }
  isLessEqual(_rhs) {
    return void 0;
  }
  isGreater(_rhs) {
    return void 0;
  }
  isGreaterEqual(_rhs) {
    return void 0;
  }
  // x > 0
  get isPositive() {
    return void 0;
  }
  // x >= 0
  get isNonNegative() {
    return void 0;
  }
  // x < 0
  get isNegative() {
    return void 0;
  }
  // x <= 0
  get isNonPositive() {
    return void 0;
  }
  //
  //
  //
  //
  //
  isCompatible(_dom, _kind) {
    return false;
  }
  get description() {
    return void 0;
  }
  get url() {
    return void 0;
  }
  get wikidata() {
    return this._wikidata;
  }
  set wikidata(val) {
    this._wikidata = val;
  }
  get complexity() {
    return void 0;
  }
  get basedDefinition() {
    return void 0;
  }
  get symbolDefinition() {
    return void 0;
  }
  get functionDefinition() {
    return void 0;
  }
  bind(_scope) {
    return;
  }
  unbind() {
    return;
  }
  get keys() {
    return null;
  }
  get keysCount() {
    return 0;
  }
  getKey(_key) {
    return void 0;
  }
  hasKey(_key) {
    return false;
  }
  get value() {
    return void 0;
  }
  set value(_value) {
    throw new Error(`Can't change the value of \\(${this.latex}\\)`);
  }
  get domain() {
    return this.engine.domain("Void");
  }
  set domain(_domain) {
    throw new Error(`Can't change the domain of \\(${this.latex}\\)`);
  }
  get explicitDomain() {
    return this.domain;
  }
  get isNumber() {
    return void 0;
  }
  get isInteger() {
    return void 0;
  }
  get isRational() {
    return void 0;
  }
  get isAlgebraic() {
    return false;
  }
  get isReal() {
    return void 0;
  }
  // Real or +-Infinity
  get isExtendedReal() {
    return void 0;
  }
  get isComplex() {
    return void 0;
  }
  get isImaginary() {
    return void 0;
  }
  get isExtendedComplex() {
    return void 0;
  }
  simplify(_options) {
    return this;
  }
  evaluate(options) {
    return this.simplify(options);
  }
  N(_options) {
    return this.evaluate();
  }
  compile(to = "javascript", options) {
    if (to !== "javascript")
      return void 0;
    options != null ? options : options = { optimize: ["simplify", "evaluate"] };
    let expr = this;
    if (options.optimize.includes("simplify"))
      expr = expr.simplify();
    if (options.optimize.includes("evaluate"))
      expr = expr.evaluate();
    try {
      return compileToJavascript(expr);
    } catch (e) {
    }
    return void 0;
  }
};
var import_complex8 = __toESM(require_complex());
function factorial2(ce, n) {
  if (!n.isInteger() || n.isNegative())
    return ce._BIGNUM_NAN;
  if (n.lessThan(10))
    return ce.bignum(
      [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800][n.toNumber()]
    );
  if (n.gt(Number.MAX_SAFE_INTEGER)) {
    let val2 = ce._BIGNUM_ONE;
    let i = ce._BIGNUM_TWO;
    while (i.lessThan(n)) {
      val2 = val2.mul(i);
      i = i.add(1);
    }
    return val2;
  }
  if (n.modulo(2).eq(1)) {
    return n.times(factorial2(ce, n.minus(1)));
  }
  let loop = n.toNumber();
  let sum2 = n;
  let val = n;
  while (loop > 2) {
    loop -= 2;
    sum2 = sum2.add(loop);
    val = val.mul(sum2);
  }
  return val;
}
var gammaG2 = 7;
function lngamma2(ce, z) {
  if (z.isNegative())
    return ce._BIGNUM_NAN;
  const GAMMA_P_LN = ce.cache("gamma-p-ln", () => {
    return [
      "0.99999999999999709182",
      "57.156235665862923517",
      "-59.597960355475491248",
      "14.136097974741747174",
      "-0.49191381609762019978",
      "0.33994649984811888699e-4",
      "0.46523628927048575665e-4",
      "-0.98374475304879564677e-4",
      "0.15808870322491248884e-3",
      "-0.21026444172410488319e-3",
      "0.2174396181152126432e-3",
      "-0.16431810653676389022e-3",
      "0.84418223983852743293e-4",
      "-0.2619083840158140867e-4",
      "0.36899182659531622704e-5"
    ].map((x2) => ce.bignum(x2));
  });
  let x = GAMMA_P_LN[0];
  for (let i = GAMMA_P_LN.length - 1; i > 0; --i) {
    x = x.add(GAMMA_P_LN[i].div(z.add(i)));
  }
  const GAMMA_G_LN = ce.cache("gamma-g-ln", () => ce.bignum(607).div(128));
  const t = z.add(GAMMA_G_LN).add(ce._BIGNUM_HALF);
  return ce._BIGNUM_NEGATIVE_ONE.acos().mul(ce._BIGNUM_TWO).log().mul(ce._BIGNUM_HALF).add(
    t.log().mul(z.add(ce._BIGNUM_HALF)).minus(t).add(x.log()).minus(z.log())
  );
}
function gamma2(ce, z) {
  if (z.lessThan(ce._BIGNUM_HALF)) {
    const pi = ce._BIGNUM_NEGATIVE_ONE.acos();
    return pi.div(
      pi.mul(z).sin().mul(gamma2(ce, ce._BIGNUM_ONE.sub(z)))
    );
  }
  if (z.greaterThan(100))
    return lngamma2(ce, z).exp();
  z = z.sub(1);
  const LANCZOS_7_C = ce.cache("lanczos-7-c", () => {
    return [
      "0.99999999999980993227684700473478",
      "676.520368121885098567009190444019",
      "-1259.13921672240287047156078755283",
      "771.3234287776530788486528258894",
      "-176.61502916214059906584551354",
      "12.507343278686904814458936853",
      "-0.13857109526572011689554707",
      "9.984369578019570859563e-6",
      "1.50563273514931155834e-7"
    ].map((x2) => ce.bignum(x2));
  });
  let x = LANCZOS_7_C[0];
  for (let i = 1; i < gammaG2 + 2; i++)
    x = x.add(LANCZOS_7_C[i].div(z.add(i)));
  const t = z.add(gammaG2).add(ce._BIGNUM_HALF);
  return ce._BIGNUM_NEGATIVE_ONE.acos().times(ce._BIGNUM_TWO).sqrt().mul(x.mul(t.neg().exp()).mul(t.pow(z.add(ce._BIGNUM_HALF))));
}
function isInMachineRange(d) {
  if (!d.isFinite())
    return true;
  if (d.d.length > 3 || d.d.length === 3 && d.d[0] >= 90)
    return false;
  /* @__PURE__ */ console.assert(d.precision() <= 16);
  return d.e < 308 && d.e > -306;
}
var import_complex7 = __toESM(require_complex());
var Product = class {
  constructor(ce, xs, options) {
    this.options = options;
    this._terms = [];
    this._hasInfinity = false;
    this._hasZero = false;
    this._isCanonical = true;
    options = options ? { ...options } : {};
    if (!("canonical" in options))
      options.canonical = true;
    this._isCanonical = options.canonical;
    this.engine = ce;
    this._sign = 1;
    this._rational = bignumPreferred(ce) ? [BigInt(1), BigInt(1)] : [1, 1];
    this._complex = import_complex7.default.ONE;
    this._bignum = ce._BIGNUM_ONE;
    this._number = 1;
    if (xs)
      for (const x of xs)
        this.addTerm(x);
  }
  get isEmpty() {
    if (!this._isCanonical)
      return this._terms.length === 0;
    return this._terms.length === 0 && this._hasInfinity === false && this._hasZero === false && this._sign === 1 && isRationalOne(this._rational) && // isRationalOne(this._squareRootRational) &&
    this._complex.re === 1 && this._complex.im === 0 && this._bignum.eq(this.engine._BIGNUM_ONE) && this._number === 1;
  }
  /**
   * Add a term to the product.
   *
   * If `this._isCanonical` a running product of exact terms is kept.
   * Otherwise, terms and their exponent are tallied.
   */
  addTerm(term) {
    /* @__PURE__ */ console.assert(term.isCanonical);
    if (term.head === "Multiply") {
      for (const t of term.ops)
        this.addTerm(t);
      return;
    }
    if (this._isCanonical) {
      if (term.isNothing)
        return;
      if (term.numericValue !== null) {
        if (term.isOne)
          return;
        if (term.isZero) {
          this._hasZero = true;
          return;
        }
        if (term.isNegativeOne) {
          this._sign *= -1;
          return;
        }
        if (term.isInfinity) {
          this._hasInfinity = true;
          if (term.isNegative)
            this._sign *= -1;
          return;
        }
        let num = term.numericValue;
        if (typeof num === "number") {
          if (num < 0) {
            this._sign *= -1;
            num = -num;
          }
          if (Number.isInteger(num))
            this._rational = mul2(this._rational, [num, 1]);
          else if (bignumPreferred(this.engine))
            this._bignum = this._bignum.mul(num);
          else
            this._number *= num;
          return;
        }
        if (num instanceof decimal_default) {
          if (num.isNegative()) {
            this._sign *= -1;
            num = num.neg();
          }
          if (num.isInteger())
            this._rational = mul2(this._rational, [bigint(num), BigInt(1)]);
          else if (bignumPreferred(this.engine))
            this._bignum = this._bignum.mul(num);
          else
            this._number *= num.toNumber();
          return;
        }
        if (num instanceof import_complex7.default) {
          this._complex = this._complex.mul(num);
          return;
        }
        if (isRational(num)) {
          this._rational = mul2(this._rational, num);
          if (isNeg(this._rational)) {
            this._sign *= -1;
            this._rational = neg(this._rational);
          }
          return;
        }
      }
    }
    let rest = term;
    if (this._isCanonical) {
      let coef;
      [coef, rest] = asCoefficient(term);
      this._rational = mul2(this._rational, coef);
      if (isNeg(this._rational)) {
        this._sign *= -1;
        this._rational = neg(this._rational);
      }
    }
    if (rest.numericValue !== null && rest.isOne)
      return;
    let exponent = [1, 1];
    if (rest.head === "Power") {
      const r = asRational(rest.op2);
      if (r) {
        exponent = r;
        rest = rest.op1;
      }
    } else if (rest.head === "Divide") {
      this.addTerm(rest.op1);
      exponent = [-1, 1];
      rest = rest.op2;
    }
    let found = false;
    for (const x of this._terms) {
      if (x.term.isSame(rest)) {
        x.exponent = add2(x.exponent, exponent);
        found = true;
        break;
      }
    }
    if (!found)
      this._terms.push({ term: rest, exponent });
  }
  unitTerms(mode) {
    const ce = this.engine;
    if (mode === "numeric") {
      if (!complexAllowed(ce) && this._complex.im !== 0)
        return null;
      if (bignumPreferred(ce)) {
        let b2 = ce._BIGNUM_ONE;
        if (!isRationalOne(this._rational)) {
          if (isBigRational(this._rational))
            b2 = ce.bignum(this._rational[0].toString()).div(ce.bignum(this._rational[1].toString()));
          else
            b2 = ce.bignum(this._rational[0]).div(this._rational[1]);
        }
        b2 = b2.mul(this._bignum).mul(this._sign * this._number);
        if (this._complex.im !== 0) {
          const z = this._complex.mul(b2.toNumber());
          if (z.equals(1))
            return [];
          return [{ exponent: [1, 1], terms: [ce.number(z)] }];
        }
        b2 = b2.mul(this._complex.re);
        if (b2.equals(1))
          return [];
        return [{ exponent: [1, 1], terms: [ce.number(b2)] }];
      }
      let n2 = 1;
      if (!isRationalOne(this._rational)) {
        if (isBigRational(this._rational))
          n2 = Number(this._rational[0]) / Number(this._rational[1]);
        else
          n2 = this._rational[0] / this._rational[1];
      }
      n2 *= this._sign * this._number * this._bignum.toNumber();
      if (this._complex.im !== 0) {
        const z = this._complex.mul(n2);
        if (z.equals(1))
          return [];
        return [{ exponent: [1, 1], terms: [ce.number(z)] }];
      }
      n2 *= this._complex.re;
      if (n2 === 1)
        return [];
      return [{ exponent: [1, 1], terms: [ce.number(n2)] }];
    }
    const xs = [];
    const unitTerms = [];
    if (this._hasInfinity)
      unitTerms.push(ce._POSITIVE_INFINITY);
    this._rational = reducedRational(this._rational);
    if (this._complex.re !== 1 || this._complex.im !== 0) {
      if (this._complex.im === 0)
        this._number *= Math.abs(this._complex.re);
      if (this._complex.re < 0)
        this._rational = neg(this._rational);
      else {
        unitTerms.push(ce.number(this._complex));
      }
    }
    let n = this._sign * this._number;
    let b = this._bignum;
    if (!isRationalOne(this._rational)) {
      if (mode === "rational") {
        if (machineNumerator(this._rational) !== 1) {
          if (isBigRational(this._rational))
            b = b.mul(ce.bignum(this._rational[0]));
          else
            n *= this._rational[0];
        }
        if (machineDenominator(this._rational) !== 1)
          xs.push({
            exponent: [-1, 1],
            terms: [ce.number(this._rational[1])]
          });
      } else {
        if (n === -1) {
          unitTerms.push(ce.number(neg(this._rational)));
          n = 1;
        } else
          unitTerms.push(ce.number(this._rational));
      }
    }
    if (!b.equals(ce._BIGNUM_ONE))
      unitTerms.push(ce.number(b.mul(n)));
    else if (n !== 1)
      unitTerms.push(ce.number(n));
    if (unitTerms.length > 0)
      xs.push({ exponent: [1, 1], terms: unitTerms });
    return xs;
  }
  /** The terms of the product, grouped by degrees.
   *
   * If `mode` is `rational`, rationals are split into separate numerator and
   * denominator, so that a rational expression can be created later
   * If `mode` is `expression`, a regular expression is returned, without
   * splitting rationals
   * If `mode` is `numeric`, the literals are combined into one expression
   *
   */
  groupedByDegrees(options) {
    var _a;
    options != null ? options : options = {};
    if (!("mode" in options))
      options.mode = "expression";
    const ce = this.engine;
    if (options.mode === "numeric") {
      if (this._complex.im !== 0 && !complexAllowed(ce))
        return null;
      if (this._hasInfinity)
        return [{ exponent: [1, 1], terms: [ce._POSITIVE_INFINITY] }];
    }
    const xs = this.unitTerms((_a = options.mode) != null ? _a : "expression");
    if (xs === null)
      return null;
    for (const t of this._terms) {
      const exponent = reducedRational(t.exponent);
      if (exponent[0] === 0)
        continue;
      let found = false;
      for (const x of xs) {
        if (exponent[0] === x.exponent[0] && exponent[1] === x.exponent[1]) {
          x.terms.push(t.term);
          found = true;
          break;
        }
      }
      if (!found)
        xs.push({ exponent, terms: [t.term] });
    }
    return xs;
  }
  asExpression(mode = "evaluate") {
    const ce = this.engine;
    if (this._hasInfinity) {
      if (this._hasZero)
        return ce._NAN;
      if (this._terms.length === 0) {
        if (machineNumerator(this._rational) > 0)
          return ce._POSITIVE_INFINITY;
        return ce._NEGATIVE_INFINITY;
      }
    }
    if (this._hasZero)
      return ce._ZERO;
    const groupedTerms = this.groupedByDegrees({
      mode: mode === "N" ? "numeric" : "expression"
    });
    if (groupedTerms === null)
      return ce._NAN;
    const terms = termsAsExpressions(ce, groupedTerms);
    if (terms.length === 0)
      return ce._ONE;
    if (terms.length === 1)
      return terms[0];
    return this.engine._fn("Multiply", terms);
  }
  /** The product, expressed as a numerator and denominator */
  asNumeratorDenominator() {
    const xs = this.groupedByDegrees({ mode: "rational" });
    if (xs === null)
      return [this.engine._NAN, this.engine._NAN];
    const xsNumerator = [];
    const xsDenominator = [];
    for (const x of xs)
      if (x.exponent[0] >= 0)
        xsNumerator.push(x);
      else
        xsDenominator.push({
          exponent: neg(x.exponent),
          terms: x.terms
        });
    const ce = this.engine;
    const numeratorTerms = termsAsExpressions(ce, xsNumerator);
    let numerator = ce._ONE;
    if (numeratorTerms.length === 1)
      numerator = numeratorTerms[0];
    else if (numeratorTerms.length > 0)
      numerator = ce._fn("Multiply", numeratorTerms);
    const denominatorTerms = termsAsExpressions(ce, xsDenominator);
    let denominator = ce._ONE;
    if (denominatorTerms.length === 1)
      denominator = denominatorTerms[0];
    else if (denominatorTerms.length > 0)
      denominator = ce._fn("Multiply", denominatorTerms);
    return [numerator, denominator];
  }
  asRationalExpression() {
    const [numerator, denominator] = this.asNumeratorDenominator();
    if (denominator.numericValue !== null) {
      if (denominator.isOne)
        return numerator;
      if (denominator.isNegativeOne)
        return this.engine.neg(numerator);
    }
    return this.engine._fn("Divide", [numerator, denominator]);
  }
};
function degreeKey(exponent) {
  if (isRationalOne(exponent))
    return 0;
  const [n, d] = [machineNumerator(exponent), machineDenominator(exponent)];
  if (n > 0 && Number.isInteger(n / d))
    return 1;
  if (n > 0)
    return 2;
  if (Number.isInteger(n / d))
    return 3;
  return 4;
}
function degreeOrder(a, b) {
  const keyA = degreeKey(a.exponent);
  const keyB = degreeKey(b.exponent);
  if (keyA !== keyB)
    return keyA - keyB;
  const [a_n, a_d] = [
    machineNumerator(a.exponent),
    machineDenominator(a.exponent)
  ];
  const [b_n, b_d] = [
    machineNumerator(b.exponent),
    machineDenominator(b.exponent)
  ];
  return a_n / a_d - b_n / b_d;
}
function termsAsExpressions(ce, terms) {
  var _a;
  const result = terms.sort(degreeOrder).map((x) => {
    const t = flattenOps(x.terms, "Multiply");
    const base = t.length <= 1 ? t[0] : ce._fn("Multiply", t.sort(order));
    if (isRationalOne(x.exponent))
      return base;
    return ce.pow(base, x.exponent);
  });
  return (_a = flattenOps(result, "Multiply")) != null ? _a : result;
}
function subtract(ce, a, b, metadata) {
  if (a.numericValue !== null) {
    if (isRational(a.numericValue)) {
      if (machineNumerator(a.numericValue) < 0) {
        return serializeJsonFunction(
          ce,
          "Subtract",
          [b, ce.number(neg(a.numericValue))],
          metadata
        );
      }
      return null;
    }
    const t0 = asSmallInteger(a);
    if (t0 !== null && t0 < 0)
      return serializeJsonFunction(
        ce,
        "Subtract",
        [b, ce.number(-t0)],
        metadata
      );
  }
  if (a.head === "Negate")
    return serializeJsonFunction(ce, "Subtract", [b, a.op1], metadata);
  return null;
}
function serializeJsonCanonicalFunction(ce, head2, args, metadata) {
  var _a, _b, _c;
  const exclusions = ce.jsonSerializationOptions.exclude;
  if (head2 === "Add" && args.length === 2 && !exclusions.includes("Subtract")) {
    const sub2 = (_a = subtract(ce, args[0], args[1], metadata)) != null ? _a : subtract(ce, args[1], args[0], metadata);
    if (sub2)
      return sub2;
  }
  if (head2 === "Divide" && args.length === 2 && exclusions.includes("Divide")) {
    return serializeJsonFunction(
      ce,
      "Multiply",
      [args[0], ce._fn("Power", [args[1], ce._NEGATIVE_ONE])],
      metadata
    );
  }
  if (head2 === "Multiply" && !exclusions.includes("Negate")) {
    if (asFloat(args[0]) === -1) {
      if (args.length === 2)
        return serializeJsonFunction(ce, "Negate", [args[1]]);
      return serializeJsonFunction(
        ce,
        "Negate",
        [ce._fn("Multiply", args.slice(1))],
        metadata
      );
    }
  }
  if (head2 === "Multiply" && !exclusions.includes("Divide")) {
    const result = new Product(ce, args, {
      canonical: false
    }).asRationalExpression();
    if (result.head === "Divide")
      return serializeJsonFunction(ce, result.head, result.ops, metadata);
  }
  if (head2 === "Power") {
    if (!exclusions.includes("Exp") && ((_b = args[0]) == null ? void 0 : _b.symbol) === "ExponentialE")
      return serializeJsonFunction(ce, "Exp", [args[1]], metadata);
    if (((_c = args[1]) == null ? void 0 : _c.numericValue) !== null) {
      const exp2 = asSmallInteger(args[1]);
      if (exp2 === 2 && !exclusions.includes("Square"))
        return serializeJsonFunction(ce, "Square", [args[0]], metadata);
      if (exp2 !== null && exp2 < 0 && !exclusions.includes("Divide")) {
        return serializeJsonFunction(
          ce,
          "Divide",
          [ce._ONE, exp2 === -1 ? args[0] : ce.pow(args[0], -exp2)],
          metadata
        );
      }
      const r = args[1].numericValue;
      if (!exclusions.includes("Sqrt") && r === 0.5)
        return serializeJsonFunction(ce, "Sqrt", [args[0]], metadata);
      if (!exclusions.includes("Sqrt") && r === -0.5)
        return serializeJsonFunction(
          ce,
          "Divide",
          [ce._ONE, ce._fn("Sqrt", [args[0]])],
          metadata
        );
      if (isRational(r)) {
        const n = machineNumerator(r);
        const d = machineDenominator(r);
        if (n === 1) {
          if (!exclusions.includes("Sqrt") && d === 2)
            return serializeJsonFunction(ce, "Sqrt", [args[0]], metadata);
          if (!exclusions.includes("Root"))
            return serializeJsonFunction(
              ce,
              "Root",
              [args[0], ce.number(r[1])],
              metadata
            );
        }
        if (n === -1) {
          if (!exclusions.includes("Sqrt") && d === 2)
            return serializeJsonFunction(
              ce,
              "Divide",
              [ce._ONE, ce._fn("Sqrt", [args[0]])],
              metadata
            );
          if (!exclusions.includes("Root"))
            return serializeJsonFunction(
              ce,
              "Divide",
              [ce._ONE, ce._fn("Root", [args[0], ce.number(r[1])])],
              metadata
            );
        }
      }
    }
  }
  return serializeJsonFunction(ce, head2, args, metadata);
}
function serializeJsonFunction(ce, head2, args, metadata) {
  var _a;
  const exclusions = ce.jsonSerializationOptions.exclude;
  if ((head2 === "Rational" || head2 === "Divide") && args.length === 2 && asSmallInteger(args[0]) === 1 && asSmallInteger(args[1]) === 2 && !exclusions.includes("Half")) {
    return serializeJsonSymbol(ce, "Half", {
      ...metadata,
      wikidata: "Q39373172"
    });
  }
  if (args.length === 1) {
    const num0 = args[0].numericValue;
    if (head2 === "Negate" && num0 !== null) {
      if (typeof num0 === "number")
        return serializeJsonNumber(ce, -num0);
      if (num0 instanceof decimal_default)
        return serializeJsonNumber(ce, num0.neg());
      if (num0 instanceof import_complex8.Complex)
        return serializeJsonNumber(ce, num0.neg());
      if (isRational(num0))
        return serializeJsonNumber(ce, neg(num0));
    }
  }
  if (typeof head2 === "string" && exclusions.includes(head2)) {
    if (head2 === "Rational" && args.length === 2)
      return serializeJsonFunction(ce, "Divide", args, metadata);
    if (head2 === "Complex" && args.length === 2)
      return serializeJsonFunction(
        ce,
        "Add",
        [args[0], ce._fn("Multiply", [args[1], ce.symbol("ImaginaryUnit")])],
        metadata
      );
    if (head2 === "Sqrt" && args.length === 1)
      return serializeJsonFunction(
        ce,
        "Power",
        [args[0], exclusions.includes("Half") ? ce.number([1, 2]) : ce._HALF],
        metadata
      );
    if (head2 === "Root" && args.length === 2 && args[1].numericValue !== null) {
      const n = asSmallInteger(args[1]);
      if (n === 2)
        return serializeJsonFunction(ce, "Sqrt", [args[0]]);
      if (n !== null) {
        if (n < 0)
          return serializeJsonFunction(
            ce,
            "Divide",
            [ce._ONE, ce._fn("Power", [args[0], ce.number([1, -n])])],
            metadata
          );
        return serializeJsonFunction(
          ce,
          "Power",
          [args[0], ce.number([1, -n])],
          metadata
        );
      }
    }
    if (head2 === "Square" && args.length === 1)
      return serializeJsonFunction(
        ce,
        "Power",
        [args[0], ce.number(2)],
        metadata
      );
    if (head2 === "Exp" && args.length === 1)
      return serializeJsonFunction(
        ce,
        "Power",
        [ce.symbol("ExponentialE"), args[0]],
        metadata
      );
    if (head2 === "Subtract" && args.length === 2)
      return serializeJsonFunction(
        ce,
        "Add",
        [args[0], ce._fn("Negate", [args[1]])],
        metadata
      );
    if (head2 === "Subtract" && args.length === 1)
      return serializeJsonFunction(ce, "Negate", args, metadata);
  }
  if (head2 === "Add" && args.length === 2 && !exclusions.includes("Subtract")) {
    if (args[1].numericValue !== null) {
      const t1 = asSmallInteger(args[1]);
      if (t1 !== null && t1 < 0)
        return serializeJsonFunction(
          ce,
          "Subtract",
          [args[0], ce.number(-t1)],
          metadata
        );
    }
    if (args[1].head === "Negate") {
      return serializeJsonFunction(
        ce,
        "Subtract",
        [args[0], args[1].op1],
        metadata
      );
    }
  }
  if (head2 === "Tuple") {
    if (args.length === 1 && !exclusions.includes("Single"))
      return serializeJsonFunction(ce, "Single", args, metadata);
    if (args.length === 2 && !exclusions.includes("Pair"))
      return serializeJsonFunction(ce, "Pair", args, metadata);
    if (args.length === 3 && !exclusions.includes("Triple"))
      return serializeJsonFunction(ce, "Triple", args, metadata);
  }
  const jsonHead = typeof head2 === "string" ? _escapeJsonString(head2) : head2.json;
  const fn = [jsonHead, ...args.map((x) => x.json)];
  const md = { ...metadata != null ? metadata : {} };
  if (ce.jsonSerializationOptions.metadata.includes("latex")) {
    md.latex = _escapeJsonString((_a = md.latex) != null ? _a : ce.serialize({ fn }));
  } else
    md.latex = "";
  if (!ce.jsonSerializationOptions.metadata.includes("wikidata"))
    md.wikidata = "";
  if (!md.latex && !md.wikidata && ce.jsonSerializationOptions.shorthands.includes("function"))
    return fn;
  if (md.latex && md.wikidata)
    return { fn, latex: md.latex, wikidata: md.wikidata };
  if (md.latex)
    return { fn, latex: md.latex };
  if (md.wikidata)
    return { fn, wikidata: md.wikidata };
  return { fn };
}
function serializeJsonString(ce, s) {
  s = _escapeJsonString(s);
  if (ce.jsonSerializationOptions.shorthands.includes("string"))
    return `'${s}'`;
  return { str: s };
}
function serializeJsonSymbol(ce, sym, metadata) {
  var _a, _b;
  if (sym === "Half" && ce.jsonSerializationOptions.exclude.includes("Half")) {
    return serializeJsonNumber(ce, [1, 2], metadata);
  }
  metadata = { ...metadata };
  if (ce.jsonSerializationOptions.metadata.includes("latex")) {
    metadata.latex = (_a = metadata.latex) != null ? _a : ce.serialize({ sym });
    if (metadata.latex !== void 0)
      metadata.latex = _escapeJsonString(metadata.latex);
  } else
    metadata.latex = void 0;
  if (ce.jsonSerializationOptions.metadata.includes("wikidata")) {
    if (metadata.wikidata === void 0) {
      const wikidata = (_b = ce.lookupSymbol(sym)) == null ? void 0 : _b.wikidata;
      if (wikidata !== void 0)
        metadata.wikidata = _escapeJsonString(wikidata);
    }
  } else
    metadata.wikidata = void 0;
  sym = _escapeJsonString(sym);
  if (metadata.latex === void 0 && metadata.wikidata === void 0 && ce.jsonSerializationOptions.shorthands.includes("symbol"))
    return sym;
  if (metadata.latex !== void 0 && metadata.wikidata !== void 0)
    return { sym, latex: metadata.latex, wikidata: metadata.wikidata };
  if (metadata.latex !== void 0)
    return { sym, latex: metadata.latex };
  if (metadata.wikidata !== void 0)
    return { sym, wikidata: metadata.wikidata };
  return { sym };
}
function serializeJsonNumber(ce, value, metadata) {
  var _a, _b, _c;
  metadata = { ...metadata };
  if (!ce.jsonSerializationOptions.metadata.includes("latex"))
    metadata.latex = void 0;
  const shorthandAllowed = metadata.latex === void 0 && metadata.wikidata === void 0 && !ce.jsonSerializationOptions.metadata.includes("latex") && ce.jsonSerializationOptions.shorthands.includes("number");
  const exclusions = ce.jsonSerializationOptions.exclude;
  let num = "";
  if (value instanceof decimal_default) {
    if (value.isNaN())
      num = "NaN";
    else if (!value.isFinite())
      num = value.isPositive() ? "+Infinity" : "-Infinity";
    else {
      if (shorthandAllowed && isInMachineRange(value))
        return value.toNumber();
      if (value.isInteger() && value.e < value.precision() + 4)
        num = value.toFixed(0);
      else {
        const precision = ce.jsonSerializationOptions.precision;
        const s = precision === "max" ? value.toString() : value.toPrecision(
          precision === "auto" ? ce.precision : precision
        );
        num = repeatingDecimals(ce, s);
        if (shorthandAllowed) {
          const val = value.toNumber();
          if (val.toString() === num)
            return val;
        }
      }
    }
    if (ce.jsonSerializationOptions.metadata.includes("latex"))
      metadata.latex = (_a = metadata.latex) != null ? _a : ce.serialize({ num });
    return metadata.latex !== void 0 ? { num, latex: metadata.latex } : shorthandAllowed ? num : { num };
  }
  if (value instanceof import_complex8.Complex) {
    if (value.isInfinite())
      return serializeJsonSymbol(ce, "ComplexInfinity", metadata);
    if (value.isNaN()) {
      num = "NaN";
      if (ce.jsonSerializationOptions.metadata.includes("latex"))
        metadata.latex = (_b = metadata.latex) != null ? _b : ce.serialize({ num });
      return metadata.latex !== void 0 ? { num, latex: metadata.latex } : { num };
    }
    return serializeJsonFunction(
      ce,
      "Complex",
      [ce.number(value.re), ce.number(value.im)],
      {
        ...metadata,
        wikidata: "Q11567"
      }
    );
  }
  if (isRational(value)) {
    const allowRational = !exclusions.includes("Rational");
    if (shorthandAllowed && ce.jsonSerializationOptions.shorthands.includes("function") && isMachineRational(value)) {
      if (value[0] === 1 && value[1] === 2 && !exclusions.includes("Half"))
        return serializeJsonSymbol(ce, "Half", metadata);
      return [allowRational ? "Rational" : "Divide", value[0], value[1]];
    }
    return serializeJsonFunction(
      ce,
      allowRational ? "Rational" : "Divide",
      [ce.number(value[0]), ce.number(value[1])],
      { ...metadata }
    );
  }
  if (Number.isNaN(value))
    num = "NaN";
  else if (!Number.isFinite(value))
    num = value > 0 ? "+Infinity" : "-Infinity";
  else {
    if (shorthandAllowed)
      return value;
    num = repeatingDecimals(ce, value.toString());
  }
  if (ce.jsonSerializationOptions.metadata.includes("latex"))
    metadata.latex = (_c = metadata.latex) != null ? _c : ce.serialize({ num });
  return metadata.latex !== void 0 ? { num, latex: metadata.latex } : { num };
}
function _escapeJsonString(s) {
  return s;
}
function repeatingDecimals(ce, s) {
  var _a;
  if (!ce.jsonSerializationOptions.repeatingDecimals)
    return s;
  let [_, wholepart, fractionalPart, exponent] = (_a = s.match(/^(.*)\.([0-9]+)([e|E][-+]?[0-9]+)?$/)) != null ? _a : [];
  if (!fractionalPart)
    return s.toLowerCase();
  const lastDigit = fractionalPart[fractionalPart.length - 1];
  fractionalPart = fractionalPart.slice(0, -1);
  const MAX_REPEATING_PATTERN_LENGTH = 16;
  let prefix = "";
  for (let i = 0; i < fractionalPart.length - MAX_REPEATING_PATTERN_LENGTH; i++) {
    prefix = fractionalPart.substring(0, i);
    for (let j = 0; j <= MAX_REPEATING_PATTERN_LENGTH; j++) {
      const repetend = fractionalPart.substring(i, i + j + 1);
      const times = Math.floor(
        (fractionalPart.length - prefix.length) / repetend.length
      );
      if (times < 3)
        break;
      if ((prefix + repetend.repeat(times + 1)).startsWith(fractionalPart)) {
        if (repetend === "0") {
          if (lastDigit === "0")
            return wholepart + "." + prefix + (exponent != null ? exponent : "");
          return s;
        }
        return wholepart + "." + prefix + "(" + repetend + ")" + (exponent != null ? exponent : "");
      }
    }
  }
  fractionalPart += lastDigit;
  while (fractionalPart.endsWith("0"))
    fractionalPart = fractionalPart.slice(0, -1);
  if (exponent)
    return `${wholepart}.${fractionalPart}${exponent.toLowerCase()}`;
  return `${wholepart}.${fractionalPart}`;
}
var _BoxedDomain = class __BoxedDomain extends AbstractBoxedExpression {
  constructor(ce, dom, metadata) {
    super(ce, metadata);
    this._value = makeCanonical(ce, dom);
  }
  get isCanonical() {
    return true;
  }
  /** Boxed domains are always canonical. */
  get canonical() {
    return this;
  }
  get isValid() {
    return this.ctor !== "InvalidDomain";
  }
  get json() {
    return ["Domain", serialize(this.engine, this._value)];
  }
  get literal() {
    if (typeof this._value === "string")
      return this._value;
    return null;
  }
  get ctor() {
    if (typeof this._value === "string")
      return null;
    return this._value[0];
  }
  get domainArgs() {
    if (typeof this._value === "string")
      return null;
    return this._value.slice(1);
  }
  get domainArg1() {
    if (typeof this._value === "string")
      return null;
    return this._value[1];
  }
  get codomain() {
    if (typeof this._value === "string")
      return null;
    return this.engine.domain(this._value[this._value.length - 1]);
  }
  get hash() {
    if (this._hash === void 0)
      this._hash = hashCode(hash(this._value));
    return this._hash;
  }
  isEqual(rhs) {
    return isEqual(this._value, rhs);
  }
  isSame(rhs) {
    return isEqual(this._value, rhs);
  }
  is(rhs) {
    return isEqual(this._value, rhs);
  }
  isCompatible(dom, compatibility = "covariant") {
    const lhs = this._value;
    const rhs = dom instanceof __BoxedDomain ? dom._value : dom;
    const rhsCtor = Array.isArray(rhs) ? rhs[0] : null;
    if (rhsCtor) {
      const rhsParam = rhs[1];
      if (rhsCtor === "Covariant")
        return isSubdomainOf1(lhs, rhsParam);
      if (rhsCtor === "Contravariant")
        return isSubdomainOf1(rhsParam, lhs);
      if (rhsCtor === "Invariant")
        return !isSubdomainOf1(rhsParam, lhs) && !isSubdomainOf1(lhs, rhsParam);
      if (rhsCtor === "Bivariant")
        return isSubdomainOf1(lhs, rhsParam) && isSubdomainOf1(rhsParam, lhs);
    }
    if (compatibility === "covariant")
      return isSubdomainOf1(lhs, rhs);
    if (compatibility === "contravariant")
      return isSubdomainOf1(rhs, lhs);
    if (compatibility === "bivariant")
      return isSubdomainOf1(rhs, lhs) && isSubdomainOf1(lhs, rhs);
    return !isSubdomainOf1(rhs, lhs) && !isSubdomainOf1(lhs, rhs);
  }
  match(rhs, _options) {
    if (!(rhs instanceof __BoxedDomain))
      return null;
    if (this.isSame(rhs))
      return {};
    return null;
  }
  get head() {
    return "Domain";
  }
  get domain() {
    return this.engine.domain("Domain");
  }
  get isNothing() {
    return this._value === "Nothing";
  }
  get isFunction() {
    return this.ctor === "Function" || this._value === "Function";
  }
  // get isPredicate(): boolean {
  //   if (this.domainLiteral === 'Predicate') return true;
  //   if (this.domainConstructor !== 'Function') return false;
  //   const resultDomain = this._value[this._value.length];
  //   if (!(resultDomain instanceof _Domain)) return false;
  //   return resultDomain.isBoolean;
  // }
  // get isNumericFunction(): boolean {
  //   if (this.domainLiteral === 'NumericFunction') return true;
  //   if (this.domainConstructor !== 'Function') return false;
  //   for (const arg of this.domainParams!)
  //     if (!isNumericSubdomain(arg, 'Number')) return false;
  //   return true;
  // }
  // get isBoolean(): boolean {
  //   const dom = this.domainLiteral;
  //   return dom === 'Boolean' || dom === 'MaybeBoolean';
  // }
  // get isRealFunction(): boolean {
  //   if (this.domainLiteral === 'RealFunction') return true;
  //   if (this.domainConstructor !== 'Function') return false;
  //   for (const arg of this.domainParams!)
  //     if (!isNumericSubdomain(arg, 'ExtendedRealNumber')) return false;
  //   return true;
  // }
  get isNumeric() {
    return this.isCompatible(this.engine.domain("Number"));
  }
  // get isLogicOperator(): boolean {
  //   if (this.domainLiteral === 'LogicOperator') return true;
  //   if (!this.codomain?.isBoolean) return false;
  //   const params = this.domainParams!;
  //   if (params.length < 1 || params.length > 2) return false;
  //   if (!params[0].isBoolean) return false;
  //   if (params.length === 1) return true;
  //   if (!params[1].isBoolean) return false;
  //   return true;
  // }
  get isRelationalOperator() {
    if (this._value === "RelationalOperator")
      return true;
    if (this.ctor !== "Function")
      return false;
    if (this.domainArgs.length !== 2)
      return false;
    if (!this.codomain.isCompatible("MaybeBoolean"))
      return false;
    return true;
  }
};
function boxDomain(ce, dom, metadata) {
  if (Array.isArray(dom) && dom[0] === "Domain")
    dom = dom[1];
  if (dom instanceof _BoxedDomain)
    return dom;
  if (dom instanceof AbstractBoxedExpression)
    dom = dom.json;
  if (typeof dom === "string") {
    const expr = DOMAIN_ALIAS[dom];
    if (expr)
      return boxDomain(ce, expr);
    if (!isDomainLiteral(dom))
      throw Error("Expected a domain literal, got " + dom);
    return new _BoxedDomain(ce, dom, metadata);
  }
  if (!Array.isArray(dom) || dom.length === 0)
    throw Error("Expected a valid domain");
  const constructor = dom[0];
  if (!DOMAIN_CONSTRUCTORS.includes(constructor))
    throw Error("Expected domain constructor, got " + constructor);
  return new _BoxedDomain(ce, dom, metadata);
}
function makeCanonical(ce, dom) {
  if (dom === void 0 || typeof dom === "number")
    throw Error("Expected a domain expression");
  if (dom instanceof _BoxedDomain)
    return dom._value;
  if (typeof dom === "string") {
    if (!isDomainLiteral(dom))
      throw Error("Unknown domain literal");
    return dom;
  }
  if (!Array.isArray(dom) && typeof dom === "object")
    throw Error("Expected a domain expression");
  if (!dom)
    ;
  const ctor = dom[0];
  /* @__PURE__ */ console.assert(ctor);
  if (ctor === "Range") {
    if (dom.length === 1)
      return "Integer";
    let first = 1;
    let last = Infinity;
    if (dom.length === 2) {
      last = dom[1];
    } else if (dom.length === 3) {
      first = dom[1];
      last = dom[2];
    }
    const firstNum = asRangeBound(ce, first);
    const lastNum = asRangeBound(ce, last);
    if (firstNum === null || lastNum === null)
      throw Error(`Invalid range [${firstNum}, ${lastNum}] `);
    if (lastNum < firstNum)
      [first, last] = [last, first];
    if (firstNum === -Infinity && lastNum === Infinity)
      return "Integer";
    if (firstNum === 1 && lastNum === Infinity)
      return "PositiveInteger";
    if (firstNum === 0 && lastNum === Infinity)
      return "NonNegativeInteger";
    if (firstNum === -Infinity && lastNum === -1)
      return "NegativeInteger";
    if (firstNum === -Infinity && lastNum === 0)
      return "NonPositiveInteger";
    return ["Range", ce.number(firstNum), ce.number(lastNum)];
  }
  if (ctor === "Interval") {
    if (dom.length !== 3)
      throw Error("Invalid range " + dom);
    let [isLeftOpen, first] = maybeOpen(ce, dom[1]);
    let [isRightOpen, last] = maybeOpen(ce, dom[2]);
    if (first === null || last === null)
      throw Error("Invalid range " + dom);
    if (last < first) {
      [first, last] = [last, first];
      [isLeftOpen, isRightOpen] = [isRightOpen, isLeftOpen];
    }
    if (first === 0 && last === Infinity)
      return isLeftOpen ? "PositiveNumber" : "NonNegativeNumber";
    if (first === -Infinity && last === 0)
      return isRightOpen ? "NegativeNumber" : "NonPositiveNumber";
    return [
      "Interval",
      isLeftOpen ? ["Open", ce.number(first)] : ce.number(first),
      isRightOpen ? ["Open", ce.number(last)] : ce.number(last)
    ];
  }
  if (ctor === "Function") {
    return ["Function", ...dom.slice(1).map((x) => makeCanonical(ce, x))];
  }
  if (ctor === "Dictionary") {
    return ["Dictionary", makeCanonical(ce, dom[1])];
  }
  if (ctor === "List") {
    return ["List", makeCanonical(ce, dom[1])];
  }
  if (ctor === "Tuple") {
    return ["Tuple", ...dom.slice(1).map((x) => makeCanonical(ce, x))];
  }
  if (ctor === "Union") {
    return ["Union", ...dom.slice(1).map((x) => makeCanonical(ce, x))];
  }
  if (ctor === "Intersection") {
    return ["Intersection", ...dom.slice(1).map((x) => makeCanonical(ce, x))];
  }
  if (ctor === "Covariant" || ctor === "Contravariant" || ctor === "Invariant") {
    return [ctor, makeCanonical(ce, dom[1])];
  }
  if (ctor === "Maybe") {
    return ["Maybe", makeCanonical(ce, dom[1])];
  }
  if (ctor === "Sequence") {
    return ["Sequence", makeCanonical(ce, dom[1])];
  }
  if (ctor === "Head") {
    return ["Head", dom[1]];
  }
  if (ctor === "Symbol") {
    return ["Symbol", dom[1]];
  }
  if (ctor === "Value") {
    return ["Value", ce.box(dom[1])];
  }
  if (ctor === "InvalidDomain") {
    return ["InvalidDomain", dom[1]];
  }
  throw Error("Unexpected domain constructor " + ctor);
}
function asRangeBound(ce, expr) {
  if (typeof expr === "number")
    return expr;
  const x = ce.box(expr).evaluate();
  return x.isInfinity ? x.isPositive ? Infinity : -Infinity : asSmallInteger(x);
}
function maybeOpen(ce, expr) {
  if (Array.isArray(expr) && expr[0] === "Open")
    return [true, asRangeBound(ce, expr[1])];
  return [false, asRangeBound(ce, expr)];
}
function isDomain(expr) {
  if (expr instanceof _BoxedDomain)
    return true;
  if (expr instanceof AbstractBoxedExpression)
    expr = expr.json;
  if (typeof expr === "string")
    return isDomainLiteral(expr);
  if (Array.isArray(expr)) {
    if (expr.length <= 1)
      return false;
    const ctor = expr[0];
    if (typeof ctor !== "string" || !DOMAIN_CONSTRUCTORS.includes(ctor))
      return false;
    if (ctor === "InvalidDomain")
      return false;
    if (ctor === "List")
      return expr.length === 2 && isValidDomain(expr[1]);
    if (ctor === "Tuple" || ctor === "Function" || ctor === "Maybe" || ctor === "Sequence" || ctor === "Intersection" || ctor === "Union")
      return expr.slice(1, -1).every((x) => isValidDomain(x));
    return expr.every((x) => x !== null);
  }
  return false;
}
function isValidDomain(expr) {
  if (expr instanceof _BoxedDomain)
    return expr.isValid;
  if (Array.isArray(expr) && expr[0] === "InvalidDomain")
    return false;
  return isDomain(expr);
}
function isSubdomainOf1(lhs, rhs) {
  const [result, rest] = isSubdomainOf([lhs], rhs);
  if (result && rest.length === 0)
    return true;
  return false;
}
function isSubdomainOf(xlhs, rhs) {
  let lhs = xlhs.shift();
  const rhsLiteral = typeof rhs === "string" ? rhs : null;
  if (rhsLiteral === "Anything")
    return [true, xlhs];
  const lhsLiteral = typeof lhs === "string" ? lhs : null;
  if (lhsLiteral && rhsLiteral) {
    if (lhsLiteral === rhsLiteral)
      return [true, xlhs];
    return [ancestors(lhsLiteral).includes(rhsLiteral), xlhs];
  }
  if (rhsLiteral) {
    if (!lhs)
      ;
    const lhsConstructor = lhs[0];
    if (lhsConstructor === "Function")
      return [rhsLiteral === "Function", xlhs];
    if (lhsConstructor === "Dictionary")
      return [rhsLiteral === "Dictionary", xlhs];
    if (lhsConstructor === "List")
      return [rhsLiteral === "List", xlhs];
    if (lhsConstructor === "Tuple")
      return [rhsLiteral === "Tuple", xlhs];
    if (lhsConstructor === "Intersection") {
    }
    if (lhsConstructor === "Interval")
      return [isSubdomainOf1("ExtendedRealNumber", rhsLiteral), xlhs];
    if (lhsConstructor === "Range")
      return [isSubdomainOf1("Integer", rhsLiteral), xlhs];
    return [true, xlhs];
  }
  const rhsConstructor = rhs[0];
  if (rhsConstructor === "Function") {
    if (lhsLiteral === "Function")
      return [true, xlhs];
    if (lhsLiteral)
      return [false, xlhs];
    if (lhs[0] !== "Function")
      return [false, xlhs];
    if (lhs.length === 1 && rhs.length === 1)
      return [true, xlhs];
    if (!isSubdomainOf1(
      lhs[lhs.length - 1],
      rhs[rhs.length - 1]
    ))
      return [false, xlhs];
    const lhsParams = lhs.slice(1, -1);
    let rhsParams = rhs.slice(1, -1);
    for (let i = 0; i <= lhsParams.length - 1; i++) {
      if (rhsParams.length === 0) {
        const lhsCtor = Array.isArray(lhsParams[i]) ? lhsParams[i][0] : null;
        if (lhsCtor !== "Maybe")
          return [false, xlhs];
        return [true, xlhs];
      } else {
        let match2 = false;
        [match2, rhsParams] = isSubdomainOf(rhsParams, lhsParams[i]);
        if (!match2)
          return [false, xlhs];
      }
    }
    return [rhsParams.length === 0, xlhs];
  }
  if (rhsConstructor === "Intersection") {
    return [
      rhs.slice(1, -1).every(
        (x) => isSubdomainOf1(lhs, x)
      ),
      xlhs
    ];
  }
  if (rhsConstructor === "Union") {
    return [
      rhs.slice(1, -1).some((x) => isSubdomainOf1(lhs, x)),
      xlhs
    ];
  }
  if (rhsConstructor === "Maybe") {
    if (lhsLiteral === "Nothing")
      return [true, xlhs];
    return isSubdomainOf(
      [lhs, ...xlhs],
      rhs[1]
    );
  }
  if (rhsConstructor === "Sequence") {
    const seq = rhs[1];
    if (!isSubdomainOf1(lhs, seq))
      return [false, xlhs];
    lhs = xlhs.shift();
    let match2 = true;
    while (xlhs.length > 0 && match2) {
      [match2, xlhs] = isSubdomainOf(xlhs, seq);
      lhs = xlhs.shift();
    }
    return [true, xlhs];
  }
  if (rhsConstructor === "Tuple") {
    if (!Array.isArray(lhs) || lhs[0] !== "Tuple")
      return [false, xlhs];
    if (lhs.length > rhs.length)
      return [false, xlhs];
    for (let i = 1; i <= rhs.length - 1; i++) {
      if (!lhs[i] || !isSubdomainOf1(
        lhs[i],
        rhs[i]
      ))
        return [false, xlhs];
    }
    return [true, xlhs];
  }
  if (rhsConstructor === "Range") {
    if (!Array.isArray(lhs) || lhs[0] !== "Range")
      return [false, xlhs];
    const lhsMin = asFloat(lhs[1]);
    const lhsMax = asFloat(lhs[2]);
    const rhsMin = asFloat(rhs[1]);
    const rhsMax = asFloat(rhs[2]);
    return [
      lhsMin !== null && lhsMax !== null && rhsMin !== null && rhsMax !== null && lhsMin >= rhsMin && lhsMax <= rhsMax,
      xlhs
    ];
  }
  if (rhsConstructor === "Interval") {
    if (!Array.isArray(lhs) || lhs[0] !== "Interval")
      return [false, xlhs];
    const lhsMin = asFloat(lhs[1]);
    const lhsMax = asFloat(lhs[2]);
    const rhsMin = asFloat(rhs[1]);
    const rhsMax = asFloat(rhs[2]);
    return [
      lhsMin !== null && lhsMax !== null && rhsMin !== null && rhsMax !== null && lhsMin >= rhsMin && lhsMax <= rhsMax,
      xlhs
    ];
  }
  console.error("Unexpected domain constructor " + rhsConstructor);
  return [false, xlhs];
}
function sharedAncestorDomain(a, b) {
  const aLiteral = domainLiteralAncestor(a);
  const bLiteral = domainLiteralAncestor(b);
  const aAncestors = [aLiteral, ...ancestors(aLiteral)];
  const bAncestors = [bLiteral, ...ancestors(bLiteral)];
  while (!bAncestors.includes(aAncestors[0]))
    aAncestors.shift();
  return a.engine.domain(aAncestors[0]);
}
function domainLiteralAncestor(dom) {
  let result = dom.literal;
  if (result)
    return result;
  result = dom.ctor;
  if (result === "Maybe")
    return "Anything";
  if (result === "Interval")
    return "RealNumber";
  if (result === "Range")
    return "Integer";
  if (result === "Head")
    return "Function";
  if (result === "Union")
    return "Anything";
  if (result === "Intersection")
    return "Anything";
  return result;
}
function serialize(ce, dom) {
  if (dom instanceof AbstractBoxedExpression)
    return dom.json;
  if (typeof dom === "string")
    return dom;
  if (dom[0] === "InvalidDomain") {
    return ["InvalidDomain", serialize(ce, dom[1])];
  }
  const result = [serializeJsonSymbol(ce, dom[0])];
  if (dom.length > 1)
    for (let i = 1; i <= dom.length - 1; i++)
      result.push(serialize(ce, dom[i]));
  return result;
}
function hash(dom) {
  if (typeof dom === "string")
    return "domain:" + dom;
  let s = "domain:" + this.ctor;
  for (const arg of this.domainArgs)
    s += ":" + hash(arg);
  return s;
}
function isEqual(lhs, rhs) {
  if (typeof rhs === "string")
    return this._value === rhs;
  if (rhs instanceof _BoxedDomain)
    return isEqual(lhs, rhs._value);
  if (typeof lhs === "string")
    return lhs === rhs;
  /* @__PURE__ */ console.assert(Array.isArray(lhs));
  if (!Array.isArray(rhs))
    return false;
  if (lhs[0] !== rhs[0])
    return false;
  if (rhs.length !== lhs.length)
    return false;
  for (let i = 1; i <= lhs.length - 1; i++) {
    if (lhs[i] instanceof AbstractBoxedExpression) {
      if (!(rhs[i] instanceof AbstractBoxedExpression))
        return false;
      if (!rhs[i].isEqual(rhs[i]))
        return false;
    } else if (typeof lhs[i] === "string") {
      if (typeof rhs[i] !== "string")
        return false;
      if (lhs[i] !== rhs[i])
        return false;
    } else if (!isEqual(lhs[i], rhs[i]))
      return false;
  }
  return true;
}
function validateArgumentCount(ce, ops2, count) {
  if (ops2.length === count)
    return ops2;
  const xs = [...ops2.slice(0, count)];
  let i = Math.min(count, ops2.length);
  while (i < count) {
    xs.push(ce.error("missing"));
    i += 1;
  }
  while (i < ops2.length) {
    xs.push(ce.error("unexpected-argument", ops2[i]));
    i += 1;
  }
  return xs;
}
function validateNumericArgs(ce, ops2, count) {
  if (!ce.strict)
    return ops2;
  let xs;
  if (count === void 0)
    xs = ops2;
  else {
    xs = [];
    for (let i = 0; i <= Math.max(count - 1, ops2.length - 1); i++) {
      if (i > count - 1)
        xs.push(ce.error("unexpected-argument", ops2[i]));
      else
        xs.push(ops2[i] !== void 0 ? ce.box(ops2[i]) : ce.error("missing"));
    }
  }
  return xs.map(
    (op3) => op3 && !op3.isValid || op3.isNumber ? op3 : ce.error(["incompatible-domain", "Number", op3.domain], op3)
  );
}
function validateSignature(sig, ops2, codomain) {
  const ce = sig.engine;
  if (!ce.strict)
    return ops2;
  const opsDomain = ops2.map((x) => x.domain);
  const targetSig = ce.domain([
    "Function",
    ...opsDomain,
    codomain != null ? codomain : "Anything"
  ]);
  if (sig.isCompatible(targetSig))
    return null;
  const expectedArgs = sig.domainArgs.slice(0, -1);
  const count = Math.max(expectedArgs.length, opsDomain.length);
  let newOps = [];
  let rest = [...ops2];
  for (let i = 0; i <= count - 1; i++)
    [newOps, rest] = validateNextArgument(
      ce,
      expectedArgs[i],
      newOps,
      rest
    );
  while (newOps.length > 0 && newOps[newOps.length - 1].symbol === "Nothing")
    newOps.pop();
  return newOps;
}
function validateArgument(ce, arg, dom) {
  if (dom === void 0)
    return ce.error("unexpected-argument", arg);
  if (arg === void 0)
    return ce.error("missing");
  if (!arg.isValid)
    return arg;
  if (arg == null ? void 0 : arg.domain.isCompatible(dom))
    return arg;
  return ce.error(["incompatible-domain", dom, arg.domain], arg);
}
function validateNextArgument(ce, dom, matched, ops2) {
  let next = ops2.shift();
  if (dom === void 0)
    return [[...matched, ce.error("unexpected-argument", next)], ops2];
  if (!Array.isArray(dom)) {
    if (!next)
      return [[...matched, ce.error("missing")], ops2];
    if (!next.domain.isCompatible(dom)) {
      return [
        [...matched, ce.error(["incompatible-domain", dom, next.domain], next)],
        ops2
      ];
    }
    return [[...matched, next], ops2];
  }
  const ctor = dom[0];
  if (next === void 0) {
    let valid = false;
    if (ctor === "Union") {
      for (let k = 1; k <= dom.length - 1; k++) {
        if (dom[k] === "Nothing") {
          valid = true;
          break;
        }
      }
    } else if (ctor === "Maybe")
      valid = true;
    if (valid)
      return [[...matched, ce.symbol("Nothing")], ops2];
    return [[...matched, ce.error("missing")], ops2];
  }
  if (ctor === "Union") {
    let found = false;
    for (let k = 1; k <= dom.length - 1; k++) {
      if (next.domain.isCompatible(dom[k])) {
        found = true;
        break;
      }
    }
    if (found)
      return [[...matched, next], ops2];
    return [
      [...matched, ce.error(["incompatible-domain", dom, next.domain], next)],
      ops2
    ];
  }
  if (ctor === "Sequence") {
    const seq = dom[1];
    if (!next || !next.domain.isCompatible(seq)) {
      return [
        [...matched, ce.error(["incompatible-domain", seq, next.domain], next)],
        ops2
      ];
    }
    let done = false;
    const result = [...matched, next];
    while (!done) {
      next = ops2.shift();
      if (!next)
        done = false;
      else if (!next.domain.isCompatible(seq)) {
        ops2.unshift(next);
        done = false;
      } else
        result.push(next);
    }
    return [result, ops2];
  }
  if (ctor === "Maybe") {
    if (next === void 0 || next.symbol === "Nothing")
      return [[...matched, ce.symbol("Nothing")], ops2];
    return validateNextArgument(ce, dom[1], matched, [next, ...ops2]);
  }
  console.error("Unhandled ctor", ctor);
  return [[...matched, next], ops2];
}
function validateArguments(ce, args, doms) {
  if (args.length === doms.length && args.every((x, i) => x.domain.isCompatible(doms[i])))
    return args;
  const xs = [];
  for (let i = 0; i <= doms.length - 1; i++)
    xs.push(validateArgument(ce, args[i], doms[i]));
  for (let i = doms.length; i <= args.length - 1; i++)
    xs.push(ce.error("unexpected-argument", args[i]));
  return xs;
}
function canonicalAdd(ce, ops2) {
  /* @__PURE__ */ console.assert(ops2.every((x) => x.isCanonical));
  ops2 = ops2.filter((x) => x.numericValue === null || !x.isZero);
  if (ops2.length === 0)
    return ce.number(0);
  if (ops2.length === 1)
    return ops2[0];
  if (ops2.length === 2) {
    let im = 0;
    let re = 0;
    re = asFloat(ops2[0]);
    if (re !== null && re !== 0)
      im = getImaginaryCoef(ops2[1]);
    else {
      im = getImaginaryCoef(ops2[0]);
      if (im !== 0 && ops2[1].numericValue !== null)
        re = asFloat(ops2[1]);
    }
    if (re !== null && im !== null && im !== 0)
      return ce.number(ce.complex(re, im));
  }
  if (ops2.length > 1)
    ops2 = sortAdd(ce, ops2);
  return ce._fn("Add", ops2);
}
function domainAdd(_ce, args) {
  let dom = null;
  for (const arg of args) {
    if (!arg.isNumeric)
      return null;
    if (!dom)
      dom = arg;
    else
      dom = sharedAncestorDomain(dom, arg);
  }
  return dom;
}
function simplifyAdd(ce, args) {
  /* @__PURE__ */ console.assert(args.length > 1, `simplifyAdd: not enough args`);
  const sum2 = new Sum(ce);
  for (let arg of args) {
    arg = arg.simplify();
    if (arg.isImaginary && arg.isInfinity)
      return ce.symbol("ComplexInfinity");
    if (arg.isNaN || arg.symbol === "Undefined")
      return ce._NAN;
    if (!arg.isZero)
      sum2.addTerm(arg);
  }
  return sum2.asExpression("expression");
}
function evalAddNum(ops2) {
  let sum2 = 0;
  for (const op3 of ops2) {
    const v = op3.numericValue;
    if (typeof v === "number")
      sum2 += v;
    else
      return null;
  }
  return sum2;
}
function evalAdd(ce, ops2, mode = "evaluate") {
  if (mode === "N" && ce.numericMode === "machine") {
    ops2 = ops2.map((x) => x.N());
    const sum2 = evalAddNum(ops2);
    if (sum2 !== null)
      return ce.number(sum2);
  }
  for (const arg of ops2) {
    if (arg.isImaginary && arg.isInfinity)
      return ce.symbol("ComplexInfinity");
    if (arg.isNaN || arg.symbol === "Undefined")
      return ce._NAN;
    if (!arg.isExact)
      mode = "N";
  }
  if (mode === "N")
    ops2 = ops2.map((x) => x.N());
  else
    ops2 = ops2.map((x) => x.evaluate());
  return new Sum(ce, ops2).asExpression(mode === "N" ? "numeric" : "expression");
}
function canonicalSummation(ce, body, range) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i;
  body != null ? body : body = ce.error("missing");
  let index = null;
  let lower = null;
  let upper = null;
  if (range && range.head !== "Tuple" && range.head !== "Triple" && range.head !== "Pair" && range.head !== "Single") {
    index = range;
  } else if (range) {
    index = (_b = (_a = range.ops) == null ? void 0 : _a[0]) != null ? _b : null;
    lower = (_e = (_d = (_c = range.ops) == null ? void 0 : _c[1]) == null ? void 0 : _d.canonical) != null ? _e : null;
    upper = (_h = (_g = (_f = range.ops) == null ? void 0 : _f[2]) == null ? void 0 : _g.canonical) != null ? _h : null;
  }
  if ((index == null ? void 0 : index.head) === "Hold")
    index = index.op1;
  if ((index == null ? void 0 : index.head) === "ReleaseHold")
    index = (_i = index.op1) == null ? void 0 : _i.evaluate();
  index != null ? index : index = ce.symbol("Nothing");
  if (!index.symbol)
    index = ce.error(["incompatible-domain", "Symbol", index.domain]);
  if (index.symbol)
    ce.pushScope({ [index.symbol]: { domain: "Integer" } });
  const fn = body.canonical;
  if (index.symbol) {
    ce.popScope();
    index = index = ce.hold(index);
  }
  if (lower && lower.isFinite)
    lower = validateArgument(ce, lower, "Integer");
  if (upper && upper.isFinite)
    upper = validateArgument(ce, upper, "Integer");
  if (lower && upper)
    range = ce.tuple([index, lower, upper]);
  else if (upper)
    range = ce.tuple([index, ce.number(1), upper]);
  else if (lower)
    range = ce.tuple([index, lower]);
  else
    range = index;
  return ce._fn("Sum", [fn, range]);
}
function evalSummation(ce, expr, range, mode) {
  var _a;
  const [index, lower, upper, isFinite2] = normalizeLimits(range);
  const fn = expr;
  if (mode !== "N" && (lower >= upper || upper - lower >= MAX_SYMBOLIC_TERMS))
    return void 0;
  let result = null;
  const savedContext = ce.context;
  ce.context = (_a = fn.scope) != null ? _a : ce.context;
  if (mode === "simplify") {
    const terms = [];
    if (!fn.scope)
      for (let i = lower; i <= upper; i++)
        terms.push(fn.simplify());
    else
      for (let i = lower; i <= upper; i++) {
        ce.set({ [index]: i });
        terms.push(fn.simplify());
      }
    result = ce.add(terms).simplify();
  }
  if (mode === "evaluate") {
    const terms = [];
    if (!fn.scope)
      for (let i = lower; i <= upper; i++)
        terms.push(fn.evaluate());
    else
      for (let i = lower; i <= upper; i++) {
        ce.set({ [index]: i });
        terms.push(fn.evaluate());
      }
    result = ce.add(terms).evaluate();
  }
  if (mode === "N") {
    if (result === null && !fn.scope) {
      const n = fn.N();
      if (!isFinite2) {
        if (n.isZero)
          result = ce._ZERO;
        else if (n.isPositive)
          result = ce._POSITIVE_INFINITY;
        else
          result = ce._NEGATIVE_INFINITY;
      }
      if (result === null && fn.isPure)
        result = ce.mul([ce.number(upper - lower + 1), n]);
    }
    if (result === null && isFinite2) {
      if (bignumPreferred(ce)) {
        let sum2 = ce.bignum(0);
        for (let i = lower; i <= upper; i++) {
          ce.set({ [index]: i });
          const term = asBignum(fn.N());
          if (term === null) {
            result = void 0;
            break;
          }
          if (!term.isFinite()) {
            sum2 = term;
            break;
          }
          sum2 = sum2.add(term);
        }
        if (result === null)
          result = ce.number(sum2);
      } else {
        const numericMode = ce.numericMode;
        ce.numericMode = "machine";
        let sum2 = 0;
        for (let i = lower; i <= upper; i++) {
          ce.set({ [index]: i });
          const term = asFloat(fn.N());
          if (term === null) {
            result = void 0;
            break;
          }
          if (!Number.isFinite(term)) {
            sum2 = term;
            break;
          }
          sum2 += term;
        }
        ce.numericMode = numericMode;
        if (result === null)
          result = ce.number(sum2);
      }
    } else if (result === null) {
      ce.set({ [index]: 1e3 });
      const nMax = fn.N();
      ce.set({ [index]: 999 });
      const nMaxMinusOne = fn.N();
      const ratio = asFloat(ce.div(nMax, nMaxMinusOne).N());
      if (ratio !== null && Number.isFinite(ratio) && Math.abs(ratio) > 1) {
        result = ce._POSITIVE_INFINITY;
      } else {
        let sum2 = 0;
        const numericMode = ce.numericMode;
        ce.numericMode = "machine";
        for (let i = lower; i <= upper; i++) {
          ce.set({ [index]: i });
          const term = asFloat(fn.N());
          if (term === null) {
            result = void 0;
            break;
          }
          if (Math.abs(term) < Number.EPSILON || !Number.isFinite(term))
            break;
          sum2 += term;
        }
        ce.numericMode = numericMode;
        if (result === null)
          result = ce.number(sum2);
      }
    }
  }
  ce.context = savedContext;
  return result != null ? result : void 0;
}
var import_complex9 = __toESM(require_complex());
function negateLiteral(expr, metadata) {
  let n = expr.numericValue;
  if (n === null)
    return null;
  if (typeof n === "number")
    n = -n;
  else if (n instanceof decimal_default)
    n = n.neg();
  else if (n instanceof import_complex9.Complex)
    n = n.neg();
  else if (Array.isArray(n))
    n = neg(n);
  return expr.engine.number(n, { metadata });
}
function canonicalNegate(expr, metadata) {
  if (expr.head === "Negate")
    return expr.op1;
  if (expr.numericValue !== null)
    return negateLiteral(expr, metadata);
  if (expr.head === "Add") {
    let ops2 = expr.ops.map((x) => canonicalNegate(x));
    ops2 = flattenOps(ops2, "Add");
    return expr.engine.add(ops2, metadata);
  }
  if (expr.head === "Multiply") {
    return negateProduct(expr.engine, expr.ops);
  }
  if (expr.head === "Divide")
    return expr.engine._fn("Divide", [canonicalNegate(expr.op1), expr.op2]);
  /* @__PURE__ */ console.assert(expr.head !== "Subtract");
  return expr.engine._fn("Negate", [expr], metadata);
}
function negateProduct(ce, args) {
  let result = [];
  let done = false;
  for (const arg of args) {
    if (!done && arg.head === "Negate") {
      done = true;
      result.push(arg.op1);
    } else
      result.push(arg);
  }
  if (done)
    return ce.mul(result);
  result = [];
  for (const arg of args) {
    if (done || arg.numericValue === null || !arg.isInteger)
      result.push(arg);
    else {
      done = true;
      result.push(canonicalNegate(arg));
    }
  }
  if (done)
    return ce.mul(result);
  result = [];
  for (const arg of args) {
    if (done || arg.numericValue === null || !arg.isNumber)
      result.push(arg);
    else {
      done = true;
      result.push(canonicalNegate(arg));
    }
  }
  if (done)
    return ce.mul(result);
  return ce._fn("Negate", [ce._fn("Multiply", args)]);
}
function processNegate(_ce, x, _mode = "simplify") {
  return canonicalNegate(x);
}
function distribute2(lhs, rhs) {
  if (lhs.head === "Negate" && rhs.head === "Negate")
    return distribute2(lhs.op1, rhs.op1);
  if (lhs.head === "Negate")
    return canonicalNegate(distribute2(lhs.op1, rhs));
  if (rhs.head === "Negate")
    return canonicalNegate(distribute2(lhs, rhs.op1));
  const ce = lhs.engine;
  if (lhs.head === "Divide" && rhs.head === "Divide") {
    const denom = ce.mul([lhs.op2, rhs.op2]);
    return ce.div(distribute2(lhs.op1, rhs.op1), denom);
  }
  if (lhs.head === "Divide")
    return ce.div(distribute2(lhs.op1, rhs), lhs.op2);
  if (rhs.head === "Divide")
    return ce.div(distribute2(lhs, rhs.op1), rhs.op2);
  if (lhs.head === "Add")
    return ce.add(lhs.ops.map((x) => distribute2(x, rhs)));
  if (rhs.head === "Add")
    return ce.add(rhs.ops.map((x) => distribute2(lhs, x)));
  return ce.mul([lhs, rhs]);
}
function distribute(expr) {
  if (expr.length === 1)
    return expr[0];
  if (expr.length === 2)
    return distribute2(expr[0], expr[1]);
  return distribute2(expr[0], distribute(expr.slice(1)));
}
var binomials = [
  [1],
  [1, 1],
  [1, 2, 1],
  [1, 3, 3, 1],
  [1, 4, 6, 4, 1],
  [1, 5, 10, 10, 5, 1],
  [1, 6, 15, 20, 15, 6, 1],
  [1, 7, 21, 35, 35, 21, 7, 1],
  [1, 8, 28, 56, 70, 56, 28, 8, 1]
];
function choose(n, k) {
  while (n >= binomials.length) {
    const s = binomials.length;
    const nextRow = [1];
    const prev = binomials[s - 1];
    for (let i = 1; i < s; i++)
      nextRow[i] = prev[i - 1] + prev[i];
    nextRow[s] = 1;
    binomials.push(nextRow);
  }
  return binomials[n][k];
}
function multinomialCoefficient(k) {
  let n = k.reduce((acc, v) => acc + v, 0);
  let prod = 1;
  for (let i = 0; i < k.length; i += 1) {
    prod *= choose(n, k[i]);
    n -= k[i];
  }
  return prod;
}
function* powers(n, exp2) {
  if (n === 1) {
    yield [exp2];
    return;
  }
  for (let i = 0; i <= exp2; i += 1)
    for (const p of powers(n - 1, exp2 - i))
      yield [i, ...p];
}
function expandMultinomial(expr) {
  if (expr.head !== "Power")
    return null;
  const exp2 = asSmallInteger(expr.op2);
  if (exp2 === null || exp2 < 0)
    return null;
  if (exp2 === 0)
    return expr.engine._ONE;
  if (exp2 === 1)
    return expr.op1;
  const ce = expr.engine;
  if (expr.op1.head === "Negate") {
    const sign2 = exp2 % 2 === 0 ? 1 : -1;
    const result2 = expandMultinomial(ce.pow(expr.op1.op1, expr.op2));
    if (result2 === null)
      return null;
    if (sign2 > 0)
      return result2;
    return ce.neg(result2);
  }
  /* @__PURE__ */ console.assert(expr.op1.head !== "Subtract");
  if (expr.op1.head !== "Add")
    return null;
  const terms = expr.op1.ops;
  const it = powers(terms.length, exp2);
  const result = [];
  for (const val of it) {
    const product = [ce.number(multinomialCoefficient(val))];
    for (let i = 0; i < val.length; i += 1) {
      if (val[i] !== 0) {
        if (val[i] === 1)
          product.push(terms[i]);
        else
          product.push(ce.pow(terms[i], val[i]));
      }
    }
    result.push(ce.mul(product));
  }
  return ce.add(result);
}
function expandNumerator(expr) {
  if (expr.head !== "Divide")
    return null;
  const expandedNumerator = expand2(expr.op1);
  if (expandedNumerator === null)
    return null;
  const ce = expr.engine;
  if (expandedNumerator.head === "Add") {
    return ce.add(expandedNumerator.ops.map((x) => ce.div(x, expr.op2)));
  }
  return expr.engine.div(expandedNumerator, expr.op2);
}
function expand2(expr) {
  if (!expr)
    return null;
  let result = expandNumerator(expr);
  if (result !== null)
    return result;
  if (expr.head === "Multiply") {
    result = distribute(expr.ops);
    if (result !== null)
      return result;
  }
  if (expr.head === "Add") {
    const ops2 = expr.ops.map((x) => {
      var _a;
      return (_a = expand2(x)) != null ? _a : x;
    });
    return simplifyAdd(expr.engine, ops2);
  }
  if (expr.head === "Negate") {
    result = expand2(expr.op1);
    if (result !== null)
      return expr.engine.neg(result);
  }
  if (expr.head === "Power") {
    result = expandMultinomial(expr);
    if (result !== null)
      return result;
  }
  return null;
}
var UNIVARIATE_ROOTS = [
  // ax = 0
  [["Multiply", "_x", "_a"], 0],
  // x + a = 0
  [
    ["Add", "_a", "_x"],
    ["Negate", "_a"]
  ],
  [["Add", ["Negate", "_x"], "_a"], "_a"],
  // ax + b = 0
  [
    ["Add", ["Multiply", "_x", "_a"], "_b"],
    ["Divide", ["Negate", "_b"], "_a"]
  ],
  // Quadratic formula (real)
  // ax^2 + bx + c = 0
  [
    [
      "Add",
      ["Multiply", ["Power", "_x", 2], "_a"],
      ["Multiply", "_x", "_b"],
      "_c"
    ],
    [
      "Divide",
      [
        "Add",
        ["Negate", "_b"],
        ["Sqrt", ["Subtract", ["Square", "_b"], ["Multiply", 4, "_a", "_c"]]]
      ],
      ["Multiply", 2, "_a"]
    ]
    // (_ce, vars): boolean => vars.x.isReal === true,
  ],
  [
    [
      "Add",
      ["Multiply", ["Power", "_x", 2], "_a"],
      ["Multiply", "_x", "_b"],
      "_c"
    ],
    [
      "Divide",
      [
        "Subtract",
        ["Negate", "_b"],
        ["Sqrt", ["Subtract", ["Square", "_b"], ["Multiply", 4, "_a", "_c"]]]
      ],
      ["Multiply", 2, "_a"]
    ]
    // (_ce, vars): boolean => vars.x.isReal === true,
  ],
  // ax^2 + bx = 0
  [
    ["Add", ["Multiply", ["Power", "_x", 2], "_a"], ["Multiply", "_x", "_b"]],
    0
    // (_ce, vars): boolean => vars.x.isReal === true,
  ],
  [
    ["Add", ["Multiply", ["Power", "_x", 2], "_a"], ["Multiply", "_x", "_b"]],
    ["Divide", ["Negate", "_b"], "_a"]
    // (_ce, vars): boolean => vars.x.isReal === true,
  ],
  // ax^2 + b = 0
  [
    ["Add", ["Multiply", ["Power", "_x", 2], "_a"], "_b"],
    ["Sqrt", ["Divide", ["Negate", "_b"], "_a"]]
    // (_ce, vars): boolean => vars.x.isReal === true,
  ],
  [
    ["Add", ["Multiply", ["Power", "_x", 2], "_a"], "_b"],
    ["Negate", ["Sqrt", ["Divide", ["Negate", "_b"], "_a"]]]
    // (_ce, vars): boolean => vars.x.isReal === true,
  ]
  // Quadratic formula (complex)
  // [
  //   '$ax^2 + bx + c$',
  //   [
  //     '$-\\frac{b}{2a} - \\imaginaryI \\frac{\\sqrt{4ac - b^2}}{2a}$',
  //     '$-\\frac{b}{2a} + \\imaginaryI \\frac{\\sqrt{4ac - b^2}}{2a}$',
  //   ],
  //   (_ce, vars): boolean => vars.x.isImaginary === true,
  // ],
];
function findUnivariateRoots(expr, x) {
  const ce = expr.engine;
  if (expr.head === "Equal") {
    expr = ce.add([expr.op1.canonical, ce.neg(expr.op2.canonical)]).simplify();
  }
  const rules = ce.cache(
    "univariate-roots-rules",
    () => boxRules(ce, UNIVARIATE_ROOTS)
  );
  let result = matchRules(
    expr.subs({ [x]: "_x" }, { canonical: false }),
    rules,
    { _x: ce.symbol("_x") }
  );
  if (result.length === 0) {
    const expandedExpr = expand2(expr.canonical);
    if (expandedExpr === null)
      return [];
    result = matchRules(
      expandedExpr.subs({ [x]: "_x" }, { canonical: false }),
      rules,
      {
        _x: ce.symbol("_x")
      }
    );
  }
  return result.map((x2) => x2.canonical.evaluate());
}
function assume(proposition) {
  if (proposition.head === "Element")
    return assumeElement(proposition);
  if (proposition.head === "Equal")
    return assumeEquality(proposition);
  if (isInequality(proposition))
    return assumeInequality(proposition);
  return "not-a-predicate";
}
function assumeEquality(proposition) {
  /* @__PURE__ */ console.assert(proposition.head === "Equal");
  const freeVars = proposition.freeVars;
  if (freeVars.length === 0) {
    const val = proposition.evaluate();
    if (val.symbol === "True")
      return "tautology";
    if (val.symbol === "False")
      return "contradiction";
    /* @__PURE__ */ console.log(proposition.canonical.evaluate());
    return "not-a-predicate";
  }
  const ce = proposition.engine;
  const lhs = proposition.op1.symbol;
  if (lhs && !hasValue(ce, lhs) && !proposition.op2.has(lhs)) {
    const val = proposition.op2.evaluate();
    if (!val.isValid)
      return "not-a-predicate";
    const def = ce.lookupSymbol(lhs);
    if (!def) {
      ce.defineSymbol(lhs, { value: val });
      return "ok";
    }
    if (def.domain && !val.domain.isCompatible(def.domain))
      return "contradiction";
    def.value = val;
    return "ok";
  }
  if (freeVars.length === 1) {
    const lhs2 = freeVars[0];
    const sols = findUnivariateRoots(proposition, lhs2);
    if (sols.length === 0) {
      ce.assumptions.set(
        ce.fn("Equal", [
          ce.add([proposition.op1.canonical, ce.neg(proposition.op2.canonical)]).simplify(),
          0
        ]),
        true
      );
    }
    const val = sols.length === 1 ? sols[0] : ce.fn("List", sols);
    const def = ce.lookupSymbol(lhs2);
    if (!def) {
      ce.defineSymbol(lhs2, { value: val });
      return "ok";
    }
    if (def.domain && !sols.every((sol) => val.domain.isCompatible(sol.domain)))
      return "contradiction";
    def.value = val;
    return "ok";
  }
  ce.assumptions.set(proposition, true);
  return "ok";
}
function assumeInequality(proposition) {
  const ce = proposition.engine;
  if (proposition.op1.symbol && !hasDef(ce, proposition.op1.symbol)) {
    if (proposition.op2.evaluate().isZero) {
      if (proposition.head === "Less") {
        ce.defineSymbol(proposition.op1.symbol, {
          domain: ce.domain("NegativeNumber")
        });
      } else if (proposition.head === "LessEqual") {
        ce.defineSymbol(proposition.op1.symbol, {
          domain: ce.domain("NonPositiveNumber")
        });
      } else if (proposition.head === "Greater") {
        ce.defineSymbol(proposition.op1.symbol, {
          domain: ce.domain("PositiveNumber")
        });
      } else if (proposition.head === "GreaterEqual") {
        ce.defineSymbol(proposition.op1.symbol, {
          domain: ce.domain("NonNegativeNumber")
        });
      }
    } else {
      ce.defineSymbol(proposition.op1.symbol, {
        domain: ce.domain("ExtendedRealNumber")
      });
      ce.assumptions.set(proposition, true);
    }
    return "ok";
  }
  let op3 = "";
  let lhs;
  let rhs;
  if (proposition.head === "Less") {
    lhs = proposition.op1;
    rhs = proposition.op2;
    op3 = "<";
  } else if (proposition.head === "LessEqual") {
    lhs = proposition.op1;
    rhs = proposition.op2;
    op3 = "<=";
  } else if (proposition.head === "Greater") {
    lhs = proposition.op2;
    rhs = proposition.op1;
    op3 = "<";
  } else if (proposition.head === "GreaterEqual") {
    lhs = proposition.op2;
    rhs = proposition.op1;
    op3 = "<=";
  }
  if (!op3)
    return "internal-error";
  const p = ce.add([lhs.canonical, ce.neg(rhs.canonical)]).simplify();
  const result = ce.box([op3 === "<" ? "Less" : "LessEqual", p, 0]).evaluate();
  if (result.symbol === "True")
    return "tautology";
  if (result.symbol === "False")
    return "contradiction";
  const freeVars = result.freeVars;
  if (freeVars.length === 0)
    return "not-a-predicate";
  if (freeVars.length === 1) {
    if (!ce.lookupSymbol(freeVars[0]))
      ce.defineSymbol(freeVars[0], { domain: "ExtendedRealNumber" });
  }
  /* @__PURE__ */ console.assert(result.head === "Less" || result.head === "LessEqual");
  ce.assumptions.set(result, true);
  return "ok";
}
function assumeElement(proposition) {
  var _a;
  /* @__PURE__ */ console.assert(proposition.head === "Element");
  const ce = proposition.engine;
  const undefs = undefinedIdentifiers(proposition.op1);
  if (undefs.length === 1) {
    const dom = ce.domain(proposition.op2.evaluate().json);
    if (!dom.isValid)
      return "not-a-predicate";
    if (dom.isCompatible("Function"))
      ce.defineFunction(undefs[0], { signature: { domain: "Function" } });
    else
      ce.defineSymbol(undefs[0], { domain: dom });
    return "ok";
  }
  if (proposition.op1.symbol && hasDef(ce, proposition.op1.symbol)) {
    const dom = ce.domain(proposition.op2.evaluate().json);
    if (!dom.isValid)
      return "not-a-predicate";
    const def = ce.lookupSymbol(proposition.op1.symbol);
    if (def) {
      if (def.domain && !dom.isCompatible(def.domain))
        return "contradiction";
      def.domain = dom;
      return "ok";
    }
    const fdef = ce.lookupFunction(proposition.op1.symbol);
    if ((_a = fdef == null ? void 0 : fdef.signature) == null ? void 0 : _a.domain) {
      if (!dom.isCompatible(fdef.signature.domain))
        return "contradiction";
      if (dom.isCompatible(fdef.signature.domain, "bivariant"))
        return "tautology";
      return "not-a-predicate";
    }
    return "ok";
  }
  if (undefs.length > 0) {
    ce.assumptions.set(proposition, true);
    return "ok";
  }
  const val = proposition.evaluate();
  if (val.symbol === "True")
    return "tautology";
  if (val.symbol === "False")
    return "contradiction";
  return "not-a-predicate";
}
function hasDef(ce, s) {
  var _a;
  return ((_a = ce.lookupSymbol(s)) != null ? _a : ce.lookupFunction(s)) !== void 0;
}
function undefinedIdentifiers(expr) {
  return expr.symbols.filter((x) => !hasDef(expr.engine, x));
}
function hasValue(ce, s) {
  var _a;
  if (ce.lookupFunction(s))
    return false;
  return ((_a = ce.lookupSymbol(s)) == null ? void 0 : _a.value) !== void 0;
}
function isInequality(expr) {
  const h = expr.head;
  if (typeof h !== "string")
    return false;
  return ["Less", "Greater", "LessEqual", "GreaterEqual"].includes(h);
}
var import_complex13 = __toESM(require_complex());
var BoxedDictionary = class _BoxedDictionary extends AbstractBoxedExpression {
  constructor(ce, dict, options) {
    var _a;
    options != null ? options : options = {};
    super(ce, options.metadata);
    this._value = /* @__PURE__ */ new Map();
    const canonical2 = (_a = options.canonical) != null ? _a : true;
    for (const key of Object.keys(dict))
      this._value.set(key, ce.box(dict[key], { canonical: canonical2 }));
    ce._register(this);
  }
  unbind() {
    for (const [_k, v] of this._value)
      v.unbind();
    return void 0;
  }
  get hash() {
    let h = hashCode("Dictionary");
    for (const [k, v] of this._value)
      h ^= hashCode(k) ^ v.hash;
    return h;
  }
  get complexity() {
    return 97;
  }
  get head() {
    return "Dictionary";
  }
  get isPure() {
    return false;
  }
  getKey(key) {
    return this._value.get(key);
  }
  hasKey(key) {
    return this._value.has(key);
  }
  get keys() {
    return this._value.keys();
  }
  get keysCount() {
    return this._value.size;
  }
  has(x) {
    for (const [_k, v] of this._value)
      if (v.has(x))
        return true;
    return false;
  }
  get domain() {
    const result = ["Dictionary"];
    for (const [k, v] of this._value)
      result.push(["Tuple", k, v.domain]);
    return this.engine.domain(result);
  }
  get json() {
    if (this.engine.jsonSerializationOptions.shorthands.includes("dictionary")) {
      const dict = {};
      for (const key of this._value.keys())
        dict[key] = this._value.get(key).json;
      return { dict };
    }
    const kvs = [];
    for (const key of this._value.keys())
      kvs.push(
        this.engine._fn("KeyValuePair", [
          this.engine.string(key),
          this._value.get(key)
        ])
      );
    return serializeJsonFunction(this.engine, "Dictionary", kvs, {
      latex: this._latex
    });
  }
  /** Structural equality */
  isSame(rhs) {
    if (this === rhs)
      return true;
    if (!(rhs instanceof _BoxedDictionary))
      return false;
    if (this._value.size !== rhs._value.size)
      return false;
    for (const [k, v] of this._value) {
      const rhsV = rhs.getKey(k);
      if (!rhsV || !v.isSame(rhsV))
        return false;
    }
    return true;
  }
  match(rhs, _options) {
    if (!(rhs instanceof _BoxedDictionary))
      return null;
    if (this._value.size !== rhs._value.size)
      return null;
    let result = {};
    for (const [k, v] of this._value) {
      const rhsV = rhs.getKey(k);
      if (!rhsV)
        return null;
      const m = v.match(rhsV);
      if (m === null)
        return null;
      result = { ...result, ...m };
    }
    return result;
  }
  /** Mathematical equality */
  isEqual(rhs) {
    if (this === rhs)
      return true;
    if (!(rhs instanceof _BoxedDictionary))
      return false;
    if (!rhs.keys || this._value.size !== rhs._value.size)
      return false;
    for (const [k, v] of this._value) {
      const rhsV = rhs.getKey(k);
      if (!rhsV || !v.isEqual(rhsV))
        return false;
    }
    return true;
  }
  apply(fn, head2) {
    const result = {};
    for (const key of this.keys)
      result[key] = this.engine.box(fn(this.getKey(key)));
    if (head2)
      return this.engine.fn(head2, [{ dict: result }]);
    return new _BoxedDictionary(this.engine, result);
  }
  evaluate(options) {
    return this.apply((x) => {
      var _a;
      return (_a = x.evaluate(options)) != null ? _a : x;
    });
  }
  get isCanonical() {
    return this._isCanonical;
  }
  set isCanonical(val) {
    this._isCanonical = val;
  }
  get canonical() {
    if (this.isCanonical)
      return this;
    const result = this.apply((x) => x.canonical);
    result.isCanonical = true;
    return result;
  }
  simplify(options) {
    var _a;
    if (!((_a = options == null ? void 0 : options.recursive) != null ? _a : true))
      return this;
    return this.apply((x) => {
      var _a2;
      return (_a2 = x.simplify(options)) != null ? _a2 : x;
    });
  }
  N(options) {
    return this.apply((x) => x.N(options));
  }
  replace(rules, options) {
    let changeCount = 0;
    const result = {};
    for (const key of this.keys) {
      const val = this.getKey(key);
      const newVal = val.replace(rules, options);
      if (newVal !== null)
        changeCount += 1;
      result[key] = newVal != null ? newVal : val;
    }
    return changeCount === 0 ? null : new _BoxedDictionary(this.engine, result);
  }
  subs(sub2, options) {
    const result = {};
    for (const key of this.keys)
      result[key] = this.getKey(key).subs(sub2, options);
    return new _BoxedDictionary(this.engine, result, options);
  }
};
var import_complex10 = __toESM(require_complex());
var SIMPLIFY_RULES = [];
function cheapest(oldExpr, newExpr) {
  if (newExpr === null || newExpr === void 0)
    return oldExpr;
  if (oldExpr === newExpr)
    return oldExpr;
  const ce = oldExpr.engine;
  const boxedNewExpr = ce.box(newExpr);
  if (ce.costFunction(boxedNewExpr) <= 1.2 * ce.costFunction(oldExpr)) {
    return boxedNewExpr;
  }
  return oldExpr;
}
var BoxedFunction = class _BoxedFunction extends AbstractBoxedExpression {
  constructor(ce, head2, ops2, options) {
    var _a, _b, _c, _d, _e;
    options != null ? options : options = {};
    (_a = options.canonical) != null ? _a : options.canonical = false;
    super(ce, options.metadata);
    this._scope = ce.context;
    this._head = head2;
    this._ops = ops2;
    this._def = (_b = options.def) != null ? _b : null;
    if (options.canonical) {
      if (!this._def)
        this._def = ce.lookupFunction(head2, ce.context);
      this._canonical = this;
    }
    this._codomain = null;
    if (!options.canonical) {
      this._codomain = ce.domain("Anything");
    } else {
      if (typeof this._head !== "string")
        this._codomain = this._head.domain.codomain;
      else if (this._def) {
        const sig = this._def.signature;
        if (typeof sig.codomain === "function") {
          this._codomain = (_c = sig.codomain(ce, this._ops)) != null ? _c : null;
        } else {
          this._codomain = (_d = sig.codomain) != null ? _d : null;
        }
      }
      if (!this._codomain)
        this._codomain = (_e = ce.defaultDomain) != null ? _e : ce.domain("Void");
    }
    ce._register(this);
  }
  //
  // NON-CANONICAL OR CANONICAL OPERATIONS
  //
  // Those operations/properties can be applied to a canonical or
  // non-canonical expression
  //
  get hash() {
    if (this._hash !== void 0)
      return this._hash;
    let h = 0;
    for (const op3 of this._ops)
      h = h << 1 ^ op3.hash | 0;
    if (typeof this._head === "string")
      h = h ^ hashCode(this._head) | 0;
    else
      h = h ^ this._head.hash | 0;
    this._hash = h;
    return h;
  }
  get isCanonical() {
    return this._canonical === this;
  }
  set isCanonical(val) {
    this._canonical = val ? this : void 0;
  }
  get isPure() {
    var _a;
    if (this._isPure !== void 0)
      return this._isPure;
    if (!this.isCanonical) {
      this._isPure = false;
      return false;
    }
    let result = void 0;
    if (((_a = this.functionDefinition) == null ? void 0 : _a.pure) !== void 0)
      result = this.functionDefinition.pure;
    if (result !== false)
      result = this._ops.every((x) => x.isPure);
    this._isPure = result;
    return result;
  }
  get json() {
    if (this.isValid && this._canonical === this)
      return serializeJsonCanonicalFunction(
        this.engine,
        this._head,
        this._ops,
        { latex: this._latex, wikidata: this._wikidata }
      );
    return serializeJsonFunction(this.engine, this._head, this._ops, {
      latex: this._latex,
      wikidata: this._wikidata
    });
  }
  get rawJson() {
    const head2 = typeof this._head === "string" ? this._head : this._head.json;
    return [head2, ...this.ops.map((x) => x.rawJson)];
  }
  get scope() {
    return this._scope;
  }
  get head() {
    return this._head;
  }
  get ops() {
    return this._ops;
  }
  get nops() {
    return this._ops.length;
  }
  get op1() {
    var _a;
    return (_a = this._ops[0]) != null ? _a : this.engine.symbol("Nothing");
  }
  get op2() {
    var _a;
    return (_a = this._ops[1]) != null ? _a : this.engine.symbol("Nothing");
  }
  get op3() {
    var _a;
    return (_a = this._ops[2]) != null ? _a : this.engine.symbol("Nothing");
  }
  get isValid() {
    if (this._head === "Error")
      return false;
    if (typeof this._head !== "string" && !this._head.isValid)
      return false;
    return this._ops.every((x) => x.isValid);
  }
  get canonical() {
    if (this._canonical)
      return this._canonical;
    this._canonical = this.isValid ? makeCanonicalFunction(this.engine, this._head, this._ops) : this;
    return this._canonical;
  }
  *map(fn) {
    let i = 0;
    while (i < this._ops.length)
      yield fn(this._ops[i++]);
  }
  subs(sub2, options) {
    options = options ? { ...options } : {};
    if (!("canonical" in options))
      options.canonical = true;
    const ops2 = this._ops.map((x) => x.subs(sub2, options));
    if (options.canonical && ops2.every((x) => x.isValid))
      return makeCanonicalFunction(this.engine, this._head, ops2);
    return new _BoxedFunction(this.engine, this._head, ops2, {
      canonical: false
    });
  }
  replace(rules, options) {
    return replace(this, rules, options);
  }
  has(x) {
    if (typeof this._head === "string") {
      if (typeof x === "string") {
        if (this._head === x)
          return true;
      } else if (x.includes(this._head))
        return true;
    }
    for (const arg of this._ops)
      if (arg.has(x))
        return true;
    return false;
  }
  /** `isSame` is structural/symbolic equality */
  isSame(rhs) {
    if (this === rhs)
      return true;
    if (!(rhs instanceof _BoxedFunction))
      return false;
    if (this.nops !== rhs.nops)
      return false;
    if (typeof this.head === "string") {
      if (this.head !== rhs.head)
        return false;
    } else {
      if (typeof rhs.head === "string")
        return false;
      else if (!rhs.head || !this.head.isSame(rhs.head))
        return false;
    }
    const lhsTail = this._ops;
    const rhsTail = rhs._ops;
    for (let i = 0; i < lhsTail.length; i++)
      if (!lhsTail[i].isSame(rhsTail[i]))
        return false;
    return true;
  }
  match(rhs, options) {
    if (!(rhs instanceof _BoxedFunction))
      return null;
    let result = {};
    if (typeof this.head === "string") {
      if (this.head !== rhs.head)
        return null;
    } else {
      if (typeof rhs.head === "string")
        return null;
      else {
        if (!rhs.head)
          return null;
        const m = this.head.match(rhs.head, options);
        if (m === null)
          return null;
        result = { ...result, ...m };
      }
    }
    const lhsTail = this._ops;
    const rhsTail = rhs._ops;
    for (let i = 0; i < lhsTail.length; i++) {
      const m = lhsTail[i].match(rhsTail[i], options);
      if (m === null)
        return null;
      result = { ...result, ...m };
    }
    return result;
  }
  //
  // CANONICAL OPERATIONS
  //
  // These operations apply only to canonical expressions
  //
  unbind() {
    this._value = void 0;
    this._numericValue = void 0;
  }
  get wikidata() {
    var _a, _b, _c;
    if (!this.isCanonical)
      return void 0;
    return (_c = (_b = this._wikidata) != null ? _b : (_a = this.functionDefinition) == null ? void 0 : _a.wikidata) != null ? _c : void 0;
  }
  get description() {
    if (!this.isCanonical)
      return void 0;
    const def = this.functionDefinition;
    if (!def)
      return [];
    if (!def.description)
      return void 0;
    if (typeof def.description === "string")
      return [def.description];
    return def.description;
  }
  get url() {
    var _a, _b;
    if (!this.isCanonical)
      return "";
    return (_b = (_a = this.functionDefinition) == null ? void 0 : _a.url) != null ? _b : void 0;
  }
  get complexity() {
    var _a, _b;
    if (!this.isCanonical)
      return void 0;
    return (_b = (_a = this.functionDefinition) == null ? void 0 : _a.complexity) != null ? _b : DEFAULT_COMPLEXITY;
  }
  get functionDefinition() {
    if (!this.isCanonical)
      return void 0;
    if (this._def !== null)
      return this._def;
    return void 0;
  }
  bind(_scope) {
  }
  get value() {
    if (!this.isCanonical || !this.isPure)
      return void 0;
    if (!this._value)
      this._value = this.evaluate();
    return this._value;
  }
  /** `isEqual` is mathematical equality */
  isEqual(rhs) {
    const s = signDiff(this, rhs);
    if (s === 0)
      return true;
    if (s !== void 0)
      return false;
    const diff = this.engine.box(["Subtract", this, rhs]).simplify();
    if (diff.isZero)
      return true;
    return this.isSame(rhs);
  }
  isLess(rhs) {
    const s = signDiff(this, rhs);
    if (s === void 0)
      return void 0;
    return s < 0;
  }
  isLessEqual(rhs) {
    const s = signDiff(this, rhs);
    if (s === void 0)
      return void 0;
    return s <= 0;
  }
  isGreater(rhs) {
    const s = signDiff(this, rhs);
    if (s === void 0)
      return void 0;
    return s > 0;
  }
  isGreaterEqual(rhs) {
    const s = signDiff(this, rhs);
    if (s === void 0)
      return void 0;
    return s >= 0;
  }
  get isZero() {
    const s = this.sgn;
    if (s === null)
      return false;
    if (typeof s === "number")
      return s === 0;
    return void 0;
  }
  get isNotZero() {
    const s = this.sgn;
    if (s === null)
      return false;
    if (typeof s === "number")
      return s !== 0;
    return void 0;
  }
  get isOne() {
    return this.isEqual(this.engine._ONE);
  }
  get isNegativeOne() {
    return this.isEqual(this.engine._NEGATIVE_ONE);
  }
  // x > 0
  get isPositive() {
    const s = this.sgn;
    if (s === null)
      return false;
    if (typeof s === "number")
      return s > 0;
    return void 0;
  }
  // x <= 0
  get isNonPositive() {
    const s = this.sgn;
    if (s === null)
      return false;
    if (typeof s === "number")
      return s <= 0;
    return void 0;
  }
  // x < 0
  get isNegative() {
    const s = this.sgn;
    if (s === null)
      return false;
    if (typeof s === "number")
      return s < 0;
    return void 0;
  }
  // x >= 0
  get isNonNegative() {
    const s = this.sgn;
    if (s === null)
      return false;
    if (typeof s === "number")
      return s >= 0;
    return void 0;
  }
  get isNumber() {
    return this.domain.isCompatible("Number");
  }
  get isInteger() {
    return this.domain.isCompatible("Integer");
  }
  get isRational() {
    return this.domain.isCompatible("RationalNumber");
  }
  get isAlgebraic() {
    return this.domain.isCompatible("AlgebraicNumber");
  }
  get isReal() {
    return this.domain.isCompatible("RealNumber");
  }
  get isExtendedReal() {
    return this.domain.isCompatible("ExtendedRealNumber");
  }
  get isComplex() {
    return this.domain.isCompatible("ComplexNumber");
  }
  get isImaginary() {
    return this.domain.isCompatible("ImaginaryNumber");
  }
  get sgn() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (!this.isCanonical)
      return void 0;
    const head2 = this.head;
    if (head2 === "Negate") {
      const s = (_a = this._ops[0]) == null ? void 0 : _a.sgn;
      if (s === void 0)
        return void 0;
      if (s === null)
        return null;
      return s === 0 ? 0 : s > 0 ? -1 : 1;
    }
    if (head2 === "Multiply") {
      const total = this._ops.reduce((acc, x) => {
        var _a2;
        return acc * ((_a2 = x.sgn) != null ? _a2 : NaN);
      }, 1);
      if (isNaN(total))
        return null;
      if (total > 0)
        return 1;
      if (total < 0)
        return -1;
      return 0;
    }
    if (head2 === "Add") {
      let posCount = 0;
      let negCount = 0;
      let zeroCount = 0;
      const count = this._ops.length;
      for (const op3 of this._ops) {
        const s = op3.sgn;
        if (s === null || s === void 0)
          break;
        if (s === 0)
          zeroCount += 1;
        if (s > 0)
          posCount += 1;
        if (s < 0)
          negCount += 1;
      }
      if (zeroCount === count)
        return 0;
      if (posCount === count)
        return 1;
      if (negCount === count)
        return -1;
      return null;
    }
    if (head2 === "Divide") {
      const n = (_b = this._ops[0]) == null ? void 0 : _b.sgn;
      const d = (_c = this._ops[1]) == null ? void 0 : _c.sgn;
      if (n === null || d === null || n === void 0 || d === void 0)
        return null;
      if (n === 0)
        return 0;
      if (n > 0 && d > 0 || n < 0 && d < 0)
        return 1;
      return -1;
    }
    if (head2 === "Square") {
      if ((_d = this._ops[0]) == null ? void 0 : _d.isImaginary)
        return -1;
      if ((_e = this._ops[0]) == null ? void 0 : _e.isZero)
        return 0;
      return 1;
    }
    if (head2 === "Abs") {
      if ((_f = this._ops[0]) == null ? void 0 : _f.isZero)
        return 0;
      return 1;
    }
    if (head2 === "Sqrt") {
      if ((_g = this._ops[0]) == null ? void 0 : _g.isZero)
        return 0;
      if ((_h = this._ops[0]) == null ? void 0 : _h.isImaginary)
        return null;
      return 1;
    }
    if (head2 === "Power") {
    }
    if (head2 === "Root") {
    }
    if (head2 === "Ln") {
    }
    if (head2 === "Floor") {
    }
    if (head2 === "Ceil") {
    }
    if (head2 === "Round") {
    }
    const v = asFloat(this.N());
    if (v === null)
      return void 0;
    if (v === 0)
      return 0;
    if (v < 0)
      return -1;
    return 1;
  }
  //
  // AUTO-CANONICAL OPERATIONS
  //
  // The operations are automatically done on the canonical form of the
  // expression
  //
  get domain() {
    return this._codomain;
  }
  // simplify(options?: SimplifyOptions): BoxedExpression {
  //   const result = this.simplifyAll(options);
  //   if (result.length === 1) return result[0];
  //   const ce = this.engine;
  //   result.sort((a, b) => {
  //     if (a === b) return 0;
  //     return ce.costFunction(a) - ce.costFunction(b);
  //   });
  //   return result[0];
  // }
  simplify(options) {
    var _a, _b, _c, _d, _e;
    if (!this.isValid)
      return this;
    if (!this.isCanonical) {
      const canonical2 = this.canonical;
      if (!canonical2.isCanonical || !canonical2.isValid)
        return this;
      return canonical2.simplify(options);
    }
    const recursive = (_a = options == null ? void 0 : options.recursive) != null ? _a : true;
    let expr;
    if (recursive) {
      expr = expand2(this);
      if (expr !== null) {
        expr = expr.simplify({ ...options, recursive: false });
        return cheapest(this, expr);
      }
    }
    const def = this.functionDefinition;
    const tail = recursive ? holdMap(
      this._ops,
      (_b = def == null ? void 0 : def.hold) != null ? _b : "none",
      (def == null ? void 0 : def.associative) ? def.name : "",
      (x) => x.simplify(options)
    ) : this._ops;
    if (typeof this._head !== "string") {
      const expr2 = apply(this._head, tail);
      if (typeof expr2.head !== "string")
        return expr2;
      return expr2.simplify(options);
    }
    if (def) {
      if (def.inert)
        expr = (_d = (_c = tail[0]) == null ? void 0 : _c.canonical) != null ? _d : this;
      else {
        const sig = def.signature;
        if (sig == null ? void 0 : sig.simplify)
          expr = sig.simplify(this.engine, tail);
      }
    }
    if (!expr)
      expr = this.engine.fn(this._head, tail);
    else
      expr = cheapest(this.engine.fn(this._head, tail), expr);
    expr = cheapest(this, expr);
    const rules = (_e = options == null ? void 0 : options.rules) != null ? _e : this.engine.cache(
      "standard-simplification-rules",
      () => boxRules(this.engine, SIMPLIFY_RULES),
      (rules2) => {
        for (const [lhs, rhs, _priority, _condition] of rules2) {
          lhs.unbind();
          rhs.unbind();
        }
        return rules2;
      }
    );
    let iterationCount = 0;
    let done = false;
    do {
      const newExpr = expr.replace(rules);
      if (newExpr !== null) {
        expr = cheapest(expr, newExpr);
        if (expr === newExpr)
          done = true;
      } else
        done = true;
      iterationCount += 1;
    } while (!done && iterationCount < this.engine.iterationLimit);
    return cheapest(this, expr);
  }
  evaluate(options) {
    var _a, _b, _c;
    if (!this.isValid)
      return this;
    if (!this.isCanonical) {
      const canonical2 = this.canonical;
      if (!canonical2.isCanonical || !canonical2.isValid)
        return this;
      return canonical2.evaluate(options);
    }
    const def = this.functionDefinition;
    const tail = holdMap(
      this._ops,
      (_a = def == null ? void 0 : def.hold) != null ? _a : "none",
      (def == null ? void 0 : def.associative) ? def.name : "",
      (x) => x.evaluate(options)
    );
    if (typeof this._head !== "string") {
      const expr = apply(this._head, tail);
      if (typeof expr.head !== "string")
        return expr;
      return expr.evaluate(options);
    }
    if (!def)
      return this.engine.fn(this._head, tail);
    if (def.inert)
      return (_b = tail[0]) != null ? _b : this;
    const sig = def.signature;
    if (!sig || !sig.evaluate)
      return this.engine.fn(this._head, tail);
    if (typeof sig.evaluate !== "function")
      return apply(sig.evaluate, tail);
    return (_c = sig.evaluate(this.engine, tail)) != null ? _c : this.engine.fn(this._head, tail);
  }
  N(options) {
    var _a, _b, _c, _d;
    if (this._numericValue)
      return this._numericValue;
    if (this.engine.strict && !this.isValid)
      return this;
    if (!this.isCanonical) {
      const canonical2 = this.canonical;
      if (!canonical2.isCanonical || !canonical2.isValid)
        return this;
      return canonical2.N(options);
    }
    const def = this.functionDefinition;
    const tail = holdMap(
      this._ops,
      (_a = def == null ? void 0 : def.hold) != null ? _a : "none",
      (def == null ? void 0 : def.associative) ? def.name : "",
      (x) => x.N(options)
    );
    if (typeof this._head !== "string") {
      const expr = apply(this._head, tail);
      if (typeof expr.head !== "string")
        return expr;
      return expr.N(options);
    }
    if (!def)
      return this.engine.fn(this._head, tail);
    if (def.inert)
      return (_b = tail[0]) != null ? _b : this;
    const sig = def.signature;
    let result = (_d = (_c = sig == null ? void 0 : sig.N) == null ? void 0 : _c.call(sig, this.engine, tail)) != null ? _d : this.engine.fn(this._head, tail).evaluate();
    const num = result.numericValue;
    if (num !== null) {
      if (!complexAllowed(this.engine) && num instanceof import_complex10.default)
        result = this.engine._NAN;
      else if (!bignumPreferred(this.engine) && num instanceof decimal_default)
        result = this.engine.number(num.toNumber());
    }
    if (this.isPure)
      this._numericValue = result;
    return result;
  }
  solve(vars) {
    if (vars.length !== 1)
      return null;
    const roots = findUnivariateRoots(this.simplify(), vars[0]);
    return roots;
  }
};
function makeNumericFunction(ce, head2, semiOps, metadata) {
  var _a;
  let ops2 = [];
  if (head2 === "Add" || head2 === "Multiply")
    ops2 = validateNumericArgs(
      ce,
      flattenOps(flattenSequence(ce.canonical(semiOps)), head2)
    );
  else if (head2 === "Negate" || head2 === "Square" || head2 === "Sqrt")
    ops2 = validateNumericArgs(ce, flattenSequence(ce.canonical(semiOps)), 1);
  else if (head2 === "Divide" || head2 === "Power")
    ops2 = validateNumericArgs(ce, flattenSequence(ce.canonical(semiOps)), 2);
  else
    return null;
  if (!ops2.every((x) => x.isValid))
    return new BoxedFunction(ce, head2, ops2, { metadata, canonical: false });
  if (head2 === "Add")
    return ce.add(ops2, metadata);
  if (head2 === "Negate")
    return ce.neg((_a = ops2[0]) != null ? _a : ce.error("missing"), metadata);
  if (head2 === "Multiply")
    return ce.mul(ops2, metadata);
  if (head2 === "Divide")
    return ce.div(ops2[0], ops2[1], metadata);
  if (head2 === "Power")
    return ce.pow(ops2[0], ops2[1], metadata);
  if (head2 === "Square")
    return ce.pow(ops2[0], ce.number(2), metadata);
  if (head2 === "Sqrt") {
    const op3 = ops2[0].canonical;
    if (isRational(op3.numericValue))
      return new BoxedFunction(ce, "Sqrt", [op3], { metadata, canonical: true });
    return ce.pow(op3, ce._HALF, metadata);
  }
  return null;
}
function makeCanonicalFunction(ce, head2, ops2, metadata) {
  var _a, _b;
  if (typeof head2 !== "string")
    head2 = (_a = head2.evaluate().symbol) != null ? _a : head2;
  if (typeof head2 === "string") {
    const result = makeNumericFunction(ce, head2, ops2, metadata);
    if (result)
      return result;
  } else {
    if (!head2.isValid)
      return new BoxedFunction(
        ce,
        head2,
        ops2.map((x) => ce.box(x, { canonical: false })),
        { metadata, canonical: false }
      );
  }
  const def = ce.lookupFunction(head2, ce.context);
  if (typeof head2 !== "string" || !def) {
    return new BoxedFunction(
      ce,
      head2,
      flattenSequence(ops2.map((x) => ce.box(x))),
      { metadata, canonical: true }
    );
  }
  let xs = [];
  for (let i = 0; i < ops2.length; i++) {
    if (applicable(def.hold, ops2.length - 1, i)) {
      xs.push(ce.box(ops2[i]));
    } else {
      const y = ce.box(ops2[i], { canonical: false });
      if (y.head === "ReleaseHold")
        xs.push(y.op1.canonical);
      else
        xs.push(y);
    }
  }
  if (!xs.every((x) => x.isValid))
    return new BoxedFunction(ce, head2, xs, { metadata, canonical: false });
  const sig = def.signature;
  if (sig.canonical) {
    try {
      const result = sig.canonical(ce, xs);
      if (result)
        return result;
    } catch (e) {
      console.error(e);
    }
    return new BoxedFunction(ce, head2, xs, { metadata, canonical: false });
  }
  xs = flattenSequence(xs);
  if (def.associative)
    xs = flattenOps(xs, head2);
  if (!xs.every((x) => x.isValid))
    return new BoxedFunction(ce, head2, xs, { metadata, canonical: false });
  xs = (_b = validateSignature(sig.domain, xs)) != null ? _b : xs;
  if (!xs.every((x) => x.isValid))
    return new BoxedFunction(ce, head2, xs, { metadata, canonical: false });
  if (xs.length === 1 && xs[0].head === head2) {
    if (def.involution)
      return xs[0].op1;
    if (def.idempotent)
      xs = xs[0].ops;
  }
  if (xs.length > 1 && def.commutative === true)
    xs = xs.sort(order);
  return new BoxedFunction(ce, head2, xs, { metadata, def, canonical: true });
}
function apply(fn, args) {
  var _a;
  const ce = fn.engine;
  if (fn.head !== "Lambda")
    return ce._fn(fn.evaluate(), args);
  const subs2 = {
    "__": ce.tuple(args),
    "_#": ce.number(args.length)
  };
  let n = 1;
  for (const op3 of args)
    subs2[`_${n++}`] = op3;
  subs2["_"] = subs2["_1"];
  const savedContext = ce.context;
  ce.context = (_a = fn.scope) != null ? _a : null;
  const result = fn.subs(subs2);
  ce.context = savedContext;
  return result.op1.evaluate();
}
function holdMap(xs, skip, associativeHead, f) {
  if (xs.length === 0)
    return [];
  xs = flattenOps(xs, associativeHead);
  if (skip === "all")
    return xs;
  if (skip === "none") {
    const result2 = [];
    for (const x of xs) {
      const h = x.head;
      if (h === "Hold")
        result2.push(x);
      else {
        const op3 = h === "ReleaseHold" ? x.op1 : x;
        if (op3) {
          const y = f(op3);
          if (y !== null)
            result2.push(y);
        }
      }
    }
    return flattenOps(result2, associativeHead);
  }
  const result = [];
  for (let i = 0; i < xs.length; i++) {
    if (xs[i].head === "Hold") {
      result.push(xs[i]);
    } else {
      let y = void 0;
      if (xs[i].head === "ReleaseHold")
        y = xs[i].op1;
      else if (applicable(skip, xs.length - 1, i))
        y = xs[i];
      else
        result.push(xs[i]);
      if (y) {
        const x = f(y);
        if (x !== null)
          result.push(x);
      }
    }
  }
  return flattenOps(result, associativeHead);
}
function applicable(skip, count, index) {
  if (skip === "all")
    return false;
  if (skip === "none")
    return true;
  if (skip === "first")
    return index !== 0;
  if (skip === "rest")
    return index === 0;
  if (skip === "last")
    return index !== count;
  if (skip === "most")
    return index === count;
  return false;
}
var import_complex12 = __toESM(require_complex());
var import_complex11 = __toESM(require_complex());
function inferNumericDomain(value) {
  if (typeof value === "number" && !isNaN(value)) {
    if (!isFinite(value))
      return "ExtendedRealNumber";
    if (Number.isInteger(value)) {
      if (value > 0)
        return "PositiveInteger";
      if (value < 0)
        return "NegativeInteger";
      return "Integer";
    }
    if (value > 0)
      return "PositiveNumber";
    if (value < 0)
      return "NegativeNumber";
    return "RealNumber";
  }
  if (value instanceof Decimal) {
    if (value.isNaN())
      return "Number";
    if (!value.isFinite())
      return "ExtendedRealNumber";
    if (value.isInteger()) {
      if (value.isPositive())
        return "PositiveInteger";
      if (value.isNegative())
        return "NegativeInteger";
      return "Integer";
    }
    if (value.isPositive())
      return "PositiveNumber";
    if (value.isNegative())
      return "NegativeNumber";
    return "RealNumber";
  }
  if (value instanceof import_complex11.Complex) {
    const c = value;
    /* @__PURE__ */ console.assert(c.im !== 0);
    if (c.re === 0)
      return "ImaginaryNumber";
    return "ComplexNumber";
  }
  if (isRational(value)) {
    const [numer, denom] = value;
    /* @__PURE__ */ console.assert(
      typeof numer !== "number" || !Number.isNaN(numer) && !Number.isNaN(denom)
    );
    return "RationalNumber";
  }
  return "Number";
}
var LARGE_PRIME = 1125899906842597;
function isPrime(n) {
  if (!Number.isInteger(n) || !Number.isFinite(n) || Number.isNaN(n) || n <= 1) {
    return false;
  }
  if (n <= LARGEST_SMALL_PRIME)
    return SMALL_PRIMES.has(n);
  for (const smallPrime of SMALL_PRIMES) {
    if (n % smallPrime === 0)
      return false;
  }
  if (n >= LARGE_PRIME) {
    return probablyPrime(n, 30) ? void 0 : false;
  }
  return n === leastFactor(n);
}
function leastFactor(n) {
  if (n === 1)
    return 1;
  if (n % 2 === 0)
    return 2;
  if (n % 3 === 0)
    return 3;
  if (n % 5 === 0)
    return 5;
  const m = Math.floor(Math.sqrt(n));
  let i = 7;
  while (i <= m) {
    if (n % i === 0)
      return i;
    if (n % (i + 4) === 0)
      return i + 4;
    if (n % (i + 6) === 0)
      return i + 6;
    if (n % (i + 10) === 0)
      return i + 10;
    if (n % (i + 12) === 0)
      return i + 12;
    if (n % (i + 16) === 0)
      return i + 16;
    if (n % (i + 22) === 0)
      return i + 22;
    if (n % (i + 24) === 0)
      return i + 24;
    i += 30;
  }
  return n;
}
function probablyPrime(n, k) {
  let s = 0, d = n - 1;
  while (d % 2 === 0) {
    d /= 2;
    ++s;
  }
  WitnessLoop:
    do {
      let x = Math.pow(2 + Math.floor(Math.random() * (n - 3)), d) % n;
      if (x === 1 || x === n - 1)
        continue;
      for (let i = s - 1; i--; ) {
        x = x * x % n;
        if (x === 1)
          return false;
        if (x === n - 1)
          continue WitnessLoop;
      }
      return false;
    } while (--k);
  return true;
}
var BoxedNumber = class _BoxedNumber extends AbstractBoxedExpression {
  /**
   * By the time the constructor is called, the `value` should have been
   * screened for cases where it's a well-known value (0, NaN, +Infinity,
   * etc...) or non-normal (complex number with im = 0, rational with
   * denom = 1, etc...).
   *
   * This is done in `ce.number()`. In general, use `ce.number()` rather
   * than calling this constructor directly.
   *
   * We may store as a machine number if a Decimal is passed that is in machine
   * range
   */
  constructor(ce, value, options) {
    var _a;
    super(ce, options == null ? void 0 : options.metadata);
    if (typeof value === "number") {
      this._value = value;
      this._isCanonical = true;
      return;
    }
    if (isRational(value)) {
      const [n, d] = value;
      /* @__PURE__ */ console.assert(
        typeof n !== "number" || Number.isInteger(n) && Number.isInteger(d) && d !== n && d !== 1
      );
      /* @__PURE__ */ console.assert(
        !(typeof n === "bigint" && typeof d == "bigint") || d !== n && d !== BigInt(1)
      );
      if ((_a = options == null ? void 0 : options.canonical) != null ? _a : true) {
        this._value = canonicalNumber(ce, value);
        this._isCanonical = true;
      } else {
        this._value = value;
        this._isCanonical = false;
      }
    } else {
      /* @__PURE__ */ console.assert(
        !(value instanceof import_complex12.Complex) || !Number.isNaN(value.re) && !Number.isNaN(value.im) && ce.chop(value.im) !== 0
      );
      this._value = canonicalNumber(ce, value);
      this._isCanonical = true;
    }
  }
  get hash() {
    if (this._hash !== void 0)
      return this._hash;
    let h = 0;
    if (typeof this._value === "number")
      h = hashCode(this._value.toString());
    else if (this._value instanceof import_complex12.Complex)
      h = hashCode(
        this._value.re.toString() + " +i " + this._value.im.toString()
      );
    else if (this._value instanceof Decimal)
      h = hashCode(this._value.toString());
    else
      h = hashCode(
        this._value[0].toString() + " / " + this._value[1].toString()
      );
    this._hash = h;
    return h;
  }
  get head() {
    return "Number";
  }
  get isPure() {
    return true;
  }
  get isExact() {
    if (typeof this._value === "number")
      return Number.isInteger(this._value);
    if (this._value instanceof Decimal)
      return this._value.isInteger();
    if (this._value instanceof import_complex12.Complex)
      return Number.isInteger(this._value.re) && Number.isInteger(this._value.im);
    return isRational(this._value);
  }
  get isCanonical() {
    return this._isCanonical;
  }
  set isCanonical(val) {
    this._isCanonical = val;
  }
  get complexity() {
    return 1;
  }
  get value() {
    return this;
  }
  get numericValue() {
    return this._value;
  }
  get domain() {
    if (this._domain === void 0)
      this._domain = this.engine.domain(inferNumericDomain(this._value));
    return this._domain;
  }
  get json() {
    return serializeJsonNumber(this.engine, this._value, {
      latex: this._latex
    });
  }
  get sgn() {
    if (this._value === 0)
      return 0;
    if (typeof this._value === "number") {
      if (this._value < 0)
        return -1;
      if (this._value > 0)
        return 1;
      return null;
    }
    if (this._value instanceof Decimal) {
      if (this._value.isZero())
        return 0;
      if (this._value.isNegative())
        return -1;
      if (this._value.isPositive())
        return 1;
      return null;
    }
    if (Array.isArray(this._value)) {
      const [numer, denom] = this._value;
      if (numer === 0 && denom !== 0)
        return 0;
      if (numer < 0)
        return -1;
      if (numer > 0)
        return 1;
      return null;
    }
    return null;
  }
  isSame(rhs) {
    if (this === rhs)
      return true;
    if (!(rhs instanceof _BoxedNumber))
      return false;
    if (typeof this._value === "number") {
      if (typeof rhs._value !== "number")
        return false;
      return this._value === rhs._value;
    }
    if (this._value instanceof Decimal) {
      if (!(rhs._value instanceof Decimal))
        return false;
      return this._value.eq(rhs._value);
    }
    if (Array.isArray(this._value)) {
      if (!Array.isArray(rhs._value))
        return false;
      const [rhsN, rhsD] = rhs._value;
      return this._value[0] === rhsN && this._value[1] === rhsD;
    }
    if (this._value instanceof import_complex12.Complex) {
      if (!(rhs._value instanceof import_complex12.Complex))
        return false;
      return this._value.equals(rhs._value);
    }
    return false;
  }
  isEqual(rhs) {
    return this.isSame(rhs);
  }
  match(rhs, options) {
    var _a;
    if (this.isEqualWithTolerance(rhs, (_a = options == null ? void 0 : options.numericTolerance) != null ? _a : 0))
      return {};
    return null;
  }
  /** Compare this with another BoxedNumber.
   * `rhs` must be a BoxedNumber. Use `isEqualWithTolerance(rhs.N())`
   * if necessary.
   */
  isEqualWithTolerance(rhs, tolerance) {
    return rhs instanceof _BoxedNumber && signDiff(this, rhs, tolerance) === 0;
  }
  isLess(rhs) {
    const s = signDiff(this, rhs);
    if (s === void 0)
      return void 0;
    return s < 0;
  }
  isLessEqual(rhs) {
    const s = signDiff(this, rhs);
    if (s === void 0)
      return void 0;
    return s <= 0;
  }
  isGreater(rhs) {
    return rhs.isLessEqual(this);
  }
  isGreaterEqual(rhs) {
    return rhs.isLess(this);
  }
  /** x > 0, same as `isGreater(0)` */
  get isPositive() {
    if (typeof this._value === "number")
      return this._value > 0;
    const s = this.sgn;
    if (s === void 0 || s === null)
      return void 0;
    return s > 0;
  }
  /** x >= 0, same as `isGreaterEqual(0)` */
  get isNonNegative() {
    if (typeof this._value === "number")
      return this._value >= 0;
    const s = this.sgn;
    if (s === void 0 || s === null)
      return void 0;
    return s >= 0;
  }
  /** x < 0, same as `isLess(0)` */
  get isNegative() {
    if (typeof this._value === "number")
      return this._value < 0;
    const s = this.sgn;
    if (s === void 0 || s === null)
      return void 0;
    return s < 0;
  }
  /** x <= 0, same as `isLessEqual(0)` */
  get isNonPositive() {
    if (typeof this._value === "number")
      return this._value <= 0;
    const s = this.sgn;
    if (s === void 0 || s === null)
      return void 0;
    return s <= 0;
  }
  get isZero() {
    if (this._value === 0)
      return true;
    if (this._value instanceof Decimal)
      return this._value.isZero();
    if (this._value instanceof import_complex12.Complex)
      return this._value.isZero();
    return false;
  }
  get isNotZero() {
    if (this._value === 0)
      return false;
    if (this._value instanceof Decimal)
      return !this._value.isZero();
    if (this._value instanceof import_complex12.Complex)
      return !this._value.isZero();
    return true;
  }
  get isOne() {
    if (this._value === 1)
      return true;
    if (typeof this._value === "number")
      return false;
    if (this._value instanceof Decimal)
      return this._value.equals(this.engine._BIGNUM_ONE);
    if (this._value instanceof import_complex12.Complex)
      return this._value.im === 0 && this._value.re === 1;
    return isRationalOne(this._value);
  }
  get isNegativeOne() {
    if (this._value === -1)
      return true;
    if (typeof this._value === "number")
      return false;
    if (this._value instanceof Decimal)
      return this._value.equals(this.engine._BIGNUM_NEGATIVE_ONE);
    if (Array.isArray(this._value))
      return isRationalNegativeOne(this._value);
    return this._value.equals(-1);
  }
  get isOdd() {
    if (this.isOne || this.isNegativeOne)
      return true;
    if (this.isZero)
      return false;
    if (!this.isInteger)
      return false;
    if (typeof this._value === "number")
      return this._value % 2 !== 0;
    if (this._value instanceof Decimal)
      return !this._value.mod(2).isZero();
    return void 0;
  }
  get isEven() {
    if (this.isOne || this.isNegativeOne)
      return false;
    if (this.isZero)
      return true;
    if (!this.isInteger)
      return false;
    if (typeof this._value === "number")
      return this._value % 2 === 0;
    if (this._value instanceof Decimal)
      return this._value.mod(2).isZero();
    return void 0;
  }
  get isPrime() {
    if (!this.isInteger || !this.isFinite || this.isNonPositive || this.isOne || this.isZero)
      return false;
    if (typeof this._value === "number")
      return isPrime(this._value);
    if (this._value instanceof Decimal)
      return isPrime(this._value.toNumber());
    return void 0;
  }
  get isComposite() {
    if (!this.isInteger || !this.isFinite || this.isNonPositive || this.isOne || this.isZero)
      return false;
    if (typeof this._value === "number")
      return !isPrime(this._value);
    if (this._value instanceof Decimal)
      return !isPrime(this._value.toNumber());
    return void 0;
  }
  get isInfinity() {
    if (typeof this._value === "number")
      return !Number.isFinite(this._value) && !Number.isNaN(this._value);
    if (this._value instanceof Decimal)
      return !this._value.isFinite() && !this._value.isNaN();
    if (this._value instanceof import_complex12.Complex)
      return !this._value.isFinite() && !this._value.isNaN();
    return false;
  }
  get isNaN() {
    if (typeof this._value === "number")
      return Number.isNaN(this._value);
    if (this._value instanceof Decimal)
      return this._value.isNaN();
    if (this._value instanceof import_complex12.Complex)
      return this._value.isNaN();
    return false;
  }
  get isFinite() {
    return !this.isInfinity && !this.isNaN;
  }
  get isNumber() {
    return true;
  }
  get isInteger() {
    if (typeof this._value === "number")
      return Number.isInteger(this._value);
    if (this._value instanceof Decimal)
      return this._value.isInteger();
    return false;
  }
  get isRational() {
    if (Array.isArray(this._value))
      return true;
    return this.isInteger;
  }
  get isAlgebraic() {
    if (this.isRational)
      return true;
    return void 0;
  }
  get isReal() {
    if (!this.isFinite)
      return false;
    if (this._value instanceof import_complex12.Complex)
      return this.engine.chop(this._value.im) === 0;
    return true;
  }
  // Real or +-Infinity
  get isExtendedReal() {
    return this.isInfinity || this.isReal;
  }
  get isComplex() {
    return !this.isNaN;
  }
  get isImaginary() {
    if (this._value instanceof import_complex12.Complex) {
      /* @__PURE__ */ console.assert(this._value.im !== 0);
      return true;
    }
    return false;
  }
  get isExtendedComplex() {
    return this.isInfinity || !this.isNaN;
  }
  get canonical() {
    if (this._isCanonical)
      return this;
    return this.engine.number(canonicalNumber(this.engine, this._value));
  }
  simplify(_options) {
    return this.canonical;
  }
  N(_options) {
    if (!Array.isArray(this._value))
      return this;
    const ce = this.engine;
    const [numer, denom] = this._value;
    if (typeof numer === "number" && typeof denom === "number" && !bignumPreferred(ce))
      return ce.number(numer / denom);
    return ce.number(ce.bignum(numer).div(ce.bignum(denom)));
  }
};
function canonicalNumber(ce, value) {
  if (value instanceof Decimal && isInMachineRange(value))
    return value.toNumber();
  if (!isRational(value))
    return value;
  value = reducedRational(value);
  if (isBigRational(value)) {
    let [n2, d2] = value;
    if (n2 > Number.MIN_SAFE_INTEGER && n2 < Number.MAX_SAFE_INTEGER && d2 > Number.MIN_SAFE_INTEGER && d2 < Number.MAX_SAFE_INTEGER)
      value = [Number(n2), Number(d2)];
    else {
      if (d2 < 0)
        [n2, d2] = [-n2, -d2];
      if (d2 === BigInt(1))
        return ce.bignum(n2);
      if (d2 === BigInt(0)) {
        if (n2 === d2)
          return NaN;
        return n2 < 0 ? -Infinity : Infinity;
      }
      return [n2, d2];
    }
  }
  let [n, d] = value;
  if (Number.isNaN(n) || Number.isNaN(d))
    return NaN;
  if (d < 0)
    [n, d] = [-n, -d];
  if (d === 1)
    return n;
  if (d === 0) {
    if (n === 0 || !Number.isFinite(n))
      return NaN;
    if (n < 0)
      return -Infinity;
    return Infinity;
  }
  if (n === 0)
    return n;
  return [n, d];
}
var BoxedString = class _BoxedString extends AbstractBoxedExpression {
  constructor(ce, expr, metadata) {
    super(ce, metadata);
    this._string = expr.normalize();
    ce._register(this);
  }
  get hash() {
    return hashCode("String" + this._string);
  }
  get json() {
    return serializeJsonString(this.engine, this._string);
  }
  get head() {
    return "String";
  }
  get isPure() {
    return true;
  }
  get isCanonical() {
    return true;
  }
  set isCanonical(_va) {
    return;
  }
  get domain() {
    return this.engine.domain("String");
  }
  get complexity() {
    return 19;
  }
  get string() {
    return this._string;
  }
  isEqual(rhs) {
    return rhs.string === this._string;
  }
  isSame(rhs) {
    return rhs.string === this._string;
  }
  match(rhs, _options) {
    if (!(rhs instanceof _BoxedString))
      return null;
    if (this._string === rhs._string)
      return {};
    return null;
  }
};
function boxNumber(ce, num, options) {
  var _a;
  if (typeof num === "number" || num instanceof Decimal)
    return new BoxedNumber(ce, num, options);
  options = options ? { ...options } : {};
  if (!("canonical" in options))
    options.canonical = true;
  if (Array.isArray(num) && num.length === 2 && num[0] instanceof Decimal && num[1] instanceof Decimal) {
    if (!num[0].isInteger() || !num[1].isInteger())
      throw new Error("Array argument to `boxNumber()` should be two integers");
    num = [bigint(num[0].toString()), bigint(num[1].toString())];
  }
  if (isRational(num)) {
    if (num.length !== 2)
      throw new Error(
        "Array argument to `boxNumber()` should be two integers or two bignums"
      );
    const [n, d] = num;
    if (typeof n === "bigint" && typeof d === "bigint") {
      if (n === d)
        return d === BigInt(0) ? ce._NAN : ce._ONE;
      if (n === BigInt(0))
        return ce._ZERO;
      if (d === BigInt(1))
        return ce.number(n, options);
      if (d === BigInt(-1))
        return ce.number(-n, options);
      if (n === BigInt(1) && d === BigInt(2))
        return ce._HALF;
      return new BoxedNumber(ce, [n, d], options);
    }
    if (typeof n !== "number" || typeof d !== "number")
      throw new Error(
        "Array argument to `boxNumber()` should be two integers or two bignums"
      );
    if (!Number.isInteger(n) || !Number.isInteger(d))
      throw new Error("Array argument to `boxNumber()` should be two integers");
    if (d === n)
      return d === 0 ? ce._NAN : ce._ONE;
    if (n === 0)
      return ce._ZERO;
    if (d === 1)
      return ce.number(n, options);
    if (d === -1)
      return ce.number(-n, options);
    if (n === 1 && d === 2)
      return ce._HALF;
    return new BoxedNumber(ce, [n, d], options);
  }
  if (num instanceof import_complex13.Complex) {
    if (num.isNaN())
      return ce._NAN;
    if (num.isZero())
      return ce._ZERO;
    if (num.isInfinite())
      return ce._COMPLEX_INFINITY;
    if (ce.chop(num.im) === 0)
      return ce.number(num.re, options);
    return new BoxedNumber(ce, num, options);
  }
  let strNum = "";
  if (typeof num === "string")
    strNum = num;
  else if (typeof num === "object" && "num" in num) {
    if (typeof num.num === "number")
      return ce.number(num.num, options);
    if (typeof num.num !== "string")
      throw new Error("MathJSON `num` property should be a string of digits");
    strNum = num.num;
  }
  if (strNum) {
    strNum = strNum.toLowerCase();
    if (/[0-9][nd]$/.test(strNum))
      strNum = strNum.slice(0, -1);
    strNum = strNum.replace(/[\u0009-\u000d\u0020\u00a0]/g, "");
    if (strNum === "nan")
      return ce._NAN;
    if (strNum === "infinity" || strNum === "+infinity")
      return ce._POSITIVE_INFINITY;
    if (strNum === "-infinity")
      return ce._NEGATIVE_INFINITY;
    if (strNum === "0")
      return ce._ZERO;
    if (strNum === "1")
      return ce._ONE;
    if (strNum === "-1")
      return ce._NEGATIVE_ONE;
    if (/\([0-9]+\)/.test(strNum)) {
      const [_, body, repeat, trail] = (_a = strNum.match(/(.+)\(([0-9]+)\)(.+)?$/)) != null ? _a : [];
      strNum = body + repeat.repeat(Math.ceil(ce.precision / repeat.length)) + (trail != null ? trail : "");
    }
    return boxNumber(ce, ce.bignum(strNum), options);
  }
  return null;
}
function boxHold(ce, expr, options) {
  if (expr === null)
    return ce.error("missing");
  if (typeof expr === "object" && expr instanceof AbstractBoxedExpression)
    return expr;
  expr = missingIfEmpty(expr);
  if (typeof expr === "string")
    return box(ce, expr, options);
  if (Array.isArray(expr)) {
    const boxed = expr.map((x) => boxHold(ce, x, options));
    return new BoxedFunction(ce, boxed[0], boxed.slice(1));
  }
  if (typeof expr === "object") {
    if ("dict" in expr)
      return new BoxedDictionary(ce, expr.dict);
    if ("fn" in expr)
      return boxHold(ce, expr.fn, options);
    if ("str" in expr)
      return new BoxedString(ce, expr.str);
    if ("sym" in expr)
      return box(ce, expr.sym, options);
    if ("num" in expr)
      return box(ce, expr.num, options);
  }
  return box(ce, expr, options);
}
function boxFunction(ce, head2, ops2, options) {
  var _a;
  if (head2 === "Hold") {
    return new BoxedFunction(ce, "Hold", [boxHold(ce, ops2[0], options)], {
      ...options,
      canonical: true
    });
  }
  if (head2 === "Error" || head2 === "ErrorCode") {
    return ce._fn(
      head2,
      ops2.map((x) => ce.box(x, { canonical: false })),
      options.metadata
    );
  }
  if (head2 === "Domain")
    return ce.domain(ops2[0], options.metadata);
  if (head2 === "Number" && ops2.length === 1)
    return box(ce, ops2[0], options);
  if (head2 === "String") {
    if (ops2.length === 0)
      return new BoxedString(ce, "", options.metadata);
    return new BoxedString(
      ce,
      ops2.map((x) => {
        var _a2;
        return (_a2 = asString(x)) != null ? _a2 : "";
      }).join(""),
      options.metadata
    );
  }
  if (head2 === "Symbol" && ops2.length > 0) {
    return ce.symbol(ops2.map((x) => {
      var _a2;
      return (_a2 = asString(x)) != null ? _a2 : "";
    }).join(""), options);
  }
  if ((head2 === "Divide" || head2 === "Rational") && ops2.length === 2) {
    if (ops2[0] instanceof AbstractBoxedExpression && ops2[1] instanceof AbstractBoxedExpression) {
      if (ce.numericMode === "machine") {
        const [fn, fd] = [asFloat(ops2[0]), asFloat(ops2[1])];
        if (fn !== null && Number.isInteger(fn) && fd !== null && Number.isInteger(fd))
          return ce.number([fn, fd], options);
      }
      const [n, d] = [asBigint(ops2[0]), asBigint(ops2[1])];
      if (n !== null && d !== null)
        return ce.number([n, d], options);
    } else {
      const [n, d] = [
        bigintValue(ce, ops2[0]),
        bigintValue(ce, ops2[1])
      ];
      if (n !== null && d !== null)
        return ce.number([n, d], options);
    }
    head2 = "Divide";
  }
  if (head2 === "Complex") {
    if (ops2.length === 1) {
      const op12 = box(ce, ops2[0], options);
      const im = asFloat(op12);
      if (im !== null && im !== 0)
        return ce.number(ce.complex(0, im), options);
      return ce.mul([op12, ce._I]);
    }
    if (ops2.length === 2) {
      const op12 = box(ce, ops2[0], options);
      const op22 = box(ce, ops2[1], options);
      const re = asFloat(op12);
      const im = asFloat(op22);
      if (im !== null && re !== null) {
        if (im === 0 && re === 0)
          return ce._ZERO;
        if (im !== null && im !== 0)
          return ce.number(ce.complex(re, im), options);
        return op12;
      }
      return ce.add([op12, ce.mul([op22, ce._I])], options.metadata);
    }
  }
  if (head2 === "Negate" && ops2.length === 1) {
    const op12 = ops2[0];
    if (typeof op12 === "number")
      return ce.number(-op12, options);
    if (op12 instanceof Decimal)
      return ce.number(op12.neg(), options);
    const num = ce.box(op12, options).numericValue;
    if (num !== null) {
      if (typeof num === "number")
        return ce.number(-num, options);
      if (num instanceof Decimal)
        return ce.number(num.neg(), options);
      if (num instanceof import_complex13.Complex)
        return ce.number(num.neg());
      if (isRational(num))
        return ce.number(neg(num));
    }
  }
  if (head2 === "Dictionary") {
    const dict = {};
    for (const op3 of ops2) {
      const arg = ce.box(op3);
      const head3 = arg.head;
      if (head3 === "KeyValuePair" || head3 === "Pair" || head3 === "Tuple" && arg.nops === 2) {
        const key = arg.op1;
        if (key.isValid && !key.isNothing) {
          const value = arg.op2;
          let k = (_a = key.symbol) != null ? _a : key.string;
          if (!k && (key.numericValue !== null || key.string)) {
            const n = typeof key.numericValue === "number" ? key.numericValue : asSmallInteger(key);
            if (n && Number.isFinite(n) && Number.isInteger(n))
              k = n.toString();
          }
          if (k)
            dict[k] = value;
        }
      }
    }
    return new BoxedDictionary(ce, dict, options);
  }
  if (options.canonical)
    return makeCanonicalFunction(ce, head2, ops2, options.metadata);
  return new BoxedFunction(
    ce,
    head2,
    ops2.map((x) => box(ce, x, { canonical: false })),
    options
  );
}
function box(ce, expr, options) {
  if (expr === null || expr === void 0)
    return ce._fn("Sequence", []);
  options = options ? { ...options } : {};
  if (!("canonical" in options))
    options.canonical = true;
  if (expr instanceof AbstractBoxedExpression)
    return options.canonical ? expr.canonical : expr;
  if (Array.isArray(expr)) {
    if (isMachineRational(expr)) {
      if (Number.isInteger(expr[0]) && Number.isInteger(expr[1]))
        return ce.number(expr);
      return boxFunction(ce, "Divide", expr, options);
    }
    if (isBigRational(expr))
      return ce.number(expr);
    if (typeof expr[0] === "string")
      return boxFunction(ce, expr[0], expr.slice(1), options);
    const ops2 = expr.slice(1).map((x) => box(ce, x, options));
    const head2 = box(ce, expr[0], options);
    if (head2.symbol)
      return new BoxedFunction(ce, head2.symbol, ops2);
    return apply(head2, ops2);
  }
  if (typeof expr === "number" || expr instanceof import_complex13.Complex || expr instanceof Decimal)
    return ce.number(expr);
  if (typeof expr === "string") {
    if (expr.startsWith("'") && expr.endsWith("'"))
      return new BoxedString(ce, expr.slice(1, -1));
    if (/^[+-]?[0-9]/.test(expr))
      return ce.number(expr);
    if (!isValidIdentifier(expr))
      return ce.error("invalid-identifier", { str: expr });
    return ce.symbol(expr, options);
  }
  if (typeof expr === "object") {
    const metadata = {
      latex: expr.latex,
      wikidata: expr.wikidata
    };
    if ("dict" in expr)
      return new BoxedDictionary(ce, expr.dict, { canonical: true, metadata });
    if ("fn" in expr) {
      if (typeof expr.fn[0] === "string")
        return boxFunction(ce, expr.fn[0], expr.fn.slice(1), options);
      return new BoxedFunction(
        ce,
        box(ce, expr.fn[0], options),
        expr.fn.slice(1).map((x) => box(ce, x, options)),
        { metadata }
      );
    }
    if ("str" in expr)
      return new BoxedString(ce, expr.str, metadata);
    if ("sym" in expr)
      return ce.symbol(expr.sym, options);
    if ("num" in expr)
      return ce.number(expr, options);
  }
  return ce.symbol("Undefined");
}
function asString(expr) {
  var _a, _b;
  if (typeof expr === "string")
    return expr;
  if (expr instanceof AbstractBoxedExpression) {
    return (_b = (_a = expr.string) != null ? _a : expr.symbol) != null ? _b : expr.toString();
  }
  if (typeof expr === "object") {
    if ("str" in expr)
      return expr.str;
    if ("fn" in expr && expr.fn[0] === "String" && typeof expr.fn[1] === "string")
      return expr.fn[1];
  }
  if (Array.isArray(expr)) {
    if (expr[0] === "String" && typeof expr[1] === "string")
      return expr[1];
  }
  return null;
}
function gamma3(c) {
  return c;
}
function lngamma3(c) {
  return c;
}
var import_complex15 = __toESM(require_complex());
var import_complex14 = __toESM(require_complex());
function makePositive(expr) {
  if (expr.head === "Negate")
    return [-1, expr.op1];
  const n = expr.numericValue;
  if (n === null)
    return [1, expr];
  const ce = expr.engine;
  if (typeof n === "number" && n < 0)
    return [-1, ce.number(-n)];
  if (n instanceof decimal_default && n.isNegative())
    return [-1, ce.number(n.neg())];
  if (n instanceof import_complex14.default && n.re < 0)
    return [-1, ce.number(ce.complex(-n.re, -n.im))];
  if (isMachineRational(n) && n[0] < 0)
    return [-1, ce.number([-n[0], n[1]])];
  if (isBigRational(n) && n[0] < 0)
    return [-1, ce.number([-n[0], n[1]])];
  return [1, expr];
}
function apply2(expr, fn, bigFn, complexFn) {
  var _a;
  const n = expr.numericValue;
  const ce = expr.engine;
  /* @__PURE__ */ console.assert(n !== null);
  if (typeof n === "number") {
    if (bignumPreferred(ce) && bigFn)
      return ce.chop(bigFn(ce.bignum(n)));
    return ce.chop(fn(n));
  }
  if (n instanceof decimal_default)
    return ce.chop((_a = bigFn == null ? void 0 : bigFn(n)) != null ? _a : fn(n.toNumber()));
  if (isMachineRational(n)) {
    if (!bignumPreferred(ce) || !bigFn)
      return ce.chop(fn(n[0] / n[1]));
    return ce.chop(bigFn(ce.bignum(n[0]).div(n[1])));
  }
  if (isBigRational(n)) {
    if (bigFn)
      return ce.chop(bigFn(ce.bignum(n[0]).div(ce.bignum(n[1]))));
    return ce.chop(fn(Number(n[0]) / Number(n[1])));
  }
  if (n instanceof import_complex14.default) {
    if (!complexFn || !complexAllowed(ce))
      return NaN;
    return ce.chop(complexFn(n));
  }
  return NaN;
}
function applyN(expr, fn, bigFn, complexFn) {
  var _a;
  if (((_a = expr == null ? void 0 : expr.numericValue) != null ? _a : null) === null)
    return void 0;
  return expr.engine.number(apply2(expr, fn, bigFn, complexFn));
}
function apply22(expr1, expr2, fn, bigFn, complexFn) {
  var _a, _b, _c;
  /* @__PURE__ */ console.assert(expr1.numericValue !== null && expr2.numericValue !== null);
  const ce = expr1.engine;
  let m1 = expr1.numericValue;
  if (isMachineRational(m1))
    m1 = m1[0] / m1[1];
  let m2 = expr2.numericValue;
  if (isMachineRational(m2))
    m2 = m2[0] / m2[1];
  if (!bignumPreferred(ce) && typeof m1 === "number" && typeof m2 === "number")
    return fn(m1, m2);
  let b1 = void 0;
  if (m1 instanceof decimal_default)
    b1 = m1;
  else if (isBigRational(m1))
    b1 = ce.bignum(m1[0]).div(ce.bignum(m1[1]));
  else if (m1 !== null && typeof m1 === "number")
    b1 = ce.bignum(m1);
  let b2 = void 0;
  if (m2 instanceof decimal_default)
    b2 = m2;
  else if (isBigRational(m2))
    b1 = ce.bignum(m2[0]).div(ce.bignum(m2[1]));
  else if (m2 !== null && typeof m2 === "number")
    b2 = ce.bignum(m2);
  if (b1 && b2)
    return (_a = bigFn == null ? void 0 : bigFn(b1, b2)) != null ? _a : fn(b1.toNumber(), b2.toNumber());
  if (m1 instanceof import_complex14.default || m2 instanceof import_complex14.default) {
    if (!complexFn || !complexAllowed(ce))
      return NaN;
    return complexFn(
      ce.complex((_b = m1 != null ? m1 : b1 == null ? void 0 : b1.toNumber()) != null ? _b : NaN),
      ce.complex((_c = m2 != null ? m2 : b2 == null ? void 0 : b2.toNumber()) != null ? _c : NaN)
    );
  }
  return NaN;
}
function apply2N(expr1, expr2, fn, bigFn, complexFn) {
  if (expr1.numericValue === null || expr2.numericValue === null)
    return void 0;
  return expr1.engine.number(apply22(expr1, expr2, fn, bigFn, complexFn));
}
function canonicalPower(ce, base, exponent, metadata) {
  if (exponent.symbol === "ComplexInfinity")
    return ce._NAN;
  if (exponent.isZero)
    return ce._ONE;
  if (exponent.isOne)
    return base;
  if (exponent.isNegativeOne)
    return ce.inv(base);
  if (exponent.numericValue !== null) {
    if (base.numericValue !== null) {
      const numBase = asFloat(base);
      if (numBase === 1)
        return ce._ONE;
      if (numBase === 0) {
        if (exponent.isPositive)
          return ce._ZERO;
        if (exponent.isNegative)
          return ce._COMPLEX_INFINITY;
      }
      if (exponent.isNegativeOne)
        return ce.inv(base);
      const e = asFloat(exponent);
      if (e === 0.5 || e === -0.5) {
        const b = asSmallInteger(base);
        if (b !== null && b > 0) {
          const [coef, radicand] = factorPower(b, 2);
          if (radicand === 1 && coef === 1)
            return ce._ONE;
          if (coef !== 1) {
            if (radicand === 1)
              return ce.number(e >= 0 ? coef : [1, coef]);
            return ce.mul([
              ce.number(coef),
              ce._fn("Sqrt", [ce.number(radicand)])
            ]);
          }
          if (e > 0)
            return ce._fn("Sqrt", [base], metadata);
          return ce.inv(ce._fn("Sqrt", [base]), metadata);
        }
        if (e > 0)
          return ce._fn("Power", [base, ce._HALF], metadata);
        return ce._fn("Power", [base, ce.number([-1, 2])], metadata);
      }
      if (base.isInfinity) {
        if (exponent.numericValue instanceof import_complex15.default) {
          const re = exponent.numericValue.re;
          if (re === 0)
            return ce._NAN;
          if (re < 0)
            return ce._ZERO;
          if (re > 0)
            return ce._COMPLEX_INFINITY;
        }
        if (base.isNegative) {
          if (exponent.isInfinity)
            return ce._NAN;
        } else if (base.isPositive) {
          if (exponent.isNegativeOne)
            return ce._ZERO;
          if (exponent.isInfinity)
            return exponent.isNegative ? ce._ZERO : ce._POSITIVE_INFINITY;
        }
      }
      if (exponent.isInfinity && (base.isOne || base.isNegativeOne))
        return ce._NAN;
    }
  }
  if (base.head === "Power" && base.op1.isReal) {
    const a = asSmallInteger(exponent);
    if (a !== null) {
      const b = asSmallInteger(base.op2);
      if (b !== null) {
        return ce.pow(base.op1, ce.number(a * b));
      }
    }
    if (base.op1.isNonNegative) {
      const ar = asRational(exponent);
      if (ar) {
        const br = asRational(base.op2);
        if (br)
          return ce.pow(base.op1, ce.number(mul2(ar, br)));
      }
    }
  }
  if (base.head === "Multiply") {
    const e = asSmallInteger(exponent);
    if (e !== null)
      return ce._fn(
        "Multiply",
        base.ops.map((x) => ce.pow(x, exponent))
      );
  }
  return ce._fn("Power", [base, exponent], metadata);
}
function square(ce, base) {
  const num = base.numericValue;
  if (typeof num === "number")
    return ce.number(num * num);
  if (num instanceof decimal_default)
    return ce.number(num.pow(2));
  if (num instanceof import_complex15.default)
    return ce.number(num.pow(2));
  if (isMachineRational(num))
    return ce.number([num[1] * num[1], num[0] * num[0]]);
  if (isBigRational(num))
    return ce.number([num[1] * num[1], num[0] * num[0]]);
  if (base.head === "Multiply")
    return ce._fn(
      "Multiply",
      base.ops.map((x) => square(ce, x))
    );
  if (base.head === "Power") {
    const exp2 = asSmallInteger(base.op2);
    if (exp2 !== null)
      return ce.pow(base.op1, ce.number(exp2 * 2));
    return ce.pow(base.op1, ce.mul([ce.number(2), base.op2]));
  }
  return ce.pow(base, ce.number(2));
}
function numEvalPower(ce, base, exponent) {
  var _a, _b, _c, _d;
  if (base.numericValue === null || exponent.numericValue === null)
    return void 0;
  if (base.numericValue instanceof import_complex15.default) {
    if (exponent.numericValue instanceof import_complex15.default)
      return ce.number(base.numericValue.pow(exponent.numericValue));
    return ce.number(base.numericValue.pow((_a = asFloat(exponent)) != null ? _a : NaN));
  }
  if (exponent.numericValue instanceof import_complex15.default) {
    const b = (_b = asFloat(base)) != null ? _b : null;
    if (b !== null)
      return ce.number(ce.complex(b).pow(exponent.numericValue));
    return void 0;
  }
  const invExp = rootExp(exponent);
  if (bignumPreferred(ce) || base.numericValue instanceof decimal_default || exponent.numericValue instanceof decimal_default) {
    const bigBase = asBignum(base);
    const bigExp = asBignum(exponent);
    if (!bigBase || !bigExp)
      return void 0;
    if (invExp === 2) {
      if (bigBase.isNeg())
        return complexAllowed(ce) ? ce.number(ce.complex(0, bigBase.neg().sqrt().toNumber())) : ce._NAN;
      return ce.number(bigBase.sqrt());
    }
    if (!bigExp.isInteger() && bigBase.isNeg()) {
      if (!complexAllowed(ce))
        return ce._NAN;
      const zBase = ce.complex(bigBase.toNumber());
      const zExp = ce.complex(bigExp.toNumber());
      return ce.number(zBase.pow(zExp));
    }
    return ce.number(bigBase.pow(bigExp));
  }
  const floatExp = (_c = asFloat(exponent)) != null ? _c : NaN;
  const floatBase = (_d = asFloat(base)) != null ? _d : NaN;
  if (invExp === 2) {
    if (floatBase < 0) {
      return complexAllowed(ce) ? ce.mul([ce._I, ce.number(Math.sqrt(-floatBase))]) : ce._NAN;
    }
    return ce.number(Math.sqrt(floatBase));
  }
  if (!Number.isInteger(floatExp) && floatBase < 0) {
    if (!complexAllowed(ce))
      return ce._NAN;
    const zBase = ce.complex(floatBase);
    const zExp = ce.complex(floatExp);
    return ce.number(zBase.pow(zExp));
  }
  return ce.number(Math.pow(floatBase, floatExp));
}
function processPower(ce, base, exponent, mode) {
  var _a, _b;
  if (base.head === "Multiply") {
    let c = bignumPreferred(ce) ? [BigInt(1), BigInt(1)] : [1, 1];
    const xs = [];
    for (const op3 of base.ops) {
      const r = asRational(op3);
      if (r)
        c = mul2(c, r);
      else
        xs.push(op3);
    }
    if (!isRationalOne(c))
      return ce.mul([
        (_a = processSqrt(ce, ce.number(c), mode)) != null ? _a : ce._ONE,
        ce.pow(
          (_b = processPower(ce, ce.mul(xs), exponent, mode)) != null ? _b : ce.mul(xs),
          exponent
        )
      ]);
  }
  if (base.head === "Power") {
    if (asSmallInteger(base.op2) === -1 && asSmallInteger(exponent) === -1)
      return base.op1;
    const e1 = asRational(base.op2);
    const e2 = asRational(exponent);
    if (e1 && e2) {
      const e = mul2(e1, e2);
      if (isRationalZero(e))
        return ce._ONE;
      if (isRationalOne(e))
        return base.op1;
      return ce.pow(base.op1, e);
    }
    if (mode === "N") {
      const ef1 = asFloat(base.op2);
      const ef2 = asFloat(exponent);
      if (ef1 !== null && ef2 !== null) {
        const ef = ef1 * ef2;
        if (ef === 0)
          return ce._ONE;
        if (ef === 1)
          return base.op1;
        return ce.pow(base.op1, ef);
      }
    }
  }
  if (mode !== "N" && base.numericValue !== null && base.isInteger) {
    const smallExpr = asSmallInteger(exponent);
    if (smallExpr)
      return numEvalPower(ce, base, exponent);
    const r = asRational(exponent);
    if (r) {
      const [n, d] = [machineNumerator(r), machineDenominator(r)];
      if ((n === 1 || n === -1) && (d === 2 || d === 3)) {
        if (bignumPreferred(ce) || base.numericValue instanceof decimal_default) {
          const bigBase = asBigint(base);
          if (d % 2 === 0 && bigBase < 0 && !complexAllowed(ce))
            return ce._NAN;
          const sign2 = bigBase < 0 ? d % 2 === 0 ? ce._I : ce._NEGATIVE_ONE : ce._ONE;
          const [factor, root] = factorPower2(
            bigBase > 0 ? bigBase : -bigBase,
            d
          );
          if (root === BigInt(1) && factor === BigInt(1))
            return sign2;
          if (factor !== BigInt(1)) {
            if (root === BigInt(1))
              return ce.mul([
                sign2,
                ce.number(n >= 0 ? factor : [BigInt(1), factor])
              ]);
            return ce.mul([
              sign2,
              ce.number(factor),
              ce.pow(ce.number(root), exponent)
            ]);
          }
        } else if (typeof base.numericValue === "number") {
          if (base.numericValue < 0 && d % 2 === 0 && !complexAllowed(ce))
            return ce._NAN;
          const [factor, root] = factorPower(Math.abs(base.numericValue), d);
          const sign2 = base.numericValue < 0 ? d % 2 === 0 ? ce._I : ce._NEGATIVE_ONE : ce._ONE;
          if (root === 1 && factor === 1)
            return sign2;
          if (factor !== 1) {
            if (root === 1)
              return ce.mul([sign2, ce.number(n >= 0 ? factor : [1, factor])]);
            return ce.mul([
              sign2,
              ce.number(factor),
              ce.pow(ce.number(root), exponent)
            ]);
          }
        } else {
        }
      }
      if (base.isNegative) {
        if (!complexAllowed)
          return ce._NAN;
        return ce.mul([ce._I, ce.fn("Sqrt", [ce.neg(base)])]);
      }
      return void 0;
    }
  }
  if (mode !== "simplify" && base.numericValue !== null && exponent.numericValue !== null)
    return numEvalPower(ce, base, exponent);
  return void 0;
}
function processSqrt(ce, base, mode) {
  if (base.isOne)
    return ce._ONE;
  if (base.isZero)
    return ce._ZERO;
  if (base.isNegativeOne)
    return complexAllowed(ce) ? ce._I : ce._NAN;
  if (base.isNegative && !complexAllowed(ce))
    return ce._NAN;
  const r = asRational(base);
  if (mode === "N" || mode === "evaluate" && !r)
    return applyN(
      base,
      (x) => x < 0 ? ce.complex(x).sqrt() : Math.sqrt(x),
      (x) => x.isNeg() ? ce.complex(x.toNumber()).sqrt() : x.sqrt(),
      (x) => x.sqrt()
    );
  const n = asSmallInteger(base);
  if (n !== null) {
    const [factor, root] = factorPower(Math.abs(n), 2);
    if (n < 0) {
      if (root === 1)
        ce.mul([ce.number(ce.complex(0, factor))]);
      return ce.mul([
        ce.number(ce.complex(0, factor)),
        ce.sqrt(ce.number(root))
      ]);
    }
    if (root === 1)
      return ce.number(factor);
    return ce.mul([ce.number(factor), ce.sqrt(ce.number(root))]);
  }
  if (r) {
    if (isMachineRational(r) && !bignumPreferred(ce)) {
      const [n2, d] = r;
      if (Math.abs(n2) < Number.MAX_SAFE_INTEGER && d < Number.MAX_SAFE_INTEGER) {
        const [nFactor, nRoot] = factorPower(Math.abs(n2), 2);
        const [dFactor, dRoot] = factorPower(d, 2);
        if (n2 < 0)
          return ce.mul([
            ce.number([nFactor, dFactor]),
            ce.sqrt(ce.number([nRoot, dRoot])),
            ce._I
          ]);
        return ce.mul([
          ce.number([nFactor, dFactor]),
          ce.sqrt(ce.number([nRoot, dRoot]))
        ]);
      }
    }
    if (isBigRational(r) || bignumPreferred(ce)) {
      const n2 = bigint(r[0]);
      const [nFactor, nRoot] = factorPower2(n2 > 0 ? n2 : -n2, 2);
      const [dFactor, dRoot] = factorPower2(bigint(r[1]), 2);
      if (n2 < 0)
        return ce.mul([
          ce.number([nFactor, dFactor]),
          ce.sqrt(ce.number([nRoot, dRoot])),
          ce._I
        ]);
      return ce.mul([
        ce.number([nFactor, dFactor]),
        ce.sqrt(ce.number([nRoot, dRoot]))
      ]);
    }
  }
  return void 0;
}
function rootExp(exponent) {
  if (typeof exponent.numericValue === "number") {
    const inv = 1 / exponent.numericValue;
    if (Number.isInteger(inv))
      return inv;
    return null;
  }
  if (exponent.numericValue instanceof decimal_default) {
    const inv = exponent.engine._BIGNUM_ONE.div(exponent.numericValue);
    if (inv.isInt())
      return inv.toNumber();
    return null;
  }
  if (!isRational(exponent.numericValue))
    return null;
  const [n, d] = [
    machineNumerator(exponent.numericValue),
    machineDenominator(exponent.numericValue)
  ];
  if (n !== 1 && n !== -1)
    return null;
  return n * d;
}
function canonicalMultiply(ce, ops2) {
  /* @__PURE__ */ console.assert(ops2.every((x) => x.isCanonical));
  if (ops2.length === 0)
    return ce.number(1);
  if (ops2.length === 1)
    return ops2[0];
  if (ops2.length === 2)
    return multiply2(ops2[0], ops2[1]);
  const product = new Product(ce);
  for (const op3 of ops2) {
    if (op3.isNaN || op3.symbol === "Undefined")
      return ce._NAN;
    product.addTerm(op3);
  }
  return product.asExpression();
}
function simplifyMultiply(ce, ops2) {
  /* @__PURE__ */ console.assert(ops2.every((x) => x.head !== "Multiply"));
  const product = new Product(ce);
  for (let op3 of ops2) {
    op3 = op3.simplify();
    if (op3.isNaN || op3.symbol === "Undefined")
      return ce._NAN;
    product.addTerm(op3);
  }
  return product.asExpression();
}
function evalMultiply(ce, ops2, mode = "evaluate") {
  /* @__PURE__ */ console.assert(ops2.length > 1, "evalMultiply(): no arguments");
  if (mode === "N") {
    ops2 = ops2.map((x) => x.N());
    if ((ce.numericMode === "machine" || ce.numericMode === "auto") && ops2.every((x) => typeof x.numericValue === "number")) {
      let prod = 1;
      for (const op3 of ops2)
        prod *= op3.numericValue;
      return ce.number(prod);
    }
  }
  for (const op3 of ops2) {
    if (op3.isNaN || op3.symbol === "Undefined")
      return ce._NAN;
    if (!op3.isExact)
      mode = "N";
  }
  /* @__PURE__ */ console.assert(ops2.every((x) => x.head !== "Multiply"));
  if (mode === "N")
    ops2 = ops2.map((x) => x.N());
  else
    ops2 = ops2.map((x) => x.evaluate());
  return new Product(ce, ops2).asExpression(mode);
}
function multiply2(op12, op22, metadata) {
  var _a;
  /* @__PURE__ */ console.assert(op12.isCanonical);
  /* @__PURE__ */ console.assert(op22.isCanonical);
  const ce = op12.engine;
  if (op12.symbol === "ImaginaryUnit") {
    const f = asFloat(op22);
    if (f !== null)
      return ce.number(ce.complex(0, f));
  }
  if (op22.symbol === "ImaginaryUnit") {
    const f = asFloat(op12);
    if (f !== null)
      return ce.number(ce.complex(0, f));
  }
  if (op12.numericValue !== null && op22.numericValue !== null) {
    const f1 = asFloat(op12);
    const f2 = asFloat(op22);
    if (f1 !== null && ce.isComplex(op22))
      return ce.number(ce.complex(f1 * op22.re, f1 * op22.im));
    if (f2 !== null && ce.isComplex(op12))
      return ce.number(ce.complex(f2 * op12.re, f2 * op12.im));
  }
  if (op12.numericValue !== null && op22.numericValue !== null && op12.isInteger && op22.isInteger) {
    return (_a = apply2N(
      op12,
      op22,
      (a, b) => a * b,
      (a, b) => a.mul(b)
    )) != null ? _a : ce._NAN;
  }
  if (op12.isNaN || op22.isNaN || op12.symbol === "Undefined" || op22.symbol === "Undefined")
    return ce._NAN;
  if (op12.isNothing)
    return op22;
  if (op22.isNothing)
    return op12;
  if (op12.numericValue !== null) {
    if (op12.isOne)
      return op22;
    if (op12.isNegativeOne)
      return canonicalNegate(op22);
  }
  if (op22.numericValue !== null) {
    if (op22.isOne)
      return op12;
    if (op22.isNegativeOne)
      return canonicalNegate(op12);
  }
  let sign2 = 1;
  let [t, c] = op12.numericValue !== null ? [op12, op22] : [op22, op12];
  /* @__PURE__ */ console.assert(t.head !== "Subtract");
  if (t.head === "Negate") {
    t = t.op1;
    sign2 = -sign2;
  }
  if (c.numericValue !== null) {
    const r = asRational(c);
    if (r) {
      if (isRationalOne(r))
        return t;
      if (isRationalZero(r))
        return ce._ZERO;
      if (t.head === "Add") {
        if (sign2 < 0)
          c = canonicalNegate(c);
        return ce.add(
          t.ops.map((x) => multiply2(c, x)),
          metadata
        );
      }
      const tr = asRational(t);
      if (tr) {
        const p = mul2(r, tr);
        return ce.number(sign2 < 0 ? neg(p) : p, { metadata });
      }
      if (sign2 < 0)
        return ce._fn("Multiply", [canonicalNegate(c), t], metadata);
      return ce._fn("Multiply", [c, t], metadata);
    }
  }
  if (c.hash === t.hash && c.isSame(t))
    return square(ce, c);
  const product = new Product(ce, [c, t]);
  if (sign2 > 0)
    return product.asExpression();
  return canonicalNegate(product.asExpression(), metadata);
}
function canonicalProduct(ce, body, range) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  body != null ? body : body = ce.error("missing");
  let index = null;
  let lower = null;
  let upper = null;
  if (range && range.head !== "Tuple" && range.head !== "Triple" && range.head !== "Pair" && range.head !== "Single") {
    index = range;
  } else if (range) {
    index = (_b = (_a = range.ops) == null ? void 0 : _a[0]) != null ? _b : null;
    lower = (_e = (_d = (_c = range.ops) == null ? void 0 : _c[1]) == null ? void 0 : _d.canonical) != null ? _e : null;
    upper = (_h = (_g = (_f = range.ops) == null ? void 0 : _f[2]) == null ? void 0 : _g.canonical) != null ? _h : null;
  }
  if (index && index.head === "Hold")
    index = index.op1;
  if (index && index.head === "ReleaseHold")
    index = index.op1.evaluate();
  index != null ? index : index = ce.symbol("Nothing");
  if (!index.symbol)
    index = ce.error(["incompatible-domain", "Symbol", index.domain]);
  else
    index = ce.hold(index);
  if (lower && lower.isFinite)
    lower = validateArgument(ce, lower, "Integer");
  if (upper && upper.isFinite)
    upper = validateArgument(ce, upper, "Integer");
  if (lower && upper)
    range = ce.tuple([index, lower, upper]);
  else if (upper)
    range = ce.tuple([index, ce.number(1), upper]);
  else if (lower)
    range = ce.tuple([index, lower]);
  else
    range = index;
  return ce._fn("Product", [body.canonical, range]);
}
function evalMultiplication(ce, expr, range, mode) {
  var _a;
  const [index, lower, upper, isFinite2] = normalizeLimits(range);
  const fn = expr;
  if (mode !== "N" && (lower >= upper || upper - lower >= MAX_SYMBOLIC_TERMS))
    return void 0;
  let result = null;
  const savedContext = ce.context;
  ce.context = (_a = fn.scope) != null ? _a : ce.context;
  if (mode === "simplify") {
    const terms = [];
    if (!fn.scope)
      for (let i = lower; i <= upper; i++)
        terms.push(fn.simplify());
    else
      for (let i = lower; i <= upper; i++) {
        ce.set({ [index]: i });
        terms.push(fn.simplify());
      }
    result = ce.mul(terms).simplify();
  }
  if (mode === "evaluate") {
    const terms = [];
    if (!fn.scope)
      for (let i = lower; i <= upper; i++)
        terms.push(fn.evaluate());
    else
      for (let i = lower; i <= upper; i++) {
        ce.set({ [index]: i });
        terms.push(fn.evaluate());
      }
    result = ce.mul(terms).evaluate();
  }
  if (mode === "N") {
    if (result === null && !fn.scope) {
      const n = fn.N();
      if (!isFinite2) {
        if (n.isZero)
          result = ce._ZERO;
        else if (n.isPositive)
          result = ce._POSITIVE_INFINITY;
        else
          result = ce._NEGATIVE_INFINITY;
      }
      if (result === null && fn.isPure)
        result = ce.pow(n, ce.number(upper - lower + 1));
    }
    if (result === null && isFinite2) {
      if (bignumPreferred(ce)) {
        let product2 = ce.bignum(1);
        for (let i = lower; i <= upper; i++) {
          ce.set({ [index]: i });
          const term = asBignum(fn.N());
          if (term === null || !term.isFinite()) {
            result = term !== null ? ce.number(term) : void 0;
            break;
          }
          product2 = product2.mul(term);
        }
        if (result === null)
          result = ce.number(product2);
      }
      let product = 1;
      const numericMode = ce.numericMode;
      ce.numericMode = "machine";
      for (let i = lower; i <= upper; i++) {
        ce.set({ [index]: i });
        const term = asFloat(fn.N());
        if (term === null || !Number.isFinite(term)) {
          result = term !== null ? ce.number(term) : void 0;
          break;
        }
        product *= term;
      }
      ce.numericMode = numericMode;
      if (result === null)
        result = ce.number(product);
    }
    if (result === null) {
      ce.set({ [index]: 1e3 });
      const nMax = fn.N();
      ce.set({ [index]: 999 });
      const nMaxMinusOne = fn.N();
      const ratio = asFloat(ce.div(nMax, nMaxMinusOne).N());
      if (ratio !== null && Number.isFinite(ratio) && Math.abs(ratio) > 1) {
        result = ce._POSITIVE_INFINITY;
      } else {
        let product = 1;
        const numericMode = ce.numericMode;
        ce.numericMode = "machine";
        for (let i = lower; i <= upper; i++) {
          ce.set({ [index]: i });
          const term = asFloat(fn.N());
          if (term === null) {
            result = void 0;
            break;
          }
          if (Math.abs(1 - term) < Number.EPSILON || !Number.isFinite(term))
            break;
          product *= term;
        }
        if (result === null)
          result = ce.number(product);
        ce.numericMode = numericMode;
      }
    }
  }
  ce.context = savedContext;
  return result != null ? result : void 0;
}
function canonicalDivide(ce, op12, op22) {
  if (!op12.isValid || !op22.isValid)
    return ce._fn("Divide", [op12, op22]);
  if (op12.head === "Negate" && op22.head === "Negate") {
    op12 = op12.op1;
    op22 = op22.op1;
  }
  if (op12.numericValue !== null && op22.numericValue !== null) {
    if (op22.isOne)
      return op12;
    if (op22.isNegativeOne)
      return ce.neg(op12);
    if (op12.isOne)
      return ce.inv(op22);
    if (op12.isNegativeOne)
      return ce.neg(ce.inv(op22));
    const r1 = asRational(op12);
    const r2 = asRational(op22);
    if (r1 && r2 && !isRationalZero(r2))
      return ce.number(mul2(r1, inverse(r2)));
  }
  if (op12.head === "Divide" && op22.head === "Divide") {
    return canonicalDivide(
      ce,
      ce.mul([op12.op1, op22.op2]),
      ce.mul([op12.op2, op22.op1])
    );
  }
  if (op12.head === "Divide")
    return canonicalDivide(ce, ce.mul([op12.op1, op22]), op12.op2);
  if (op22.head === "Divide")
    return canonicalDivide(ce, ce.mul([op12, op22.op2]), op22.op1);
  const num1 = op12.numericValue;
  if (num1 !== null) {
    if (isMachineRational(num1)) {
      const [a, b] = num1;
      return canonicalDivide(ce, ce.number(a), ce.mul([ce.number(b), op22]));
    }
    if (isBigRational(num1)) {
      const [a, b] = num1;
      return canonicalDivide(ce, ce.number(a), ce.mul([ce.number(b), op22]));
    }
  }
  const num2 = op22.numericValue;
  if (num2 !== null) {
    if (isMachineRational(num2)) {
      const [a, b] = num2;
      return canonicalDivide(ce, ce.mul([op12, ce.number(b)]), ce.number(a));
    }
    if (isBigRational(num2)) {
      const [a, b] = num2;
      return canonicalDivide(ce, ce.mul([op12, ce.number(b)]), ce.number(a));
    }
  }
  const [c1, t1] = asCoefficient(op12);
  const [c2, t2] = asCoefficient(op22);
  if (!isRationalOne(c1) || !isRationalOne(c2)) {
    const [cn, cd] = mul2(c1, inverse(c2));
    const en = ce.mul([ce.number(cn), t1]);
    if (en.isZero)
      return ce._ZERO;
    const ed = ce.mul([ce.number(cd), t2]);
    if (ed.isOne)
      return en;
    return ce._fn("Divide", [en, ed]);
  }
  let [nSign, n] = makePositive(op12);
  let [dSign, d] = makePositive(op22);
  n = n.canonical;
  d = d.canonical;
  if (d.numericValue !== null && d.isOne)
    return nSign * dSign < 0 ? canonicalNegate(n) : n;
  if (nSign * dSign > 0)
    return ce._fn("Divide", [n, d]);
  if (n.numericValue)
    return ce._fn("Divide", [canonicalNegate(n), d]);
  return canonicalNegate(ce._fn("Divide", [n, d]));
}
function simplifyDivide(ce, op12, op22) {
  if (op12.numericValue !== null && op22.numericValue !== null) {
    const r1 = asRational(op12);
    const r2 = asRational(op22);
    if (r1 && r2 && !isRationalZero(r2))
      return ce.number(mul2(r1, inverse(r2)));
  }
  return new Product(ce, [op12, ce.inv(op22)]).asRationalExpression();
}
var import_complex16 = __toESM(require_complex());
var ARITHMETIC_LIBRARY = [
  {
    //
    // Functions
    //
    Abs: {
      wikidata: "Q3317982",
      // magnitude 'Q120812 (for reals)
      threadable: true,
      idempotent: true,
      complexity: 1200,
      signature: {
        domain: ["Function", "Number", "NonNegativeNumber"],
        simplify: (ce, ops2) => processAbs(ce, ops2[0], "simplify"),
        evaluate: (ce, ops2) => processAbs(ce, ops2[0], "evaluate"),
        N: (ce, ops2) => processAbs(ce, ops2[0], "N")
      }
    },
    Add: {
      wikidata: "Q32043",
      associative: true,
      commutative: true,
      threadable: true,
      idempotent: true,
      complexity: 1300,
      hold: "all",
      signature: {
        domain: "NumericFunction",
        codomain: (ce, args) => domainAdd(
          ce,
          args.map((x) => x.domain)
        ),
        // canonical: (ce, args) => canonicalAdd(ce, args), // never called: shortpath
        simplify: (ce, ops2) => simplifyAdd(ce, ops2),
        evaluate: (ce, ops2) => evalAdd(ce, ops2),
        N: (ce, ops2) => evalAdd(ce, ops2, "N")
      }
    },
    Ceil: {
      description: "Rounds a number up to the next largest integer",
      complexity: 1250,
      signature: {
        domain: ["Function", "Number", "Integer"],
        evaluate: (_ce, ops2) => applyN(
          ops2[0],
          Math.ceil,
          (x) => x.ceil(),
          (z) => z.ceil(0)
        )
      }
    },
    Chop: {
      associative: true,
      threadable: true,
      idempotent: true,
      complexity: 1200,
      signature: {
        domain: ["Function", "Number", "Number"],
        evaluate: (ce, ops2) => applyN(
          ops2[0],
          (x) => ce.chop(x),
          (x) => ce.chop(x),
          (x) => ce.chop(x)
        )
      }
    },
    Complex: {
      // This function is converted during boxing, so unlikely to encounter
      wikidata: "Q11567",
      complexity: 500
    },
    Divide: {
      wikidata: "Q1226939",
      complexity: 2500,
      // - if numer product of numbers, or denom product of numbers,
      // i.e. √2x/2 -> 0.707x, 2/√2x -> 1.4142x
      signature: {
        domain: ["Function", "Number", "Number", "Number"],
        canonical: (ce, args) => {
          args = validateArguments(ce, canonical(flattenSequence(args)), [
            "Number",
            "Number"
          ]);
          if (args.length !== 2)
            return ce._fn("Divide", args);
          return ce.div(args[0], args[1]);
        },
        simplify: (ce, args) => simplifyDivide(ce, args[0], args[1]),
        evaluate: (ce, ops2) => apply2N(
          ops2[0],
          ops2[1],
          (n, d) => n / d,
          (n, d) => n.div(d),
          (n, d) => n.div(d)
        )
      }
    },
    Exp: {
      wikidata: "Q168698",
      threadable: true,
      complexity: 3500,
      // Exp(x) -> e^x
      signature: {
        domain: ["Function", "Number", "Number"],
        canonical: (ce, args) => {
          args = validateArguments(ce, canonical(flattenSequence(args)), [
            "Number"
          ]);
          if (args.length !== 1)
            return ce._fn("Power", args);
          return ce.pow(ce.symbol("ExponentialE"), args[0]);
        }
      }
    },
    Factorial: {
      description: "Factorial Function",
      wikidata: "Q120976",
      complexity: 9e3,
      signature: {
        domain: ["Function", "Number", "Number"],
        evaluate: (ce, ops2) => {
          const n = asSmallInteger(ops2[0]);
          if (n !== null && n >= 0) {
            if (!bignumPreferred(ce))
              return ce.number(factorial(n));
            return ce.number(factorial2(ce, ce.bignum(n)));
          }
          const num = ops2[0].numericValue;
          if (num !== null && num instanceof import_complex16.default)
            return ce.number(gamma3(num.add(1)));
          const f = asFloat(ops2[0]);
          if (f !== null)
            return ce.number(gamma(1 + f));
          return void 0;
        }
      }
    },
    Floor: {
      wikidata: "Q56860783",
      complexity: 1250,
      signature: {
        domain: ["Function", "Number", "ExtendedRealNumber"],
        evaluate: (ce, ops2) => applyN(
          ops2[0],
          Math.floor,
          (x) => x.floor(),
          (z) => z.floor(0)
        )
      }
    },
    Gamma: {
      wikidata: "Q190573",
      complexity: 8e3,
      signature: {
        domain: ["Function", "Number", "Number"],
        N: (ce, ops2) => applyN(
          ops2[0],
          (x) => gamma(x),
          (x) => gamma2(ce, x),
          (x) => gamma3(x)
        )
      }
    },
    LogGamma: {
      complexity: 8e3,
      signature: {
        domain: ["Function", "Number", "Number"],
        N: (ce, ops2) => applyN(
          ops2[0],
          (x) => lngamma(x),
          (x) => lngamma2(ce, x),
          (x) => lngamma3(x)
        )
      }
    },
    Ln: {
      description: "Natural Logarithm",
      wikidata: "Q204037",
      complexity: 4e3,
      signature: {
        domain: ["Function", "Number", "Number"],
        N: (ce, ops2) => applyN(
          ops2[0],
          (x) => x >= 0 ? Math.log(x) : ce.complex(x).log(),
          (x) => !x.isNeg() ? x.ln() : ce.complex(x.toNumber()).log(),
          (z) => z.log()
        )
      }
    },
    Log: {
      description: "Log(z, b = 10) = Logarithm of base b",
      wikidata: "Q11197",
      complexity: 4100,
      signature: {
        domain: ["Function", "Number", ["Maybe", "Number"], "Number"],
        canonical: (ce, ops2) => {
          ops2 = canonical(flattenSequence(ops2));
          if (ops2.length === 1)
            return ce._fn("Log", [validateArgument(ce, ops2[0], "Number")]);
          if (ops2.length === 2) {
            const arg = validateArgument(ce, ops2[0], "Number");
            const base = validateArgument(ce, ops2[1], "Number");
            if (base.numericValue === 10)
              return ce._fn("Log", [arg]);
            return ce._fn("Log", [arg, base]);
          }
          return ce._fn("Log", validateArgumentCount(ce, ops2, 2));
        },
        N: (ce, ops2) => {
          if (ops2[1] === void 0)
            return applyN(
              ops2[0],
              (x) => x >= 0 ? Math.log10(x) : ce.complex(x).log().div(Math.LN10),
              (x) => !x.isNeg() ? decimal_default.log10(x) : ce.complex(x.toNumber()).log().div(Math.LN10),
              (z) => z.log().div(Math.LN10)
            );
          return apply2N(
            ops2[0],
            ops2[1],
            (a, b) => Math.log(a) / Math.log(b),
            (a, b) => a.log(b),
            (a, b) => a.log().div(typeof b === "number" ? Math.log(b) : b.log())
          );
        }
      }
    },
    Lb: {
      description: "Base-2 Logarithm",
      wikidata: "Q581168",
      complexity: 4100,
      signature: {
        domain: ["Function", "Number", "Number"],
        N: (ce, ops2) => applyN(
          ops2[0],
          (x) => x >= 0 ? Math.log2(x) : ce.complex(x).log().div(Math.LN2),
          (x) => x.isNeg() ? decimal_default.log10(x) : ce.complex(x.toNumber()).log().div(Math.LN2),
          (z) => z.log().div(Math.LN2)
        )
      }
    },
    Lg: {
      description: "Base-10 Logarithm",
      wikidata: "Q966582",
      complexity: 4100,
      signature: {
        domain: ["Function", "Number", "Number"],
        N: (ce, ops2) => applyN(
          ops2[0],
          (x) => x >= 0 ? Math.log10(x) : ce.complex(x).log().div(Math.LN10),
          (x) => !x.isNeg() ? decimal_default.log10(x) : ce.complex(x.toNumber()).log().div(Math.LN10),
          (z) => z.log().div(Math.LN10)
        )
      }
    },
    Max: {
      description: "Maximum of two or more numbers",
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        simplify: (ce, ops2) => {
          if (ops2.length === 0)
            return ce._NEGATIVE_INFINITY;
          if (ops2.length === 1)
            return ops2[0];
          return ce.fn("Max", ops2);
        },
        evaluate: (ce, ops2) => {
          if (ops2.length === 0)
            return ce._NEGATIVE_INFINITY;
          let result = void 0;
          const rest = [];
          for (const op3 of ops2) {
            if (!op3.isNumber || op3.numericValue === void 0)
              rest.push(op3);
            else if (!result || op3.isGreater(result))
              result = op3;
          }
          if (rest.length > 0)
            return ce.box(result ? ["Max", result, ...rest] : ["Max", ...rest]);
          return result != null ? result : ce._NAN;
        }
      }
    },
    Min: {
      description: "Minimum of two or more numbers",
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        simplify: (ce, ops2) => {
          if (ops2.length === 0)
            return ce._NEGATIVE_INFINITY;
          if (ops2.length === 1)
            return ops2[0];
          return ce.fn("Min", ops2);
        },
        evaluate: (ce, ops2) => {
          if (ops2.length === 0)
            return ce._NEGATIVE_INFINITY;
          let result = void 0;
          const rest = [];
          for (const op3 of ops2) {
            if (!op3.isNumber || op3.numericValue === void 0)
              rest.push(op3);
            else if (!result || op3.isLess(result))
              result = op3;
          }
          if (rest.length > 0)
            return ce.box(result ? ["Min", result, ...rest] : ["Min", ...rest]);
          return result != null ? result : ce._NAN;
        }
      }
    },
    Multiply: {
      wikidata: "Q40276",
      associative: true,
      commutative: true,
      idempotent: true,
      complexity: 2100,
      hold: "all",
      signature: {
        domain: "NumericFunction",
        // Never called: fastpath
        // canonical: (ce, args) => {
        //   return canonicalMultiply(ce, args);
        // },
        simplify: (ce, ops2) => simplifyMultiply(ce, ops2),
        evaluate: (ce, ops2) => evalMultiply(ce, ops2),
        N: (ce, ops2) => evalMultiply(ce, ops2, "N")
      }
    },
    Negate: {
      description: "Additive Inverse",
      wikidata: "Q715358",
      complexity: 2e3,
      signature: {
        domain: ["Function", "Number", "Number"],
        codomain: (ce, args) => {
          const arg = args[0].domain;
          if (!arg.literal)
            return arg;
          const negDomain = {
            PositiveNumber: "NegativeNumber",
            NonNegativeNumber: "NonPositiveNumber",
            NonPositiveNumber: "NonNegativeNumber",
            NegativeNumber: "PositiveNumber",
            PositiveInteger: "NegativeInteger",
            NonNegativeInteger: "NonPositiveInteger",
            NonPositiveInteger: "NonNegativeInteger",
            NegativeInteger: "PositiveInteger"
          }[arg.literal];
          if (negDomain)
            return ce.domain(negDomain);
          return arg;
        },
        canonical: (ce, args) => {
          args = validateArguments(ce, canonical(flattenSequence(args)), [
            "Number"
          ]);
          if (args.length !== 1)
            return ce._fn("Negate", args);
          return canonicalNegate(args[0]);
        },
        simplify: (ce, ops2) => processNegate(ce, ops2[0], "simplify"),
        evaluate: (ce, ops2) => processNegate(ce, ops2[0], "evaluate"),
        N: (ce, ops2) => processNegate(ce, ops2[0], "N"),
        sgn: (_ce, args) => {
          const s = args[0].sgn;
          if (s === void 0 || s === null)
            return void 0;
          if (s === 0)
            return 0;
          if (s > 0)
            return -1;
          if (s < 0)
            return 1;
          return void 0;
        }
      }
    },
    Power: {
      wikidata: "Q33456",
      commutative: false,
      complexity: 3500,
      signature: {
        domain: ["Function", "Number", "Number", "Number"],
        canonical: (ce, args) => {
          args = validateArguments(ce, canonical(flattenSequence(args)), [
            "Number",
            "Number"
          ]);
          if (args.length !== 2)
            return ce._fn("Power", args);
          return ce.pow(args[0], args[1]);
        },
        simplify: (ce, ops2) => processPower(ce, ops2[0], ops2[1], "simplify"),
        evaluate: (ce, ops2) => processPower(ce, ops2[0], ops2[1], "evaluate"),
        N: (ce, ops2) => {
          if (ce.numericMode === "machine" && typeof ops2[0].numericValue === "number" && typeof ops2[1].numericValue === "number")
            return ce.number(
              Math.pow(ops2[0].numericValue, ops2[1].numericValue)
            );
          return processPower(ce, ops2[0], ops2[1], "N");
        }
        // Defined as RealNumber for all power in RealNumber when base > 0;
        // when x < 0, only defined if n is an integer
        // if x is a non-zero complex, defined as ComplexNumber
        // Square root of a prime is irrational (AlgebraicNumber)
        // https://proofwiki.org/wiki/Square_Root_of_Prime_is_Irrational
        // evalDomain: (ce, base: BoxedExpression, power: BoxedExpression) ;
      }
    },
    Product: {
      wikidata: "Q901718",
      complexity: 1e3,
      hold: "first",
      signature: {
        domain: [
          "Function",
          "Anything",
          // [
          //   'Maybe',
          "Tuple",
          // ['Tuple', 'Symbol', ['Maybe', 'Integer'], ['Maybe', 'Integer']],
          // ],
          "Number"
        ],
        // codomain: (ce, args) => domainAdd(ce, args),
        // The 'body' and 'range' need to be interpreted by canonicalMultiplication(). Don't canonicalize them yet.
        canonical: (ce, ops2) => canonicalProduct(ce, ops2[0], ops2[1]),
        simplify: (ce, ops2) => evalMultiplication(ce, ops2[0], ops2[1], "simplify"),
        evaluate: (ce, ops2) => evalMultiplication(ce, ops2[0], ops2[1], "evaluate"),
        N: (ce, ops2) => evalMultiplication(ce, ops2[0], ops2[1], "N")
      }
    },
    Rational: {
      complexity: 2400,
      signature: {
        domain: ["Function", "Number", ["Maybe", "Number"], "RationalNumber"],
        canonical: (ce, args) => {
          args = canonical(flattenSequence(args));
          if (args.length === 0)
            return ce._fn("Rational", [ce.error("missing")]);
          if (args.length === 1)
            return ce._fn("Rational", [
              validateArgument(ce, args[0], "ExtendedRealNumber")
            ]);
          args = validateArguments(ce, args, ["Integer", "Integer"]);
          if (args.length !== 2)
            return ce._fn("Rational", args);
          return ce.div(args[0], args[1]);
        },
        simplify: (ce, ops2) => {
          if (ops2.length !== 2)
            return void 0;
          return simplifyDivide(ce, ops2[0], ops2[1]);
        },
        evaluate: (ce, ops2) => {
          if (ops2.length === 2) {
            const [n, d] = [asSmallInteger(ops2[0]), asSmallInteger(ops2[1])];
            if (n !== null && d !== null)
              return ce.number([n, d]);
            return void 0;
          }
          const f = asFloat(ops2[0].N());
          if (f === null)
            return void 0;
          return ce.number(rationalize(f));
        },
        N: (ce, ops2) => {
          if (ops2.length === 1)
            return ops2[0];
          return apply2N(
            ops2[0],
            ops2[1],
            (a, b) => a / b,
            (a, b) => a.div(b),
            (a, b) => a.div(b)
          );
        }
      }
    },
    Root: {
      complexity: 3200,
      signature: {
        domain: ["Function", "Number", "Number", "Number"],
        canonical: (ce, args) => {
          args = canonical(flattenSequence(args));
          if (args.length > 2)
            return ce._fn("Root", validateArgumentCount(ce, args, 2));
          const [base, exp2] = [
            validateArgument(ce, args[0], "Number"),
            validateArgument(ce, args[1], "Number")
          ];
          if (!exp2.isValid || !base.isValid)
            return ce._fn("Root", [base, exp2]);
          return ce.pow(base, ce.inv(exp2));
        }
      }
    },
    Round: {
      complexity: 1250,
      signature: {
        domain: ["Function", "Number", "Number"],
        evaluate: (ce, ops2) => applyN(
          ops2[0],
          Math.round,
          (x) => x.round(),
          (x) => x.round(0)
        )
      }
    },
    Sign: {
      complexity: 1200,
      signature: {
        domain: ["Function", "Number", ["Range", -1, 1]],
        simplify: (ce, ops2) => {
          const s = ops2[0].sgn;
          if (s === 0)
            return ce._ZERO;
          if (s === 1)
            return ce._ONE;
          if (s === -1)
            return ce._NEGATIVE_ONE;
          return void 0;
        },
        evaluate: (ce, ops2) => {
          const s = ops2[0].sgn;
          if (s === 0)
            return ce._ZERO;
          if (s === 1)
            return ce._ONE;
          if (s === -1)
            return ce._NEGATIVE_ONE;
          return void 0;
        },
        N: (ce, ops2) => {
          const s = ops2[0].sgn;
          if (s === 0)
            return ce._ZERO;
          if (s === 1)
            return ce._ONE;
          if (s === -1)
            return ce._NEGATIVE_ONE;
          return void 0;
        }
      }
    },
    SignGamma: {
      description: "The sign of the gamma function: -1 or +1",
      complexity: 7900
      // @todo
    },
    Sqrt: {
      description: "Square Root",
      wikidata: "Q134237",
      complexity: 3e3,
      signature: {
        domain: ["Function", "Number", "Number"],
        canonical: (ce, args) => {
          args = canonical(flattenSequence(args));
          if (args.length !== 1)
            return ce._fn("Sqrt", args);
          return ce.pow(args[0], ce._HALF);
        },
        simplify: (ce, ops2) => processSqrt(ce, ops2[0], "simplify"),
        evaluate: (ce, ops2) => processSqrt(ce, ops2[0], "evaluate"),
        N: (ce, ops2) => processSqrt(ce, ops2[0], "N")
        // evalDomain: Square root of a prime is irrational
        // https://proofwiki.org/wiki/Square_Root_of_Prime_is_Irrational
      }
    },
    Square: {
      wikidata: "Q3075175",
      complexity: 3100,
      signature: {
        domain: ["Function", "Number", "Number"],
        canonical: (ce, args) => {
          args = canonical(flattenSequence(args));
          if (args.length !== 1)
            return ce._fn("Square", args);
          return ce.pow(args[0], ce.number(2));
        }
      }
    },
    Subtract: {
      wikidata: "Q40754",
      complexity: 1350,
      signature: {
        domain: ["Function", "Number", ["Maybe", "Number"], "Number"],
        canonical: (ce, args) => {
          args = canonical(flattenSequence(args));
          if (args.length === 1)
            return canonicalNegate(args[0]);
          args = validateArgumentCount(ce, args, 2);
          if (args.length !== 2)
            return ce._fn("Subtract", args);
          if (!args.every((x) => x.isValid))
            return ce._fn("Subtract", args);
          return ce.add([args[0], canonicalNegate(args[1])]);
        }
      }
    },
    Sum: {
      wikidata: "Q218005",
      complexity: 1e3,
      hold: "all",
      signature: {
        domain: [
          "Function",
          "Anything",
          // [
          //   'Maybe',
          "Tuple",
          // ['Tuple', 'Symbol', ['Maybe', 'Integer'], ['Maybe', 'Integer']],
          // ],
          "Number"
        ],
        canonical: (ce, ops2) => canonicalSummation(ce, ops2[0], ops2[1]),
        simplify: (ce, ops2) => evalSummation(ce, ops2[0], ops2[1], "simplify"),
        evaluate: (ce, ops2) => evalSummation(ce, ops2[0], ops2[1], "evaluate"),
        N: (ce, ops2) => evalSummation(ce, ops2[0], ops2[1], "N")
      }
    }
  },
  {
    //
    // Constants
    // Note: constants are put in a separate, subsequent, dictionary because
    // some of the values (CatalanConstant) reference some function names (Add...)
    // that are defined above. This avoid circular references.
    //
    e: {
      domain: "TranscendentalNumber",
      constant: true,
      holdUntil: "never",
      value: "ExponentialE"
    },
    i: {
      domain: "ImaginaryNumber",
      constant: true,
      holdUntil: "never",
      flags: { imaginary: true },
      value: "ImaginaryUnit"
    },
    MachineEpsilon: {
      /**
       * The difference between 1 and the next larger floating point number
       *
       *    2^{−52}
       *
       * See https://en.wikipedia.org/wiki/Machine_epsilon
       */
      domain: "RealNumber",
      holdUntil: "N",
      constant: true,
      flags: { real: true },
      value: { num: Number.EPSILON.toString() }
    },
    Half: {
      constant: true,
      holdUntil: "evaluate",
      value: ["Rational", 1, 2]
    },
    ImaginaryUnit: {
      domain: "ImaginaryNumber",
      constant: true,
      holdUntil: "evaluate",
      wikidata: "Q193796",
      flags: { imaginary: true },
      value: ["Complex", 0, 1]
    },
    ExponentialE: {
      domain: "TranscendentalNumber",
      flags: { algebraic: false, real: true },
      wikidata: "Q82435",
      constant: true,
      holdUntil: "N",
      value: (engine) => bignumPreferred(engine) ? engine._BIGNUM_ONE.exp() : Math.exp(1)
    },
    GoldenRatio: {
      domain: "AlgebraicNumber",
      wikidata: "Q41690",
      constant: true,
      flags: { algebraic: true },
      holdUntil: "simplify",
      value: ["Divide", ["Add", 1, ["Sqrt", 5]], 2]
    },
    CatalanConstant: {
      domain: "RealNumber",
      flags: { algebraic: void 0 },
      // Not proven irrational or transcendental
      wikidata: "Q855282",
      constant: true,
      holdUntil: "N",
      value: {
        // From http://www.fullbooks.com/Miscellaneous-Mathematical-Constants1.html
        num: `0.91596559417721901505460351493238411077414937428167
                  21342664981196217630197762547694793565129261151062
                  48574422619196199579035898803325859059431594737481
                  15840699533202877331946051903872747816408786590902
                  47064841521630002287276409423882599577415088163974
                  70252482011560707644883807873370489900864775113225
                  99713434074854075532307685653357680958352602193823
                  23950800720680355761048235733942319149829836189977
                  06903640418086217941101917532743149978233976105512
                  24779530324875371878665828082360570225594194818097
                  53509711315712615804242723636439850017382875977976
                  53068370092980873887495610893659771940968726844441
                  66804621624339864838916280448281506273022742073884
                  31172218272190472255870531908685735423498539498309
                  91911596738846450861515249962423704374517773723517
                  75440708538464401321748392999947572446199754961975
                  87064007474870701490937678873045869979860644874974
                  64387206238513712392736304998503539223928787979063
                  36440323547845358519277777872709060830319943013323
                  16712476158709792455479119092126201854803963934243
                  `
      }
    },
    EulerGamma: {
      // From http://www.fullbooks.com/Miscellaneous-Mathematical-Constants2.html
      domain: "RealNumber",
      flags: { algebraic: void 0 },
      // Not proven irrational or transcendental
      wikidata: "Q273023",
      holdUntil: "N",
      constant: true,
      value: {
        num: `0.57721566490153286060651209008240243104215933593992359880576723488486772677766
          467093694706329174674951463144724980708248096050401448654283622417399764492353
          625350033374293733773767394279259525824709491600873520394816567085323315177661
          152862119950150798479374508570574002992135478614669402960432542151905877553526
          733139925401296742051375413954911168510280798423487758720503843109399736137255
          306088933126760017247953783675927135157722610273492913940798430103417771778088
          154957066107501016191663340152278935867965497252036212879226555953669628176388
          792726801324310104765059637039473949576389065729679296010090151251959509222435
          014093498712282479497471956469763185066761290638110518241974448678363808617494
          551698927923018773910729457815543160050021828440960537724342032854783670151773
          943987003023703395183286900015581939880427074115422278197165230110735658339673`
      }
    }
  },
  {
    PreIncrement: {
      signature: { domain: ["Function", "Number", "Number"] }
    },
    PreDecrement: {
      signature: { domain: ["Function", "Number", "Number"] }
    }
  }
];
function processAbs(ce, arg, mode) {
  if (mode !== "simplify") {
    const num = arg.numericValue;
    if (num !== null) {
      if (typeof num === "number")
        return ce.number(Math.abs(num));
      if (num instanceof decimal_default)
        return ce.number(num.abs());
      if (num instanceof import_complex16.default)
        return ce.number(num.abs());
      if (isMachineRational(num))
        return ce.number(
          mode === "N" ? Math.abs(num[0] / num[1]) : [Math.abs(num[0]), num[1]]
        );
      if (isBigRational(num)) {
        const [n, d] = num;
        return ce.number(
          mode === "N" ? ce.bignum(n).div(ce.bignum(d)).abs() : [n > 0 ? n : -n, d]
        );
      }
    }
  }
  if (arg.isNonNegative)
    return arg;
  if (arg.isNegative)
    return ce.neg(arg);
  return void 0;
}
var CALCULUS_LIBRARY = [
  {
    //
    // Functions
    //
    Integrate: {
      wikidata: "Q80091",
      hold: "all",
      signature: {
        domain: [
          "Function",
          "Anything",
          ["Union", "Nothing", "Tuple", "Symbol"],
          // ['Tuple', 'Symbol', ['Maybe', 'Integer'], ['Maybe', 'Integer']],
          "Number"
        ],
        canonical: (ce, ops2) => {
          var _a, _b, _c, _d, _e, _f, _g, _h, _i;
          const body = (_a = ops2[0]) != null ? _a : ce.error("missing");
          let range = ops2[1];
          let index = null;
          let lower = null;
          let upper = null;
          if (range && range.head !== "Tuple" && range.head !== "Triple" && range.head !== "Pair" && range.head !== "Single") {
            index = range;
          } else if (range) {
            index = (_c = (_b = range.ops) == null ? void 0 : _b[0]) != null ? _c : null;
            lower = (_f = (_e = (_d = range.ops) == null ? void 0 : _d[1]) == null ? void 0 : _e.canonical) != null ? _f : null;
            upper = (_i = (_h = (_g = range.ops) == null ? void 0 : _g[2]) == null ? void 0 : _h.canonical) != null ? _i : null;
          }
          if (index && index.head === "Hold")
            index = index.op1;
          if (index && index.head === "ReleaseHold")
            index = index.op1.evaluate();
          index != null ? index : index = ce.symbol("Nothing");
          if (!index.symbol)
            index = ce.error(["incompatible-domain", "Symbol", index.domain]);
          if (lower)
            lower = validateArgument(ce, lower, "Number");
          if (upper)
            upper = validateArgument(ce, upper, "Number");
          if (lower && upper)
            range = ce.tuple([index, lower, upper]);
          else if (upper)
            range = ce.tuple([index, ce._NEGATIVE_INFINITY, upper]);
          else if (lower)
            range = ce.tuple([index, lower]);
          else
            range = index;
          return ce._fn("Integrate", [body.canonical, range]);
        }
      }
    }
  }
];
var COLLECTIONS_LIBRARY = {
  Sequence: {
    signature: {
      domain: "Function"
    }
  }
};
var COMPLEX_LIBRARY = [
  {
    Real: {
      threadable: true,
      complexity: 1200,
      signature: {
        domain: ["Function", "Number", "Number"],
        evaluate: (ce, ops2) => {
          const op3 = ops2[0].numericValue;
          if (op3 === null)
            return void 0;
          if (ce.isComplex(op3))
            return ce.number(op3.re);
          return ops2[0];
        }
      }
    },
    Imaginary: {
      threadable: true,
      complexity: 1200,
      signature: {
        domain: ["Function", "Number", "Number"],
        evaluate: (ce, ops2) => {
          const op3 = ops2[0].numericValue;
          if (op3 === null)
            return void 0;
          if (ce.isComplex(op3))
            return ce.number(op3.im);
          return ce._ZERO;
        }
      }
    },
    Argument: {
      threadable: true,
      complexity: 1200,
      signature: {
        domain: ["Function", "Number", "Number"],
        evaluate: (ce, ops2) => {
          const op3 = ops2[0].numericValue;
          if (op3 === null)
            return void 0;
          if (ce.isComplex(op3))
            return ce.number(op3.arg());
          const f = asFloat(ops2[0]);
          if (f === null)
            return void 0;
          if (f >= 0)
            return ce.number(0);
          return ce.number(Math.PI);
        }
      }
    },
    AbsArg: {
      threadable: true,
      complexity: 1200,
      signature: {
        domain: ["Function", "Number", "Tuple"],
        evaluate: (ce, ops2) => {
          const op3 = ops2[0].numericValue;
          if (op3 === null)
            return void 0;
          if (ce.isComplex(op3))
            return ce.tuple([ce.number(op3.abs()), ce.number(op3.arg())]);
          const f = asFloat(ops2[0]);
          if (f === null)
            return void 0;
          return ce.tuple([
            ce.number(Math.abs(f)),
            ce.number(f >= 0 ? 0 : Math.PI)
          ]);
        }
      }
    },
    Conjugate: {
      threadable: true,
      complexity: 1200,
      signature: {
        domain: ["Function", "Number", "Number"],
        evaluate: (ce, ops2) => {
          const op3 = ops2[0].numericValue;
          if (op3 === null || !ce.isComplex(op3))
            return void 0;
          return ce.number(op3.conjugate());
        }
      }
    },
    ComplexRoots: {
      threadable: true,
      complexity: 1200,
      signature: {
        domain: ["Function", "Number", "Number", "List"],
        evaluate: (ce, ops2) => {
          const x = asFloat(ops2[0]);
          const n = asFloat(ops2[1]);
          if (x === null || n === null || !Number.isInteger(n) || n <= 0)
            return void 0;
          const roots = [];
          const [re, im] = ce.isComplex(x) ? [x.re, x.im] : [x, 0];
          const arg = Math.atan2(im, re);
          const mod2 = Math.sqrt(re * re + im * im);
          for (let k = 0; k < n; k++) {
            const theta = (arg + 2 * Math.PI * k) / n;
            const r = Math.pow(mod2, 1 / n);
            roots.push([r * Math.cos(theta), r * Math.sin(theta)]);
          }
          return ce.box([
            "List",
            ...roots.map(
              (r) => ce.number(r[1] !== 0 ? ce.complex(r[0], r[1]) : r[0])
            )
          ]);
        }
      }
    }
    // For Abs (magnitude) see src/compute-engine/library/processAbs
  }
];
function oneOf(xs) {
  return xs[Math.floor(Math.random() * xs.length)];
}
function randomExpressionWithHead(head2, level) {
  if (head2 === "Add" || head2 === "Multiply") {
    const ops2 = [];
    let count = 1 + Math.floor(Math.random() * 12);
    while (count > 0) {
      ops2.push(randomExpression(level + 1));
      count -= 1;
    }
    return [head2, ...ops2];
  }
  if (head2 === "Divide" || head2 === "Power") {
    return [head2, randomExpression(level + 1), randomExpression(level + 1)];
  }
  if (head2 === "Root") {
    return [head2, randomExpression(level + 1), randomExpression(10)];
  }
  if (head2 === "trig")
    return randomTrig();
  return [head2, randomExpression(level + 1)];
}
function randomTrig() {
  return [
    oneOf([
      "Cos",
      "Sin",
      "Tan",
      "Sinh",
      "Arccos",
      "Arsinh",
      ["InverseFunction", "Cos"]
    ]),
    oneOf([
      "Pi",
      "-1",
      "0",
      "1",
      ["Divide", "Pi", -5],
      ["Multiply", -2, ["Divide", "Pi", 11]],
      ["Multiply", "Half", "Pi"],
      ["Multiply", 5, "Pi"],
      ["Multiply", 12, "Pi"],
      ["Divide", "Pi", 5],
      ["Divide", "Pi", 9],
      ["Multiply", 5, ["Divide", "Pi", 9]],
      ["Multiply", 2, ["Divide", "Pi", 11]],
      ["Multiply", 2, ["Divide", "Pi", 3]]
    ])
  ];
}
function randomExpression(level) {
  level != null ? level : level = 1;
  if (level === 1) {
    const h = oneOf([
      [
        "Sqrt",
        [
          "Multiply",
          6,
          [
            "Sum",
            ["Divide", 1, ["Power", "n", 2]],
            ["Triple", ["Hold", "n"], 1, { num: "+Infinity" }]
          ]
        ]
      ],
      "Add",
      "Add",
      "Add",
      "Add",
      "Add",
      "Multiply",
      "Multiply",
      "Multiply",
      "Multiply",
      "Divide",
      "Divide",
      "Divide",
      "Root",
      "Sqrt",
      "Subtract",
      "Negate",
      "trig"
    ]);
    if (typeof h === "string")
      return randomExpressionWithHead(h, 1);
    return h;
  }
  if (level === 2) {
    const r = Math.random();
    if (r > 0.75)
      return randomExpression(1);
    if (r > 0.5)
      return randomExpression(3);
    const h = oneOf([
      "Multiply",
      "Multiply",
      "Add",
      "Power",
      "trig",
      "Ln",
      "Exp"
    ]);
    return randomExpressionWithHead(h, 2);
  }
  return oneOf([
    -12345e-9,
    -2,
    -2,
    -2,
    -3,
    -5,
    -6,
    -12,
    -1654e-60,
    0,
    0,
    12345e-8,
    1654e-60,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    5,
    5,
    6,
    6,
    1234.5678,
    5678.1234,
    10,
    15,
    18,
    30,
    60,
    1234e54,
    "123456789.12345678912345e200",
    "987654321.12345678912345",
    ["Rational", -6, 10],
    ["Rational", -12, 15],
    ["Rational", -15, 12],
    ["Rational", 3, 5],
    ["Rational", 12, 15],
    ["Rational", 15, 12],
    "ExponentialE",
    // 'ImaginaryUnit',
    ["Sqrt", 3],
    ["Sqrt", 5],
    ["Sqrt", 15],
    ["Sqrt", 25],
    ["Complex", -1.1, 1.1],
    ["Complex", 4, 5],
    "x",
    "x",
    "x",
    "x",
    ["Add", "x", 1],
    ["Divide", "x", 3],
    ["Square", "x"],
    ["Power", "x", 3],
    ["Power", "x", 4],
    ["Subtract", "x", 1],
    ["Add", "x", 1],
    // 'a',
    // 'b',
    "Pi"
  ]);
}
var CORE_LIBRARY = [
  {
    Nothing: { domain: "Nothing" }
  },
  //
  // Data Structures
  //
  {
    List: {
      complexity: 8200,
      signature: {
        domain: ["Function", ["Maybe", ["Sequence", "Anything"]], "List"]
      }
    },
    KeyValuePair: {
      description: "A key/value pair",
      complexity: 8200,
      signature: {
        domain: [
          "Function",
          "String",
          "Anything",
          ["Tuple", "String", "Anything"]
        ],
        codomain: (ce, args) => ce.domain(["Tuple", "String", args[1].domain]),
        canonical: (ce, args) => {
          var _a, _b;
          const key = validateArgument(ce, (_a = args[0]) == null ? void 0 : _a.canonical, "String");
          const value = validateArgument(ce, (_b = args[1]) == null ? void 0 : _b.canonical, "Value");
          return ce.tuple([key, value]);
        }
      }
    },
    Single: {
      description: "A tuple with a single element",
      complexity: 8200,
      signature: {
        domain: ["Function", "Anything", ["Tuple", "Anything"]],
        codomain: (ce, args) => ce.domain(["Tuple", args[0].domain]),
        canonical: (ce, ops2) => ce.tuple(validateArgumentCount(ce, canonical(ops2), 1))
      }
    },
    Pair: {
      description: "A tuple of two elements",
      complexity: 8200,
      signature: {
        domain: [
          "Function",
          "Anything",
          "Anything",
          ["Tuple", "Anything", "Anything"]
        ],
        codomain: (ce, args) => ce.domain(["Tuple", args[0].domain, args[1].domain]),
        canonical: (ce, ops2) => ce.tuple(validateArgumentCount(ce, canonical(ops2), 2))
      }
    },
    Triple: {
      description: "A tuple of three elements",
      complexity: 8200,
      signature: {
        domain: [
          "Function",
          "Anything",
          "Anything",
          "Anything",
          ["Tuple", "Anything", "Anything", "Anything"]
        ],
        codomain: (ce, args) => ce.domain(["Tuple", args[0].domain, args[1].domain, args[2].domain]),
        canonical: (ce, ops2) => ce.tuple(validateArgumentCount(ce, canonical(ops2), 3))
      }
    },
    Tuple: {
      description: "A fixed number of heterogeneous elements",
      complexity: 8200,
      signature: {
        domain: [
          "Function",
          ["Sequence", "Anything"],
          ["Tuple", ["Sequence", "Anything"]]
        ],
        canonical: (ce, ops2) => ce.tuple(canonical(ops2)),
        codomain: (ce, args) => ce.domain(["Tuple", ...args.map((x) => x.domain)])
      }
    }
  },
  //
  // Inert functions
  //
  {
    BaseForm: {
      description: "`BaseForm(expr, base=10)`",
      complexity: 9e3,
      inert: true,
      signature: {
        domain: ["Function", "Value", ["Maybe", "Integer"], "Value"],
        codomain: (_ce, args) => args[0].domain
      }
    },
    Delimiter: {
      // Use to represent groups of expressions. Named after https://en.wikipedia.org/wiki/Delimiter
      complexity: 9e3,
      hold: "first",
      signature: {
        domain: [
          "Function",
          "Anything",
          ["Maybe", "String"],
          ["Maybe", "String"],
          "Anything"
        ],
        codomain: (_ce, args) => args[0].domain,
        canonical: (ce, args) => {
          var _a, _b;
          return (_b = (_a = args[0]) == null ? void 0 : _a.canonical) != null ? _b : ce.box(["Sequence"]);
        }
      }
    },
    Error: {
      /**
       * - The first argument is either a string or an `["ErrorCode"]`
       * expression indicating the nature of the error.
       * - The second argument, if present, indicates the context/location
       * of the error. If the error occur while parsing a LaTeX string,
       * for example, the argument will be a `Latex` expression.
       */
      complexity: 500,
      signature: {
        domain: ["Function", "Anything", ["Maybe", "Anything"], "Void"],
        // To make a canonical expression, don't canonicalize the args
        canonical: (ce, args) => ce._fn("Error", args)
      }
    },
    ErrorCode: {
      complexity: 500,
      hold: "all",
      signature: {
        domain: [
          "Function",
          "String",
          ["Maybe", ["Sequence", "Anything"]],
          "Anything"
        ],
        canonical: (ce, args) => {
          var _a, _b;
          const code = validateArgument(ce, args[0], "String").string;
          if (code === "incompatible-domain") {
            return ce._fn("ErrorCode", [
              ce.string(code),
              ce.domain((_a = args[1]) != null ? _a : "Anything"),
              ce.domain((_b = args[2]) != null ? _b : "Anything")
            ]);
          }
          return ce._fn("ErrorCode", args);
        }
      }
    },
    Hold: {
      hold: "all",
      signature: {
        domain: "Function",
        codomain: (ce, args) => args[0].symbol ? ce.domain("Symbol") : ce.domain("Anything"),
        // To make a canonical expression, don't canonicalize the args
        canonical: (ce, args) => args.length !== 1 ? ce._fn("Hold", validateArgumentCount(ce, args, 1)) : ce._fn("Hold", [validateArgument(ce, args[0], "Anything")])
      }
    },
    HorizontalSpacing: {
      signature: {
        domain: "Function",
        canonical: (ce, args) => {
          if (args.length === 2)
            return args[0].canonical;
          return ce.box(["Sequence"]);
        }
      }
    },
    Style: {
      complexity: 9e3,
      inert: true,
      signature: {
        domain: [
          "Function",
          "Anything",
          ["Maybe", "Dictionary"],
          // @todo
          "Anything"
        ]
      }
      // @todo: simplify: merge Style(Style(x, s1), s2),  Style(x) -> x
    }
  },
  {
    Apply: {
      signature: {
        domain: "Function",
        evaluate: (_ce, ops2) => apply(ops2[0], ops2.slice(1))
      }
    },
    About: { signature: { domain: "Function" } },
    Block: {
      /** Create a local scope. First argument is a dictionary of local variables.
       * They are evaluated in the context of the parent scope. The second argument
       * is an expression to be evaluated in the context of the new scope.
       * ["Block", ["List", ["Equal", "x", 1]], [...]]
       */
      signature: { domain: "Function" }
    },
    Derivative: {
      signature: {
        domain: ["Function", "Function", ["Maybe", "Number"], "Function"]
      }
    },
    Domain: {
      /** Return the domain of an expression */
      signature: {
        domain: ["Function", "Anything", "Domain"],
        canonical: (ce, ops2) => ce.domain(validateArgumentCount(ce, canonical(ops2), 1)[0])
      }
    },
    Evaluate: {
      hold: "all",
      signature: {
        domain: ["Function", "Anything", "Anything"],
        codomain: (_ce, args) => args[0].domain,
        canonical: (ce, ops2) => ce._fn("Evaluate", validateArgumentCount(ce, canonical(ops2), 1)),
        evaluate: (_ce, ops2) => ops2[0].evaluate()
      }
    },
    Head: {
      signature: {
        domain: "Function",
        evaluate: (ce, ops2) => {
          var _a;
          const op12 = ops2[0];
          if (typeof (op12 == null ? void 0 : op12.head) === "string")
            return ce.symbol(op12.head);
          return (_a = op12 == null ? void 0 : op12.head) != null ? _a : ce.symbol("Nothing");
        }
      }
    },
    Html: {
      signature: {
        domain: ["Function", "Value", "String"],
        evaluate: (ce, ops2) => {
          if (ops2.length === 0)
            return ce.string("");
          return ce.string("");
        }
      }
    },
    Lambda: {
      wikidata: "Q567612",
      hold: "all",
      signature: {
        domain: ["Function", "Anything", "Function"],
        codomain: (_ce, ops2) => ops2[0].domain,
        canonical: (ce, ops2) => ce._fn("Lambda", validateArgumentCount(ce, ops2, 1))
      }
    },
    Signatures: {
      signature: {
        domain: ["Function", "Symbol", ["Maybe", ["List", "Domain"]]],
        canonical: (ce, ops2) => {
          ops2 = validateArgumentCount(ce, ops2, 1);
          if (!ops2[0].symbol)
            return ce._fn("Signatures", [
              ce.error(
                ["incompatible-domain", "Symbol", ops2[0].domain],
                ops2[0]
              )
            ]);
          return ce._fn("Signatures", ops2);
        },
        evaluate: (ce, ops2) => {
          const name = ops2[0].symbol;
          if (!name)
            return ce.symbol("Nothing");
          const result = ce.lookupFunction(name);
          if (!result)
            return ce.symbol("Nothing");
          return ce.fn("List", [result.signature.domain]);
        }
      }
    },
    Subscript: {
      /**
       * The `Subscript` function can take several forms:
       *
       * If `op1` is a string, the string is interpreted as a number in
       * base `op2` (2 to 36).
       *
       * If `op1` is an indexable collection, `x`:
       * - `x_*` -> `At(x, *)`
       *
       * Otherwise:
       * - `x_0` -> Symbol "x_0"
       * - `x_n` -> Symbol "x_n"
       * - `x_{\text{max}}` -> Symbol `x_max`
       * - `x_{(n+1)}` -> `At(x, n+1)`
       * - `x_{n+1}` ->  `Subscript(x, n+1)`
       */
      // The last (subscript) argument can include a delimiter that
      // needs to be interpreted. Without the hold, it would get
      // removed during canonicalization.
      hold: "last",
      signature: {
        domain: ["Function", "Anything", "Anything", "Anything"],
        codomain: (_ce, args) => {
          if (args[0].isFunction)
            return args[0].domain;
          return args[0].domain;
        },
        canonical: (ce, args) => {
          var _a, _b, _c, _d;
          const op12 = args[0];
          const op22 = args[1];
          if (op12.string) {
            const base = asSmallInteger(op22);
            if (base !== null) {
              if (base > 1 && base <= 36) {
                const [value, rest] = fromDigits(op12.string, base);
                if (rest) {
                  return ce.error(
                    ["unexpected-digit", { str: rest[0] }],
                    ["Latex", ce.string(op12.string)]
                  );
                }
                return ce.number(value);
              }
            }
          }
          if (op12.symbol) {
            if ((_a = op12.symbolDefinition) == null ? void 0 : _a.at)
              return ce._fn("At", [op12, op22.canonical]);
            const sub2 = (_d = (_b = op22.string) != null ? _b : op22.symbol) != null ? _d : (_c = asSmallInteger(op22)) == null ? void 0 : _c.toString();
            if (sub2)
              return ce.symbol(op12.symbol + "_" + sub2);
          }
          if (op22.head === "Sequence")
            ce._fn("Subscript", [op12, ce._fn("List", op22.ops)]);
          return ce._fn("Subscript", args);
        }
      }
    },
    Symbol: {
      complexity: 500,
      description: "Construct a new symbol with a name formed by concatenating the arguments",
      threadable: true,
      hold: "all",
      signature: {
        domain: ["Function", ["Sequence", "Anything"], "Anything"],
        canonical: (ce, ops2) => {
          if (ops2.length === 0)
            return ce.symbol("Nothing");
          const arg = ops2.map(
            (x) => {
              var _a, _b, _c, _d;
              return (_d = (_c = (_a = x.symbol) != null ? _a : x.string) != null ? _c : (_b = asSmallInteger(x)) == null ? void 0 : _b.toString()) != null ? _d : "";
            }
          ).join("");
          if (arg.length > 0)
            return ce.symbol(arg);
          return ce.symbol("Nothing");
        }
        // Note: a `["Symbol"]` expression is never evaluated, it gets
        // transformed into something else (a symbol) during canonicalization
      }
    },
    Tail: {
      signature: {
        domain: ["Function", "Value", ["List", "Value"]],
        evaluate: (ce, ops2) => {
          var _a;
          return ops2[0] ? ce._fn("List", (_a = ops2[0].ops) != null ? _a : []) : ce._fn("List", []);
        }
      }
    },
    Timing: {
      description: "`Timing(expr)` evaluates `expr` and return a `Pair` of the number of second elapsed for the evaluation, and the value of the evaluation",
      signature: {
        domain: [
          "Function",
          "Value",
          ["Maybe", "Integer"],
          ["Tuple", "Value", "Number"]
        ],
        evaluate: (ce, ops2) => {
          var _a;
          if (ops2[1].symbol === "Nothing") {
            const start = globalThis.performance.now();
            const result2 = ops2[0].evaluate();
            const timing = 1e3 * (globalThis.performance.now() - start);
            return ce.pair(ce.number(timing), result2);
          }
          let n = Math.max(3, Math.round((_a = asSmallInteger(ops2[1])) != null ? _a : 3));
          let timings = [];
          let result;
          while (n > 0) {
            const start = globalThis.performance.now();
            result = ops2[0].evaluate();
            timings.push(1e3 * (globalThis.performance.now() - start));
            n -= 1;
          }
          const max2 = Math.max(...timings);
          const min2 = Math.min(...timings);
          timings = timings.filter((x) => x > min2 && x < max2);
          const sum2 = timings.reduce((acc, v) => acc + v, 0);
          if (sum2 === 0)
            return ce.pair(ce.number(max2), result);
          return ce.pair(ce.number(sum2 / timings.length), result);
        }
      }
    }
    // {name: 'Pattern',},
  },
  //
  // String-related
  //
  {
    FromDigits: {
      description: `\`FromDigits(s, base=10)\`       return an integer representation of the string \`s\` in base \`base\`.`,
      // @todo could accept `0xcafe`, `0b01010` or `(deadbeef)_16` as string formats
      // @todo could accept "roman"... as base
      // @todo could accept optional third parameter as the (padded) length of the output
      signature: {
        domain: ["Function", "String", ["Maybe", ["Range", 1, 36]], "Integer"],
        evaluate: (ce, ops2) => {
          const op12 = ops2[0];
          if (!op12.string)
            return ce.error(["incompatible-domain", "String", op12.domain], op12);
          const op22 = ops2[1];
          if (op22.isNothing)
            return ce.number(Number.parseInt(op12.string, 10));
          if (op22.numericValue === null) {
            return ce.error(["unexpected-base", op22.latex], op22);
          }
          const base = asFloat(op22);
          if (!Number.isInteger(base) || base < 2 || base > 36)
            return ce.error(["unexpected-base", base], op22);
          const [value, rest] = fromDigits(op12.string, base);
          if (rest)
            return ce.error(["unexpected-digit", { str: rest[0] }], {
              str: rest
            });
          return ce.number(value);
        }
      }
    },
    IntegerString: {
      description: `\`IntegerString(n, base=10)\`       return a string representation of the integer \`n\` in base \`base\`.`,
      // @todo could accept `0xcafe`, `0b01010` or `(deadbeef)_16` as string formats
      // @todo could accept "roman"... as base
      // @todo could accept optional third parameter as the (padded) length of the output
      signature: {
        domain: ["Function", "Integer", ["Maybe", "Integer"], "String"],
        evaluate: (ce, ops2) => {
          var _a, _b;
          const op12 = ops2[0];
          const val = (_a = asFloat(op12)) != null ? _a : NaN;
          if (Number.isNaN(val) || !Number.isInteger(val)) {
            return ce.error(
              ["incompatible-domain", "Integer", op12.domain],
              op12
            );
          }
          const op22 = ops2[1];
          if (op22.isNothing) {
            const op1Num = op12.numericValue;
            if (typeof op1Num === "number")
              return ce.string(Math.abs(op1Num).toString());
            if (op1Num instanceof decimal_default)
              return ce.string(op1Num.abs().toString());
            return ce.string(
              Math.abs(Math.round((_b = asFloat(op12)) != null ? _b : NaN)).toString()
            );
          }
          if (asSmallInteger(op22) === null) {
            return ce.error(
              ["incompatible-domain", "Integer", op22.domain],
              op22
            );
          }
          const base = asSmallInteger(op22);
          if (base < 2 || base > 36)
            return ce.error(["out-of-range", 2, 36, base], op22);
          return ce.string(Math.abs(val).toString(base));
        }
      }
    },
    String: {
      threadable: true,
      signature: {
        domain: ["Function", ["Maybe", "Anything"], "String"],
        evaluate: (ce, ops2) => {
          if (ops2.length === 0)
            return ce.string("");
          return ce.string(ops2.map((x) => {
            var _a;
            return (_a = x.string) != null ? _a : x.toString();
          }).join(""));
        }
      }
    }
  },
  //
  // LaTeX-related
  //
  {
    // Join or more LatexTokens into a LaTeX string
    JoinLatexTokens: {
      signature: {
        domain: ["Function", ["Maybe", ["Sequence", "Anything"]], "String"],
        evaluate: (ce, ops2) => {
          return ce.fn("Latex", [
            ce.string(tokensToString(ops2.map((x) => {
              var _a;
              return (_a = x.string) != null ? _a : x.latex;
            })))
          ]);
        }
      }
    },
    // Value preserving type conversion/tag indicating the string
    // is a LaTeX string
    Latex: {
      signature: {
        domain: ["Function", ["Maybe", ["Sequence", "Anything"]], "String"],
        evaluate: (ce, ops2) => {
          if (ops2.length === 0)
            return ce.string("");
          return ce.string(joinLatex(ops2.map((x) => {
            var _a;
            return (_a = x.string) != null ? _a : x.toString();
          })));
        }
      }
    },
    // Serialize one or more expressions to LaTeX
    SerializeLatex: {
      hold: "all",
      signature: {
        domain: ["Function", ["Maybe", ["Sequence", "Anything"]], "String"],
        evaluate: (ce, ops2) => ce.fn("Latex", [ce.string(joinLatex(ops2.map((x) => x.latex)))])
      }
    },
    SplitAsLatexTokens: {
      description: "Split a LaTeX string into a list of LaTeX tokens",
      hold: "all",
      signature: {
        domain: ["Function", ["Maybe", "Anything"], ["List", "String"]],
        evaluate: (ce, ops2) => {
          var _a;
          if (ops2.length === 0)
            return ce._fn("List", []);
          let latex = "";
          if (ops2[0].head === "Latex")
            latex = (_a = ops2[0].op1.string) != null ? _a : "";
          else if (ops2[0].head === "LatexString")
            latex = joinLatex(ops2[0].ops.map((op3) => op3.latex));
          else
            latex = ops2[0].latex;
          return ce._fn(
            "List",
            tokenize(latex, []).map((x) => ce.string(x))
          );
        }
      }
    },
    ParseLatex: {
      description: "Parse a LaTeX string and evaluate to a corresponding expression",
      signature: {
        domain: ["Function", ["Maybe", "String"], "Anything"],
        evaluate: (ce, ops2) => {
          var _a;
          if (ops2.length === 0 || !ops2[0].string)
            return ce.box(["Sequence"]);
          return (_a = ce.parse(ops2[0].string)) != null ? _a : ce.box(["Sequence"]);
        }
      }
    }
  },
  {
    RandomExpression: {
      signature: {
        domain: "Function",
        evaluate: (ce, _ops) => ce.box(randomExpression())
      }
    }
  }
];
var LOGIC_LIBRARY = {
  True: { wikidata: "Q16751793", domain: "Boolean", constant: true },
  False: {
    wikidata: "Q5432619",
    domain: "Boolean",
    constant: true
  },
  Maybe: {
    wikidata: "Q781546",
    domain: "MaybeBoolean",
    constant: true
  },
  // @todo: specify a `canonical` function that converts boolean
  // expressions into CNF (Conjunctive Normal Form)
  // https://en.wikipedia.org/wiki/Conjunctive_normal_form
  // using rules (with a rule set that's kinda the inverse of the
  // logic rules for simplify)
  And: {
    wikidata: "Q191081",
    threadable: true,
    associative: true,
    commutative: true,
    idempotent: true,
    complexity: 1e4,
    signature: {
      domain: "LogicOperator",
      simplify: processAnd,
      evaluate: processAnd
    }
  },
  Or: {
    wikidata: "Q1651704",
    threadable: true,
    associative: true,
    commutative: true,
    idempotent: true,
    complexity: 1e4,
    signature: {
      domain: "LogicOperator",
      simplify: processOr,
      evaluate: processOr
    }
  },
  Not: {
    wikidata: "Q190558",
    involution: true,
    complexity: 10100,
    // @todo: this may not be needed, since we also have rules.
    signature: {
      domain: "LogicOperator",
      simplify: processNot,
      evaluate: processNot
    }
  },
  Equivalent: {
    wikidata: "Q220433",
    complexity: 10200,
    signature: {
      domain: "LogicOperator",
      simplify: processEquivalent,
      evaluate: processEquivalent
    }
  },
  Implies: {
    wikidata: "Q7881229",
    complexity: 10200,
    signature: {
      domain: "LogicOperator",
      simplify: processImplies,
      evaluate: processImplies
    }
  },
  Exists: { signature: { domain: "MaybeBoolean" } },
  If: {
    hold: "rest",
    signature: {
      domain: "Function",
      codomain: (ce, ops2) => ce.domain(["Union", ops2[0], ops2[1]]),
      simplify: (ce, ops2) => {
        const cond = ops2[0];
        if (cond && cond.symbol === "True")
          return ops2[1] ? ops2[1].simplify() : ce.box("Nothing");
        return ops2[2] ? ops2[2].simplify() : ce.box("Nothing");
      },
      evaluate: (ce, ops2) => {
        const cond = ops2[0];
        if (cond && cond.symbol === "True")
          return ops2[1] ? ops2[1].evaluate() : ce.box("Nothing");
        return ops2[2] ? ops2[2].evaluate() : ce.box("Nothing");
      },
      // @todo: probably don't need a N() handler. Doesn't make a difference
      // for the evaluation of booleans. Also, don't need to call N() on the
      // arguments, the caller should have done that. Same for evaluate()
      // and simplify() above
      N: (ce, ops2) => {
        const cond = ops2[0];
        if (cond && cond.symbol === "True")
          return ops2[1] ? ops2[1].N() : ce.box("Nothing");
        return ops2[2] ? ops2[2].N() : ce.box("Nothing");
      }
    }
  },
  Loop: {
    hold: "all",
    signature: {
      domain: "Function",
      simplify: (ce, ops2) => {
        var _a, _b;
        return (_b = (_a = ops2[0]) == null ? void 0 : _a.simplify()) != null ? _b : ce.box("Nothing");
      },
      evaluate: (ce, ops2) => {
        var _a;
        const body = (_a = ops2[0]) != null ? _a : ce.box("Nothing");
        if (body.isNothing)
          return body;
        let result;
        let i = 0;
        do {
          result = body.evaluate();
          i += 1;
        } while (result.head !== "Return" && i < ce.iterationLimit);
        if (result.head === "Return")
          return result.op1;
        return ce.error("iteration-limit-exceeded");
      },
      N: (ce, ops2) => {
        const cond = ops2[0];
        if (cond && cond.symbol === "True")
          return ops2[1] ? ops2[1].N() : ce.box("Nothing");
        return ops2[2] ? ops2[2].N() : ce.box("Nothing");
      }
    }
  },
  Which: {
    hold: "all",
    signature: {
      domain: "Function",
      codomain: (ce, ops2) => domainWhich(ce, ops2),
      evaluate: (ce, ops2) => whichEvaluate(ce, ops2, "evaluate"),
      N: (ce, ops2) => whichEvaluate(ce, ops2, "N")
    }
  }
};
function processAnd(ce, args) {
  if (args.length === 0)
    return ce.symbol("True");
  const ops2 = [];
  for (const arg of args) {
    if (arg.symbol === "False")
      return ce.symbol("False");
    if (arg.symbol !== "True") {
      let duplicate = false;
      for (const x of ops2) {
        if (x.isSame(arg)) {
          duplicate = true;
        } else if (arg.head === "Not" && arg.op1.isSame(x) || x.head === "Not" && x.op1.isSame(arg)) {
          return ce.symbol("False");
        }
      }
      if (!duplicate)
        ops2.push(arg);
    }
  }
  if (ops2.length === 0)
    return ce.symbol("True");
  if (ops2.length === 1)
    return ops2[0];
  return ce._fn("And", ops2);
}
function processOr(ce, args) {
  if (args.length === 0)
    return ce.symbol("True");
  const ops2 = [];
  for (const arg of args) {
    if (arg.symbol === "True")
      return ce.symbol("True");
    if (arg.symbol !== "False") {
      let duplicate = false;
      for (const x of ops2) {
        if (x.isSame(arg)) {
          duplicate = true;
        } else if (arg.head === "Not" && arg.op1.isSame(x) || x.head === "Not" && x.op1.isSame(arg)) {
          return ce.symbol("True");
        }
      }
      if (!duplicate)
        ops2.push(arg);
    }
  }
  if (ops2.length === 0)
    return ce.symbol("True");
  if (ops2.length === 1)
    return ops2[0];
  return ce._fn("Or", ops2);
}
function processNot(ce, args) {
  const op12 = args[0].symbol;
  if (op12 === "True")
    return ce.symbol("False");
  if (op12 === "False")
    return ce.symbol("True");
  if (op12 === "Maybe")
    return ce.symbol("Maybe");
  return void 0;
}
function processEquivalent(ce, args) {
  const lhs = args[0].symbol;
  const rhs = args[1].symbol;
  if (lhs === "True" && rhs === "True" || lhs === "False" && rhs === "False")
    return ce.symbol("True");
  if (lhs === "True" && rhs === "False" || lhs === "False" && rhs === "True")
    return ce.symbol("False");
  if (lhs === "Maybe" || rhs === "Maybe")
    return ce.symbol("Maybe");
  return void 0;
}
function processImplies(ce, args) {
  const lhs = args[0].symbol;
  const rhs = args[1].symbol;
  if (lhs === "True" && rhs === "True" || lhs === "False" && rhs === "False" || lhs === "False" && rhs === "True")
    return ce.symbol("True");
  if (lhs === "True" && rhs === "False")
    return ce.symbol("False");
  if (lhs === "Maybe" || rhs === "Maybe")
    return ce.symbol("Maybe");
  return void 0;
}
function domainWhich(ce, args) {
  let dom = null;
  for (let i = 1; i <= args.length - 1; i += 2) {
    if (!dom)
      dom = args[i].domain;
    else
      dom = sharedAncestorDomain(dom, args[i].domain);
  }
  return dom != null ? dom : ce.domain("Nothing");
}
function whichEvaluate(ce, args, mode) {
  let i = 0;
  while (i < args.length - 1) {
    if (args[i].evaluate().symbol === "True") {
      if (!args[i + 1])
        return ce.symbol("Undefined");
      return mode === "N" ? args[i + 1].N() : args[i + 1].evaluate();
    }
    i += 2;
  }
  return ce.symbol("Undefined");
}
var POLYNOMIALS_LIBRARY = [
  {
    Expand: {
      description: "Expand out products and positive integer powers",
      signature: {
        domain: ["Function", "Value", "Value"],
        evaluate: (_ce, ops2) => {
          var _a;
          return (_a = expand2(ops2[0])) != null ? _a : ops2[0];
        }
      }
    },
    Distribute: {
      description: "Distribute multiplication over addition",
      signature: {
        domain: ["Function", "Value", "Value"],
        evaluate: (ce, ops2) => {
          var _a, _b;
          const h = ops2[0].head;
          if (h === "Multiply")
            return (_a = distribute(ops2[0].ops)) != null ? _a : ops2[0];
          if (h === "Negate")
            return (_b = distribute([ce._NEGATIVE_ONE, ...ops2[0].ops])) != null ? _b : ops2[0];
          if (h === "Divide" && ops2[0].ops[0].head === "Multiply") {
            const numerator = distribute(ops2[0].ops);
            const denominator = ops2[0].ops[1];
            if (numerator) {
              if (numerator.head === "Add")
                return ce.add(
                  numerator.ops.map((x) => ce.div(x, denominator))
                );
              return ce.div(numerator, denominator);
            }
          }
          return ops2[0];
        }
      }
    }
  }
];
var RELOP_LIBRARY = {
  Equal: {
    commutative: true,
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, ops2) => {
        return ce._fn(
          "Equal",
          flattenOps(canonical(flattenSequence(ops2)), "Equal")
        );
      },
      evaluate: (ce, ops2) => {
        if (ops2.length < 2)
          return ce.symbol("True");
        let lhs = void 0;
        for (const arg of ops2) {
          if (!lhs)
            lhs = arg;
          else {
            const test = lhs.isEqual(arg);
            if (test !== true)
              return ce.symbol("False");
          }
        }
        return ce.symbol("True");
      }
    }
  },
  NotEqual: {
    wikidata: "Q28113351",
    commutative: true,
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      evaluate: (ce, ops2) => {
        if (ops2.length < 2)
          return ce.symbol("False");
        let lhs = void 0;
        for (const arg of ops2) {
          if (!lhs)
            lhs = arg;
          else {
            const test = lhs.isEqual(arg);
            if (test === true)
              return ce.symbol("False");
          }
        }
        return ce.symbol("True");
      }
    }
  },
  Less: {
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, ops2) => ce._fn("Less", flattenOps(canonical(flattenSequence(ops2)), "Less")),
      evaluate: (ce, ops2) => {
        if (ops2.length < 2)
          return ce.symbol("True");
        let lhs = void 0;
        for (const arg of ops2) {
          if (!arg.isNumber)
            return void 0;
          if (!lhs)
            lhs = arg;
          else {
            const test = ce.fn("Subtract", [arg, lhs]).N().sgn;
            if (test === null || test === void 0)
              return void 0;
            if (test <= 0)
              return ce.symbol("False");
            lhs = arg;
          }
        }
        return ce.symbol("True");
      }
    }
  },
  NotLess: {
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("Less", args)])
    }
  },
  Greater: {
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Less", args.reverse()),
      evaluate: (ce, ops2) => {
        if (ops2.length < 2)
          return ce.symbol("True");
        let lhs = void 0;
        for (const arg of ops2) {
          if (!arg.isNumber)
            return void 0;
          if (!lhs)
            lhs = arg;
          else {
            const test = ce.fn("Subtract", [arg, lhs]).N().sgn;
            if (test === null || test === void 0)
              return void 0;
            if (test >= 0)
              return ce.symbol("False");
            lhs = arg;
          }
        }
        return ce.symbol("True");
      }
    }
  },
  NotGreater: {
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("Greater", args)])
    }
  },
  LessEqual: {
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      evaluate: (ce, ops2) => {
        if (ops2.length < 2)
          return ce.symbol("True");
        let lhs = void 0;
        for (const arg of ops2) {
          if (!arg.isNumber)
            return void 0;
          if (!lhs)
            lhs = arg;
          else {
            const test = ce.fn("Subtract", [arg, lhs]).N().sgn;
            if (test === null || test === void 0)
              return void 0;
            if (test < 0)
              return ce.symbol("False");
            lhs = arg;
          }
        }
        return ce.symbol("True");
      }
    }
  },
  NotLessNotEqual: {
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("LessEqual", args)])
    }
  },
  GreaterEqual: {
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("LessEqual", args.reverse()),
      evaluate: (ce, ops2) => {
        if (ops2.length < 2)
          return ce.symbol("True");
        let lhs = void 0;
        for (const arg of ops2) {
          if (!arg.isNumber)
            return void 0;
          if (!lhs)
            lhs = arg;
          else {
            const test = ce.fn("Subtract", [arg, lhs]).N().sgn;
            if (test === null || test === void 0)
              return void 0;
            if (test > 0)
              return ce.symbol("False");
            lhs = arg;
          }
        }
        return ce.symbol("True");
      }
    }
  },
  NotGreaterNotEqual: {
    complexity: 11e3,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("GreaterEqual", args)])
    }
  },
  TildeFullEqual: {
    description: "Indicate isomorphism, congruence and homotopic equivalence",
    signature: { domain: "RelationalOperator" }
    // @todo evaluate: (ce, ...args: BoxedExpression[]) => SemiBoxedExpression {}
  },
  NotTildeFullEqual: {
    complexity: 11100,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("TildeFullEqual", args)])
    }
  },
  TildeEqual: {
    description: "Approximately or asymptotically equal",
    complexity: 11e3,
    signature: { domain: "RelationalOperator" }
    // @todo evaluate: (ce, ...args: BoxedExpression[]) => SemiBoxedExpression {}
  },
  NotTildeEqual: {
    complexity: 11100,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("TildeEqual", args)])
    }
  },
  Approx: {
    complexity: 11100,
    signature: { domain: "RelationalOperator" }
    // @todo evaluate: (ce, ...args: BoxedExpression[]) => SemiBoxedExpression {}
  },
  NotApprox: {
    complexity: 11100,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("Approx", args)])
    }
  },
  ApproxEqual: {
    complexity: 11100,
    signature: { domain: "RelationalOperator" }
    // @todo evaluate: (ce, ...args: BoxedExpression[]) => SemiBoxedExpression {}
  },
  NotApproxEqual: {
    complexity: 11100,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("ApproxEqual", args)])
    }
  },
  ApproxNotEqual: {
    complexity: 11100,
    signature: { domain: "RelationalOperator" }
    // @todo evaluate: (ce, ...args: BoxedExpression[]) => SemiBoxedExpression {}
  },
  NotApproxNotEqual: {
    complexity: 11100,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("ApproxNotEqual", args)])
    }
  },
  Precedes: {
    complexity: 11100,
    signature: { domain: "RelationalOperator" }
    // @todo evaluate: (ce, ...args: BoxedExpression[]) => SemiBoxedExpression {}
  },
  NotPrecedes: {
    complexity: 11100,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("Precedes", args)])
    }
  },
  Succeeds: {
    signature: { domain: "RelationalOperator" }
    // @todo evaluate: (ce, ...args: BoxedExpression[]) => SemiBoxedExpression {}
  },
  NotSucceeds: {
    complexity: 11100,
    signature: {
      domain: "RelationalOperator",
      canonical: (ce, args) => ce._fn("Not", [ce._fn("Succeeds", args)])
    }
  }
};
var SETS_LIBRARY = {
  //
  // Constants
  //
  EmptySet: {
    domain: "Set",
    constant: true,
    wikidata: "Q226183"
    // contains: () => false, // @todo not quite true...
    // includes: () => true, // The empty set is a subset of every set
  },
  //
  // Predicates
  //
  Element: {
    complexity: 11200,
    hold: "all",
    signature: {
      domain: "Predicate",
      canonical: (ce, args) => {
        args = validateArgumentCount(ce, flattenSequence(canonical(args)), 2);
        if (args.length === 2 && isValidDomain(args[1]))
          return ce._fn("Element", [args[0], ce.domain(args[1])]);
        return ce._fn("Element", args);
      },
      evaluate: (ce, args) => evaluateElement(ce, args)
    }
  },
  NotElement: {
    complexity: 11200,
    hold: "all",
    signature: {
      domain: "Predicate",
      canonical: (ce, args) => ce.fn("Not", [ce.fn("Element", args)])
    }
  },
  Subset: {
    complexity: 11200,
    signature: { domain: "Predicate" }
  },
  NotSubset: {
    complexity: 11200,
    signature: {
      domain: "Predicate",
      canonical: (ce, args) => ce.fn("Not", [ce.fn("Subset", args)])
    }
  },
  Superset: {
    complexity: 11200,
    signature: { domain: "Predicate" }
  },
  SupersetEqual: {
    complexity: 11200,
    signature: { domain: "Predicate" }
  },
  NotSuperset: {
    complexity: 11200,
    signature: {
      domain: "Predicate",
      canonical: (ce, args) => ce.fn("Not", [ce.fn("Superset", args)])
    }
  },
  NotSupersetEqual: {
    complexity: 11200,
    signature: {
      domain: "Predicate",
      canonical: (ce, args) => ce.fn("Not", [ce.fn("SupersetEqual", args)])
    }
  },
  SubsetEqual: {
    complexity: 11200,
    signature: { domain: "Predicate" }
    // evaluate: subsetEqual,
  },
  NotSubsetNotEqual: {
    complexity: 11200,
    signature: {
      domain: "Predicate",
      canonical: (ce, args) => ce.fn("Not", [ce.fn("SubsetEqual", args)])
    }
  },
  //
  // Functions
  //
  CartesianProduct: {
    // Aka the product set, the set direct product or cross product
    // Notation: \times
    wikidata: "Q173740",
    signature: { domain: ["Function", "Set", ["Sequence", "Set"], "Set"] }
    // evaluate: cartesianProduct,
  },
  Complement: {
    // Return the elements of the first argument that are not in any of
    // the subsequent lists
    wikidata: "Q242767",
    signature: { domain: ["Function", "Set", "Set"] }
  },
  Intersection: {
    // notation: \cap
    wikidata: "Q185837",
    threadable: true,
    associative: true,
    commutative: true,
    involution: true,
    signature: {
      domain: ["Function", "Set", ["Sequence", "Set"], "Set"],
      evaluate: intersection
    }
  },
  Union: {
    // Works on set, but can also work on lists
    wikidata: "Q185359",
    threadable: true,
    associative: true,
    commutative: true,
    involution: true,
    signature: {
      domain: ["Function", "Set", ["Sequence", "Set"], "Set"],
      evaluate: union
    }
  },
  // {
  //   name: 'Set',
  //   domain: ['Function', ['Sequence', 'Anything'], 'Set'],
  //   // @todo! set has multiple forms
  //   // Set(Sequence)
  //   // Set(Sequence, Condition)
  //   // Set(Set, Condition)
  // }, // disjoint union Q842620 ⊔
  SetMinus: {
    wikidata: "Q18192442",
    signature: {
      domain: ["Function", "Set", "Value", "Set"],
      evaluate: setMinus
    }
  },
  SymmetricDifference: {
    // symmetric difference = disjunctive union  (circled minus)
    /* = Union(Complement(a, b), Complement(b, a) */
    /* Corresponds to XOR in boolean logic */
    wikidata: "Q1147242",
    signature: { domain: ["Function", "Set", ["Sequence", "Set"], "Set"] }
  }
};
function union(ce, _ops) {
  return ce.symbol("False");
}
function intersection(ce, _ops) {
  return ce.symbol("EmptySet");
}
function setMinus(ce, _ops) {
  return ce.symbol("EmptySet");
}
function evaluateElement(ce, ops2) {
  /* @__PURE__ */ console.assert(ops2.length === 2);
  const [lhs, rhs] = ops2;
  if (rhs.string) {
    if (lhs.string && rhs.string.includes(lhs.string))
      return ce.symbol("True");
    return ce.symbol("False");
  }
  if (rhs.keys) {
    if (lhs.string) {
      for (const key of rhs.keys)
        if (key === lhs.string)
          return ce.symbol("True");
    }
    return ce.symbol("False");
  }
  if (rhs.head === "List") {
    if (lhs.head === "List") {
      let found = false;
      for (let i = 0; i < 1 + (rhs.nops - lhs.nops); ++i) {
        found = true;
        for (let j = 0; j < lhs.nops; ++j) {
          if (!rhs.ops[i + j].isEqual(lhs.ops[j])) {
            found = false;
            break;
          }
        }
        if (found)
          return ce.symbol("True");
      }
      return ce.symbol("False");
    }
    const val = lhs.head === "Hold" ? lhs.op1 : lhs;
    for (const elem of rhs.ops)
      if (val.isEqual(elem))
        return ce.symbol("True");
    return ce.symbol("False");
  }
  if (isValidDomain(rhs)) {
    if (lhs.domain.isCompatible(ce.domain(rhs)))
      return ce.symbol("True");
    return ce.symbol("False");
  }
  return ce._fn("Element", [lhs, rhs]);
}
var STATISTICS_LIBRARY = [
  {
    Mean: {
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        evaluate: (ce, ops2) => {
          let sum2 = 0;
          let count = 0;
          for (const op3 of each(ops2)) {
            const v = asFloat(op3);
            if (v === null)
              return void 0;
            sum2 += v;
            count++;
          }
          if (count === 0)
            return ce._NAN;
          return ce.number(sum2 / count);
        }
      }
    },
    Median: {
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        evaluate: (ce, ops2) => {
          const values = [];
          for (const op3 of each(ops2)) {
            const v = asFloat(op3);
            if (v === null)
              return void 0;
            values.push(v);
          }
          if (values.length === 0)
            return ce._NAN;
          values.sort((a, b) => a - b);
          const mid = Math.floor(values.length / 2);
          if (values.length % 2 === 0)
            return ce.number((values[mid - 1] + values[mid]) / 2);
          return ce.number(values[mid]);
        }
      }
    },
    Variance: {
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        evaluate: (ce, ops2) => {
          let sum2 = 0;
          let sum22 = 0;
          let count = 0;
          for (const op3 of each(ops2)) {
            const v = asFloat(op3);
            if (v === null)
              return void 0;
            sum2 += v;
            sum22 += v * v;
            count++;
          }
          if (count === 0)
            return ce._NAN;
          return ce.number((sum22 - sum2 * sum2 / count) / (count - 1));
        }
      }
    },
    StandardDeviation: {
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        evaluate: (ce, ops2) => {
          let sum2 = 0;
          let sum22 = 0;
          let count = 0;
          for (const op3 of each(ops2)) {
            const v = asFloat(op3);
            if (v === null)
              return void 0;
            sum2 += v;
            sum22 += v * v;
            count++;
          }
          if (count === 0)
            return ce._NAN;
          return ce.number(
            Math.sqrt((sum22 - sum2 * sum2 / count) / (count - 1))
          );
        }
      }
    },
    Kurtosis: {
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        evaluate: (ce, ops2) => {
          let sum2 = 0;
          let sum22 = 0;
          let sum4 = 0;
          let count = 0;
          for (const op3 of each(ops2)) {
            const v = asFloat(op3);
            if (v === null)
              return void 0;
            sum2 += v;
            sum22 += v * v;
            sum4 += v * v * v * v;
            count++;
          }
          if (count === 0)
            return ce._NAN;
          const s2 = (sum22 - sum2 * sum2 / count) / (count - 1);
          const s4 = (sum4 - sum22 * sum22 / count) / (count - 1);
          return ce.number((s4 / (s2 * s2) - 3) * (count * (count + 1)) / 6);
        }
      }
    },
    Skewness: {
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        evaluate: (ce, ops2) => {
          let sum2 = 0;
          let sum22 = 0;
          let sum3 = 0;
          let count = 0;
          for (const op3 of each(ops2)) {
            const v = asFloat(op3);
            if (v === null)
              return void 0;
            sum2 += v;
            sum22 += v * v;
            sum3 += v * v * v;
            count++;
          }
          if (count === 0)
            return ce._NAN;
          const s2 = (sum22 - sum2 * sum2 / count) / (count - 1);
          const s3 = (sum3 - sum22 * sum2 / count) / (count - 1);
          return ce.number(s3 / Math.pow(s2, 3 / 2) * Math.sqrt(count * 1));
        }
      }
    },
    Mode: {
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        evaluate: (ce, ops2) => {
          var _a;
          const values = [];
          for (const op3 of each(ops2)) {
            const v = asFloat(op3);
            if (v === null)
              return void 0;
            values.push(v);
          }
          if (values.length === 0)
            return ce._NAN;
          values.sort((a, b) => a - b);
          const counts = {};
          for (const v of values) {
            counts[v] = ((_a = counts[v]) != null ? _a : 0) + 1;
          }
          let max2 = 0;
          let mode = values[0];
          for (const v of values) {
            const c = counts[v];
            if (c > max2) {
              max2 = c;
              mode = v;
            }
          }
          return ce.number(mode);
        }
      }
    },
    Quartiles: {
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "List"],
        evaluate: (ce, ops2) => {
          const values = [];
          for (const op3 of each(ops2)) {
            const v = asFloat(op3);
            if (v === null)
              return void 0;
            values.push(v);
          }
          if (values.length === 0)
            return ce._NAN;
          values.sort((a, b) => a - b);
          const mid = Math.floor(values.length / 2);
          const lower = values.slice(0, mid);
          const upper = values.slice(mid + 1);
          return ce.box([
            "List",
            ce.number(values[mid]),
            ce.number(lower[Math.floor(lower.length / 2)]),
            ce.number(upper[Math.floor(upper.length / 2)])
          ]);
        }
      }
    },
    InterquartileRange: {
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        evaluate: (ce, ops2) => {
          const values = [];
          for (const op3 of each(ops2)) {
            const v = asFloat(op3);
            if (v === null)
              return void 0;
            values.push(v);
          }
          if (values.length === 0)
            return ce._NAN;
          values.sort((a, b) => a - b);
          const mid = Math.floor(values.length / 2);
          const lower = values.slice(0, mid);
          const upper = values.slice(mid + 1);
          return ce.number(
            upper[Math.floor(upper.length / 2)] - lower[Math.floor(lower.length / 2)]
          );
        }
      }
    },
    Count: {
      threadable: true,
      complexity: 1200,
      signature: {
        domain: ["Function", ["Sequence", "Value"], "Number"],
        evaluate: (ce, ops2) => {
          let count = 0;
          for (const _op of each(ops2))
            count++;
          return ce.number(count);
        }
      }
    },
    Erf: {
      complexity: 7500,
      signature: {
        domain: ["Function", "Number", "Number"],
        evaluate: (ce, ops2) => {
          const x = asFloat(ops2[0]);
          if (x === null)
            return void 0;
          return ce.number(erf(x));
        }
      }
    },
    Erfc: {
      complexity: 7500,
      signature: {
        domain: ["Function", "Number", "Number"],
        evaluate: (ce, ops2) => {
          const x = asFloat(ops2[0]);
          if (x === null)
            return void 0;
          return ce.number(1 - erf(x));
        }
      }
    }
  }
];
function* each(ops2) {
  var _a, _b, _c, _d, _e;
  if (ops2.length === 0)
    return;
  const ce = ops2[0].engine;
  for (const op3 of ops2) {
    const h = op3.head;
    if (h === "Range") {
      let lower = asFloat(op3[1]);
      if (lower === null)
        return;
      let upper = asFloat(op3[2]);
      if (upper === null) {
        upper = lower;
        lower = 1;
      }
      if (lower > upper) {
        const step2 = (_b = asFloat((_a = op3[3]) != null ? _a : -1)) != null ? _b : -1;
        if (step2 >= 0)
          return;
        for (let i = lower; i <= upper; i += step2)
          yield ce.number(i);
        return;
      }
      const step = (_d = asFloat((_c = op3[3]) != null ? _c : 1)) != null ? _d : 1;
      if (step <= 0)
        return;
      for (let i = lower; i <= upper; i += step)
        yield ce.number(i);
      return;
    }
    if (h === "Linspace") {
      let start = asFloat(op3[1]);
      if (start === null)
        return;
      let stop = asFloat(op3[2]);
      if (stop === null) {
        stop = start;
        start = 0;
      }
      const num = (_e = asFloat(op3[3])) != null ? _e : 50;
      if (!Number.isInteger(num))
        return;
      if (num <= 0)
        return;
      const step = (stop - start) / (num - 1);
      for (let i = start; i <= stop; i += step)
        yield ce.number(i);
      return;
    }
    if (typeof h === "string" && /^(List|Sequence|Tuple|Single|Pair|Triple)$/.test(h)) {
      yield* each(op3.ops);
      return;
    }
    yield op3;
  }
}
var domainNumberToRealNumber = (_head) => {
  return ["Function", "Number", "ExtendedRealNumber"];
};
var trigFunction = (_head) => {
  return ["Function", "Number", "Number"];
};
var hyperbolicFunction = (_head) => {
  return ["Function", "Number", "Number"];
};
var TRIGONOMETRY_LIBRARY = [
  {
    //
    // Constants
    //
    Pi: {
      domain: "TranscendentalNumber",
      flags: { algebraic: false },
      constant: true,
      holdUntil: "N",
      wikidata: "Q167",
      value: (engine) => bignumPreferred(engine) ? engine._BIGNUM_PI : Math.PI
    }
  },
  {
    // sqrt(x*x + y*y)
    Degrees: {
      /* = Pi / 180 */
      signature: {
        domain: ["Function", "Number", "Number"],
        canonical: (ce, ops2) => {
          ops2 = validateArguments(ce, flattenSequence(canonical(ops2)), [
            "Number"
          ]);
          if (ops2.length !== 1)
            return ce.fn("Degrees", ops2, { canonical: false });
          const arg = ops2[0];
          if (arg.numericValue === null || !arg.isValid)
            return ce.fn("Degrees", ops2, { canonical: false });
          return ce.div(ce.mul([arg, ce.symbol("Pi")]), ce.number(180));
        },
        evaluate: (ce, ops2) => ce.mul([ops2[0], ce.div(ce.symbol("Pi"), ce.number(180))])
      }
    },
    Hypot: {
      signature: {
        domain: ["Function", "Number", "Number", "NonNegativeNumber"],
        simplify: (ce, ops2) => ce.box(["Sqrt", ["Add", ["Square", ops2[0]], ["Square", ops2[1]]]]).simplify(),
        evaluate: [
          "Lambda",
          ["Sqrt", ["Add", ["Square", "_1"], ["Square", "_2"]]]
        ]
      }
    },
    Sin: {
      complexity: 5e3,
      signature: {
        domain: ["Function", "Number", ["Interval", -1, 1]],
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Sin", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : complexAllowed(ce) ? ce.box([
            "Divide",
            [
              "Subtract",
              ["Exp", ["Multiply", "ImaginaryUnit", ops2[0]]],
              ["Exp", ["Multiply", "ImaginaryUnit", ["Negate", ops2[0]]]]
            ],
            ["Complex", 0, 2]
          ]).simplify() : void 0;
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Sin", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Sin", ops2[0])
      }
    }
  },
  {
    //
    // Basic trigonometric function
    // (may be used in the definition of other functions below)
    //
    Arctan: {
      wikidata: "Q2257242",
      complexity: 5200,
      signature: {
        domain: domainNumberToRealNumber("Arctan"),
        simplify: (ce, ops2) => {
          var _a;
          return (_a = constructibleValues(ce, "Arctan", ops2[0])) == null ? void 0 : _a.simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arctan", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arctan", ops2[0])
      }
    },
    Arctan2: {
      wikidata: "Q776598",
      complexity: 5200,
      signature: {
        domain: ["Function", "Number", "Number", "Number"],
        N: (_ce, ops2) => apply2N(ops2[0], ops2[1], Math.atan2, (a, b) => Decimal.atan2(a, b))
      }
    },
    Cos: {
      complexity: 5050,
      signature: {
        domain: ["Function", "Number", ["Interval", -1, 1]],
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Cos", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Sin", ["Add", ops2[0], ["Multiply", "Half", "Pi"]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Cos", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Cos", ops2[0])
      }
    },
    Tan: {
      // Range: 'RealNumber',
      complexity: 5100,
      signature: {
        domain: trigFunction("Tan"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Tan", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Divide", ["Sin", ops2[0]], ["Cos", ops2[0]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Tan", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Tan", ops2[0])
      }
    }
    /* converts (x, y) -> (radius, angle) */
    // ToPolarCoordinates: {
    //   domain: 'Function',
    //   outputDomain: ['TupleOf', 'RealNumber', 'RealNumber'],
    // }
  },
  //
  // Functions defined using arithmetic functions or basic
  // trigonometric functions above
  //
  {
    Arcosh: {
      complexity: 6200,
      signature: {
        domain: hyperbolicFunction("Arcosh"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Arcosh", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box([
            "Ln",
            ["Add", ops2[0], ["Sqrt", ["Subtract", ["Square", ops2[0]], 1]]]
          ]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arcosh", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arcosh", ops2[0])
      }
    },
    Arcsin: {
      complexity: 5500,
      signature: {
        domain: hyperbolicFunction("Arcsin"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Arcsin", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box([
            "Multiply",
            2,
            [
              "Arctan2",
              ops2[0],
              ["Add", 1, ["Sqrt", ["Subtract", 1, ["Square", ops2[0]]]]]
            ]
          ]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arcsin", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arcsin", ops2[0])
      }
    },
    //Note: Arsinh, not ArCsinh
    Arsinh: {
      complexity: 6100,
      signature: {
        domain: hyperbolicFunction("Arsinh"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Arsinh", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box([
            "Ln",
            ["Add", ops2[0], ["Sqrt", ["Add", ["Square", ops2[0]], 1]]]
          ]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arsinh", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arsinh", ops2[0])
      }
    },
    Artanh: {
      complexity: 6300,
      signature: {
        domain: hyperbolicFunction("Artanh"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Artanh", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box([
            "Multiply",
            "Half",
            ["Ln", ["Divide", ["Add", 1, ops2[0]], ["Subtract", 1, ops2[0]]]]
          ]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Artanh", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Artanh", ops2[0])
      }
    },
    Cosh: {
      complexity: 6050,
      signature: {
        domain: hyperbolicFunction("Cosh"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Cosh", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box([
            "Multiply",
            "Half",
            ["Add", ["Exp", ops2[0]], ["Exp", ["Negate", ops2[0]]]]
          ]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Cosh", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Cosh", ops2[0])
      }
    },
    Cot: {
      complexity: 5600,
      signature: {
        domain: trigFunction("Cot"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Cot", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Divide", ["Cos", ops2[0]], ["Sin", ops2[0]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Cot", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Cot", ops2[0])
      }
    },
    Csc: {
      description: "Cosecant",
      complexity: 5600,
      signature: {
        domain: trigFunction("Csc"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Csc", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Divide", 1, ["Sin", ops2[0]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Csc", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Csc", ops2[0])
      }
    },
    /** = sin(z/2)^2 = (1 - cos z) / 2*/
    Haversine: {
      wikidata: "Q2528380",
      signature: {
        domain: ["Function", "ExtendedRealNumber", ["Interval", 0, 1]],
        evaluate: ["Lambda", ["Divide", ["Subtract", 1, ["Cos", "_1"]], 2]]
      }
    },
    /** = 2 * Arcsin(Sqrt(z)) */
    InverseHaversine: {
      //  Range ['Interval', [['Negate', 'Pi'], 'Pi'],
      signature: {
        domain: ["Function", "ExtendedRealNumber", "RealNumber"],
        evaluate: ["Lambda", ["Multiply", 2, ["Arcsin", ["Sqrt", "_1"]]]]
      }
    },
    Sec: {
      description: "Secant, inverse of cosine",
      complexity: 5500,
      signature: {
        domain: trigFunction("Sec"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Sec", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Divide", 1, ["Cos", ops2[0]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Sec", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Sec", ops2[0])
      }
    },
    Sinh: {
      // Range: ['Interval', -Infinity, Infinity],
      complexity: 6e3,
      signature: {
        domain: hyperbolicFunction("Sinh"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Sinh", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box([
            "Multiply",
            "Half",
            ["Subtract", ["Exp", ops2[0]], ["Exp", ["Negate", ops2[0]]]]
          ]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Sinh", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Sinh", ops2[0])
      }
    }
  },
  {
    Csch: {
      complexity: 6200,
      signature: {
        domain: domainNumberToRealNumber("Csch"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Csch", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Divide", 1, ["Sinh", ops2[0]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Csch", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Csch", ops2[0])
      }
    },
    Sech: {
      complexity: 6200,
      signature: {
        domain: ["Function", "Number", ["Interval", -1, 1]],
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Sech", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Divide", 1, ["Cosh", ops2[0]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Sech", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Sech", ops2[0])
      }
    },
    Tanh: {
      // Range: ['Interval', -Infinity, Infinity],
      complexity: 6200,
      signature: {
        domain: hyperbolicFunction("Tanh"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Tanh", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Divide", ["Sinh", ops2[0]], ["Cosh", ops2[0]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Tanh", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Tanh", ops2[0])
      }
    }
  },
  {
    Arccos: {
      complexity: 5550,
      signature: {
        domain: domainNumberToRealNumber("Arccos"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Arccos", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Subtract", ["Divide", "Pi", 2], ["Arcsin", ops2[0]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arccos", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arccos", ops2[0])
      }
    },
    Arccot: {
      numeric: true,
      signature: {
        domain: domainNumberToRealNumber("Arccot"),
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arccot", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arccot", ops2[0])
      }
    },
    Arcoth: {
      numeric: true,
      signature: {
        domain: domainNumberToRealNumber("Arcoth"),
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arcoth", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arcoth", ops2[0])
      }
    },
    Arcsch: {
      numeric: true,
      signature: {
        domain: domainNumberToRealNumber("Arcsch"),
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arcsch", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arcsch", ops2[0])
      }
    },
    Arcsec: {
      numeric: true,
      signature: {
        domain: domainNumberToRealNumber("Arcsec"),
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arcsec", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arcsec", ops2[0])
      }
    },
    Arsech: {
      numeric: true,
      signature: {
        domain: domainNumberToRealNumber("Arsech"),
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arsech", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arsech", ops2[0])
      }
    },
    Arccsc: {
      numeric: true,
      signature: {
        domain: domainNumberToRealNumber("Arccsc"),
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Arccsc", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Arccsc", ops2[0])
      }
    },
    Coth: {
      complexity: 6300,
      signature: {
        domain: hyperbolicFunction("Coth"),
        simplify: (ce, ops2) => {
          var _a, _b;
          return (_b = (_a = constructibleValues(ce, "Coth", ops2[0])) == null ? void 0 : _a.simplify()) != null ? _b : ce.box(["Divide", 1, ["Tanh", ops2[0]]]).simplify();
        },
        evaluate: (ce, ops2) => evalTrig(ce, "evaluate", "Coth", ops2[0]),
        N: (ce, ops2) => evalTrig(ce, "N", "Coth", ops2[0])
      }
    },
    /* converts (radius, angle) -> (x, y) */
    // FromPolarCoordinates: {
    //   domain: 'Function',
    //   outputDomain: ['TupleOf', 'RealNumber', 'RealNumber'],
    // },
    InverseFunction: {
      signature: {
        domain: ["Function", "Function", "Function"],
        canonical: (ce, ops2) => {
          var _a;
          ops2 = validateArgumentCount(ce, flattenSequence(canonical(ops2)), 1);
          return (_a = processInverseFunction(ce, ops2)) != null ? _a : ce._fn("InverseFunction", ops2);
        },
        simplify: (ce, ops2) => processInverseFunction(ce, ops2),
        evaluate: (ce, ops2) => processInverseFunction(ce, ops2)
      }
    }
  }
];
var S2 = ["Sqrt", 2];
var S3 = ["Sqrt", 3];
var S5 = ["Sqrt", 5];
var S6 = ["Sqrt", 6];
var CONSTRUCTIBLE_VALUES = [
  [
    [0, 1],
    {
      Sin: 0,
      Cos: 1,
      Tan: 0,
      Cot: NaN,
      Sec: 1,
      Csc: NaN
    }
  ],
  [
    [1, 12],
    {
      Sin: ["Divide", ["Subtract", S6, S2], 4],
      Cos: ["Divide", ["Add", S6, S2], 4],
      Tan: ["Subtract", 2, S3],
      Cot: ["Add", 2, S3],
      Sec: ["Subtract", S6, S2],
      Csc: ["Add", S6, S2]
    }
  ],
  [
    [1, 10],
    {
      Sin: ["Divide", ["Subtract", S5, 1], 4],
      Cos: ["Divide", ["Sqrt", ["Add", 10, ["Multiply", 2, S5]]], 4],
      Tan: ["Divide", ["Sqrt", ["Subtract", 25, ["Multiply", 10, S5]]], 4],
      Cot: ["Sqrt", ["Add", 5, ["Multiply", 2, S5]]],
      Sec: ["Divide", ["Sqrt", ["Subtract", 50, ["Multiply", 10, S5]]], 5],
      Csc: ["Add", 1, S5]
    }
  ],
  [
    [1, 8],
    {
      Sin: "$\\frac{\\sqrt{2-\\sqrt2}}{2}$",
      Cos: "$\\frac{\\sqrt {2+{\\sqrt {2}}}}{2}$",
      Tan: "$\\sqrt{2} - 1$",
      Cot: "$\\sqrt{2} + 1$",
      Sec: "$\\sqrt{ 4 - 2\\sqrt{2}}$",
      Csc: "$\\sqrt{ 4 + 2\\sqrt{2}}$"
    }
  ],
  [
    [1, 6],
    {
      Sin: "$\\frac{1}{2}$",
      Cos: "$\\frac{\\sqrt{3}}{2}$",
      Tan: "$\\frac{\\sqrt{3}}{3}$",
      Cot: "$\\frac{2\\sqrt{3}}{3}$",
      Sec: "$\\sqrt{3}$",
      Csc: 2
    }
  ],
  [
    [1, 5],
    {
      Sin: "$\\frac{\\sqrt{10- 2\\sqrt{5}}} {4}$",
      Cos: "$\\frac{1+ \\sqrt{5}} {4}$",
      Tan: "$\\sqrt{5-2\\sqrt5}$",
      Cot: "$\\frac{\\sqrt{25+10\\sqrt5}} {5}$",
      Sec: "$\\sqrt{5} - 1$",
      Csc: "$\\frac{\\sqrt{50+10\\sqrt{5}}} {5}$"
    }
  ],
  [
    [1, 4],
    {
      Sin: ["Divide", S2, 2],
      Cos: ["Divide", S2, 2],
      Tan: 1,
      Cot: 1,
      Sec: S2,
      Csc: S2
    }
  ],
  [
    [3, 10],
    {
      Sin: "$\\frac{1+ \\sqrt{5}} {4}$",
      Cos: "$\\frac{\\sqrt{10- 2\\sqrt{5}}} {4}$",
      Tan: "$\\frac{\\sqrt{25+10\\sqrt5}} {5}$",
      Cot: "$\\sqrt{5-2\\sqrt5}$",
      Sec: "$$",
      Csc: "$\\frac{\\sqrt{50+10\\sqrt{5}}} {5}$"
    }
  ],
  [
    [1, 3],
    {
      Sin: ["Divide", S3, 2],
      // '$\\frac{\\sqrt{3}}{2}$'
      Cos: "Half",
      // '$\\frac{1}{2}$'
      Tan: S3,
      // '$\\sqrt{3}$'
      Cot: ["Divide", S3, 3],
      // '$\\frac{\\sqrt{3}}{3}$'
      Sec: 2,
      Csc: ["Divide", ["Multiply", 2, S3], 3]
      // '$\\frac{2\\sqrt{3}}{3}$'
    }
  ],
  [
    [3, 8],
    {
      Sin: "$\\frac{ \\sqrt{2 + \\sqrt{2}} } {2}$",
      Cos: "$\\frac{ \\sqrt{2 - \\sqrt{2}} } {2}$",
      Tan: "$\\sqrt{2} + 1$",
      Cot: "$\\sqrt{2} - 1$",
      Sec: "$\\sqrt{ 4 + 2 \\sqrt{2} }$",
      Csc: "$\\sqrt{ 4 - 2 \\sqrt{2} }$"
    }
  ],
  [
    [2, 5],
    {
      Sin: "$\\frac{\\sqrt{10+ 2\\sqrt{5}}} {4}$",
      Cos: "$\\frac{\\sqrt{5}-1} {4}$",
      Tan: "$\\sqrt{5+2\\sqrt{5}}$",
      Cot: "$\\frac{\\sqrt{25-10\\sqrt{5}}} {5}$",
      Sec: "$1 + \\sqrt{5}$",
      Csc: "$\\frac{\\sqrt{50-10\\sqrt{5}}} {5}$"
    }
  ],
  [
    [5, 12],
    {
      Sin: "$\\frac{\\sqrt{6} + \\sqrt{2}} {4}$",
      Cos: "$\\frac{ \\sqrt{6} - \\sqrt{2}} {4}$",
      Tan: "$2+\\sqrt{3}$",
      Cot: "$2-\\sqrt{3}$",
      Sec: "$\\sqrt{6}+\\sqrt{2}$",
      Csc: "$\\sqrt{6} - \\sqrt{2}$"
    }
  ],
  [
    [1, 2],
    {
      Sin: 1,
      Cos: 0,
      Tan: NaN,
      Cot: 0,
      Sec: NaN,
      Csc: 1
    }
  ]
];
var TRIG_IDENTITIES = {
  Sin: [
    [1, "Sin"],
    [1, "Cos"],
    [-1, "Sin"],
    [-1, "Cos"]
  ],
  Cos: [
    [1, "Cos"],
    [-1, "Sin"],
    [-1, "Cos"],
    [1, "Sin"]
  ],
  Sec: [
    [1, "Sec"],
    [-1, "Csc"],
    [-1, "Sec"],
    [1, "Csc"]
  ],
  Csc: [
    [1, "Csc"],
    [1, "Sec"],
    [-1, "Csc"],
    [-1, "Sec"]
  ],
  Tan: [
    [1, "Tan"],
    [-1, "Cot"],
    [1, "Tan"],
    [-1, "Cot"]
  ],
  Cot: [
    [1, "Cot"],
    [-1, "Tan"],
    [1, "Cot"],
    [-1, "Tan"]
  ]
};
function constructibleValues(ce, head2, x) {
  var _a, _b, _c;
  if (!x)
    return void 0;
  const specialValues = ce.cache(
    "constructible-trigonometric-values",
    () => {
      var _a2;
      const values = [];
      for (const [val, results] of CONSTRUCTIBLE_VALUES) {
        const boxedResults = {};
        for (const head3 of Object.keys(results))
          boxedResults[head3] = (_a2 = ce.parse(latexString(results[head3]))) != null ? _a2 : ce.box(results[head3]);
        values.push([val, boxedResults]);
      }
      return values;
    },
    (cache) => {
      for (const [_k, v] of cache) {
        for (const v2 of Object.values(v))
          v2.unbind();
      }
      return cache;
    }
  );
  x = x.N();
  if (x.numericValue === null)
    return void 0;
  let theta = (_a = asFloat(x)) != null ? _a : null;
  if (theta === null)
    return void 0;
  theta = theta % (2 * Math.PI);
  const identitySign = head2 !== "Cos" && head2 !== "Sec" ? Math.sign(theta) : 1;
  theta = Math.abs(theta);
  const quadrant2 = Math.floor(theta * 2 / Math.PI);
  theta = theta % (Math.PI / 2);
  let sign2;
  [sign2, head2] = (_c = (_b = TRIG_IDENTITIES[head2]) == null ? void 0 : _b[quadrant2]) != null ? _c : [1, head2];
  sign2 = sign2 * identitySign;
  for (const [[n, d], result] of specialValues) {
    if (result[head2] && ce.chop(theta - Math.PI * n / d) === 0) {
      return sign2 < 0 ? canonicalNegate(result[head2]) : result[head2];
    }
  }
  return void 0;
}
function processInverseFunction(ce, xs) {
  if (xs.length !== 1)
    return void 0;
  const expr = xs[0];
  const head2 = expr.symbol;
  if (typeof head2 !== "string")
    return void 0;
  if (head2 === "InverseFunction")
    return expr.op1;
  const newHead = {
    Sin: "Arcsin",
    Cos: "Arccos",
    Tan: "Arctan",
    Sec: "Arcsec",
    Csc: " Arccsc",
    Sinh: "Arsinh",
    Cosh: "Arcosh",
    Tanh: "Artanh",
    Sech: "Arcsech",
    Csch: "Arcsch",
    Arcosh: "Cosh",
    Arccos: "Cos",
    Arccsc: "Csc",
    Arcsch: "Csch",
    // '??': 'Cot',
    // '??': 'Coth',
    Arcsec: "Sec",
    Arcsin: "Sin",
    Arsinh: "Sinh",
    Arctan: "Tan",
    Artanh: "Tanh"
  }[head2];
  return newHead ? ce.symbol(newHead) : void 0;
}
function evalTrig(ce, mode, head2, op3) {
  var _a;
  if (!op3)
    return void 0;
  if (mode === "evaluate") {
    const result = (_a = constructibleValues(ce, head2, op3)) == null ? void 0 : _a.evaluate();
    if (result)
      return result;
    if (op3.isExact)
      return void 0;
  }
  switch (head2) {
    case "Arccos":
      return applyN(
        op3,
        Math.acos,
        (x) => x.acos(),
        (x) => x.acos()
      );
    case "Arccot":
      return applyN(
        op3,
        (x) => Math.atan2(1, x),
        (x) => Decimal.atan2(ce._BIGNUM_ONE, x),
        (x) => x.inverse().atan()
      );
    case "Arccsc":
      return applyN(
        op3,
        (x) => Math.asin(1 / x),
        (x) => ce._BIGNUM_ONE.div(x).asin(),
        (x) => x.inverse().asin()
      );
    case "Arcosh":
      return applyN(
        op3,
        Math.acosh,
        (x) => x.acosh(),
        (x) => x.acosh()
      );
    case "Arcoth":
      return applyN(
        op3,
        (x) => x,
        (x) => x.acosh(),
        (x) => x.acosh()
      );
    case "Arcsch":
      return applyN(
        op3,
        (x) => Math.log(1 / x + Math.sqrt(1 / (x * x) + 1)),
        (x) => ce._BIGNUM_ONE.div(x.mul(x)).add(ce._BIGNUM_ONE).sqrt().add(ce._BIGNUM_ONE.div(x)).log(),
        (x) => x.mul(x).inverse().add(1).sqrt().add(x.inverse()).log()
      );
    case "Arcsec":
      return applyN(
        op3,
        (x) => Math.acos(1 / x),
        (x) => ce._BIGNUM_ONE.div(x).acos(),
        (x) => x.inverse().acos()
      );
    case "Arcsin":
      return applyN(
        op3,
        Math.asin,
        (x) => x.asin(),
        (x) => x.asin()
      );
    case "Arsech":
      return applyN(
        op3,
        (x) => Math.log((1 + Math.sqrt(1 - x * x)) / x),
        (x) => ce._BIGNUM_ONE.sub(x.mul(x).add(ce._BIGNUM_ONE).div(x)).log(),
        (x) => ce.complex(1).sub(x.mul(x)).add(1).div(x).log()
      );
    case "Arsinh":
      return applyN(
        op3,
        Math.asinh,
        (x) => x.asinh(),
        (x) => x.asinh()
      );
    case "Arctan":
      return applyN(
        op3,
        Math.atan,
        (x) => x.atan(),
        (x) => x.atan()
      );
    case "Artanh":
      return applyN(
        op3,
        Math.atanh,
        (x) => x.atanh(),
        (x) => x.atanh()
      );
    case "Cos":
      return applyN(
        op3,
        Math.cos,
        (x) => x.toSignificantDigits(ce.precision + 4).cos().toSignificantDigits(ce.precision),
        (x) => x.cos()
      );
    case "Cosh":
      return applyN(
        op3,
        Math.cosh,
        (x) => x.cosh(),
        (x) => x.cosh()
      );
    case "Cot":
      return applyN(
        op3,
        (x) => 1 / Math.tan(x),
        (x) => ce._BIGNUM_ONE.div(x.tan()),
        (x) => x.tan().inverse()
      );
    case "Coth":
      return applyN(
        op3,
        (x) => 1 / Math.tanh(x),
        (x) => ce._BIGNUM_ONE.div(x.tanh()),
        (x) => x.tanh().inverse()
      );
    case "Csc":
      return applyN(
        op3,
        (x) => 1 / Math.sin(x),
        (x) => ce._BIGNUM_ONE.div(x.sin()),
        (x) => x.sin().inverse()
      );
    case "Csch":
      return applyN(
        op3,
        (x) => 1 / Math.sinh(x),
        (x) => ce._BIGNUM_ONE.div(x.sinh()),
        (x) => x.sinh().inverse()
      );
    case "Sec":
      return applyN(
        op3,
        (x) => 1 / Math.cos(x),
        (x) => ce._BIGNUM_ONE.div(x.cos()),
        (x) => x.cos().inverse()
      );
    case "Sech":
      return applyN(
        op3,
        (x) => 1 / Math.cosh(x),
        (x) => ce._BIGNUM_ONE.div(x.cosh()),
        (x) => x.cosh().inverse()
      );
    case "Sin":
      return applyN(
        op3,
        Math.sin,
        (x) => x.toSignificantDigits(ce.precision + 4).sin().toSignificantDigits(ce.precision),
        (x) => x.sin()
      );
    case "Sinh":
      return applyN(
        op3,
        Math.sinh,
        (x) => x.sinh(),
        (x) => x.sinh()
      );
    case "Tan":
      return applyN(
        op3,
        Math.tan,
        (x) => x.toSignificantDigits(ce.precision + 4).tan().toSignificantDigits(ce.precision),
        (x) => x.tan()
      );
    case "Tanh":
      return applyN(
        op3,
        Math.tanh,
        (x) => x.tanh(),
        (x) => x.tanh()
      );
  }
  return void 0;
}
var import_complex17 = __toESM(require_complex());
var BoxedSymbolDefinitionImpl = class {
  // @todo
  constructor(ce, name, def) {
    var _a, _b, _c, _d;
    if (!ce.context)
      throw Error("No context available");
    this.name = name;
    this.wikidata = def.wikidata;
    this.description = def.description;
    this.url = def.url;
    this._engine = ce;
    this.scope = ce.context;
    this.name = name;
    this._flags = def.flags ? normalizeFlags(def.flags) : void 0;
    this._domain = def.domain ? ce.domain(def.domain) : void 0;
    this.constant = (_a = def.constant) != null ? _a : false;
    this.holdUntil = (_b = def.holdUntil) != null ? _b : "evaluate";
    if (this.constant) {
      this._defValue = def.value;
      this._value = null;
    } else {
      if (def.value) {
        if (isLatexString(def.value))
          this._value = (_c = ce.parse(def.value)) != null ? _c : ce.symbol("Undefined");
        else if (typeof def.value === "function")
          this._value = ce.box((_d = def.value(ce)) != null ? _d : "Undefined");
        else if (def.value instanceof AbstractBoxedExpression)
          this._value = def.value;
        else
          this._value = ce.box(def.value);
      } else
        this._value = void 0;
      if (!this._value && this._domain && !def.flags)
        this._flags = domainToFlags(this._domain);
    }
  }
  reset() {
    if (this.constant)
      this._value = null;
  }
  // unbind() {
  //   this._value = null;
  //   this._domain = null;
  // }
  get value() {
    var _a, _b, _c, _d;
    if (this._value === null) {
      const ce = this._engine;
      if (isLatexString(this._defValue))
        this._value = (_a = ce.parse(this._defValue)) != null ? _a : ce.symbol("Undefined");
      else if (typeof this._defValue === "function")
        this._value = ce.box((_b = this._defValue(ce)) != null ? _b : "Undefined");
      else if (this._defValue)
        this._value = ce.box(this._defValue);
      else
        this._value = void 0;
      if ((_c = this._value) == null ? void 0 : _c.numericValue) {
        const val = this._value.numericValue;
        if (!bignumPreferred(ce) && val instanceof decimal_default)
          this._value = ce.number(val.toNumber());
        else if (!complexAllowed(ce) && val instanceof import_complex17.default)
          this._value = ce._NAN;
      }
    }
    return (_d = this._value) != null ? _d : void 0;
  }
  set value(val) {
    if (this.constant)
      throw new Error(
        `The value of the constant "${this.name}" cannot be changed`
      );
    /* @__PURE__ */ console.assert(this._defValue === void 0);
    if (typeof val === "number") {
      this._value = this._engine.number(val);
    } else if (val) {
      const newVal = this._engine.box(val);
      if (!this._domain || newVal.domain.isCompatible(this._domain))
        this._value = newVal;
      else
        this._value = void 0;
    } else
      this._value = void 0;
    if (this._value !== void 0)
      this._flags = void 0;
    else
      this._flags = domainToFlags(this.domain);
  }
  get domain() {
    var _a, _b, _c;
    return (_c = (_b = this._domain) != null ? _b : (_a = this._value) == null ? void 0 : _a.domain) != null ? _c : void 0;
  }
  set domain(domain) {
    var _a, _b, _c;
    if (this.constant)
      throw new Error(
        `The domain of the constant "${this.name}" cannot be changed`
      );
    if (!domain) {
      this._defValue = void 0;
      this._value = void 0;
      this._flags = void 0;
      this._domain = void 0;
      return;
    }
    domain = this._engine.domain(domain);
    if ((_a = this._domain) == null ? void 0 : _a.isNumeric) {
      if (!domain.isNumeric)
        throw Error("Can't change from a numeric domain to a non-numeric one");
      this._domain = domain;
      if (!this._value)
        this._flags = { ...(_b = this._flags) != null ? _b : {}, ...domainToFlags(domain) };
      return;
    }
    if (this._domain)
      throw Error("Can't change a non-numeric domain");
    this._flags = void 0;
    this._domain = domain;
    if (!this._value && domain.isNumeric)
      this._flags = { ...(_c = this._flags) != null ? _c : {}, ...domainToFlags(domain) };
  }
  //
  // Flags
  //
  get number() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isNumber) != null ? _c : (_b = this._flags) == null ? void 0 : _b.number;
  }
  set number(val) {
    this.updateFlags({ number: val });
  }
  get integer() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isInteger) != null ? _c : (_b = this._flags) == null ? void 0 : _b.integer;
  }
  set integer(val) {
    this.updateFlags({ integer: val });
  }
  get rational() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isRational) != null ? _c : (_b = this._flags) == null ? void 0 : _b.rational;
  }
  set rational(val) {
    this.updateFlags({ rational: val });
  }
  get algebraic() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isAlgebraic) != null ? _c : (_b = this._flags) == null ? void 0 : _b.algebraic;
  }
  set algebraic(val) {
    this.updateFlags({ algebraic: val });
  }
  get real() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isReal) != null ? _c : (_b = this._flags) == null ? void 0 : _b.real;
  }
  set real(val) {
    this.updateFlags({ real: val });
  }
  get extendedReal() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isExtendedReal) != null ? _c : (_b = this._flags) == null ? void 0 : _b.extendedReal;
  }
  set extendedReal(val) {
    this.updateFlags({ extendedReal: val });
  }
  get complex() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isComplex) != null ? _c : (_b = this._flags) == null ? void 0 : _b.complex;
  }
  set complex(val) {
    this.updateFlags({ complex: val });
  }
  get extendedComplex() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isExtendedComplex) != null ? _c : (_b = this._flags) == null ? void 0 : _b.extendedComplex;
  }
  set extendedComplex(val) {
    this.updateFlags({ extendedComplex: val });
  }
  get imaginary() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isImaginary) != null ? _c : (_b = this._flags) == null ? void 0 : _b.imaginary;
  }
  set imaginary(val) {
    this.updateFlags({ imaginary: val });
  }
  get positive() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isPositive) != null ? _c : (_b = this._flags) == null ? void 0 : _b.positive;
  }
  set positive(val) {
    this.updateFlags({ positive: val });
  }
  get nonPositive() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isNonPositive) != null ? _c : (_b = this._flags) == null ? void 0 : _b.nonPositive;
  }
  set nonPositive(val) {
    this.updateFlags({ nonPositive: val });
  }
  get negative() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isNegative) != null ? _c : (_b = this._flags) == null ? void 0 : _b.negative;
  }
  set negative(val) {
    this.updateFlags({ negative: val });
  }
  get nonNegative() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isNonNegative) != null ? _c : (_b = this._flags) == null ? void 0 : _b.nonNegative;
  }
  set nonNegative(val) {
    this.updateFlags({ nonNegative: val });
  }
  get zero() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isZero) != null ? _c : (_b = this._flags) == null ? void 0 : _b.zero;
  }
  set zero(val) {
    this.updateFlags({ zero: val });
  }
  get notZero() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isNotZero) != null ? _c : (_b = this._flags) == null ? void 0 : _b.notZero;
  }
  set notZero(val) {
    this.updateFlags({ notZero: val });
  }
  get one() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isOne) != null ? _c : (_b = this._flags) == null ? void 0 : _b.one;
  }
  set one(val) {
    this.updateFlags({ one: val });
  }
  get negativeOne() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isNegativeOne) != null ? _c : (_b = this._flags) == null ? void 0 : _b.negativeOne;
  }
  set negativeOne(val) {
    this.updateFlags({ negativeOne: val });
  }
  get infinity() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isInfinity) != null ? _c : (_b = this._flags) == null ? void 0 : _b.infinity;
  }
  set infinity(val) {
    this.updateFlags({ infinity: val });
  }
  get finite() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isFinite) != null ? _c : (_b = this._flags) == null ? void 0 : _b.finite;
  }
  set finite(val) {
    this.updateFlags({ finite: val });
  }
  get NaN() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isNaN) != null ? _c : (_b = this._flags) == null ? void 0 : _b.NaN;
  }
  set NaN(val) {
    this.updateFlags({ NaN: val });
  }
  get even() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isEven) != null ? _c : (_b = this._flags) == null ? void 0 : _b.even;
  }
  set even(val) {
    this.updateFlags({ even: val });
  }
  get odd() {
    var _a, _b, _c;
    return (_c = (_a = this.value) == null ? void 0 : _a.isOdd) != null ? _c : (_b = this._flags) == null ? void 0 : _b.odd;
  }
  set odd(val) {
    this.updateFlags({ odd: val });
  }
  get prime() {
    var _a, _b;
    const val = this._value;
    if (val) {
      if (!val.isInteger || val.isNonPositive)
        return false;
      return isPrime((_a = asFloat(val)) != null ? _a : NaN);
    }
    return (_b = this._flags) == null ? void 0 : _b.prime;
  }
  set prime(val) {
    this.updateFlags({ prime: val });
  }
  get composite() {
    var _a, _b;
    const val = this._value;
    if (val) {
      if (!val.isInteger || val.isNonPositive)
        return false;
      return !isPrime((_a = asFloat(val)) != null ? _a : NaN);
    }
    return (_b = this._flags) == null ? void 0 : _b.composite;
  }
  set composite(val) {
    this.updateFlags({ composite: val });
  }
  updateFlags(flags) {
    var _a;
    if (this.constant)
      throw Error("The flags of constant cannot be changed");
    if (((_a = this.domain) == null ? void 0 : _a.isNumeric) === false)
      throw Error("Flags only apply to numeric domains");
    let flagCount = 0;
    let consistent = true;
    for (const flag in Object.keys(flags)) {
      flagCount += 1;
      if (this._value && flags[flag] !== void 0) {
        switch (flag) {
          case "number":
            consistent = this._value.isNumber === flags.number;
            break;
          case "integer":
            consistent = this._value.isInteger === flags.integer;
            break;
          case "rational":
            consistent = this._value.isRational === flags.rational;
            break;
          case "algebraic":
            consistent = this._value.isAlgebraic === flags.algebraic;
            break;
          case "real":
            consistent = this._value.isReal === flags.real;
            break;
          case "extendedReal":
            consistent = this._value.isExtendedReal === flags.extendedReal;
            break;
          case "complex":
            consistent = this._value.isComplex === flags.complex;
            break;
          case "extendedComplex":
            consistent = this._value.isExtendedComplex === flags.extendedComplex;
            break;
          case "imaginary":
            consistent = this._value.isImaginary === flags.imaginary;
            break;
          case "positive":
            consistent = this._value.isPositive === flags.positive;
            break;
          case "nonPositive":
            consistent = this._value.isNonPositive === flags.nonPositive;
            break;
          case "negative":
            consistent = this._value.isNegative === flags.negative;
            break;
          case "nonNegative":
            consistent = this._value.isNonNegative === flags.nonNegative;
            break;
          case "zero":
            consistent = this._value.isZero === flags.zero;
            break;
          case "notZero":
            consistent = this._value.isNotZero === flags.notZero;
            break;
          case "one":
            consistent = this._value.isOne === flags.one;
            break;
          case "negativeOne":
            consistent = this._value.isNegativeOne === flags.negativeOne;
            break;
          case "infinity":
            consistent = this._value.isInfinity === flags.infinity;
            break;
          case "NaN":
            consistent = this._value.isNaN === flags.NaN;
            break;
          case "finite":
            consistent = this._value.isFinite === flags.finite;
            break;
          case "even":
            consistent = this._value.isEven === flags.even;
            break;
          case "odd":
            consistent = this._value.isOdd === flags.odd;
            break;
          case "prime":
            consistent = this._value.isPrime === flags.prime;
            break;
          case "composite":
            consistent = this._value.isComposite === flags.composite;
            break;
        }
      }
    }
    if (flagCount > 0) {
      if (!consistent) {
        this._defValue = void 0;
        this._value = void 0;
      }
      this._domain = this._engine.domain("Number");
      if (!this._flags)
        this._flags = normalizeFlags(flags);
      else
        this._flags = { ...this._flags, ...normalizeFlags(flags) };
    }
  }
};
function definedKeys(xs) {
  return Object.fromEntries(
    Object.entries(xs).filter(([_k, v]) => v !== void 0)
  );
}
function normalizeFlags(flags) {
  const result = { ...flags };
  if (flags.zero || flags.one || flags.negativeOne) {
    result.zero = flags.zero && !flags.one && !flags.negativeOne;
    result.notZero = !flags.zero || flags.one || flags.negativeOne;
    result.one = flags.one && !flags.zero && !flags.negativeOne;
    result.negativeOne = flags.negativeOne && !flags.zero && !flags.one;
    result.infinity = false;
    result.NaN = false;
    result.finite = true;
    result.integer = true;
    result.finite = true;
    result.infinity = false;
    result.NaN = false;
    result.even = flags.one;
    result.odd = !flags.one;
    result.prime = false;
    result.composite = false;
  }
  if (result.zero) {
    result.positive = false;
    result.negative = false;
    result.nonPositive = true;
    result.nonNegative = true;
  }
  if (result.notZero === true) {
    if (!result.imaginary)
      result.real = true;
    result.zero = false;
  }
  if (result.one) {
    result.positive = true;
  }
  if (result.negativeOne) {
    result.nonPositive = true;
  }
  if (result.positive || result.nonNegative) {
    result.negativeOne = false;
  }
  if (result.positive) {
    result.nonPositive = false;
    result.negative = false;
    result.nonNegative = true;
  } else if (result.nonPositive) {
    result.positive = false;
    result.negative = result.notZero;
    result.nonNegative = !result.zero;
  } else if (result.negative) {
    result.positive = false;
    result.nonPositive = result.notZero;
    result.nonNegative = false;
  } else if (result.nonNegative) {
    result.positive = result.notZero;
    result.nonPositive = !result.zero;
    result.negative = false;
  }
  if (result.positive || result.negative || result.nonPositive || result.nonNegative) {
    result.number = true;
    if (result.finite)
      result.real = true;
    else if (!result.finite)
      result.complex = true;
    result.imaginary = false;
  }
  if (result.finite) {
    result.number = true;
    result.complex = true;
    result.infinity = false;
    result.NaN = false;
  }
  if (result.infinity) {
    result.finite = false;
    result.NaN = false;
  }
  if (result.infinity === false) {
    result.extendedComplex = false;
    result.extendedReal = false;
  }
  if (flags.even)
    result.odd = false;
  if (flags.odd)
    result.even = false;
  if (result.integer)
    result.rational = true;
  if (result.rational)
    result.algebraic = true;
  if (result.algebraic)
    result.real = true;
  if (result.real)
    result.complex = true;
  if (result.imaginary)
    result.complex = true;
  if (result.complex)
    result.number = true;
  if (result.real && result.infinity !== false)
    result.extendedReal = true;
  if (result.complex && result.infinity !== false)
    result.extendedComplex = true;
  if (result.even || result.infinity || result.NaN || result.negative || result.imaginary || result.integer === false)
    result.prime = false;
  if (result.number && result.prime)
    result.composite = false;
  return result;
}
function domainToFlags(dom) {
  if (!dom)
    return {};
  const result = {};
  if (dom.isNumeric) {
    const domain = dom.literal;
    result.number = true;
    if (domain === "Integer")
      result.integer = true;
    if (domain === "RationalNumber")
      result.rational = true;
    if (domain === "AlgebraicNumber")
      result.algebraic = true;
    if (domain === "TranscendentalNumber") {
      result.algebraic = false;
      result.real = true;
    }
    if (domain === "ExtendedRealNumber")
      result.extendedReal = true;
    if (domain === "RealNumber")
      result.real = true;
    if (domain === "ImaginaryNumber")
      result.imaginary = true;
    if (domain === "ExtendedComplexNumber")
      result.extendedComplex = true;
    if (domain === "ComplexNumber")
      result.complex = true;
    if (domain === "PositiveNumber") {
      result.notZero = true;
      result.real = true;
      result.positive = true;
    }
    if (domain === "NegativeNumber") {
      result.notZero = true;
      result.real = true;
      result.negative = true;
    }
    if (domain === "NonNegativeNumber") {
      result.real = true;
      result.positive = true;
    }
    if (domain === "NonPositiveNumber") {
      result.real = true;
      result.negative = true;
    }
    if (domain === "PositiveInteger") {
      result.notZero = true;
      result.integer = true;
      result.positive = true;
    }
    if (domain === "NegativeNumber") {
      result.notZero = true;
      result.integer = true;
      result.negative = true;
    }
    if (domain === "NonNegativeNumber") {
      result.integer = true;
      result.positive = true;
    }
    if (domain === "NonPositiveNumber") {
      result.integer = true;
      result.negative = true;
    }
  } else {
    result.number = false;
    result.integer = false;
    result.rational = false;
    result.algebraic = false;
    result.real = false;
    result.extendedReal = false;
    result.complex = false;
    result.extendedComplex = false;
    result.imaginary = false;
    result.positive = false;
    result.nonPositive = false;
    result.negative = false;
    result.nonNegative = false;
    result.zero = false;
    result.notZero = false;
    result.one = false;
    result.negativeOne = false;
    result.infinity = false;
    result.NaN = false;
    result.odd = false;
    result.even = false;
    result.prime = false;
    result.composite = false;
  }
  return definedKeys(normalizeFlags(result));
}
var BoxedFunctionDefinitionImpl = class {
  constructor(ce, name, def) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
    if (!ce.context)
      throw Error("No context available");
    this.engine = ce;
    this.scope = ce.context;
    const idempotent = (_a = def.idempotent) != null ? _a : false;
    const involution = (_b = def.involution) != null ? _b : false;
    if (idempotent && involution)
      throw new Error(
        `Function Definition "${name}": the 'idempotent' and 'involution' flags are mutually exclusive`
      );
    this.name = name;
    this.description = def.description;
    this.wikidata = def.wikidata;
    this.threadable = (_c = def.threadable) != null ? _c : false;
    this.associative = (_d = def.associative) != null ? _d : false;
    this.commutative = (_e = def.commutative) != null ? _e : false;
    this.idempotent = idempotent;
    this.involution = involution;
    this.inert = (_f = def.inert) != null ? _f : false;
    this.numeric = (_g = def.numeric) != null ? _g : false;
    this.pure = (_h = def.pure) != null ? _h : true;
    this.complexity = (_i = def.complexity) != null ? _i : DEFAULT_COMPLEXITY;
    this.hold = (_j = def.hold) != null ? _j : "none";
    if (this.inert) {
      if (def.hold)
        throw Error(
          `Function Definition "${name}": an inert function should not have a hold`
        );
      this.hold = "rest";
      if (def.signature) {
        const sig = def.signature;
        if ("simplify" in sig || "evaluate" in sig || "N" in sig || "evalDimension" in sig || "sgn" in sig || "compile" in sig)
          throw Error(
            `Function Definition "${name}": an inert function should only have 'canonical' or 'codomain' handlers`
          );
      }
      if (this.threadable)
        throw Error(
          `Function Definition "${name}": an inert function should not be threadable`
        );
      if (this.associative)
        throw Error(
          `Function Definition "${name}": an inert function should not be associative`
        );
      if (this.commutative)
        throw Error(
          `Function Definition "${name}": an inert function should not be commutative`
        );
      if (this.idempotent)
        throw Error(
          `Function Definition "${name}": an inert function should not be idempotent`
        );
      if (this.involution)
        throw Error(
          `Function Definition "${name}": an inert function should not be involution`
        );
      if (!this.pure)
        throw Error(
          `Function Definition "${name}": an inert function should be pure`
        );
    }
    if (def.signature) {
      const sig = def.signature;
      const domain = sig.domain ? ce.domain(sig.domain) : def.numeric ? ce.domain("NumericFunction") : ce.domain("Function");
      if (!domain.isValid)
        throw Error(
          `Function Definition "${name}": invalid domain ${JSON.stringify(
            sig.domain
          )}`
        );
      const codomain = (_l = (_k = sig.codomain) != null ? _k : domain.codomain) != null ? _l : def.numeric ? ce.domain("Number") : ce.domain("Anything");
      this.signature = {
        domain,
        codomain,
        canonical: sig.canonical,
        simplify: sig.simplify,
        evaluate: !sig.evaluate ? void 0 : typeof sig.evaluate === "function" ? sig.evaluate : ce.box(sig.evaluate, { canonical: false }),
        N: sig.N,
        evalDimension: sig.evalDimension,
        sgn: sig.sgn,
        compile: sig.compile
      };
    } else if (def.numeric) {
      this.signature = {
        domain: ce.domain("NumericFunction"),
        codomain: ce.domain("Number")
      };
    } else {
      this.signature = {
        domain: ce.domain("Function"),
        codomain: ce.domain("Anything")
      };
    }
  }
  reset() {
    return;
  }
};
function makeFunctionDefinition(engine, name, def) {
  if (def instanceof BoxedFunctionDefinitionImpl)
    return def;
  return new BoxedFunctionDefinitionImpl(
    engine,
    name,
    def
  );
}
function getStandardLibrary(categories) {
  if (categories === "all") {
    return getStandardLibrary([
      "domains",
      "core",
      "control-structures",
      // If, Block, Loop
      "logic",
      "collections",
      // Dictionary, List, Sets
      "relop",
      "numeric",
      "arithmetic",
      "algebra",
      "calculus",
      "combinatorics",
      "linear-algebra",
      "other",
      "physics",
      "polynomials",
      "statistics",
      "trigonometry",
      "dimensions",
      "units"
    ]);
  } else if (typeof categories === "string")
    categories = [categories];
  const result = [];
  for (const category of categories) {
    const dict = LIBRARIES[category];
    if (!dict)
      throw Error(`Unknown library category ${category}`);
    if (Array.isArray(dict))
      result.push(...dict);
    else
      result.push(dict);
  }
  return result;
}
var LIBRARIES = {
  "algebra": [],
  // 'algebra': [
  //   // polynomial([0, 2, 0, 4]:list, x:symbol) -> 2x + 4x^3
  //   // polynomial(2x + 4x^3, x) -> {0, 2, 0, 4}
  //   // rational(2x + 4x^3, {3, 1}, x) -> (2x + 4x^3)/(3+x)
  //   // https://reference.wolfram.com/language/tutorial/AlgebraicCalculations.html
  //   // simplify-trig (macsyma)
  //   //  - trigReduce, trigExpand, trigFactor, trigToExp (mathematica)
  //   // Mathematica:
  //   // - distribute -> (a+b)(c+d) -> ac+ ad+ bc+ bd (doesn't have to be multiply,
  //   // f(a+b, c+d) -> f(a, c) + f(a, d) + f(b, c) + f(b, d)
  //   // -- distribute(expr, over=add, with=multiply)
  //   // https://reference.wolfram.com/language/ref/Distribute.html
  //   // - expand, expand-all
  //   // - factor
  //   // - simplify
  // ],
  "arithmetic": [...ARITHMETIC_LIBRARY, ...COMPLEX_LIBRARY],
  "calculus": CALCULUS_LIBRARY,
  "combinatorics": [],
  // @todo fibonacci, binomial, etc...
  "control-structures": [],
  //   // D
  //   // Derivative (mathematica)
  //   // diff (macsyma)
  //   // nth-diff
  //   // int
  //   // - integrate(expression, symbol)  -- indefinite integral
  //   // - integrate(expression, range) <range> = {symbol, min, max} -- definite integral
  //   // - integrate(expression, range1, range2) -- multiple integral
  //   // def-int
  // ],
  "dimensions": [],
  // @todo // volume, speed, area
  "domains": [],
  "core": CORE_LIBRARY,
  "collections": [SETS_LIBRARY, COLLECTIONS_LIBRARY, domainSetsLibrary()],
  // 'domains': getDomainsDictionary(),
  "linear-algebra": [],
  //@todo   // 'linear-algebra': [
  //   // matrix
  //   // transpose
  //   // cross-product
  //   // outer-product
  //   // determinant
  //   // vector
  //   // matrix
  //   // rank
  //   // scalar-matrix
  //   // constant-matrix
  //   // identity-matrix
  // ],
  "logic": LOGIC_LIBRARY,
  "numeric": [],
  // @todo   // 'numeric': [
  //   // Gamma function
  //   // Zeta function
  //   // erf function
  //   // numerator(fraction)
  //   // denominator(fraction)
  //   // exactFloatToRational
  //   // N -> eval as a number
  //   // random
  //   // hash
  // ],
  "other": [],
  "relop": RELOP_LIBRARY,
  "polynomials": POLYNOMIALS_LIBRARY,
  "physics": {
    Mu0: {
      description: "Vaccum permeability",
      constant: true,
      wikidata: "Q1515261",
      domain: "RealNumber",
      value: 125663706212e-17
      // unit: ['Divide', 'N', ['Square', 'A']],
    }
  },
  "statistics": STATISTICS_LIBRARY,
  "trigonometry": TRIGONOMETRY_LIBRARY,
  "units": []
};
function validateDefinitionName(name) {
  name = name.normalize();
  if (isValidIdentifier(name))
    return name;
  throw new Error(
    `Invalid definition name "${name}": ${validateIdentifier(name)}`
  );
}
function setCurrentContextSymbolTable(engine, table) {
  var _a2;
  var _a;
  if (!engine.context)
    throw Error("No context available");
  (_a2 = (_a = engine.context).idTable) != null ? _a2 : _a.idTable = /* @__PURE__ */ new Map();
  const idTable = engine.context.idTable;
  for (let name of Object.keys(table)) {
    const entry = table[name];
    name = validateDefinitionName(name);
    if (isFunctionDefinition(entry)) {
      const def = makeFunctionDefinition(engine, name, entry);
      if (idTable.has(name))
        throw new Error(
          `Duplicate function definition ${name}:
${JSON.stringify(
            idTable.get(name)
          )}
${JSON.stringify(entry)}`
        );
      idTable.set(name, def);
    } else if (isSymbolDefinition(entry)) {
      const def = new BoxedSymbolDefinitionImpl(engine, name, entry);
      if (engine.strict && entry.wikidata) {
        for (const [_, d] of idTable) {
          if (d.wikidata === entry.wikidata)
            throw new Error(
              `Duplicate entries with wikidata "${entry.wikidata}": "${name}" and "${d.name}"`
            );
        }
      }
      if (idTable.has(name))
        throw new Error(`Duplicate symbol definition "${name}"`);
      idTable.set(name, def);
    } else {
      const def = new BoxedSymbolDefinitionImpl(engine, name, {
        value: engine.box(entry)
      });
      /* @__PURE__ */ console.assert(def);
      idTable.set(name, def);
    }
  }
}
var import_complex19 = __toESM(require_complex());
function numericCostFunction(n) {
  if (Number.isInteger(n) && n !== 0) {
    return Math.floor(Math.log2(Math.abs(n)) / Math.log2(10)) + (n > 0 ? 1 : 2);
  }
  return 2;
}
function costFunction(expr) {
  var _a, _b;
  if (expr.symbol)
    return 1;
  const num = expr.numericValue;
  if (num !== null) {
    if (expr.isZero)
      return 1;
    if (expr.isInteger)
      return numericCostFunction(asFloat(expr));
    if (isRational(num)) {
      if (isMachineRational(num))
        return numericCostFunction(num[0]) + numericCostFunction(num[1]) + 1;
      else
        return numericCostFunction(Number(num[0])) + numericCostFunction(Number(num[1])) + 1;
    }
    if (num instanceof import_complex19.default)
      return numericCostFunction(num.re) + numericCostFunction(num.im) + 1;
    if (expr.isNumber)
      return 2;
  }
  const head2 = expr.head;
  let headCost = 2;
  if (typeof head2 === "string") {
    if (["Add", "Divide"].includes(head2))
      headCost = 3;
    else if (["Subtract", "Negate"].includes(head2))
      headCost = 4;
    else if (["Square", "Sqrt", "Multiply", "Root"].includes(head2))
      headCost = 5;
    else if (["Power"].includes(head2))
      headCost = 6;
    else if (["Ln", "Exp", "Log"].includes(head2))
      headCost = 7;
    else if ([
      "Arcsin",
      "Arccos",
      "Arctan",
      "Arcsec",
      " Arccsc",
      "Arsinh",
      "Arcosh",
      "Artanh",
      "Arcsech",
      "Arcsch",
      "Cosh",
      "Cos",
      "Csc",
      "Csch",
      // '??': 'Cot',
      // '??': 'Coth',
      "Sec",
      "Sin",
      "Sinh",
      "Tan",
      "Tanh"
    ].includes(head2))
      headCost = 9;
    else
      headCost = 10;
  } else
    headCost = costFunction(head2);
  return headCost + ((_b = (_a = expr.ops) == null ? void 0 : _a.reduce((acc, x) => acc + costFunction(x), 0)) != null ? _b : 0);
}
var DEFAULT_COST_FUNCTION = costFunction;
var ExpressionMap = class _ExpressionMap {
  constructor(source) {
    if (!source) {
      this._items = /* @__PURE__ */ new Map();
    } else if (source instanceof _ExpressionMap) {
      this._items = new Map(source._items);
    } else {
      this._items = new Map(
        source
      );
    }
  }
  has(expr) {
    for (const x of this._items.keys())
      if (x.isSame(expr))
        return true;
    return false;
  }
  get(expr) {
    for (const [x, v] of this._items)
      if (x.isSame(expr))
        return v;
    return void 0;
  }
  clear() {
    this._items.clear();
  }
  set(expr, value) {
    for (const x of this._items.keys()) {
      if (x.isSame(expr)) {
        this._items.set(x, value);
        return;
      }
    }
    this._items.set(expr, value);
  }
  delete(expr) {
    this._items.delete(expr);
  }
  [Symbol.iterator]() {
    return this._items.entries();
  }
  entries() {
    return this._items.entries();
  }
};
function permutations(xs) {
  const result = [];
  const permute = (arr, m = []) => {
    if (arr.length === 0) {
      result.push(m);
    } else {
      for (let i = 0; i < arr.length; i++) {
        const curr = arr.slice();
        const next = curr.splice(i, 1);
        permute(curr.slice(), m.concat(next));
      }
    }
  };
  permute(xs);
  return result;
}
var BoxedPattern = class _BoxedPattern extends AbstractBoxedExpression {
  constructor(ce, pattern, metadata) {
    super(ce, metadata);
    this._pattern = isLatexString(pattern) ? ce.parse(pattern, { canonical: false }) : ce.box(pattern, { canonical: false });
  }
  get hash() {
    return hashCode("Pattern") ^ this._pattern.hash;
  }
  unbind() {
    this._pattern.unbind();
  }
  get json() {
    return serializeJsonFunction(this.engine, "Pattern", [this._pattern]);
  }
  get head() {
    return "Pattern";
  }
  get domain() {
    return this.engine.domain("Pattern");
  }
  get isCanonical() {
    return true;
  }
  set isCanonical(_val) {
    return;
  }
  isSame(rhs) {
    if (this === rhs)
      return true;
    return rhs instanceof _BoxedPattern && this._pattern.isSame(rhs._pattern);
  }
  isEqual(rhs) {
    return rhs instanceof _BoxedPattern && this._pattern.isEqual(rhs._pattern);
  }
  match(expr, options) {
    var _a, _b, _c;
    return match(expr, this._pattern, {
      recursive: (_a = options == null ? void 0 : options.recursive) != null ? _a : false,
      numericTolerance: (_b = options == null ? void 0 : options.numericTolerance) != null ? _b : 0,
      substitution: (_c = options == null ? void 0 : options.substitution) != null ? _c : {}
    });
  }
  test(expr, options) {
    return this.match(expr, options) !== null;
  }
  count(exprs, options) {
    let result = 0;
    for (const expr of exprs) {
      if (this.match(expr, options) !== null)
        result += 1;
    }
    return result;
  }
  subs(sub2, options) {
    return this._pattern.subs(sub2, options);
  }
};
function hasWildcards(expr) {
  var _a;
  if (typeof expr === "string")
    return expr.startsWith("_");
  if ((_a = expr.symbol) == null ? void 0 : _a.startsWith("_"))
    return true;
  if (expr.ops)
    return hasWildcards(expr.head) || expr.ops.some(hasWildcards);
  if (expr.keys) {
    for (const key of expr.keys)
      if (hasWildcards(expr.getKey(key)))
        return true;
  }
  return false;
}
function captureWildcard(wildcard, expr, substitution) {
  const name = getWildcardName(wildcard);
  if (name === "")
    return substitution;
  if (substitution[name] !== void 0) {
    if (!expr.isSame(substitution[name]))
      return null;
    return substitution;
  }
  if (hasWildcards(expr))
    return null;
  return { ...substitution, [name]: expr };
}
function matchOnce(expr, pattern, substitution, options) {
  const ce = expr.engine;
  if (pattern.head === "Pattern")
    return pattern.match(expr, { substitution, ...options });
  if (pattern instanceof BoxedNumber) {
    if (!(expr instanceof BoxedNumber))
      return null;
    if (options.numericTolerance === 0)
      return pattern.isSame(expr) ? substitution : null;
    return pattern.isEqualWithTolerance(expr, options.numericTolerance) ? substitution : null;
  }
  const str = pattern.string;
  if (str !== null)
    return expr.string === str ? substitution : null;
  const symbol2 = pattern.symbol;
  if (symbol2 !== null) {
    if (symbol2.startsWith("_"))
      return captureWildcard(symbol2, expr, substitution);
    return symbol2 === expr.symbol ? substitution : null;
  }
  if (pattern.nops !== expr.nops)
    return null;
  const keys = pattern.keys;
  if (keys !== null) {
    const exprKeys = expr.keys;
    if (exprKeys === null)
      return null;
    for (const key of keys) {
      const r = matchOnce(exprKeys[key], keys[key], substitution, options);
      if (r === null)
        return null;
      substitution = r;
    }
    return substitution;
  }
  if (pattern.ops) {
    const head2 = pattern.head;
    if (typeof head2 === "string" && head2.startsWith("_"))
      return captureWildcard(head2, ce.box(expr.head), substitution);
    let def = void 0;
    if (typeof head2 === "string" && typeof expr.head === "string") {
      if (head2 !== expr.head)
        return null;
      def = ce.lookupFunction(head2);
    } else {
      const r = matchOnce(
        ce.box(expr.head, { canonical: false }),
        ce.box(head2, { canonical: false }),
        substitution,
        options
      );
      if (r === null)
        return null;
      substitution = r;
    }
    return (def == null ? void 0 : def.commutative) ? matchCommutativeArguments(expr, pattern, substitution, options) : matchNonCommutativeArguments(expr, pattern, substitution, options);
  }
  return null;
}
function matchPermutation(ce, ops2, patterns, substitution, options) {
  var _a;
  let result = { ...substitution };
  ops2 = [...ops2];
  let hasRest = false;
  for (const arg of patterns) {
    if (arg.symbol === "__")
      hasRest = true;
    else {
      let r = null;
      if ((_a = arg.symbol) == null ? void 0 : _a.startsWith("_")) {
        for (let i = 0; i <= ops2.length - 1; i++) {
          r = captureWildcard(arg.symbol, ops2[i], result);
          if (r !== null) {
            ops2.splice(i, 1);
            break;
          }
        }
      } else {
        for (let i = 0; i <= ops2.length - 1; i++) {
          r = matchOnce(ops2[i], arg, result, options);
          if (r !== null) {
            ops2.splice(i, 1);
            break;
          }
        }
      }
      if (r === null)
        return null;
      result = r;
    }
  }
  if (!hasRest && ops2.length > 0)
    return null;
  if (result !== null && hasRest)
    result["__"] = ce._fn("Sequence", ops2);
  return result;
}
function matchCommutativeArguments(expr, pattern, substitution, options) {
  const patterns = permutations(pattern.ops);
  for (const pat of patterns) {
    const result = matchPermutation(
      expr.engine,
      expr.ops,
      pat,
      substitution,
      options
    );
    if (result !== null)
      return result;
  }
  return null;
}
function matchNonCommutativeArguments(expr, pattern, substitution, options) {
  const ce = expr.engine;
  const ops2 = [...expr.ops];
  let result = { ...substitution };
  let i = 0;
  const patterns = pattern.ops;
  while (i < pattern.nops) {
    const pat = patterns[i];
    const argName = pat.symbol;
    if (argName !== null) {
      if (argName.startsWith("__")) {
        let j = 0;
        if (patterns[i + 1] === void 0) {
          j = ops2.length + 1;
        } else {
          let found = false;
          while (!found && j < ops2.length) {
            found = matchOnce(ops2[j], patterns[i + 1], result, options) !== null;
            j += 1;
          }
          if (!found)
            return null;
        }
        if (!argName.startsWith("___") && j <= 1)
          return null;
        result = captureWildcard(
          argName,
          ce.fn("Sequence", ops2.splice(0, j - 1)),
          result
        );
      } else if (argName.startsWith("_")) {
        result = captureWildcard(argName, ops2.shift(), result);
      } else {
        const sub2 = matchOnce(ops2.shift(), pat, result, options);
        if (sub2 === null)
          return null;
        result = sub2;
      }
    } else {
      const sub2 = matchOnce(ops2.shift(), pat, result, options);
      if (sub2 === null)
        return null;
      result = sub2;
    }
    if (result === null)
      return null;
    i += 1;
  }
  return result;
}
function match(subject, pattern, options) {
  var _a, _b;
  const substitution = matchOnce(subject, pattern, (_a = options.substitution) != null ? _a : {}, {
    numericTolerance: (_b = options == null ? void 0 : options.numericTolerance) != null ? _b : NUMERIC_TOLERANCE
  });
  if (substitution) {
    /* @__PURE__ */ console.log("match", subject.toString(), pattern.toString(), substitution);
    return substitution;
  }
  if (!options.recursive)
    return null;
  return null;
}
function isSymbolDefinition2(def) {
  if (def === null || def === void 0)
    return false;
  if ("constant" in def)
    return true;
  return false;
}
function isFunctionDefinition2(def) {
  if (def === null || def === void 0)
    return false;
  if ("signature" in def)
    return true;
  return false;
}
var BoxedSymbol = class _BoxedSymbol extends AbstractBoxedExpression {
  constructor(ce, name, options) {
    var _a;
    super(ce, options == null ? void 0 : options.metadata);
    /* @__PURE__ */ console.assert(
      name === name.normalize(),
      `Symbol "${name}" must be in Unicode NFC canonical order`
    );
    this._name = name;
    /* @__PURE__ */ console.assert(
      isValidIdentifier(this._name),
      `Invalid symbol "${name}": ${validateIdentifier(this._name)}`
    );
    this._scope = (options == null ? void 0 : options.canonical) ? ce.context : null;
    this._def = (_a = options == null ? void 0 : options.def) != null ? _a : null;
  }
  get hash() {
    if (this._hash === void 0)
      this._hash = hashCode(this._name);
    return this._hash;
  }
  unbind() {
    var _a;
    (_a = this._def) == null ? void 0 : _a.reset();
    this._def = null;
  }
  get isPure() {
    var _a, _b, _c, _d, _e;
    return (_e = (_d = ((_a = this.symbolDefinition) == null ? void 0 : _a.constant) && ((_b = this.symbolDefinition.value) == null ? void 0 : _b.isPure)) != null ? _d : (_c = this.functionDefinition) == null ? void 0 : _c.pure) != null ? _e : false;
  }
  get json() {
    return serializeJsonSymbol(this.engine, this._name, {
      latex: this._latex,
      wikidata: this._wikidata
    });
  }
  get scope() {
    return this._scope;
  }
  /** A free variable either has no definition, or it has a definition, but no value */
  get isFree() {
    var _a;
    const def = (_a = this._def) != null ? _a : this.engine.lookupSymbol(this._name, this._wikidata);
    return !isSymbolDefinition2(def) || def.value === void 0;
  }
  get isConstant() {
    var _a;
    const def = (_a = this._def) != null ? _a : this.engine.lookupSymbol(this._name, this._wikidata);
    return !isSymbolDefinition2(def) || def.constant;
  }
  get isCanonical() {
    return this._scope !== null;
  }
  set isCanonical(val) {
    this._scope = val ? this.engine.context : null;
    this._def = null;
  }
  get canonical() {
    if (this._scope)
      return this;
    return this.engine.box(this._name);
  }
  get wikidata() {
    var _a, _b, _c;
    return (_c = (_b = this._wikidata) != null ? _b : (_a = this.baseDefinition) == null ? void 0 : _a.wikidata) != null ? _c : void 0;
  }
  get description() {
    if (!this.baseDefinition)
      return void 0;
    if (!this.baseDefinition.description)
      return void 0;
    if (typeof this.baseDefinition.description === "string")
      return [this.baseDefinition.description];
    return this.baseDefinition.description;
  }
  get url() {
    var _a, _b;
    return (_b = (_a = this.baseDefinition) == null ? void 0 : _a.url) != null ? _b : void 0;
  }
  get complexity() {
    return 7;
  }
  get head() {
    return "Symbol";
  }
  get symbol() {
    return this._name;
  }
  get isNothing() {
    return this._name === "Nothing";
  }
  //  A base definition is the base class of both symbol and function definition
  get baseDefinition() {
    var _a;
    if (this._def === null)
      this.bind(this._scope);
    return (_a = this._def) != null ? _a : void 0;
  }
  get symbolDefinition() {
    if (this._def === null)
      this.bind(this._scope);
    return isSymbolDefinition2(this._def) ? this._def : void 0;
  }
  get functionDefinition() {
    if (this._def === null)
      this.bind(this._scope);
    return isFunctionDefinition2(this._def) ? this._def : void 0;
  }
  bind(scope) {
    if (scope === null) {
      this._def = void 0;
      return;
    }
    let def;
    def = this.engine.lookupSymbol(this._name, this._wikidata, scope);
    if ((def == null ? void 0 : def.wikidata) && this._wikidata && def.wikidata !== this._wikidata)
      def = void 0;
    if (def) {
      this._name = def.name;
      this._def = def;
      return;
    }
    def = this.engine.lookupFunction(this._name, scope);
    if (def) {
      this._def = def;
      return;
    }
    if (this.engine.defaultDomain !== null) {
      this._def = this.engine.defineSymbol(this._name, {
        wikidata: this._wikidata,
        domain: this.engine.defaultDomain
      });
      this._name = this._def.name;
    }
  }
  get value() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.value;
  }
  set value(value) {
    var _a;
    if (this._name[0] === "_")
      throw new Error(
        `The value of the wildcard "${this._name}" cannot be changed`
      );
    this.engine.forget(this._name);
    let v;
    if (value !== void 0) {
      const boxedValue = this.engine.box(value);
      v = (_a = boxedValue.value) != null ? _a : boxedValue.evaluate();
    }
    if (v == null ? void 0 : v.domain.isCompatible("Function")) {
      this._def = this.engine.defineFunction(this._name, {
        signature: {
          domain: v.domain,
          evaluate: v
          // Evaluate as a lambda
        }
      });
    } else if (this._def && isSymbolDefinition2(this._def)) {
      this._def.value = v;
    } else {
      let dom = v == null ? void 0 : v.domain;
      if (dom == null ? void 0 : dom.isNumeric)
        dom = this.engine.domain("Number");
      this._def = this.engine.defineSymbol(this._name, {
        value: v,
        domain: dom != null ? dom : void 0
      });
    }
  }
  get domain() {
    var _a, _b, _c;
    if (this.functionDefinition)
      return this.engine.domain("Function");
    return (_c = (_b = (_a = this.symbolDefinition) == null ? void 0 : _a.domain) != null ? _b : this.engine.defaultDomain) != null ? _c : this.engine.domain("Value");
  }
  set domain(inDomain) {
    if (this._name[0] === "_")
      throw new Error(
        `The domain of the wildcard "${this._name}" cannot be changed`
      );
    const d = this.engine.domain(inDomain);
    if (d.isCompatible("Function")) {
      this.engine.forget(this._name);
      this._def = this.engine.defineFunction(this._name, {
        signature: { domain: d }
      });
    } else if (isSymbolDefinition2(this._def)) {
      this._def.domain = d;
    } else {
      this.engine.forget(this._name);
      this._def = this.engine.defineSymbol(this._name, { domain: d });
    }
  }
  get explicitDomain() {
    var _a, _b;
    if (this.functionDefinition)
      return this.engine.domain("Function");
    return (_b = (_a = this.symbolDefinition) == null ? void 0 : _a.domain) != null ? _b : void 0;
  }
  get sgn() {
    const v = this.value;
    if (v && v !== this) {
      const s = v.sgn;
      if (s !== void 0)
        return s;
    }
    const def = this.symbolDefinition;
    if (def) {
      if (def.zero === true)
        return 0;
      if (def.positive === true)
        return 1;
      if (def.negative === true)
        return -1;
    } else
      return null;
    return void 0;
  }
  has(x) {
    if (typeof x === "string")
      return this._name === x;
    return x.includes(this._name);
  }
  isSame(rhs) {
    if (this === rhs)
      return true;
    if (!(rhs instanceof _BoxedSymbol))
      return false;
    return this._name === rhs._name;
  }
  match(rhs, _options) {
    if (!(rhs instanceof _BoxedSymbol))
      return null;
    if (this._name === rhs._name)
      return {};
    return null;
  }
  isEqual(rhs) {
    var _a, _b;
    if (!this.isCanonical)
      return this.canonical.isEqual(rhs);
    rhs = rhs.canonical;
    if (this === rhs)
      return true;
    if (rhs.symbol !== null)
      return rhs.symbol === this._name;
    const lhsVal = (_b = (_a = this.symbolDefinition) == null ? void 0 : _a.value) == null ? void 0 : _b.N();
    if (lhsVal)
      return lhsVal.isEqual(rhs.N());
    if (rhs.isZero) {
      if (this.isZero)
        return true;
      if (this.isNotZero)
        return false;
    }
    if (this.isZero && rhs.isNotZero)
      return false;
    if (this.engine.ask(["Equal", this, rhs]).length > 0)
      return true;
    if (this.engine.ask(["NotEqual", this, rhs]).length > 0)
      return false;
    return false;
  }
  isLess(rhs) {
    var _a, _b;
    if (rhs.symbol !== null && rhs.symbol === this._name)
      return false;
    const lhsVal = (_b = (_a = this.symbolDefinition) == null ? void 0 : _a.value) == null ? void 0 : _b.N();
    if (lhsVal)
      return lhsVal.isLess(rhs.N());
    if (rhs.isZero) {
      const s = this.sgn;
      if (s === null)
        return false;
      if (s !== void 0)
        return s < 0;
    }
    return void 0;
  }
  isLessEqual(rhs) {
    var _a, _b;
    if (rhs.symbol !== null && rhs.symbol === this._name)
      return true;
    const lhsVal = (_b = (_a = this.symbolDefinition) == null ? void 0 : _a.value) == null ? void 0 : _b.N();
    if (lhsVal)
      return lhsVal.isLessEqual(rhs.N());
    if (rhs.isZero) {
      const s = this.sgn;
      if (s === null)
        return false;
      if (s !== void 0)
        return s <= 0;
    }
    return this.isLess(rhs) || this.isEqual(rhs);
  }
  isGreater(rhs) {
    var _a, _b;
    if (rhs.symbol !== null && rhs.symbol === this._name)
      return false;
    const lhsVal = (_b = (_a = this.symbolDefinition) == null ? void 0 : _a.value) == null ? void 0 : _b.N();
    if (lhsVal)
      return lhsVal.isGreater(rhs.N());
    if (rhs.isZero) {
      const s = this.sgn;
      if (s === null)
        return false;
      if (s !== void 0)
        return s > 0;
    }
    return void 0;
  }
  isGreaterEqual(rhs) {
    var _a, _b;
    if (rhs.symbol !== null && rhs.symbol === this._name)
      return true;
    const lhsVal = (_b = (_a = this.symbolDefinition) == null ? void 0 : _a.value) == null ? void 0 : _b.N();
    if (lhsVal)
      return lhsVal.isGreaterEqual(rhs.N());
    if (rhs.isZero) {
      const s = this.sgn;
      if (s === null)
        return false;
      if (s !== void 0)
        return s >= 0;
    }
    return this.isGreater(rhs) || this.isEqual(rhs);
  }
  get isFunction() {
    return !!this.functionDefinition;
  }
  get isZero() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.zero;
  }
  get isNotZero() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.notZero;
  }
  get isOne() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.one;
  }
  get isNegativeOne() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.negativeOne;
  }
  get isOdd() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.odd;
  }
  get isEven() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.even;
  }
  get isPrime() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.prime;
  }
  get isComposite() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.composite;
  }
  get isInfinity() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.infinity;
  }
  get isNaN() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.NaN;
  }
  // x > 0
  get isPositive() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.positive;
  }
  get isNonPositive() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.nonPositive;
  }
  get isNegative() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.negative;
  }
  get isNonNegative() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.nonNegative;
  }
  get isNumber() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.number;
  }
  get isInteger() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.integer;
  }
  get isRational() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.rational;
  }
  get isAlgebraic() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.rational;
  }
  get isReal() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.real;
  }
  get isExtendedReal() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.extendedReal;
  }
  get isComplex() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.complex;
  }
  get isImaginary() {
    var _a;
    return (_a = this.symbolDefinition) == null ? void 0 : _a.imaginary;
  }
  simplify(options) {
    var _a;
    const def = this.symbolDefinition;
    if ((def == null ? void 0 : def.holdUntil) === "simplify" && def.value)
      return def.value.simplify(options);
    return (options == null ? void 0 : options.rules) ? (_a = this.replace(options.rules)) != null ? _a : this : this;
  }
  evaluate(options) {
    var _a, _b;
    const def = this.symbolDefinition;
    if (def && (def.holdUntil === "simplify" || def.holdUntil === "evaluate"))
      return (_b = (_a = def.value) == null ? void 0 : _a.evaluate(options)) != null ? _b : this;
    return this;
  }
  N(options) {
    var _a, _b, _c;
    const def = this.symbolDefinition;
    if (def && def.holdUntil === "never")
      return this;
    return (_c = (_b = (_a = this.symbolDefinition) == null ? void 0 : _a.value) == null ? void 0 : _b.N(options)) != null ? _c : this;
  }
  replace(rules, options) {
    return replace(this, rules, options);
  }
  subs(sub2, options) {
    if (sub2[this._name] === void 0)
      return (options == null ? void 0 : options.canonical) ? this.canonical : this;
    return this.engine.box(sub2[this._name], options);
  }
};
function makeCanonicalSymbol(ce, name) {
  const def = ce.lookupSymbol(name, void 0, ce.context);
  if ((def == null ? void 0 : def.holdUntil) === "never" && def.value)
    return def.value;
  return new BoxedSymbol(ce, name, { canonical: true, def });
}
var ComputeEngine = class _ComputeEngine {
  /**
   * Construct a new `ComputeEngine` instance.
   *
   * Identifier tables define functions and symbols (in `options.ids`).
   * If no table is provided the standard library is used (`ComputeEngine.getStandardLibrary()`)
   *
   * The LaTeX syntax dictionary is defined in `options.latexDictionary`.
   *
   * The order of the dictionaries matter: the definitions from the later ones
   * override the definitions from earlier ones. The first dictionary should
   * be the `'core'` dictionary which include some basic definitions such
   * as domains (`Boolean`, `Number`, etc...) that are used by later dictionaries.
   *
   * @param options.numericMode The default mode is `"auto"`. Use `"machine"`
   * to perform numeric calculations using 64-bit floats. Use `"bignum"` to
   * perform calculations using arbitrary precision floating point numbers.
   * Use `"auto"` or `"complex"` to allow calculations on complex numbers.
   *
   * @param options.numericPrecision Specific how many digits of precision
   * for the numeric calculations. Default is 100.
   *
   * @param options.tolerance If the absolute value of the difference of two
   * numbers is less than `tolerance`, they are considered equal. Used by
   * `chop()` as well.
   *
   * @param options.defaultDomain If an unknown symbol is encountered, assume
   * this is its domain. **Default** `ExtendedRealNumber`
   */
  constructor(options) {
    var _a, _b, _c, _d;
    this._cache = {};
    this._commonSymbols = {
      True: null,
      False: null,
      Maybe: null,
      All: null,
      Nothing: null,
      None: null,
      Undefined: null,
      Function: null,
      Pi: null,
      ImaginaryUnit: null
    };
    this._commonNumbers = {
      "-5": null,
      "-4": null,
      "-3": null,
      "-2": null,
      2: null,
      3: null,
      4: null,
      5: null,
      6: null,
      7: null,
      8: null,
      9: null,
      10: null,
      11: null,
      12: null,
      36: null
    };
    this._commonDomains = {
      Anything: null,
      Nothing: null,
      Boolean: null,
      MaybeBoolean: null,
      String: null,
      Domain: null,
      Symbol: null,
      Integer: null,
      RationalNumber: null,
      AlgebraicNumber: null,
      RealNumber: null,
      ExtendedRealNumber: null,
      ImaginaryNumber: null,
      ComplexNumber: null,
      ExtendedComplexNumber: null,
      Number: null,
      PositiveInteger: null,
      TranscendentalNumber: null,
      PositiveNumber: null,
      Function: null,
      // (Anything^n) -> Anything
      NumericFunction: null,
      // (Number^n) -> Number
      RealFunction: null,
      // (ExtendedRealNumber^n) -> ExtendRealNumber
      TrigonometricFunction: null,
      // (ComplexNumber) -> ComplexNumber
      LogicOperator: null,
      // (Boolean, Boolean) -> Boolean
      Predicate: null,
      // (Anything^n) -> MaybeBoolean
      RelationalOperator: null
      // (Anything, Anything) -> MaybeBoolean
    };
    if (options !== void 0 && typeof options !== "object")
      throw Error("Unexpected argument");
    this.strict = true;
    this._latexDictionary = options == null ? void 0 : options.latexDictionary;
    this._jsonSerializationOptions = {
      exclude: [],
      shorthands: ["function", "symbol", "string", "dictionary", "number"],
      metadata: [],
      precision: "max",
      repeatingDecimals: true
    };
    this._useRawJsonSerializationOptions = false;
    this._rawJsonSerializationOptions = {
      exclude: [],
      shorthands: ["function", "symbol", "string", "dictionary", "number"],
      metadata: [],
      precision: "max",
      repeatingDecimals: false
    };
    this._stats = {
      highwaterMark: 0,
      symbols: /* @__PURE__ */ new Set(),
      expressions: /* @__PURE__ */ new Set()
    };
    this._defaultDomain = null;
    this._numericMode = (_a = options == null ? void 0 : options.numericMode) != null ? _a : "auto";
    this._precision = Math.max(
      (_b = options == null ? void 0 : options.numericPrecision) != null ? _b : 100,
      Math.floor(MACHINE_PRECISION)
    );
    this._bignum = Decimal.clone({ precision: this._precision });
    this.tolerance = (_c = options == null ? void 0 : options.tolerance) != null ? _c : NUMERIC_TOLERANCE;
    this._ZERO = new BoxedNumber(this, 0);
    this._ONE = new BoxedNumber(this, 1);
    this._HALF = new BoxedNumber(this, [1, 2]);
    this._NEGATIVE_ONE = new BoxedNumber(this, -1);
    this._I = new BoxedNumber(this, import_complex20.Complex.I);
    this._NAN = new BoxedNumber(this, Number.NaN);
    this._POSITIVE_INFINITY = new BoxedNumber(this, Number.POSITIVE_INFINITY);
    this._NEGATIVE_INFINITY = new BoxedNumber(this, Number.NEGATIVE_INFINITY);
    this._COMPLEX_INFINITY = new BoxedNumber(this, import_complex20.Complex.INFINITY);
    this.reset();
    this.context = {
      assumptions: new ExpressionMap(),
      timeLimit: 2,
      // execution time limit: 2.0 seconds
      memoryLimit: 1,
      // memory limit: 1.0 megabyte
      recursionLimit: 1024,
      iterationLimit: Number.POSITIVE_INFINITY
    };
    const tables = (_d = options == null ? void 0 : options.ids) != null ? _d : _ComputeEngine.getStandardLibrary();
    for (const table of tables)
      setCurrentContextSymbolTable(this, table);
    for (const d of Object.keys(this._commonDomains)) {
      if (this._commonDomains[d] && !this._commonDomains[d].symbolDefinition)
        this._commonDomains[d].bind(this.context);
      else
        this._commonDomains[d] = boxDomain(this, d);
    }
    for (const sym of Object.keys(this._commonSymbols)) {
      this._commonSymbols[sym] = new BoxedSymbol(this, sym, {
        canonical: true
      });
      this._commonSymbols[sym].bind(this.context);
    }
    if (options == null ? void 0 : options.defaultDomain) {
      const defaultDomain = this.domain(options.defaultDomain);
      if (defaultDomain.isValid)
        this._defaultDomain = defaultDomain;
      else
        this._defaultDomain = this.domain("ExtendedRealNumber");
    } else
      this._defaultDomain = this.domain("ExtendedRealNumber");
    this.pushScope();
  }
  /**
   * Return identifier tables suitable for the specified categories, or `"all"`
   * for all categories (`"arithmetic"`, `"algebra"`, etc...).
   *
   * An identifier table defines how the symbols and function names in a
   * MathJSON expression should be interpreted, i.e. how to evaluate and
   * manipulate them.
   *
   */
  static getStandardLibrary(categories = "all") {
    return getStandardLibrary(categories);
  }
  get latexDictionary() {
    return this.latexSyntax.dictionary;
  }
  set latexDictionary(dic) {
    this.latexSyntax.dictionary = dic;
  }
  /** After the configuration of the engine has changed, clear the caches
   * so that new values can be recalculated.
   *
   * This needs to happen for example when the numeric precision changes.
   *
   * @internal
   */
  reset() {
    var _a;
    /* @__PURE__ */ console.assert(this._bignum);
    this._BIGNUM_NEGATIVE_ONE = this.bignum(-1);
    this._BIGNUM_NAN = this.bignum(NaN);
    this._BIGNUM_ZERO = this.bignum(0);
    this._BIGNUM_ONE = this.bignum(1);
    this._BIGNUM_TWO = this.bignum(2);
    this._BIGNUM_HALF = this._BIGNUM_ONE.div(this._BIGNUM_TWO);
    this._BIGNUM_PI = this._BIGNUM_NEGATIVE_ONE.acos();
    const symbols = this._stats.symbols.values();
    const expressions = this._stats.expressions.values();
    this._stats.symbols = /* @__PURE__ */ new Set();
    this._stats.expressions = /* @__PURE__ */ new Set();
    for (const s of symbols)
      s.unbind();
    for (const s of expressions)
      s.unbind();
    for (const d of Object.values(this._commonDomains))
      d == null ? void 0 : d.unbind();
    for (const d of Object.values(this._commonSymbols))
      d == null ? void 0 : d.unbind();
    let scope = this.context;
    while (scope) {
      if (scope.idTable)
        for (const [_k, v] of scope.idTable)
          v.reset();
      scope = (_a = scope.parentScope) != null ? _a : null;
    }
    for (const k of Object.keys(this._cache))
      if (this._cache[k].value) {
        if (!this._cache[k].purge)
          delete this._cache[k];
        else
          this._cache[k].value = this._cache[k].purge(this._cache[k].value);
      }
  }
  /** @internal */
  _register(_expr) {
    this._stats.highwaterMark += 1;
  }
  /** @internal */
  _unregister(_expr) {
  }
  get stats() {
    const expressions = this._stats.expressions;
    this._stats.expressions = null;
    this._stats.expressions = expressions;
    return {
      ...this._stats
      // _dupeSymbols: topDupes,
      // _popularExpressions: top10,
    };
  }
  /** The precision, or number of significant digits, of numeric
   * calculations when the numeric mode is `"auto"` or `"bignum"`.
   *
   * To make calculations using more digits, at the cost of expanded memory
   * usage and slower computations, set the `precision` higher.
   *
   * If the numeric mode is not `"auto"` or `"bignum"`, it is set to `"auto"`.
   *
   * Trigonometric operations are accurate for precision up to 1,000.
   *
   */
  get precision() {
    if (this._numericMode === "machine" || this._numericMode === "complex")
      return Math.floor(MACHINE_PRECISION);
    return this._precision;
  }
  set precision(p) {
    var _a;
    if (p === "machine")
      p = Math.floor(MACHINE_PRECISION);
    const currentPrecision = this._precision;
    if (p === currentPrecision)
      return;
    if (typeof p !== "number" || p <= 0)
      throw Error('Expected "machine" or a positive number');
    (_a = this._latexSyntax) == null ? void 0 : _a.updateOptions({
      precision: p,
      avoidExponentsInRange: [-6, p]
    });
    this._precision = Math.max(p, Math.floor(MACHINE_PRECISION));
    if (this.jsonSerializationOptions.precision > this._precision)
      this.jsonSerializationOptions = { precision: this._precision };
    if (this._numericMode !== "auto" && this._numericMode !== "bignum" && this._precision > Math.floor(MACHINE_PRECISION))
      this._numericMode = "auto";
    this._bignum = this._bignum.config({ precision: this._precision });
    this.reset();
  }
  get numericMode() {
    return this._numericMode;
  }
  set numericMode(f) {
    if (f === this._numericMode)
      return;
    if (typeof f !== "string")
      throw Error("Expected a string");
    this._numericMode = f;
    if (f === "complex" || f === "machine")
      this._precision = Math.floor(MACHINE_PRECISION);
    if (this._latexSyntax && this.latexSyntax.options.precision > this._precision)
      this.latexSyntax.updateOptions({ precision: this._precision });
    if (this.jsonSerializationOptions.precision > this._precision)
      this.jsonSerializationOptions = { precision: this._precision };
    this.reset();
  }
  /** @experimental */
  get timeLimit() {
    var _a;
    let scope = this.context;
    while (scope) {
      if (scope.timeLimit !== void 0)
        return scope.timeLimit;
      scope = (_a = scope.parentScope) != null ? _a : null;
    }
    return 2;
  }
  /** @experimental */
  get iterationLimit() {
    var _a;
    let scope = this.context;
    while (scope) {
      if (scope.iterationLimit !== void 0)
        return scope.iterationLimit;
      scope = (_a = scope.parentScope) != null ? _a : null;
    }
    return 1024;
  }
  /** @experimental */
  get recursionLimit() {
    var _a;
    let scope = this.context;
    while (scope) {
      if (scope.recursionLimit !== void 0)
        return scope.recursionLimit;
      scope = (_a = scope.parentScope) != null ? _a : null;
    }
    return 1024;
  }
  /**
   * If an unknown symbol is encountered, assume it should
   * be a variable in this domain.
   *
   * If set to `null`, unknown symbols will trigger an error.
   *
   * **Default:** `"ExtendedRealNumber"`
   */
  get defaultDomain() {
    return this._defaultDomain;
  }
  set defaultDomain(domain) {
    if (domain === null)
      this._defaultDomain = null;
    else {
      const defaultDomain = this.domain(domain);
      if (!defaultDomain.isValid)
        throw Error(`Invalid domain ${domain}`);
      this._defaultDomain = defaultDomain;
    }
  }
  /**
   * Values smaller than the tolerance are considered to be zero for the
   * purpose of comparison, i.e. if `|b - a| <= tolerance`, `b` is considered
   * equal to `a`.
   */
  get tolerance() {
    return this._tolerance;
  }
  set tolerance(val) {
    if (typeof val === "number" && Number.isFinite(val))
      this._tolerance = Math.max(val, 0);
    else
      this._tolerance = NUMERIC_TOLERANCE;
    this._bignumTolerance = this.bignum(this._tolerance);
  }
  chop(n) {
    if (typeof n === "number" && Math.abs(n) <= this._tolerance)
      return 0;
    if (n instanceof Decimal && n.abs().lte(this._bignumTolerance))
      return 0;
    if (n instanceof import_complex20.Complex && Math.abs(n.re) <= this._tolerance && Math.abs(n.im) <= this._tolerance)
      return 0;
    return n;
  }
  bignum(a) {
    if (typeof a === "bigint")
      return new this._bignum(a.toString());
    return new this._bignum(a);
  }
  complex(a, b) {
    if (a instanceof Decimal)
      a = a.toNumber();
    if (b instanceof Decimal)
      b = b.toNumber();
    return new import_complex20.Complex(a, b);
  }
  isBignum(a) {
    return a instanceof Decimal;
  }
  isComplex(a) {
    return a instanceof import_complex20.Complex;
  }
  get latexSyntax() {
    if (!this._latexSyntax)
      this._latexSyntax = new LatexSyntax({
        computeEngine: this,
        dictionary: this._latexDictionary,
        precision: this.precision,
        avoidExponentsInRange: [-6, this.precision],
        onError: (err) => {
          throw new Error(JSON.stringify(err[0].message));
        }
      });
    return this._latexSyntax;
  }
  static getLatexDictionary(domain = "all") {
    return LatexSyntax.getDictionary(domain);
  }
  set costFunction(fn) {
    if (typeof fn !== "function")
      this._cost = DEFAULT_COST_FUNCTION;
    this._cost = fn;
  }
  get costFunction() {
    var _a;
    return (_a = this._cost) != null ? _a : DEFAULT_COST_FUNCTION;
  }
  /**
   * Return a matching symbol definition, starting with the current
   * scope and going up the scope chain. Prioritize finding a match by
   * wikidata, if provided.
   */
  lookupSymbol(symbol2, wikidata, scope) {
    var _a, _b, _c;
    if (!this.strict) {
      scope != null ? scope : scope = (_a = this.context) != null ? _a : void 0;
      while (scope) {
        const def = (_b = scope.idTable) == null ? void 0 : _b.get(symbol2);
        if (isSymbolDefinition(def))
          return def;
        scope = scope.parentScope;
      }
      return void 0;
    }
    if (typeof symbol2 !== "string")
      throw Error("Expected a string");
    if (symbol2.length === 0 || !this.context)
      return void 0;
    const rootScope = scope != null ? scope : this.context;
    if (wikidata) {
      scope = rootScope;
      while (scope) {
        if (scope.idTable)
          for (const [_, d] of scope.idTable) {
            if (isSymbolDefinition(d) && d.wikidata === wikidata)
              return d;
          }
        scope = scope.parentScope;
      }
    }
    scope = rootScope;
    while (scope) {
      const def = (_c = scope.idTable) == null ? void 0 : _c.get(symbol2);
      if (isSymbolDefinition(def))
        return def;
      scope = scope.parentScope;
    }
    return void 0;
  }
  /**
   * Return the definition for a function matching this head.
   *
   * Start looking in the current context, than up the scope chain.
   *
   * This is a very rough lookup, since it doesn't account for the domain
   * of the argument or the codomain. However, it is useful during parsing
   * to differentiate between symbols that might represent a function application, e.g. `f` vs `x`.
   */
  lookupFunction(head2, scope) {
    var _a;
    if (typeof head2 !== "string")
      return void 0;
    if (!this.context)
      return void 0;
    scope != null ? scope : scope = this.context;
    while (scope) {
      const def = (_a = scope.idTable) == null ? void 0 : _a.get(head2);
      if (isFunctionDefinition(def))
        return def;
      scope = scope.parentScope;
    }
    return void 0;
  }
  /**
   * Add (or replace) a definition for a symbol in the current scope.
   */
  defineSymbol(name, def) {
    if (!this.context)
      throw Error("Symbol cannot be defined: no scope available");
    if (name.length === 0 || !isValidIdentifier(name))
      throw Error(`Invalid identifier "${name}": ${validateIdentifier(name)}}`);
    if (!this.context.idTable)
      this.context.idTable = /* @__PURE__ */ new Map();
    const boxedDef = new BoxedSymbolDefinitionImpl(this, name, def);
    if (boxedDef.name)
      this.context.idTable.set(boxedDef.name, boxedDef);
    return boxedDef;
  }
  defineFunction(name, def) {
    if (!this.context)
      throw Error("Function cannot be defined: no scope available");
    if (name.length === 0 || !isValidIdentifier(name))
      throw Error(`Invalid identifier "${name}": ${validateIdentifier(name)}}`);
    if (!this.context.idTable)
      this.context.idTable = /* @__PURE__ */ new Map();
    const boxedDef = makeFunctionDefinition(this, name, def);
    if (boxedDef.name)
      this.context.idTable.set(name, boxedDef);
    return boxedDef;
  }
  /**
   *
   * Create a new scope and add it to the top of the scope stack
   *
   * The `options.scope` property can be used to specify custom precision,
   * etc... for this scope
   *
   */
  pushScope(ids, scope) {
    if (this.context === null)
      throw Error("No parent scope available");
    this.context = {
      timeLimit: this.context.timeLimit,
      memoryLimit: this.context.memoryLimit,
      recursionLimit: this.context.recursionLimit,
      iterationLimit: this.context.iterationLimit,
      ...scope != null ? scope : {},
      parentScope: this.context,
      // We always copy the current assumptions in the new scope.
      // This make is much easier to deal with 'inherited' assumptions
      // (and potentially modifying them later) without having to walk back
      // into parent contexts. In other words, calling `ce.forget()` will
      // forget everything **in the current scope**. When exiting the scope,
      // the previous assumptions are restored.
      assumptions: new ExpressionMap(this.context.assumptions)
    };
    if (ids) {
      if (Array.isArray(ids))
        for (const table of ids)
          setCurrentContextSymbolTable(this, table);
      else
        setCurrentContextSymbolTable(this, ids);
    }
  }
  /** Remove the topmost scope from the scope stack.
   */
  popScope() {
    var _a;
    if (!this.context)
      throw Error("No scope available");
    const parentScope = (_a = this.context) == null ? void 0 : _a.parentScope;
    this.context = parentScope != null ? parentScope : null;
    /* @__PURE__ */ console.assert(this.context !== null);
  }
  set(identifiers) {
    if (!this.strict) {
      for (const k of Object.keys(identifiers)) {
        if (k !== "Nothing") {
          const def = this.lookupSymbol(k);
          const idk = identifiers[k];
          if (def)
            def.value = idk != null ? idk : void 0;
          else if (idk !== void 0 && idk !== null) {
            const val = this.box(idk);
            if (val.domain.isNumeric)
              this.defineSymbol(k, { value: val, domain: "Number" });
            else
              this.defineSymbol(k, { value: val });
          }
        }
      }
      return;
    }
    for (const k of Object.keys(identifiers)) {
      if (k !== "Nothing") {
        const def = this.lookupSymbol(k);
        const idk = identifiers[k];
        if (idk === void 0 || idk === null) {
          if (def)
            def.value = void 0;
        } else {
          const val = this.box(idk);
          if (def) {
            if (def.domain && !val.domain.isCompatible(def.domain))
              throw Error(
                `Expected value with domain ${def.domain.toString()} for "${k}"`
              );
            def.value = val;
          } else {
            if (val.domain.isNumeric)
              this.defineSymbol(k, { value: val, domain: "Number" });
            else
              this.defineSymbol(k, { value: val });
          }
        }
      }
    }
  }
  let(identifiers) {
    for (const k of Object.keys(identifiers)) {
      if (k !== "Nothing") {
        const def = identifiers[k];
        if (isSymbolDefinition(def))
          this.defineSymbol(k, def);
        else if (isFunctionDefinition(def))
          this.defineFunction(k, def);
        else
          this.set({ [k]: identifiers[k] });
      }
    }
  }
  get assumptions() {
    if (!this.context)
      throw Error("No scope available");
    if (this.context.assumptions)
      return this.context.assumptions;
    this.context.assumptions = new ExpressionMap();
    return this.context.assumptions;
  }
  /**
   * Return false if the execution should stop.
   *
   * This can occur if:
   * - an error has been signaled
   * - the time limit or memory limit has been exceeded
   *
   * @internal
   */
  shouldContinueExecution() {
    return this.deadline === void 0 || this.deadline >= Date.now();
  }
  /** @internal */
  checkContinueExecution() {
    if (!this.shouldContinueExecution()) {
      throw new Error("timeout");
    }
  }
  // assert(
  //   condition: boolean,
  //   expr: BoxedExpression,
  //   msg: string,
  //   code?: SignalMessage
  // ) {
  //   if (!condition) this.signal(expr, msg, code);
  // }
  /** @internal */
  cache(cacheName, build, purge) {
    var _a;
    if (this._cache[cacheName] === void 0) {
      try {
        this._cache[cacheName] = { build, purge, value: build() };
      } catch (e) {
        console.error(
          `Fatal error building cache "${cacheName}":
	 ${e.toString()}`
        );
      }
    }
    return (_a = this._cache[cacheName]) == null ? void 0 : _a.value;
  }
  box(expr, options) {
    return box(this, expr, options);
  }
  canonical(xs) {
    if (!xs.every((x) => x instanceof AbstractBoxedExpression))
      return xs.map((x) => this.box(x));
    const bxs = xs;
    return bxs.every((x) => x.isCanonical) ? bxs : bxs.map((x) => x.canonical);
  }
  fn(head2, ops2, options) {
    return boxFunction(this, head2, ops2, options != null ? options : { canonical: true });
  }
  /** @internal */
  _fn(head2, ops2, metadata) {
    return new BoxedFunction(this, head2, ops2, {
      metadata,
      canonical: true,
      def: this.lookupFunction(head2, this.context)
    });
  }
  error(message, where) {
    if (where instanceof AbstractBoxedExpression) {
      where = this.rawJson(where);
    } else if (where && Array.isArray(where) && where[0] === "Latex") {
      if (where[1] === void 0 || !where[1])
        where = "";
      if (typeof where[1] === "object" && "str" in where[1] && !where[1].str)
        where = "";
    }
    let msg = void 0;
    if (Array.isArray(message) && message[0] === "incompatible-domain") {
      msg = new BoxedFunction(this, "ErrorCode", [
        this.string("incompatible-domain"),
        boxDomain(this, message[1]),
        boxDomain(this, message[2])
      ]);
    }
    if (typeof message === "string")
      msg = this.string(message);
    if (!msg && typeof message !== "string")
      msg = new BoxedFunction(this, "ErrorCode", [
        this.string(message[0]),
        ...message.slice(1).map((x) => {
          if (typeof x === "string")
            ;
          /* @__PURE__ */ console.assert(typeof x !== "string");
          return this.box(x, { canonical: false });
        })
      ]);
    if (!where)
      return new BoxedFunction(this, "Error", [msg], { canonical: false });
    return new BoxedFunction(
      this,
      "Error",
      [msg, this.box(where, { canonical: false })],
      { canonical: false }
    );
  }
  hold(expr) {
    return this._fn("Hold", [this.box(expr, { canonical: false })]);
  }
  add(ops2, metadata) {
    const result = canonicalAdd(this, flattenOps(flattenSequence(ops2), "Add"));
    if ((metadata == null ? void 0 : metadata.latex) !== void 0)
      result.latex = metadata.latex;
    if ((metadata == null ? void 0 : metadata.wikidata) !== void 0)
      result.wikidata = metadata.wikidata;
    return result;
  }
  neg(expr, metadata) {
    return canonicalNegate(expr, metadata);
  }
  mul(ops2, metadata) {
    const result = canonicalMultiply(
      this,
      flattenOps(flattenSequence(ops2), " Multiply")
    );
    if ((metadata == null ? void 0 : metadata.latex) !== void 0)
      result.latex = metadata.latex;
    if ((metadata == null ? void 0 : metadata.wikidata) !== void 0)
      result.wikidata = metadata.wikidata;
    return result;
  }
  div(num, denom, metadata) {
    const result = canonicalDivide(this, num, denom);
    if ((metadata == null ? void 0 : metadata.latex) !== void 0)
      result.latex = metadata.latex;
    if ((metadata == null ? void 0 : metadata.wikidata) !== void 0)
      result.wikidata = metadata.wikidata;
    return result;
  }
  sqrt(base, metadata) {
    return canonicalPower(this, base, this._HALF, metadata);
  }
  pow(base, exponent, metadata) {
    if (base.symbol === "ExponentialE" && exponent instanceof import_complex20.Complex && exponent.re === 0) {
      const im = exponent.im;
      return this.number(this.complex(Math.cos(im), Math.sin(im)));
    }
    if (exponent instanceof AbstractBoxedExpression) {
      const num = exponent.numericValue;
      if (num !== null) {
        if (typeof num === "number")
          exponent = num;
        if (isRational(num))
          exponent = num;
      }
    }
    let e = null;
    if (typeof exponent === "number")
      e = exponent;
    else if (isRational(exponent)) {
      if (isMachineRational(exponent) && exponent[1] === 1)
        e = exponent[0];
      else if (isBigRational(exponent) && exponent[1] === BigInt(1))
        e = Number(exponent[0]);
    }
    if (e === 1)
      return base;
    const r = base.numericValue;
    if (e === -1 && r !== null) {
      if (typeof r === "number" && Number.isInteger(r))
        return this.number([1, r]);
      else if (r instanceof Decimal && r.isInteger())
        return this.number([BigInt(1), bigint(r)]);
      else if (isRational(r))
        return this.number([r[1], r[0]]);
    }
    if (typeof exponent === "number" || isRational(exponent))
      exponent = this.number(exponent);
    return canonicalPower(this, base, exponent, metadata);
  }
  inv(expr, metadata) {
    if (expr.isOne)
      return this._ONE;
    if (expr.isNegativeOne)
      return this._NEGATIVE_ONE;
    if (expr.isInfinity)
      return this._ZERO;
    const n = expr.numericValue;
    if (n !== null) {
      if (isRational(n))
        return this.number(inverse(n), { metadata });
      if (typeof n === "number" && Number.isInteger(n))
        return this.number([1, n], { metadata });
      if (n instanceof Decimal && n.isInteger())
        return this.number([BigInt(1), bigint(n)], { metadata });
      return this._fn("Divide", [this._ONE, expr], metadata);
    }
    if (expr.head === "Sqrt")
      return this._fn("Sqrt", [this.inv(expr.op1)], metadata);
    if (expr.head === "Divide")
      return this._fn("Divide", [expr[1], expr[0]], metadata);
    let e = this._NEGATIVE_ONE;
    if (expr.head === "Power") {
      if (expr.op2.isNegativeOne)
        return expr.op1;
      e = canonicalNegate(expr.op2);
      expr = expr.op1;
    }
    if (e.isNegativeOne)
      return this._fn("Divide", [this._ONE, expr], metadata);
    return this._fn("Power", [expr, e], metadata);
  }
  pair(first, second, metadata) {
    return new BoxedFunction(this, "Tuple", [first, second], {
      metadata,
      canonical: true
    });
  }
  tuple(elements, metadata) {
    return new BoxedFunction(this, "Tuple", canonical(elements), {
      metadata,
      canonical: true
    });
  }
  string(s, metadata) {
    return new BoxedString(this, s, metadata);
  }
  symbol(name, options) {
    var _a, _b, _c;
    options = options ? { ...options } : {};
    if (!("canonical" in options))
      options.canonical = true;
    name = name.normalize();
    if (name === "NaN")
      return this._NAN;
    if (name === "Infinity")
      return this._POSITIVE_INFINITY;
    if (name === "+Infinity")
      return this._POSITIVE_INFINITY;
    if (name === "-Infinity")
      return this._NEGATIVE_INFINITY;
    if (name === "Half")
      return this._HALF;
    if (this.strict && !isValidIdentifier(name)) {
      const where = (_a = options == null ? void 0 : options.metadata) == null ? void 0 : _a.latex;
      const nameStr = `'${name}'`;
      return this.error(
        ["invalid-identifier", { str: validateIdentifier(name) }],
        where ? ["Latex", `'${where}'`] : nameStr
      );
    }
    if (((_b = options == null ? void 0 : options.metadata) == null ? void 0 : _b.latex) !== void 0 && !options.canonical)
      return new BoxedSymbol(this, name, options);
    const result = this._commonSymbols[name];
    if (result) {
      if (!((_c = options == null ? void 0 : options.metadata) == null ? void 0 : _c.wikidata) || !result.wikidata || result.wikidata === options.metadata.wikidata)
        return result;
      if (options.canonical)
        return makeCanonicalSymbol(this, name);
      return new BoxedSymbol(this, name, options);
    }
    if (options.canonical)
      return makeCanonicalSymbol(this, name);
    return new BoxedSymbol(this, name, options);
  }
  domain(domain, metadata) {
    if (domain instanceof _BoxedDomain)
      return domain;
    if (domain instanceof AbstractBoxedExpression && domain.symbol)
      domain = domain.symbol;
    if (typeof domain === "string") {
      const expr = this._commonDomains[domain];
      if (expr)
        return expr;
    }
    return boxDomain(this, domain, metadata);
  }
  /*
   * This function tries to avoid creating a boxed number if `num` corresponds
   * to a common value for which we have a shared instance (-1, 0, NaN, etc...)
   */
  number(value, options) {
    var _a, _b;
    options = options ? { ...options } : {};
    if (!("canonical" in options))
      options.canonical = true;
    if (options.metadata === void 0) {
      if (typeof value === "bigint") {
        if (value === BigInt(1))
          return this._ONE;
        if (value === BigInt(0))
          return this._ZERO;
        if (value === BigInt(-1))
          return this._NEGATIVE_ONE;
      }
      if (typeof value === "number") {
        const n = value;
        if (n === 1)
          return this._ONE;
        if (n === 0)
          return this._ZERO;
        if (n === -1)
          return this._NEGATIVE_ONE;
        if (Number.isInteger(n) && this._commonNumbers[n] !== void 0) {
          if (this._commonNumbers[n] === null)
            this._commonNumbers[n] = (_a = boxNumber(this, value)) != null ? _a : this._NAN;
          return this._commonNumbers[n];
        }
        if (Number.isNaN(n))
          return this._NAN;
        if (!Number.isFinite(n))
          return n < 0 ? this._NEGATIVE_INFINITY : this._POSITIVE_INFINITY;
      }
    }
    if (typeof value === "bigint")
      value = this.bignum(value);
    return (_b = boxNumber(this, value, options)) != null ? _b : this._NAN;
  }
  rules(rules) {
    return boxRules(this, rules);
  }
  pattern(expr) {
    return new BoxedPattern(this, expr);
  }
  parse(latex, options) {
    var _a;
    if (typeof latex !== "string")
      return null;
    const result = this.latexSyntax.parse((_a = latexString(latex)) != null ? _a : latex);
    return this.box(result, options);
  }
  serialize(x, options) {
    if (typeof x === "object" && "json" in x) {
      const ce = "engine" in x ? x.engine : this;
      return this.latexSyntax.serialize(
        this.rawJson(ce.box(x, { canonical: false })),
        options
      );
    }
    return this.latexSyntax.serialize(x, options);
  }
  get latexOptions() {
    const latexSyntax = this.latexSyntax;
    return new Proxy(
      {
        ...this.latexSyntax.options,
        ...this.latexSyntax.serializer.options
      },
      {
        set(options, prop, value) {
          if (!(prop in options))
            return false;
          latexSyntax.updateOptions({ [prop]: value });
          return true;
        }
      }
    );
  }
  set latexOptions(opts) {
    this.latexSyntax.updateOptions(opts);
  }
  get jsonSerializationOptions() {
    if (this._useRawJsonSerializationOptions) {
      return new Proxy(this._rawJsonSerializationOptions, {
        get(options, prop) {
          if (!(prop in options))
            return void 0;
          return options[prop];
        }
      });
    }
    const self = this;
    return new Proxy(this._jsonSerializationOptions, {
      get(options, prop) {
        if (!(prop in options))
          return void 0;
        return options[prop];
      },
      set(options, prop, value) {
        if (!(prop in options))
          return false;
        self.jsonSerializationOptions = { [prop]: value };
        return true;
      }
    });
  }
  set jsonSerializationOptions(val) {
    if (val.exclude)
      this._jsonSerializationOptions.exclude = [...val.exclude];
    if (val.shorthands) {
      if (val.shorthands === "all" || val.shorthands.includes("all")) {
        this._jsonSerializationOptions.shorthands = [
          "function",
          "symbol",
          "string",
          "dictionary",
          "number"
        ];
      } else
        this._jsonSerializationOptions.shorthands = [...val.shorthands];
    }
    if (val.metadata) {
      if (val.metadata === "all" || val.metadata.includes("all")) {
        this._jsonSerializationOptions.metadata = ["latex", "wikidata"];
      } else
        this._jsonSerializationOptions.metadata = [...val.metadata];
    }
    if (typeof val.precision === "number" && val.precision > 0) {
      this._jsonSerializationOptions.precision = val.precision;
    }
    if (typeof val.repeatingDecimals === "boolean") {
      this._jsonSerializationOptions.repeatingDecimals = val.repeatingDecimals;
    }
  }
  rawJson(expr) {
    const save = this._useRawJsonSerializationOptions;
    this._useRawJsonSerializationOptions = true;
    const result = expr.json;
    this._useRawJsonSerializationOptions = save;
    return result;
  }
  /**
   * Return a list of all the assumptions that match a pattern.
   *
   * ```js
   *  ce.assume(x, 'PositiveInteger');
   *  ce.ask(['Greater', 'x', '_val'])
   *  //  -> [{'val': 0}]
   * ```
   */
  ask(pattern) {
    const pat = this.pattern(pattern);
    const result = [];
    for (const [assumption, val] of this.assumptions) {
      const m = pat.match(assumption, {
        numericTolerance: this._tolerance
      });
      if (m !== null && val === true)
        result.push(m);
    }
    return result;
  }
  // Based on contextual usage, infer domain of a symbol
  infer(symbol2, _domain) {
    if (typeof symbol2 !== "string") {
      if (!symbol2.symbol)
        return "internal-error";
      symbol2 = symbol2.symbol;
    }
    return "ok";
  }
  assume(arg1, arg2) {
    try {
      const latex = latexString(arg1);
      const predicate = latex ? this.parse(latex, { canonical: false }) : this.box(arg1, { canonical: false });
      if (!arg2)
        return assume(predicate);
      if (isDomain(arg2))
        return assume(this.box(["Element", predicate, this.domain(arg2)]));
      return assume(this.box(["Equal", predicate, arg2]));
    } catch (e) {
      console.error(e);
      return "internal-error";
    }
  }
  forget(symbol2) {
    var _a, _b;
    if (!this.context)
      throw Error("No scope available");
    if (symbol2 === void 0) {
      if (this.context.idTable)
        for (const k of this.context.idTable.keys())
          this.forget(k);
      this.assumptions.clear();
      return;
    }
    if (Array.isArray(symbol2)) {
      for (const x of symbol2)
        this.forget(x);
      return;
    }
    if (typeof symbol2 === "string") {
      if (this.context.idTable) {
        const def = this.context.idTable.get(symbol2);
        if (isSymbolDefinition(def)) {
          def.value = void 0;
          if ((_a = def.domain) == null ? void 0 : _a.isNumeric) {
            def.domain = (_b = this.defaultDomain) != null ? _b : this.domain("Number");
          } else
            def.domain = void 0;
        }
      }
      for (const [assumption, _val] of this.assumptions) {
        if (assumption.symbols.includes(symbol2))
          this.assumptions.delete(assumption);
      }
    }
  }
};
globalThis[Symbol.for("io.cortexjs.compute-engine")] = {
  ComputeEngine: ComputeEngine.prototype.constructor,
  version: "0.15.0"
};

// src/editor.ts
var CalctexHintRenderer = class {
  constructor(view) {
    this.decorations = this.buildDecorations(view);
  }
  update(update) {
    this.decorations = this.buildDecorations(update.view);
  }
  destroy() {
  }
  buildDecorations(view) {
    const builder = new import_state.RangeSetBuilder();
    for (let { from, to } of view.visibleRanges) {
      let cursorPos = view.state.selection.main.from;
      let mathBegin = null;
      (0, import_language.syntaxTree)(view.state).iterate({
        from,
        to,
        enter(node) {
          var _a;
          let nodeTags = node.type.name.split("_");
          if (nodeTags.contains("formatting-math-begin"))
            mathBegin = node.to;
          if (nodeTags.contains("formatting-math-end") && mathBegin != null) {
            let mathEnd = node.from;
            if (cursorPos < mathBegin || mathEnd < cursorPos)
              return;
            let relativeCursorPos = cursorPos - mathBegin;
            let latexContentLines = view.state.sliceDoc(mathBegin, mathEnd).split("\n");
            let focusedLatexLine = (_a = latexContentLines.find(
              (_line, i) => relativeCursorPos < latexContentLines.slice(0, i + 1).join("\n").length + 1
            )) != null ? _a : "";
            let previousLatexLines = latexContentLines.slice(0, latexContentLines.indexOf(focusedLatexLine));
            if (!focusedLatexLine.replace("\\\\", "").trim().endsWith(CalctexPlugin.INSTANCE.settings.calculationTriggerString))
              return;
            let splitFormula = focusedLatexLine.split(CalctexPlugin.INSTANCE.settings.calculationTriggerString).filter((part) => part.replace("\\\\", "").trim().length > 0);
            let formula = splitFormula[splitFormula.length - 1];
            const calculationEngine = new ComputeEngine();
            calculationEngine.latexOptions = {
              multiply: CalctexPlugin.INSTANCE.settings.multiplicationSymbol,
              groupSeparator: CalctexPlugin.INSTANCE.settings.groupSeparator
            };
            let formattedFormula = formula.replace("\\\\", "").replace("&", "");
            let expression = calculationEngine.parse(formattedFormula);
            for (let previousLine of previousLatexLines) {
              try {
                let formattedPreviousLine = previousLine.replace("\\\\", "").replace("&", "");
                let lineExpression = calculationEngine.parse(formattedPreviousLine).simplify();
                let lineExpressionParts = lineExpression.latex.split("=");
                if (lineExpressionParts.length <= 1)
                  continue;
                let jsonValue = calculationEngine.parse(lineExpressionParts[lineExpressionParts.length - 1].trim()).json;
                expression = expression.subs({
                  [lineExpressionParts[0].trim()]: jsonValue
                });
              } catch (e) {
                console.error(e);
              }
            }
            let result = expression.isValid ? expression.evaluate().latex : "\u26A1";
            let insertIndex = mathBegin + previousLatexLines.join("\n").length + focusedLatexLine.replace("\\\\", "").trimEnd().length;
            if (previousLatexLines.length > 0)
              insertIndex += 1;
            builder.add(
              insertIndex,
              insertIndex,
              import_view2.Decoration.replace({
                widget: new ResultWidget(view, insertIndex, ` ${result}`)
              })
            );
          }
        }
      });
    }
    return builder.finish();
  }
};
var pluginSpec = {
  decorations: (value) => value.decorations
};
var calctexHintRenderer = import_view2.ViewPlugin.fromClass(
  CalctexHintRenderer,
  pluginSpec
);

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  calculationTriggerString: "=",
  completionTriggerKey: "Tab",
  multiplicationSymbol: "*",
  groupSeparator: "'"
};
var CalctexSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Calculation Trigger String").setDesc("The string that triggers calculation.").addText(
      (text) => text.setPlaceholder("Type a string here").setValue(this.plugin.settings.calculationTriggerString).onChange(async (value) => {
        this.plugin.settings.calculationTriggerString = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Completion Trigger Key").setDesc("The key that triggers completion.").addText(
      (text) => text.setPlaceholder("Type name of a key here").setValue(this.plugin.settings.completionTriggerKey).onChange(async (value) => {
        this.plugin.settings.completionTriggerKey = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Multiplication Symbol").setDesc("The symbol used for multiplication (e.g. * or \\times).").addText(
      (text) => text.setPlaceholder("Type a symbol here").setValue(this.plugin.settings.multiplicationSymbol).onChange(async (value) => {
        this.plugin.settings.multiplicationSymbol = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Group Separator").setDesc("The symbol used for grouping numbers (e.g. ' or \\,).").addText(
      (text) => text.setPlaceholder("Type a symbol here").setValue(this.plugin.settings.groupSeparator).onChange(async (value) => {
        this.plugin.settings.groupSeparator = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/main.ts
var CalctexPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new CalctexSettingTab(this.app, this));
    this.registerEditorExtension([calctexHintRenderer]);
    CalctexPlugin.INSTANCE = this;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
/*! Bundled license information:

@cortex-js/compute-engine/dist/compute-engine.min.esm.js:
  (*! Bundled license information:
  
  complex.js/complex.js:
    (**
     * @license Complex.js v2.1.1 12/05/2020
     *
     * Copyright (c) 2020, Robert Eisele (robert@xarg.org)
     * Dual licensed under the MIT or GPL Version 2 licenses.
     **)
  
  decimal.js/decimal.mjs:
    (*!
     *  decimal.js v10.4.3
     *  An arbitrary-precision Decimal type for JavaScript.
     *  https://github.com/MikeMcl/decimal.js
     *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
     *  MIT Licence
     *)
  *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL2VkaXRvci50cyIsICJzcmMvd2lkZ2V0LnRzIiwgIm5vZGVfbW9kdWxlcy9AY29ydGV4LWpzL2NvbXB1dGUtZW5naW5lL2Rpc3QvY29tcHV0ZS1lbmdpbmUubWluLmVzbS5qcyIsICJzcmMvc2V0dGluZ3MudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgY2FsY3RleEhpbnRSZW5kZXJlciB9IGZyb20gJy4vZWRpdG9yJztcclxuaW1wb3J0IHsgQ2FsY3RleFBsdWdpblNldHRpbmdzLCBDYWxjdGV4U2V0dGluZ1RhYiwgREVGQVVMVF9TRVRUSU5HUyB9IGZyb20gJy4vc2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FsY3RleFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgc3RhdGljIElOU1RBTkNFOiBDYWxjdGV4UGx1Z2luO1xyXG4gIHNldHRpbmdzOiBDYWxjdGV4UGx1Z2luU2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IENhbGN0ZXhTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG4gICAgdGhpcy5yZWdpc3RlckVkaXRvckV4dGVuc2lvbihbY2FsY3RleEhpbnRSZW5kZXJlcl0pO1xyXG5cclxuICAgIENhbGN0ZXhQbHVnaW4uSU5TVEFOQ0UgPSB0aGlzO1xyXG5cdH1cclxuXHJcbiAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG4gIH1cclxufSIsICIvL0B0cy1pZ25vcmVcclxuaW1wb3J0IHsgc3ludGF4VHJlZSB9IGZyb20gXCJAY29kZW1pcnJvci9sYW5ndWFnZVwiO1xyXG5pbXBvcnQgeyBSYW5nZVNldEJ1aWxkZXIgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIjtcclxuaW1wb3J0IHtcclxuICBEZWNvcmF0aW9uLFxyXG4gIERlY29yYXRpb25TZXQsXHJcbiAgRWRpdG9yVmlldyxcclxuICBQbHVnaW5TcGVjLFxyXG4gIFBsdWdpblZhbHVlLFxyXG4gIFZpZXdQbHVnaW4sXHJcbiAgVmlld1VwZGF0ZVxyXG59IGZyb20gXCJAY29kZW1pcnJvci92aWV3XCI7XHJcbmltcG9ydCB7IFJlc3VsdFdpZGdldCB9IGZyb20gXCJzcmMvd2lkZ2V0XCI7XHJcbmltcG9ydCB7IENvbXB1dGVFbmdpbmUgfSBmcm9tICdAY29ydGV4LWpzL2NvbXB1dGUtZW5naW5lJztcclxuaW1wb3J0IENhbGN0ZXhQbHVnaW4gZnJvbSBcIi4vbWFpblwiO1xyXG5cclxuY2xhc3MgQ2FsY3RleEhpbnRSZW5kZXJlciBpbXBsZW1lbnRzIFBsdWdpblZhbHVlIHtcclxuICBkZWNvcmF0aW9uczogRGVjb3JhdGlvblNldDtcclxuXHJcbiAgY29uc3RydWN0b3IodmlldzogRWRpdG9yVmlldykge1xyXG4gICAgdGhpcy5kZWNvcmF0aW9ucyA9IHRoaXMuYnVpbGREZWNvcmF0aW9ucyh2aWV3KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSh1cGRhdGU6IFZpZXdVcGRhdGUpIHtcclxuICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmJ1aWxkRGVjb3JhdGlvbnModXBkYXRlLnZpZXcpO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpIHt9XHJcblxyXG4gIGJ1aWxkRGVjb3JhdGlvbnModmlldzogRWRpdG9yVmlldyk6IERlY29yYXRpb25TZXQge1xyXG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyBSYW5nZVNldEJ1aWxkZXI8RGVjb3JhdGlvbj4oKTtcclxuXHJcbiAgICBmb3IgKGxldCB7IGZyb20sIHRvIH0gb2Ygdmlldy52aXNpYmxlUmFuZ2VzKSB7XHJcbiAgICAgIGxldCBjdXJzb3JQb3MgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLmZyb207XHJcbiAgICAgIGxldCBtYXRoQmVnaW46IG51bWJlcnxudWxsID0gbnVsbDtcclxuXHJcbiAgICAgIHN5bnRheFRyZWUodmlldy5zdGF0ZSkuaXRlcmF0ZSh7XHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICB0byxcclxuICAgICAgICBlbnRlcihub2RlOiBhbnkpIHtcclxuICAgICAgICAgIGxldCBub2RlVGFncyA9IG5vZGUudHlwZS5uYW1lLnNwbGl0KFwiX1wiKVxyXG5cclxuICAgICAgICAgIGlmIChub2RlVGFncy5jb250YWlucyhcImZvcm1hdHRpbmctbWF0aC1iZWdpblwiKSlcclxuICAgICAgICAgICAgbWF0aEJlZ2luID0gbm9kZS50bztcclxuICAgICAgICAgIGlmIChub2RlVGFncy5jb250YWlucyhcImZvcm1hdHRpbmctbWF0aC1lbmRcIikgJiYgbWF0aEJlZ2luICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IG1hdGhFbmQgPSBub2RlLmZyb207XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBub3QgZWRpdGluZ1xyXG4gICAgICAgICAgICBpZiAoY3Vyc29yUG9zIDwgbWF0aEJlZ2luIHx8IG1hdGhFbmQgPCBjdXJzb3JQb3MpIHJldHVybjtcclxuICAgICAgICAgICAgbGV0IHJlbGF0aXZlQ3Vyc29yUG9zID0gY3Vyc29yUG9zIC0gbWF0aEJlZ2luO1xyXG5cclxuICAgICAgICAgICAgLy8gR2V0IGZvY3VzZWQgbGF0ZXggbGluZVxyXG4gICAgICAgICAgICBsZXQgbGF0ZXhDb250ZW50TGluZXMgPSB2aWV3LnN0YXRlLnNsaWNlRG9jKG1hdGhCZWdpbiwgbWF0aEVuZCkuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgIGxldCBmb2N1c2VkTGF0ZXhMaW5lID0gbGF0ZXhDb250ZW50TGluZXMuZmluZCgoX2xpbmUsIGkpID0+IFxyXG4gICAgICAgICAgICAgIHJlbGF0aXZlQ3Vyc29yUG9zIDwgbGF0ZXhDb250ZW50TGluZXMuc2xpY2UoMCwgaSArIDEpLmpvaW4oXCJcXG5cIikubGVuZ3RoICsgMVxyXG4gICAgICAgICAgICApID8/IFwiXCI7XHJcbiAgICAgICAgICAgIGxldCBwcmV2aW91c0xhdGV4TGluZXMgPSBsYXRleENvbnRlbnRMaW5lcy5zbGljZSgwLCBsYXRleENvbnRlbnRMaW5lcy5pbmRleE9mKGZvY3VzZWRMYXRleExpbmUpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIG5vdCBlbmRpbmcgd2l0aCB0aGUgdHJpZ2dlciBzeW1ib2xcclxuICAgICAgICAgICAgaWYgKCFmb2N1c2VkTGF0ZXhMaW5lLnJlcGxhY2UoXCJcXFxcXFxcXFwiLCBcIlwiKS50cmltKCkuZW5kc1dpdGgoQ2FsY3RleFBsdWdpbi5JTlNUQU5DRS5zZXR0aW5ncy5jYWxjdWxhdGlvblRyaWdnZXJTdHJpbmcpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGV4YWN0IGZvcm11bGEgdG8gY2FsY3VsYXRlXHJcbiAgICAgICAgICAgIGxldCBzcGxpdEZvcm11bGEgPSBmb2N1c2VkTGF0ZXhMaW5lLnNwbGl0KENhbGN0ZXhQbHVnaW4uSU5TVEFOQ0Uuc2V0dGluZ3MuY2FsY3VsYXRpb25UcmlnZ2VyU3RyaW5nKS5maWx0ZXIoKHBhcnQpID0+IHBhcnQucmVwbGFjZShcIlxcXFxcXFxcXCIsIFwiXCIpLnRyaW0oKS5sZW5ndGggPiAwKTtcclxuICAgICAgICAgICAgbGV0IGZvcm11bGEgPSBzcGxpdEZvcm11bGFbc3BsaXRGb3JtdWxhLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGNhbGN1bGF0aW9uIGVuZ2luZVxyXG4gICAgICAgICAgICBjb25zdCBjYWxjdWxhdGlvbkVuZ2luZSA9IG5ldyBDb21wdXRlRW5naW5lKCk7XHJcbiAgICAgICAgICAgIGNhbGN1bGF0aW9uRW5naW5lLmxhdGV4T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICBtdWx0aXBseTogQ2FsY3RleFBsdWdpbi5JTlNUQU5DRS5zZXR0aW5ncy5tdWx0aXBsaWNhdGlvblN5bWJvbCxcclxuICAgICAgICAgICAgICBncm91cFNlcGFyYXRvcjogQ2FsY3RleFBsdWdpbi5JTlNUQU5DRS5zZXR0aW5ncy5ncm91cFNlcGFyYXRvcixcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBmb3JtYXR0ZWRGb3JtdWxhID0gZm9ybXVsYS5yZXBsYWNlKFwiXFxcXFxcXFxcIiwgXCJcIikucmVwbGFjZShcIiZcIiwgXCJcIik7XHJcbiAgICAgICAgICAgIGxldCBleHByZXNzaW9uID0gY2FsY3VsYXRpb25FbmdpbmUucGFyc2UoZm9ybWF0dGVkRm9ybXVsYSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgdmFyaWFibGVzIGZyb20gcHJldmlvdXMgbGluZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgcHJldmlvdXNMaW5lIG9mIHByZXZpb3VzTGF0ZXhMaW5lcykge1xyXG4gICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGxhc3QgbGluZSBicmVhayBhbmQgYWxpZ24gc2lnblxyXG4gICAgICAgICAgICAgICAgbGV0IGZvcm1hdHRlZFByZXZpb3VzTGluZSA9IHByZXZpb3VzTGluZS5yZXBsYWNlKFwiXFxcXFxcXFxcIiwgXCJcIikucmVwbGFjZShcIiZcIiwgXCJcIilcclxuICAgICAgICAgICAgICAgIGxldCBsaW5lRXhwcmVzc2lvbiA9IGNhbGN1bGF0aW9uRW5naW5lLnBhcnNlKGZvcm1hdHRlZFByZXZpb3VzTGluZSkuc2ltcGxpZnkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbGluZUV4cHJlc3Npb25QYXJ0cyA9IGxpbmVFeHByZXNzaW9uLmxhdGV4LnNwbGl0KFwiPVwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChsaW5lRXhwcmVzc2lvblBhcnRzLmxlbmd0aCA8PSAxKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQganNvblZhbHVlID0gY2FsY3VsYXRpb25FbmdpbmUucGFyc2UobGluZUV4cHJlc3Npb25QYXJ0c1tsaW5lRXhwcmVzc2lvblBhcnRzLmxlbmd0aCAtIDFdLnRyaW0oKSkuanNvbjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24uc3Vicyh7XHJcbiAgICAgICAgICAgICAgICAgIFtsaW5lRXhwcmVzc2lvblBhcnRzWzBdLnRyaW0oKV06IGpzb25WYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyBjb25zb2xlLmVycm9yKGUpOyB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZXhwcmVzc2lvblxyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZXhwcmVzc2lvbi5pc1ZhbGlkID8gZXhwcmVzc2lvbi5ldmFsdWF0ZSgpLmxhdGV4IDogXCJcdTI2QTFcIjtcclxuXHJcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgaW5zZXJ0aW9uIGluZGV4XHJcbiAgICAgICAgICAgIGxldCBpbnNlcnRJbmRleCA9IG1hdGhCZWdpbiArIHByZXZpb3VzTGF0ZXhMaW5lcy5qb2luKFwiXFxuXCIpLmxlbmd0aCArIGZvY3VzZWRMYXRleExpbmUucmVwbGFjZShcIlxcXFxcXFxcXCIsIFwiXCIpLnRyaW1FbmQoKS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0xhdGV4TGluZXMubGVuZ3RoID4gMCkgaW5zZXJ0SW5kZXggKz0gMTsgLy8gTXVsdGlsaW5lIGZvcm11bGEgd2l0aCAkJFxyXG5cclxuICAgICAgICAgICAgYnVpbGRlci5hZGQoXHJcbiAgICAgICAgICAgICAgaW5zZXJ0SW5kZXgsXHJcbiAgICAgICAgICAgICAgaW5zZXJ0SW5kZXgsXHJcbiAgICAgICAgICAgICAgRGVjb3JhdGlvbi5yZXBsYWNlKHtcclxuICAgICAgICAgICAgICAgIHdpZGdldDogbmV3IFJlc3VsdFdpZGdldCh2aWV3LCBpbnNlcnRJbmRleCwgYCAke3Jlc3VsdH1gKSxcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBidWlsZGVyLmZpbmlzaCgpO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgcGx1Z2luU3BlYzogUGx1Z2luU3BlYzxDYWxjdGV4SGludFJlbmRlcmVyPiA9IHtcclxuICBkZWNvcmF0aW9uczogKHZhbHVlOiBDYWxjdGV4SGludFJlbmRlcmVyKSA9PiB2YWx1ZS5kZWNvcmF0aW9ucyxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdGV4SGludFJlbmRlcmVyID0gVmlld1BsdWdpbi5mcm9tQ2xhc3MoXHJcbiAgQ2FsY3RleEhpbnRSZW5kZXJlcixcclxuICBwbHVnaW5TcGVjXHJcbik7IiwgImltcG9ydCB7IEVkaXRvclZpZXcsIFdpZGdldFR5cGUgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xyXG5pbXBvcnQgQ2FsY3RleFBsdWdpbiBmcm9tIFwiLi9tYWluXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzdWx0V2lkZ2V0IGV4dGVuZHMgV2lkZ2V0VHlwZSB7XHJcbiAgaW5zZXJ0TG9jYXRpb246IG51bWJlcjtcclxuICByZXN1bHRUZXh0OiBzdHJpbmc7XHJcbiAga2V5TGlzdGVuZXI6IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHZpZXc6IEVkaXRvclZpZXcsIHB1YmxpYyBpbmRleDogbnVtYmVyLCBwdWJsaWMgdGV4dDogc3RyaW5nKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgdG9ET00oX3ZpZXc6IEVkaXRvclZpZXcpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmtleUxpc3RlbmVyLCB0cnVlKTtcclxuXHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgIGRpdi5jbGFzc05hbWUgPSBcInJlc3VsdC10ZXh0XCI7XHJcbiAgICBcclxuICAgIHRoaXMuaW5zZXJ0TG9jYXRpb24gPSB0aGlzLmluZGV4O1xyXG4gICAgdGhpcy5yZXN1bHRUZXh0ID0gdGhpcy50ZXh0O1xyXG5cclxuICAgIGRpdi5pbm5lclRleHQgPSB0aGlzLnRleHQ7XHJcbiAgICB0aGlzLmtleUxpc3RlbmVyID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChldmVudC5rZXkgIT09IENhbGN0ZXhQbHVnaW4uSU5TVEFOQ0Uuc2V0dGluZ3MuY29tcGxldGlvblRyaWdnZXJLZXkpIHJldHVybjtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5pbnNlcnRUb0RPTSgpO1xyXG4gICAgfVxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5rZXlMaXN0ZW5lciwgdHJ1ZSk7XHJcbiAgICBkaXYub25jbGljayA9ICgpID0+IHsgdGhpcy5pbnNlcnRUb0RPTSgpOyB9O1xyXG5cclxuICAgIHJldHVybiBkaXY7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KGRvbTogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMua2V5TGlzdGVuZXIsIHRydWUpO1xyXG4gICAgZG9tLnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgaW5zZXJ0VG9ET00oKSB7XHJcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMudmlldy5zdGF0ZS51cGRhdGUoe1xyXG4gICAgICBjaGFuZ2VzOiB7XHJcbiAgICAgICAgZnJvbTogdGhpcy5pbnNlcnRMb2NhdGlvbixcclxuICAgICAgICB0bzogdGhpcy5pbnNlcnRMb2NhdGlvbixcclxuICAgICAgICBpbnNlcnQ6IHRoaXMucmVzdWx0VGV4dCxcclxuICAgICAgfSxcclxuICAgICAgc2VsZWN0aW9uOiB7XHJcbiAgICAgICAgYW5jaG9yOiB0aGlzLmluc2VydExvY2F0aW9uICsgdGhpcy5yZXN1bHRUZXh0Lmxlbmd0aCxcclxuICAgICAgICBoZWFkOiB0aGlzLmluc2VydExvY2F0aW9uICsgdGhpcy5yZXN1bHRUZXh0Lmxlbmd0aCxcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnZpZXcuZGlzcGF0Y2godHJhbnNhY3Rpb24pO1xyXG5cclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMua2V5TGlzdGVuZXIsIHRydWUpO1xyXG4gIH1cclxufSIsICIvKiogQ29ydGV4SlMgQ29tcHV0ZSBFbmdpbmUgMC4xNS4wICovXG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZDIpID0+IGZ1bmN0aW9uIF9fcmVxdWlyZSgpIHtcbiAgcmV0dXJuIG1vZDIgfHwgKDAsIGNiW19fZ2V0T3duUHJvcE5hbWVzKGNiKVswXV0pKChtb2QyID0geyBleHBvcnRzOiB7fSB9KS5leHBvcnRzLCBtb2QyKSwgbW9kMi5leHBvcnRzO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZDIsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZDIgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QyKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kMiB8fCAhbW9kMi5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZDIsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZDJcbikpO1xuXG4vLyBub2RlX21vZHVsZXMvY29tcGxleC5qcy9jb21wbGV4LmpzXG52YXIgcmVxdWlyZV9jb21wbGV4ID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2NvbXBsZXguanMvY29tcGxleC5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgIChmdW5jdGlvbihyb290KSB7XG4gICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgIHZhciBjb3NoMiA9IE1hdGguY29zaCB8fCBmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyh4KSA8IDFlLTkgPyAxIC0geCA6IChNYXRoLmV4cCh4KSArIE1hdGguZXhwKC14KSkgKiAwLjU7XG4gICAgICB9O1xuICAgICAgdmFyIHNpbmgyID0gTWF0aC5zaW5oIHx8IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHgpIDwgMWUtOSA/IHggOiAoTWF0aC5leHAoeCkgLSBNYXRoLmV4cCgteCkpICogMC41O1xuICAgICAgfTtcbiAgICAgIHZhciBjb3NtMSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgdmFyIGIgPSBNYXRoLlBJIC8gNDtcbiAgICAgICAgaWYgKC1iID4geCB8fCB4ID4gYikge1xuICAgICAgICAgIHJldHVybiBNYXRoLmNvcyh4KSAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHh4ID0geCAqIHg7XG4gICAgICAgIHJldHVybiB4eCAqICh4eCAqICh4eCAqICh4eCAqICh4eCAqICh4eCAqICh4eCAqICh4eCAvIDIwOTIyNzg5ODg4ZTMgLSAxIC8gODcxNzgyOTEyMDApICsgMSAvIDQ3OTAwMTYwMCkgLSAxIC8gMzYyODgwMCkgKyAxIC8gNDAzMjApIC0gMSAvIDcyMCkgKyAxIC8gMjQpIC0gMSAvIDIpO1xuICAgICAgfTtcbiAgICAgIHZhciBoeXBvdDIgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHZhciBhID0gTWF0aC5hYnMoeCk7XG4gICAgICAgIHZhciBiID0gTWF0aC5hYnMoeSk7XG4gICAgICAgIGlmIChhIDwgM2UzICYmIGIgPCAzZTMpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhIDwgYikge1xuICAgICAgICAgIGEgPSBiO1xuICAgICAgICAgIGIgPSB4IC8geTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiID0geSAvIHg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEgKiBNYXRoLnNxcnQoMSArIGIgKiBiKTtcbiAgICAgIH07XG4gICAgICB2YXIgcGFyc2VyX2V4aXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoXCJJbnZhbGlkIFBhcmFtXCIpO1xuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIGxvZ0h5cG90KGEsIGIpIHtcbiAgICAgICAgdmFyIF9hID0gTWF0aC5hYnMoYSk7XG4gICAgICAgIHZhciBfYiA9IE1hdGguYWJzKGIpO1xuICAgICAgICBpZiAoYSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLmxvZyhfYik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5sb2coX2EpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfYSA8IDNlMyAmJiBfYiA8IDNlMykge1xuICAgICAgICAgIHJldHVybiBNYXRoLmxvZyhhICogYSArIGIgKiBiKSAqIDAuNTtcbiAgICAgICAgfVxuICAgICAgICBhID0gYSAvIDI7XG4gICAgICAgIGIgPSBiIC8gMjtcbiAgICAgICAgcmV0dXJuIDAuNSAqIE1hdGgubG9nKGEgKiBhICsgYiAqIGIpICsgTWF0aC5MTjI7XG4gICAgICB9XG4gICAgICB2YXIgcGFyc2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHZhciB6ID0geyBcInJlXCI6IDAsIFwiaW1cIjogMCB9O1xuICAgICAgICBpZiAoYSA9PT0gdm9pZCAwIHx8IGEgPT09IG51bGwpIHtcbiAgICAgICAgICB6W1wicmVcIl0gPSB6W1wiaW1cIl0gPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGIgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHpbXCJyZVwiXSA9IGE7XG4gICAgICAgICAgeltcImltXCJdID0gYjtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgc3dpdGNoICh0eXBlb2YgYSkge1xuICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgICBpZiAoXCJpbVwiIGluIGEgJiYgXCJyZVwiIGluIGEpIHtcbiAgICAgICAgICAgICAgICB6W1wicmVcIl0gPSBhW1wicmVcIl07XG4gICAgICAgICAgICAgICAgeltcImltXCJdID0gYVtcImltXCJdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwiYWJzXCIgaW4gYSAmJiBcImFyZ1wiIGluIGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShhW1wiYWJzXCJdKSAmJiBOdW1iZXIuaXNGaW5pdGUoYVtcImFyZ1wiXSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJJTkZJTklUWVwiXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeltcInJlXCJdID0gYVtcImFic1wiXSAqIE1hdGguY29zKGFbXCJhcmdcIl0pO1xuICAgICAgICAgICAgICAgIHpbXCJpbVwiXSA9IGFbXCJhYnNcIl0gKiBNYXRoLnNpbihhW1wiYXJnXCJdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChcInJcIiBpbiBhICYmIFwicGhpXCIgaW4gYSkge1xuICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGFbXCJyXCJdKSAmJiBOdW1iZXIuaXNGaW5pdGUoYVtcInBoaVwiXSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJJTkZJTklUWVwiXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeltcInJlXCJdID0gYVtcInJcIl0gKiBNYXRoLmNvcyhhW1wicGhpXCJdKTtcbiAgICAgICAgICAgICAgICB6W1wiaW1cIl0gPSBhW1wiclwiXSAqIE1hdGguc2luKGFbXCJwaGlcIl0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGEubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgeltcInJlXCJdID0gYVswXTtcbiAgICAgICAgICAgICAgICB6W1wiaW1cIl0gPSBhWzFdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnNlcl9leGl0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgIHpbXCJpbVwiXSA9IC8qIHZvaWQgKi9cbiAgICAgICAgICAgICAgeltcInJlXCJdID0gMDtcbiAgICAgICAgICAgICAgdmFyIHRva2VucyA9IGEubWF0Y2goL1xcZCtcXC4/XFxkKmVbKy1dP1xcZCt8XFxkK1xcLj9cXGQqfFxcLlxcZCt8Li9nKTtcbiAgICAgICAgICAgICAgdmFyIHBsdXMgPSAxO1xuICAgICAgICAgICAgICB2YXIgbWludXMgPSAwO1xuICAgICAgICAgICAgICBpZiAodG9rZW5zID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyX2V4aXQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjID09PSBcIiBcIiB8fCBjID09PSBcIlx0XCIgfHwgYyA9PT0gXCJcXG5cIikge1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgIHBsdXMrKztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgICBtaW51cysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCJpXCIgfHwgYyA9PT0gXCJJXCIpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChwbHVzICsgbWludXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VyX2V4aXQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICh0b2tlbnNbaSArIDFdICE9PSBcIiBcIiAmJiAhaXNOYU4odG9rZW5zW2kgKyAxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgeltcImltXCJdICs9IHBhcnNlRmxvYXQoKG1pbnVzICUgMiA/IFwiLVwiIDogXCJcIikgKyB0b2tlbnNbaSArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeltcImltXCJdICs9IHBhcnNlRmxvYXQoKG1pbnVzICUgMiA/IFwiLVwiIDogXCJcIikgKyBcIjFcIik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBwbHVzID0gbWludXMgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAocGx1cyArIG1pbnVzID09PSAwIHx8IGlzTmFOKGMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlcl9leGl0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAodG9rZW5zW2kgKyAxXSA9PT0gXCJpXCIgfHwgdG9rZW5zW2kgKyAxXSA9PT0gXCJJXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgeltcImltXCJdICs9IHBhcnNlRmxvYXQoKG1pbnVzICUgMiA/IFwiLVwiIDogXCJcIikgKyBjKTtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeltcInJlXCJdICs9IHBhcnNlRmxvYXQoKG1pbnVzICUgMiA/IFwiLVwiIDogXCJcIikgKyBjKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHBsdXMgPSBtaW51cyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChwbHVzICsgbWludXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyX2V4aXQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgICAgeltcImltXCJdID0gMDtcbiAgICAgICAgICAgICAgeltcInJlXCJdID0gYTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBwYXJzZXJfZXhpdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmFOKHpbXCJyZVwiXSkgfHwgaXNOYU4oeltcImltXCJdKSkge1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB6O1xuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIENvbXBsZXgyMChhLCBiKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb21wbGV4MjApKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoYSwgYik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHogPSBwYXJzZShhLCBiKTtcbiAgICAgICAgdGhpc1tcInJlXCJdID0geltcInJlXCJdO1xuICAgICAgICB0aGlzW1wiaW1cIl0gPSB6W1wiaW1cIl07XG4gICAgICB9XG4gICAgICBDb21wbGV4MjAucHJvdG90eXBlID0ge1xuICAgICAgICBcInJlXCI6IDAsXG4gICAgICAgIFwiaW1cIjogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZXMgdGhlIHNpZ24gb2YgYSBjb21wbGV4IG51bWJlciwgd2hpY2ggaXMgYSBub3JtYWxpemVkIGNvbXBsZXhcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcInNpZ25cIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFiczIgPSB0aGlzW1wiYWJzXCJdKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICB0aGlzW1wicmVcIl0gLyBhYnMyLFxuICAgICAgICAgICAgdGhpc1tcImltXCJdIC8gYWJzMlxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIHR3byBjb21wbGV4IG51bWJlcnNcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImFkZFwiOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgdmFyIHogPSBuZXcgQ29tcGxleDIwKGEsIGIpO1xuICAgICAgICAgIGlmICh0aGlzW1wiaXNJbmZpbml0ZVwiXSgpICYmIHpbXCJpc0luZmluaXRlXCJdKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJOQU5cIl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzW1wiaXNJbmZpbml0ZVwiXSgpIHx8IHpbXCJpc0luZmluaXRlXCJdKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJJTkZJTklUWVwiXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICB0aGlzW1wicmVcIl0gKyB6W1wicmVcIl0sXG4gICAgICAgICAgICB0aGlzW1wiaW1cIl0gKyB6W1wiaW1cIl1cbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU3VidHJhY3RzIHR3byBjb21wbGV4IG51bWJlcnNcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcInN1YlwiOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgdmFyIHogPSBuZXcgQ29tcGxleDIwKGEsIGIpO1xuICAgICAgICAgIGlmICh0aGlzW1wiaXNJbmZpbml0ZVwiXSgpICYmIHpbXCJpc0luZmluaXRlXCJdKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJOQU5cIl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzW1wiaXNJbmZpbml0ZVwiXSgpIHx8IHpbXCJpc0luZmluaXRlXCJdKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJJTkZJTklUWVwiXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICB0aGlzW1wicmVcIl0gLSB6W1wicmVcIl0sXG4gICAgICAgICAgICB0aGlzW1wiaW1cIl0gLSB6W1wiaW1cIl1cbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogTXVsdGlwbGllcyB0d28gY29tcGxleCBudW1iZXJzXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJtdWxcIjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHZhciB6ID0gbmV3IENvbXBsZXgyMChhLCBiKTtcbiAgICAgICAgICBpZiAodGhpc1tcImlzSW5maW5pdGVcIl0oKSAmJiB6W1wiaXNaZXJvXCJdKCkgfHwgdGhpc1tcImlzWmVyb1wiXSgpICYmIHpbXCJpc0luZmluaXRlXCJdKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJOQU5cIl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzW1wiaXNJbmZpbml0ZVwiXSgpIHx8IHpbXCJpc0luZmluaXRlXCJdKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJJTkZJTklUWVwiXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHpbXCJpbVwiXSA9PT0gMCAmJiB0aGlzW1wiaW1cIl0gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKHRoaXNbXCJyZVwiXSAqIHpbXCJyZVwiXSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgdGhpc1tcInJlXCJdICogeltcInJlXCJdIC0gdGhpc1tcImltXCJdICogeltcImltXCJdLFxuICAgICAgICAgICAgdGhpc1tcInJlXCJdICogeltcImltXCJdICsgdGhpc1tcImltXCJdICogeltcInJlXCJdXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpdmlkZXMgdHdvIGNvbXBsZXggbnVtYmVyc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwiZGl2XCI6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICB2YXIgeiA9IG5ldyBDb21wbGV4MjAoYSwgYik7XG4gICAgICAgICAgaWYgKHRoaXNbXCJpc1plcm9cIl0oKSAmJiB6W1wiaXNaZXJvXCJdKCkgfHwgdGhpc1tcImlzSW5maW5pdGVcIl0oKSAmJiB6W1wiaXNJbmZpbml0ZVwiXSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29tcGxleDIwW1wiTkFOXCJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpc1tcImlzSW5maW5pdGVcIl0oKSB8fCB6W1wiaXNaZXJvXCJdKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJJTkZJTklUWVwiXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXNbXCJpc1plcm9cIl0oKSB8fCB6W1wiaXNJbmZpbml0ZVwiXSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29tcGxleDIwW1wiWkVST1wiXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYSA9IHRoaXNbXCJyZVwiXTtcbiAgICAgICAgICBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIHZhciBjID0geltcInJlXCJdO1xuICAgICAgICAgIHZhciBkID0geltcImltXCJdO1xuICAgICAgICAgIHZhciB0LCB4O1xuICAgICAgICAgIGlmICgwID09PSBkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChhIC8gYywgYiAvIGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoTWF0aC5hYnMoYykgPCBNYXRoLmFicyhkKSkge1xuICAgICAgICAgICAgeCA9IGMgLyBkO1xuICAgICAgICAgICAgdCA9IGMgKiB4ICsgZDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgICAoYSAqIHggKyBiKSAvIHQsXG4gICAgICAgICAgICAgIChiICogeCAtIGEpIC8gdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeCA9IGQgLyBjO1xuICAgICAgICAgICAgdCA9IGQgKiB4ICsgYztcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgICAoYSArIGIgKiB4KSAvIHQsXG4gICAgICAgICAgICAgIChiIC0gYSAqIHgpIC8gdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIHBvd2VyIG9mIHR3byBjb21wbGV4IG51bWJlcnNcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcInBvd1wiOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgdmFyIHogPSBuZXcgQ29tcGxleDIwKGEsIGIpO1xuICAgICAgICAgIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgYiA9IHRoaXNbXCJpbVwiXTtcbiAgICAgICAgICBpZiAoeltcImlzWmVyb1wiXSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29tcGxleDIwW1wiT05FXCJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoeltcImltXCJdID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoYiA9PT0gMCAmJiBhID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChNYXRoLnBvdyhhLCB6W1wicmVcIl0pLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYSA9PT0gMCkge1xuICAgICAgICAgICAgICBzd2l0Y2ggKCh6W1wicmVcIl0gJSA0ICsgNCkgJSA0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoTWF0aC5wb3coYiwgeltcInJlXCJdKSwgMCk7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoMCwgTWF0aC5wb3coYiwgeltcInJlXCJdKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoLU1hdGgucG93KGIsIHpbXCJyZVwiXSksIDApO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKDAsIC1NYXRoLnBvdyhiLCB6W1wicmVcIl0pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYSA9PT0gMCAmJiBiID09PSAwICYmIHpbXCJyZVwiXSA+IDAgJiYgeltcImltXCJdID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wbGV4MjBbXCJaRVJPXCJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgYXJnID0gTWF0aC5hdGFuMihiLCBhKTtcbiAgICAgICAgICB2YXIgbG9oID0gbG9nSHlwb3QoYSwgYik7XG4gICAgICAgICAgYSA9IE1hdGguZXhwKHpbXCJyZVwiXSAqIGxvaCAtIHpbXCJpbVwiXSAqIGFyZyk7XG4gICAgICAgICAgYiA9IHpbXCJpbVwiXSAqIGxvaCArIHpbXCJyZVwiXSAqIGFyZztcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIGEgKiBNYXRoLmNvcyhiKSxcbiAgICAgICAgICAgIGEgKiBNYXRoLnNpbihiKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggc3F1YXJlIHJvb3RcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcInNxcnRcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgdmFyIHIgPSB0aGlzW1wiYWJzXCJdKCk7XG4gICAgICAgICAgdmFyIHJlLCBpbTtcbiAgICAgICAgICBpZiAoYSA+PSAwKSB7XG4gICAgICAgICAgICBpZiAoYiA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChNYXRoLnNxcnQoYSksIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmUgPSAwLjUgKiBNYXRoLnNxcnQoMiAqIChyICsgYSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZSA9IE1hdGguYWJzKGIpIC8gTWF0aC5zcXJ0KDIgKiAociAtIGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGEgPD0gMCkge1xuICAgICAgICAgICAgaW0gPSAwLjUgKiBNYXRoLnNxcnQoMiAqIChyIC0gYSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbSA9IE1hdGguYWJzKGIpIC8gTWF0aC5zcXJ0KDIgKiAociArIGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAocmUsIGIgPCAwID8gLWltIDogaW0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGV4cG9uZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJleHBcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRtcCA9IE1hdGguZXhwKHRoaXNbXCJyZVwiXSk7XG4gICAgICAgICAgaWYgKHRoaXNbXCJpbVwiXSA9PT0gMCkge1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIHRtcCAqIE1hdGguY29zKHRoaXNbXCJpbVwiXSksXG4gICAgICAgICAgICB0bXAgKiBNYXRoLnNpbih0aGlzW1wiaW1cIl0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBleHBvbmVudCBhbmQgc3VidHJhY3RzIG9uZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtYXkgYmUgbW9yZSBhY2N1cmF0ZSB0aGFuIGBDb21wbGV4KHgpLmV4cCgpLnN1YigxKWAgaWZcbiAgICAgICAgICogYHhgIGlzIHNtYWxsLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwiZXhwbTFcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBNYXRoLmV4cG0xKGEpICogTWF0aC5jb3MoYikgKyBjb3NtMShiKSxcbiAgICAgICAgICAgIE1hdGguZXhwKGEpICogTWF0aC5zaW4oYilcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlIHRoZSBuYXR1cmFsIGxvZ1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwibG9nXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpc1tcInJlXCJdO1xuICAgICAgICAgIHZhciBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIGlmIChiID09PSAwICYmIGEgPiAwKSB7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgbG9nSHlwb3QoYSwgYiksXG4gICAgICAgICAgICBNYXRoLmF0YW4yKGIsIGEpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgbWFnbml0dWRlIG9mIHRoZSBjb21wbGV4IG51bWJlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgXCJhYnNcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGh5cG90Mih0aGlzW1wicmVcIl0sIHRoaXNbXCJpbVwiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGFuZ2xlIG9mIHRoZSBjb21wbGV4IG51bWJlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgXCJhcmdcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIodGhpc1tcImltXCJdLCB0aGlzW1wicmVcIl0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlIHRoZSBzaW5lIG9mIHRoZSBjb21wbGV4IG51bWJlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwic2luXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpc1tcInJlXCJdO1xuICAgICAgICAgIHZhciBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgTWF0aC5zaW4oYSkgKiBjb3NoMihiKSxcbiAgICAgICAgICAgIE1hdGguY29zKGEpICogc2luaDIoYilcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlIHRoZSBjb3NpbmVcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImNvc1wiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYSA9IHRoaXNbXCJyZVwiXTtcbiAgICAgICAgICB2YXIgYiA9IHRoaXNbXCJpbVwiXTtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIE1hdGguY29zKGEpICogY29zaDIoYiksXG4gICAgICAgICAgICAtTWF0aC5zaW4oYSkgKiBzaW5oMihiKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIHRhbmdlbnRcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcInRhblwiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYSA9IDIgKiB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSAyICogdGhpc1tcImltXCJdO1xuICAgICAgICAgIHZhciBkID0gTWF0aC5jb3MoYSkgKyBjb3NoMihiKTtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIE1hdGguc2luKGEpIC8gZCxcbiAgICAgICAgICAgIHNpbmgyKGIpIC8gZFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvdGFuZ2VudFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwiY290XCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhID0gMiAqIHRoaXNbXCJyZVwiXTtcbiAgICAgICAgICB2YXIgYiA9IDIgKiB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgdmFyIGQgPSBNYXRoLmNvcyhhKSAtIGNvc2gyKGIpO1xuICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgLU1hdGguc2luKGEpIC8gZCxcbiAgICAgICAgICAgIHNpbmgyKGIpIC8gZFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIHNlY2FudFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwic2VjXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpc1tcInJlXCJdO1xuICAgICAgICAgIHZhciBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIHZhciBkID0gMC41ICogY29zaDIoMiAqIGIpICsgMC41ICogTWF0aC5jb3MoMiAqIGEpO1xuICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgTWF0aC5jb3MoYSkgKiBjb3NoMihiKSAvIGQsXG4gICAgICAgICAgICBNYXRoLnNpbihhKSAqIHNpbmgyKGIpIC8gZFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvc2VjYW5zXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJjc2NcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgdmFyIGQgPSAwLjUgKiBjb3NoMigyICogYikgLSAwLjUgKiBNYXRoLmNvcygyICogYSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBNYXRoLnNpbihhKSAqIGNvc2gyKGIpIC8gZCxcbiAgICAgICAgICAgIC1NYXRoLmNvcyhhKSAqIHNpbmgyKGIpIC8gZFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggYXJjdXMgc2ludXNcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImFzaW5cIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgdmFyIHQxID0gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIGIgKiBiIC0gYSAqIGEgKyAxLFxuICAgICAgICAgICAgLTIgKiBhICogYlxuICAgICAgICAgIClbXCJzcXJ0XCJdKCk7XG4gICAgICAgICAgdmFyIHQyID0gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIHQxW1wicmVcIl0gLSBiLFxuICAgICAgICAgICAgdDFbXCJpbVwiXSArIGFcbiAgICAgICAgICApW1wibG9nXCJdKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAodDJbXCJpbVwiXSwgLXQyW1wicmVcIl0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGFyY3VzIGNvc2ludXNcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImFjb3NcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgdmFyIHQxID0gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIGIgKiBiIC0gYSAqIGEgKyAxLFxuICAgICAgICAgICAgLTIgKiBhICogYlxuICAgICAgICAgIClbXCJzcXJ0XCJdKCk7XG4gICAgICAgICAgdmFyIHQyID0gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIHQxW1wicmVcIl0gLSBiLFxuICAgICAgICAgICAgdDFbXCJpbVwiXSArIGFcbiAgICAgICAgICApW1wibG9nXCJdKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoTWF0aC5QSSAvIDIgLSB0MltcImltXCJdLCB0MltcInJlXCJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhcmN1cyB0YW5nZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJhdGFuXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpc1tcInJlXCJdO1xuICAgICAgICAgIHZhciBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIGlmIChhID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoYiA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMCgwLCBJbmZpbml0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoMCwgLUluZmluaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGQgPSBhICogYSArICgxIC0gYikgKiAoMSAtIGIpO1xuICAgICAgICAgIHZhciB0MSA9IG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICAoMSAtIGIgKiBiIC0gYSAqIGEpIC8gZCxcbiAgICAgICAgICAgIC0yICogYSAvIGRcbiAgICAgICAgICApLmxvZygpO1xuICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKC0wLjUgKiB0MVtcImltXCJdLCAwLjUgKiB0MVtcInJlXCJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhcmN1cyBjb3RhbmdlbnRcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImFjb3RcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgaWYgKGIgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKE1hdGguYXRhbjIoMSwgYSksIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZCA9IGEgKiBhICsgYiAqIGI7XG4gICAgICAgICAgcmV0dXJuIGQgIT09IDAgPyBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgYSAvIGQsXG4gICAgICAgICAgICAtYiAvIGRcbiAgICAgICAgICApLmF0YW4oKSA6IG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBhICE9PSAwID8gYSAvIDAgOiAwLFxuICAgICAgICAgICAgYiAhPT0gMCA/IC1iIC8gMCA6IDBcbiAgICAgICAgICApLmF0YW4oKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhcmN1cyBzZWNhbnRcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImFzZWNcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgaWYgKGEgPT09IDAgJiYgYiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoMCwgSW5maW5pdHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZCA9IGEgKiBhICsgYiAqIGI7XG4gICAgICAgICAgcmV0dXJuIGQgIT09IDAgPyBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgYSAvIGQsXG4gICAgICAgICAgICAtYiAvIGRcbiAgICAgICAgICApLmFjb3MoKSA6IG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBhICE9PSAwID8gYSAvIDAgOiAwLFxuICAgICAgICAgICAgYiAhPT0gMCA/IC1iIC8gMCA6IDBcbiAgICAgICAgICApLmFjb3MoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhcmN1cyBjb3NlY2Fuc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwiYWNzY1wiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYSA9IHRoaXNbXCJyZVwiXTtcbiAgICAgICAgICB2YXIgYiA9IHRoaXNbXCJpbVwiXTtcbiAgICAgICAgICBpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChNYXRoLlBJIC8gMiwgSW5maW5pdHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZCA9IGEgKiBhICsgYiAqIGI7XG4gICAgICAgICAgcmV0dXJuIGQgIT09IDAgPyBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgYSAvIGQsXG4gICAgICAgICAgICAtYiAvIGRcbiAgICAgICAgICApLmFzaW4oKSA6IG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBhICE9PSAwID8gYSAvIDAgOiAwLFxuICAgICAgICAgICAgYiAhPT0gMCA/IC1iIC8gMCA6IDBcbiAgICAgICAgICApLmFzaW4oKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBzaW5oXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJzaW5oXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpc1tcInJlXCJdO1xuICAgICAgICAgIHZhciBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgc2luaDIoYSkgKiBNYXRoLmNvcyhiKSxcbiAgICAgICAgICAgIGNvc2gyKGEpICogTWF0aC5zaW4oYilcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGNvc2hcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImNvc2hcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBjb3NoMihhKSAqIE1hdGguY29zKGIpLFxuICAgICAgICAgICAgc2luaDIoYSkgKiBNYXRoLnNpbihiKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggdGFuaFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwidGFuaFwiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYSA9IDIgKiB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSAyICogdGhpc1tcImltXCJdO1xuICAgICAgICAgIHZhciBkID0gY29zaDIoYSkgKyBNYXRoLmNvcyhiKTtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIHNpbmgyKGEpIC8gZCxcbiAgICAgICAgICAgIE1hdGguc2luKGIpIC8gZFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggY290aFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwiY290aFwiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYSA9IDIgKiB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSAyICogdGhpc1tcImltXCJdO1xuICAgICAgICAgIHZhciBkID0gY29zaDIoYSkgLSBNYXRoLmNvcyhiKTtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIHNpbmgyKGEpIC8gZCxcbiAgICAgICAgICAgIC1NYXRoLnNpbihiKSAvIGRcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGNvdGhcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImNzY2hcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgdmFyIGQgPSBNYXRoLmNvcygyICogYikgLSBjb3NoMigyICogYSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICAtMiAqIHNpbmgyKGEpICogTWF0aC5jb3MoYikgLyBkLFxuICAgICAgICAgICAgMiAqIGNvc2gyKGEpICogTWF0aC5zaW4oYikgLyBkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBzZWNoXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJzZWNoXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpc1tcInJlXCJdO1xuICAgICAgICAgIHZhciBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIHZhciBkID0gTWF0aC5jb3MoMiAqIGIpICsgY29zaDIoMiAqIGEpO1xuICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgMiAqIGNvc2gyKGEpICogTWF0aC5jb3MoYikgLyBkLFxuICAgICAgICAgICAgLTIgKiBzaW5oMihhKSAqIE1hdGguc2luKGIpIC8gZFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggYXNpbmhcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImFzaW5oXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0bXAgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgdGhpc1tcImltXCJdID0gLXRoaXNbXCJyZVwiXTtcbiAgICAgICAgICB0aGlzW1wicmVcIl0gPSB0bXA7XG4gICAgICAgICAgdmFyIHJlcyA9IHRoaXNbXCJhc2luXCJdKCk7XG4gICAgICAgICAgdGhpc1tcInJlXCJdID0gLXRoaXNbXCJpbVwiXTtcbiAgICAgICAgICB0aGlzW1wiaW1cIl0gPSB0bXA7XG4gICAgICAgICAgdG1wID0gcmVzW1wicmVcIl07XG4gICAgICAgICAgcmVzW1wicmVcIl0gPSAtcmVzW1wiaW1cIl07XG4gICAgICAgICAgcmVzW1wiaW1cIl0gPSB0bXA7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhY29zaFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwiYWNvc2hcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHJlcyA9IHRoaXNbXCJhY29zXCJdKCk7XG4gICAgICAgICAgaWYgKHJlc1tcImltXCJdIDw9IDApIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSByZXNbXCJyZVwiXTtcbiAgICAgICAgICAgIHJlc1tcInJlXCJdID0gLXJlc1tcImltXCJdO1xuICAgICAgICAgICAgcmVzW1wiaW1cIl0gPSB0bXA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSByZXNbXCJpbVwiXTtcbiAgICAgICAgICAgIHJlc1tcImltXCJdID0gLXJlc1tcInJlXCJdO1xuICAgICAgICAgICAgcmVzW1wicmVcIl0gPSB0bXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggYXRhbmhcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImF0YW5oXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpc1tcInJlXCJdO1xuICAgICAgICAgIHZhciBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIHZhciBub0lNID0gYSA+IDEgJiYgYiA9PT0gMDtcbiAgICAgICAgICB2YXIgb25lTWludXMgPSAxIC0gYTtcbiAgICAgICAgICB2YXIgb25lUGx1cyA9IDEgKyBhO1xuICAgICAgICAgIHZhciBkID0gb25lTWludXMgKiBvbmVNaW51cyArIGIgKiBiO1xuICAgICAgICAgIHZhciB4ID0gZCAhPT0gMCA/IG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICAob25lUGx1cyAqIG9uZU1pbnVzIC0gYiAqIGIpIC8gZCxcbiAgICAgICAgICAgIChiICogb25lTWludXMgKyBvbmVQbHVzICogYikgLyBkXG4gICAgICAgICAgKSA6IG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBhICE9PSAtMSA/IGEgLyAwIDogMCxcbiAgICAgICAgICAgIGIgIT09IDAgPyBiIC8gMCA6IDBcbiAgICAgICAgICApO1xuICAgICAgICAgIHZhciB0ZW1wID0geFtcInJlXCJdO1xuICAgICAgICAgIHhbXCJyZVwiXSA9IGxvZ0h5cG90KHhbXCJyZVwiXSwgeFtcImltXCJdKSAvIDI7XG4gICAgICAgICAgeFtcImltXCJdID0gTWF0aC5hdGFuMih4W1wiaW1cIl0sIHRlbXApIC8gMjtcbiAgICAgICAgICBpZiAobm9JTSkge1xuICAgICAgICAgICAgeFtcImltXCJdID0gLXhbXCJpbVwiXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggYWNvdGhcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImFjb3RoXCI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhID0gdGhpc1tcInJlXCJdO1xuICAgICAgICAgIHZhciBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIGlmIChhID09PSAwICYmIGIgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKDAsIE1hdGguUEkgLyAyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGQgPSBhICogYSArIGIgKiBiO1xuICAgICAgICAgIHJldHVybiBkICE9PSAwID8gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIGEgLyBkLFxuICAgICAgICAgICAgLWIgLyBkXG4gICAgICAgICAgKS5hdGFuaCgpIDogbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIGEgIT09IDAgPyBhIC8gMCA6IDAsXG4gICAgICAgICAgICBiICE9PSAwID8gLWIgLyAwIDogMFxuICAgICAgICAgICkuYXRhbmgoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhY3NjaFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwiYWNzY2hcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgaWYgKGIgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgICBhICE9PSAwID8gTWF0aC5sb2coYSArIE1hdGguc3FydChhICogYSArIDEpKSA6IEluZmluaXR5LFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZCA9IGEgKiBhICsgYiAqIGI7XG4gICAgICAgICAgcmV0dXJuIGQgIT09IDAgPyBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgYSAvIGQsXG4gICAgICAgICAgICAtYiAvIGRcbiAgICAgICAgICApLmFzaW5oKCkgOiBuZXcgQ29tcGxleDIwKFxuICAgICAgICAgICAgYSAhPT0gMCA/IGEgLyAwIDogMCxcbiAgICAgICAgICAgIGIgIT09IDAgPyAtYiAvIDAgOiAwXG4gICAgICAgICAgKS5hc2luaCgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGFzZWNoXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJhc2VjaFwiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYSA9IHRoaXNbXCJyZVwiXTtcbiAgICAgICAgICB2YXIgYiA9IHRoaXNbXCJpbVwiXTtcbiAgICAgICAgICBpZiAodGhpc1tcImlzWmVyb1wiXSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29tcGxleDIwW1wiSU5GSU5JVFlcIl07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBkID0gYSAqIGEgKyBiICogYjtcbiAgICAgICAgICByZXR1cm4gZCAhPT0gMCA/IG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBhIC8gZCxcbiAgICAgICAgICAgIC1iIC8gZFxuICAgICAgICAgICkuYWNvc2goKSA6IG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBhICE9PSAwID8gYSAvIDAgOiAwLFxuICAgICAgICAgICAgYiAhPT0gMCA/IC1iIC8gMCA6IDBcbiAgICAgICAgICApLmFjb3NoKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggaW52ZXJzZSAxL3pcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImludmVyc2VcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHRoaXNbXCJpc1plcm9cIl0oKSkge1xuICAgICAgICAgICAgcmV0dXJuIENvbXBsZXgyMFtcIklORklOSVRZXCJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpc1tcImlzSW5maW5pdGVcIl0oKSkge1xuICAgICAgICAgICAgcmV0dXJuIENvbXBsZXgyMFtcIlpFUk9cIl07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhID0gdGhpc1tcInJlXCJdO1xuICAgICAgICAgIHZhciBiID0gdGhpc1tcImltXCJdO1xuICAgICAgICAgIHZhciBkID0gYSAqIGEgKyBiICogYjtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChhIC8gZCwgLWIgLyBkKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGNvbXBsZXggY29uanVnYXRlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJjb25qdWdhdGVcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAodGhpc1tcInJlXCJdLCAtdGhpc1tcImltXCJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIG5lZ2F0ZWQgY29tcGxleCBudW1iZXJcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcIm5lZ1wiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMCgtdGhpc1tcInJlXCJdLCAtdGhpc1tcImltXCJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENlaWxzIHRoZSBhY3R1YWwgY29tcGxleCBudW1iZXJcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImNlaWxcIjogZnVuY3Rpb24ocGxhY2VzKSB7XG4gICAgICAgICAgcGxhY2VzID0gTWF0aC5wb3coMTAsIHBsYWNlcyB8fCAwKTtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIE1hdGguY2VpbCh0aGlzW1wicmVcIl0gKiBwbGFjZXMpIC8gcGxhY2VzLFxuICAgICAgICAgICAgTWF0aC5jZWlsKHRoaXNbXCJpbVwiXSAqIHBsYWNlcykgLyBwbGFjZXNcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogRmxvb3JzIHRoZSBhY3R1YWwgY29tcGxleCBudW1iZXJcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAgICAgICAqL1xuICAgICAgICBcImZsb29yXCI6IGZ1bmN0aW9uKHBsYWNlcykge1xuICAgICAgICAgIHBsYWNlcyA9IE1hdGgucG93KDEwLCBwbGFjZXMgfHwgMCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4MjAoXG4gICAgICAgICAgICBNYXRoLmZsb29yKHRoaXNbXCJyZVwiXSAqIHBsYWNlcykgLyBwbGFjZXMsXG4gICAgICAgICAgICBNYXRoLmZsb29yKHRoaXNbXCJpbVwiXSAqIHBsYWNlcykgLyBwbGFjZXNcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2VpbHMgdGhlIGFjdHVhbCBjb21wbGV4IG51bWJlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICAgICAgICovXG4gICAgICAgIFwicm91bmRcIjogZnVuY3Rpb24ocGxhY2VzKSB7XG4gICAgICAgICAgcGxhY2VzID0gTWF0aC5wb3coMTAsIHBsYWNlcyB8fCAwKTtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMChcbiAgICAgICAgICAgIE1hdGgucm91bmQodGhpc1tcInJlXCJdICogcGxhY2VzKSAvIHBsYWNlcyxcbiAgICAgICAgICAgIE1hdGgucm91bmQodGhpc1tcImltXCJdICogcGxhY2VzKSAvIHBsYWNlc1xuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb21wYXJlcyB0d28gY29tcGxleCBudW1iZXJzXG4gICAgICAgICAqXG4gICAgICAgICAqICoqTm90ZToqKiBuZXcgQ29tcGxleChJbmZpbml0eSkuZXF1YWxzKEluZmluaXR5KSA9PT0gZmFsc2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBcImVxdWFsc1wiOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgdmFyIHogPSBuZXcgQ29tcGxleDIwKGEsIGIpO1xuICAgICAgICAgIHJldHVybiBNYXRoLmFicyh6W1wicmVcIl0gLSB0aGlzW1wicmVcIl0pIDw9IENvbXBsZXgyMFtcIkVQU0lMT05cIl0gJiYgTWF0aC5hYnMoeltcImltXCJdIC0gdGhpc1tcImltXCJdKSA8PSBDb21wbGV4MjBbXCJFUFNJTE9OXCJdO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xvbmVzIHRoZSBhY3R1YWwgb2JqZWN0XG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJjbG9uZVwiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgyMCh0aGlzW1wicmVcIl0sIHRoaXNbXCJpbVwiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGEgc3RyaW5nIG9mIHRoZSBhY3R1YWwgY29tcGxleCBudW1iZXJcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIFwidG9TdHJpbmdcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGEgPSB0aGlzW1wicmVcIl07XG4gICAgICAgICAgdmFyIGIgPSB0aGlzW1wiaW1cIl07XG4gICAgICAgICAgdmFyIHJldCA9IFwiXCI7XG4gICAgICAgICAgaWYgKHRoaXNbXCJpc05hTlwiXSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJOYU5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXNbXCJpc0luZmluaXRlXCJdKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkluZmluaXR5XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChNYXRoLmFicyhhKSA8IENvbXBsZXgyMFtcIkVQU0lMT05cIl0pIHtcbiAgICAgICAgICAgIGEgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoTWF0aC5hYnMoYikgPCBDb21wbGV4MjBbXCJFUFNJTE9OXCJdKSB7XG4gICAgICAgICAgICBiID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGIgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXQgKyBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYSAhPT0gMCkge1xuICAgICAgICAgICAgcmV0ICs9IGE7XG4gICAgICAgICAgICByZXQgKz0gXCIgXCI7XG4gICAgICAgICAgICBpZiAoYiA8IDApIHtcbiAgICAgICAgICAgICAgYiA9IC1iO1xuICAgICAgICAgICAgICByZXQgKz0gXCItXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXQgKz0gXCIrXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXQgKz0gXCIgXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChiIDwgMCkge1xuICAgICAgICAgICAgYiA9IC1iO1xuICAgICAgICAgICAgcmV0ICs9IFwiLVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoMSAhPT0gYikge1xuICAgICAgICAgICAgcmV0ICs9IGI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXQgKyBcImlcIjtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGFjdHVhbCBudW1iZXIgYXMgYSB2ZWN0b3JcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgXCJ0b1ZlY3RvclwiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gW3RoaXNbXCJyZVwiXSwgdGhpc1tcImltXCJdXTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGFjdHVhbCByZWFsIHZhbHVlIG9mIHRoZSBjdXJyZW50IG9iamVjdFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfG51bGx9XG4gICAgICAgICAqL1xuICAgICAgICBcInZhbHVlT2ZcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHRoaXNbXCJpbVwiXSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbXCJyZVwiXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBjb21wbGV4IG51bWJlciBpcyBub3Qgb24gdGhlIFJpZW1hbm4gc3BoZXJlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIFwiaXNOYU5cIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGlzTmFOKHRoaXNbXCJyZVwiXSkgfHwgaXNOYU4odGhpc1tcImltXCJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgYSBjb21wbGV4IG51bWJlciBpcyBhdCB0aGUgemVybyBwb2xlIG9mIHRoZVxuICAgICAgICAgKiBSaWVtYW5uIHNwaGVyZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBcImlzWmVyb1wiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1tcImltXCJdID09PSAwICYmIHRoaXNbXCJyZVwiXSA9PT0gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZXMgd2hldGhlciBhIGNvbXBsZXggbnVtYmVyIGlzIG5vdCBhdCB0aGUgaW5maW5pdHkgcG9sZSBvZiB0aGVcbiAgICAgICAgICogUmllbWFubiBzcGhlcmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgXCJpc0Zpbml0ZVwiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gaXNGaW5pdGUodGhpc1tcInJlXCJdKSAmJiBpc0Zpbml0ZSh0aGlzW1wiaW1cIl0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCBhIGNvbXBsZXggbnVtYmVyIGlzIGF0IHRoZSBpbmZpbml0eSBwb2xlIG9mIHRoZVxuICAgICAgICAgKiBSaWVtYW5uIHNwaGVyZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBcImlzSW5maW5pdGVcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICEodGhpc1tcImlzTmFOXCJdKCkgfHwgdGhpc1tcImlzRmluaXRlXCJdKCkpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgQ29tcGxleDIwW1wiWkVST1wiXSA9IG5ldyBDb21wbGV4MjAoMCwgMCk7XG4gICAgICBDb21wbGV4MjBbXCJPTkVcIl0gPSBuZXcgQ29tcGxleDIwKDEsIDApO1xuICAgICAgQ29tcGxleDIwW1wiSVwiXSA9IG5ldyBDb21wbGV4MjAoMCwgMSk7XG4gICAgICBDb21wbGV4MjBbXCJQSVwiXSA9IG5ldyBDb21wbGV4MjAoTWF0aC5QSSwgMCk7XG4gICAgICBDb21wbGV4MjBbXCJFXCJdID0gbmV3IENvbXBsZXgyMChNYXRoLkUsIDApO1xuICAgICAgQ29tcGxleDIwW1wiSU5GSU5JVFlcIl0gPSBuZXcgQ29tcGxleDIwKEluZmluaXR5LCBJbmZpbml0eSk7XG4gICAgICBDb21wbGV4MjBbXCJOQU5cIl0gPSBuZXcgQ29tcGxleDIwKE5hTiwgTmFOKTtcbiAgICAgIENvbXBsZXgyMFtcIkVQU0lMT05cIl0gPSAxZS0xNTtcbiAgICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lW1wiYW1kXCJdKSB7XG4gICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIENvbXBsZXgyMDtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wbGV4MjAsIFwiX19lc01vZHVsZVwiLCB7IFwidmFsdWVcIjogdHJ1ZSB9KTtcbiAgICAgICAgQ29tcGxleDIwW1wiZGVmYXVsdFwiXSA9IENvbXBsZXgyMDtcbiAgICAgICAgQ29tcGxleDIwW1wiQ29tcGxleFwiXSA9IENvbXBsZXgyMDtcbiAgICAgICAgbW9kdWxlW1wiZXhwb3J0c1wiXSA9IENvbXBsZXgyMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RbXCJDb21wbGV4XCJdID0gQ29tcGxleDIwO1xuICAgICAgfVxuICAgIH0pKGV4cG9ydHMpO1xuICB9XG59KTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9wdWJsaWMudHNcbmZ1bmN0aW9uIGlzRXhwcmVzc2lvbkVudHJ5KGVudHJ5KSB7XG4gIHJldHVybiAhKFwia2luZFwiIGluIGVudHJ5KSB8fCBlbnRyeS5raW5kID09PSBcImV4cHJlc3Npb25cIjtcbn1cbmZ1bmN0aW9uIGlzU3ltYm9sRW50cnkoZW50cnkpIHtcbiAgcmV0dXJuIFwia2luZFwiIGluIGVudHJ5ICYmIGVudHJ5LmtpbmQgPT09IFwic3ltYm9sXCI7XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uRW50cnkoZW50cnkpIHtcbiAgcmV0dXJuIFwia2luZFwiIGluIGVudHJ5ICYmIGVudHJ5LmtpbmQgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGlzTWF0Y2hmaXhFbnRyeShlbnRyeSkge1xuICByZXR1cm4gXCJraW5kXCIgaW4gZW50cnkgJiYgZW50cnkua2luZCA9PT0gXCJtYXRjaGZpeFwiO1xufVxuZnVuY3Rpb24gaXNJbmZpeEVudHJ5KGVudHJ5KSB7XG4gIHJldHVybiBcImtpbmRcIiBpbiBlbnRyeSAmJiBlbnRyeS5raW5kID09PSBcImluZml4XCI7XG59XG5mdW5jdGlvbiBpc1ByZWZpeEVudHJ5KGVudHJ5KSB7XG4gIHJldHVybiBcImtpbmRcIiBpbiBlbnRyeSAmJiBlbnRyeS5raW5kID09PSBcInByZWZpeFwiO1xufVxuZnVuY3Rpb24gaXNQb3N0Zml4RW50cnkoZW50cnkpIHtcbiAgcmV0dXJuIFwia2luZFwiIGluIGVudHJ5ICYmIGVudHJ5LmtpbmQgPT09IFwicG9zdGZpeFwiO1xufVxuZnVuY3Rpb24gaXNFbnZpcm9ubWVudEVudHJ5KGVudHJ5KSB7XG4gIHJldHVybiBcImtpbmRcIiBpbiBlbnRyeSAmJiBlbnRyeS5raW5kID09PSBcImVudmlyb25tZW50XCI7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy9kZWNpbWFsLmpzL2RlY2ltYWwubWpzXG52YXIgRVhQX0xJTUlUID0gOWUxNTtcbnZhciBNQVhfRElHSVRTID0gMWU5O1xudmFyIE5VTUVSQUxTID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG52YXIgTE4xMCA9IFwiMi4zMDI1ODUwOTI5OTQwNDU2ODQwMTc5OTE0NTQ2ODQzNjQyMDc2MDExMDE0ODg2Mjg3NzI5NzYwMzMzMjc5MDA5Njc1NzI2MDk2NzczNTI0ODAyMzU5OTcyMDUwODk1OTgyOTgzNDE5Njc3ODQwNDIyODYyNDg2MzM0MDk1MjU0NjUwODI4MDY3NTY2NjYyODczNjkwOTg3ODE2ODk0ODI5MDcyMDgzMjU1NTQ2ODA4NDM3OTk4OTQ4MjYyMzMxOTg1MjgzOTM1MDUzMDg5NjUzNzc3MzI2Mjg4NDYxNjMzNjYyMjIyODc2OTgyMTk4ODY3NDY1NDM2Njc0NzQ0MDQyNDMyNzQzNjUxNTUwNDg5MzQzMTQ5MzkzOTE0Nzk2MTk0MDQ0MDAyMjIxMDUxMDE3MTQxNzQ4MDAzNjg4MDg0MDEyNjQ3MDgwNjg1NTY3NzQzMjE2MjI4MzU1MjIwMTE0ODA0NjYzNzE1NjU5MTIxMzczNDUwNzQ3ODU2OTQ3NjgzNDYzNjE2NzkyMTAxODA2NDQ1MDcwNjQ4MDAwMjc3NTAyNjg0OTE2NzQ2NTUwNTg2ODU2OTM1NjczNDIwNjcwNTgxMTM2NDI5MjI0NTU0NDA1NzU4OTI1NzI0MjA4MjQxMzE0Njk1Njg5MDE2NzU4OTQwMjU2Nzc2MzExMzU2OTE5MjkyMDMzMzc2NTg3MTQxNjYwMjMwMTA1NzAzMDg5NjM0NTcyMDc1NDQwMzcwODQ3NDY5OTQwMTY4MjY5MjgyODA4NDgxMTg0Mjg5MzE0ODQ4NTI0OTQ4NjQ0ODcxOTI3ODA5Njc2MjcxMjc1Nzc1Mzk3MDI3NjY4NjA1OTUyNDk2NzE2Njc0MTgzNDg1NzA0NDIyNTA3MTk3OTY1MDA0NzE0OTUxMDUwNDkyMjE0Nzc2NTY3NjM2OTM4NjYyOTc2OTc5NTIyMTEwNzE4MjY0NTQ5NzM0NzcyNjYyNDI1NzA5NDI5MzIyNTgyNzk4NTAyNTg1NTA5Nzg1MjY1MzgzMjA3NjA2NzI2MzE3MTY0MzA5NTA1OTk1MDg3ODA3NTIzNzEwMzMzMTAxMTk3ODU3NTQ3MzMxNTQxNDIxODA4NDI3NTQzODYzNTkxNzc4MTE3MDU0MzA5ODI3NDgyMzg1MDQ1NjQ4MDE5MDk1NjEwMjk5MjkxODI0MzE4MjM3NTI1MzU3NzA5NzUwNTM5NTY1MTg3Njk3NTEwMzc0OTcwODg4NjkyMTgwMjA1MTg5MzM5NTA3MjM4NTM5MjA1MTQ0NjM0MTk3MjY1Mjg3Mjg2OTY1MTEwODYyNTcxNDkyMTk4ODQ5OTc4NzQ4ODczNzcxMzQ1Njg2MjA5MTY3MDU4XCI7XG52YXIgUEkgPSBcIjMuMTQxNTkyNjUzNTg5NzkzMjM4NDYyNjQzMzgzMjc5NTAyODg0MTk3MTY5Mzk5Mzc1MTA1ODIwOTc0OTQ0NTkyMzA3ODE2NDA2Mjg2MjA4OTk4NjI4MDM0ODI1MzQyMTE3MDY3OTgyMTQ4MDg2NTEzMjgyMzA2NjQ3MDkzODQ0NjA5NTUwNTgyMjMxNzI1MzU5NDA4MTI4NDgxMTE3NDUwMjg0MTAyNzAxOTM4NTIxMTA1NTU5NjQ0NjIyOTQ4OTU0OTMwMzgxOTY0NDI4ODEwOTc1NjY1OTMzNDQ2MTI4NDc1NjQ4MjMzNzg2NzgzMTY1MjcxMjAxOTA5MTQ1NjQ4NTY2OTIzNDYwMzQ4NjEwNDU0MzI2NjQ4MjEzMzkzNjA3MjYwMjQ5MTQxMjczNzI0NTg3MDA2NjA2MzE1NTg4MTc0ODgxNTIwOTIwOTYyODI5MjU0MDkxNzE1MzY0MzY3ODkyNTkwMzYwMDExMzMwNTMwNTQ4ODIwNDY2NTIxMzg0MTQ2OTUxOTQxNTExNjA5NDMzMDU3MjcwMzY1NzU5NTkxOTUzMDkyMTg2MTE3MzgxOTMyNjExNzkzMTA1MTE4NTQ4MDc0NDYyMzc5OTYyNzQ5NTY3MzUxODg1NzUyNzI0ODkxMjI3OTM4MTgzMDExOTQ5MTI5ODMzNjczMzYyNDQwNjU2NjQzMDg2MDIxMzk0OTQ2Mzk1MjI0NzM3MTkwNzAyMTc5ODYwOTQzNzAyNzcwNTM5MjE3MTc2MjkzMTc2NzUyMzg0Njc0ODE4NDY3NjY5NDA1MTMyMDAwNTY4MTI3MTQ1MjYzNTYwODI3Nzg1NzcxMzQyNzU3Nzg5NjA5MTczNjM3MTc4NzIxNDY4NDQwOTAxMjI0OTUzNDMwMTQ2NTQ5NTg1MzcxMDUwNzkyMjc5Njg5MjU4OTIzNTQyMDE5OTU2MTEyMTI5MDIxOTYwODY0MDM0NDE4MTU5ODEzNjI5Nzc0NzcxMzA5OTYwNTE4NzA3MjExMzQ5OTk5OTk4MzcyOTc4MDQ5OTUxMDU5NzMxNzMyODE2MDk2MzE4NTk1MDI0NDU5NDU1MzQ2OTA4MzAyNjQyNTIyMzA4MjUzMzQ0Njg1MDM1MjYxOTMxMTg4MTcxMDEwMDAzMTM3ODM4NzUyODg2NTg3NTMzMjA4MzgxNDIwNjE3MTc3NjY5MTQ3MzAzNTk4MjUzNDkwNDI4NzU1NDY4NzMxMTU5NTYyODYzODgyMzUzNzg3NTkzNzUxOTU3NzgxODU3NzgwNTMyMTcxMjI2ODA2NjEzMDAxOTI3ODc2NjExMTk1OTA5MjE2NDIwMTk4OTM4MDk1MjU3MjAxMDY1NDg1ODYzMjc4OVwiO1xudmFyIERFRkFVTFRTID0ge1xuICAvLyBUaGVzZSB2YWx1ZXMgbXVzdCBiZSBpbnRlZ2VycyB3aXRoaW4gdGhlIHN0YXRlZCByYW5nZXMgKGluY2x1c2l2ZSkuXG4gIC8vIE1vc3Qgb2YgdGhlc2UgdmFsdWVzIGNhbiBiZSBjaGFuZ2VkIGF0IHJ1bi10aW1lIHVzaW5nIHRoZSBgRGVjaW1hbC5jb25maWdgIG1ldGhvZC5cbiAgLy8gVGhlIG1heGltdW0gbnVtYmVyIG9mIHNpZ25pZmljYW50IGRpZ2l0cyBvZiB0aGUgcmVzdWx0IG9mIGEgY2FsY3VsYXRpb24gb3IgYmFzZSBjb252ZXJzaW9uLlxuICAvLyBFLmcuIGBEZWNpbWFsLmNvbmZpZyh7IHByZWNpc2lvbjogMjAgfSk7YFxuICBwcmVjaXNpb246IDIwLFxuICAvLyAxIHRvIE1BWF9ESUdJVFNcbiAgLy8gVGhlIHJvdW5kaW5nIG1vZGUgdXNlZCB3aGVuIHJvdW5kaW5nIHRvIGBwcmVjaXNpb25gLlxuICAvL1xuICAvLyBST1VORF9VUCAgICAgICAgIDAgQXdheSBmcm9tIHplcm8uXG4gIC8vIFJPVU5EX0RPV04gICAgICAgMSBUb3dhcmRzIHplcm8uXG4gIC8vIFJPVU5EX0NFSUwgICAgICAgMiBUb3dhcmRzICtJbmZpbml0eS5cbiAgLy8gUk9VTkRfRkxPT1IgICAgICAzIFRvd2FyZHMgLUluZmluaXR5LlxuICAvLyBST1VORF9IQUxGX1VQICAgIDQgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHVwLlxuICAvLyBST1VORF9IQUxGX0RPV04gIDUgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIGRvd24uXG4gIC8vIFJPVU5EX0hBTEZfRVZFTiAgNiBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgdG93YXJkcyBldmVuIG5laWdoYm91ci5cbiAgLy8gUk9VTkRfSEFMRl9DRUlMICA3IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzICtJbmZpbml0eS5cbiAgLy8gUk9VTkRfSEFMRl9GTE9PUiA4IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzIC1JbmZpbml0eS5cbiAgLy9cbiAgLy8gRS5nLlxuICAvLyBgRGVjaW1hbC5yb3VuZGluZyA9IDQ7YFxuICAvLyBgRGVjaW1hbC5yb3VuZGluZyA9IERlY2ltYWwuUk9VTkRfSEFMRl9VUDtgXG4gIHJvdW5kaW5nOiA0LFxuICAvLyAwIHRvIDhcbiAgLy8gVGhlIG1vZHVsbyBtb2RlIHVzZWQgd2hlbiBjYWxjdWxhdGluZyB0aGUgbW9kdWx1czogYSBtb2Qgbi5cbiAgLy8gVGhlIHF1b3RpZW50IChxID0gYSAvIG4pIGlzIGNhbGN1bGF0ZWQgYWNjb3JkaW5nIHRvIHRoZSBjb3JyZXNwb25kaW5nIHJvdW5kaW5nIG1vZGUuXG4gIC8vIFRoZSByZW1haW5kZXIgKHIpIGlzIGNhbGN1bGF0ZWQgYXM6IHIgPSBhIC0gbiAqIHEuXG4gIC8vXG4gIC8vIFVQICAgICAgICAgMCBUaGUgcmVtYWluZGVyIGlzIHBvc2l0aXZlIGlmIHRoZSBkaXZpZGVuZCBpcyBuZWdhdGl2ZSwgZWxzZSBpcyBuZWdhdGl2ZS5cbiAgLy8gRE9XTiAgICAgICAxIFRoZSByZW1haW5kZXIgaGFzIHRoZSBzYW1lIHNpZ24gYXMgdGhlIGRpdmlkZW5kIChKYXZhU2NyaXB0ICUpLlxuICAvLyBGTE9PUiAgICAgIDMgVGhlIHJlbWFpbmRlciBoYXMgdGhlIHNhbWUgc2lnbiBhcyB0aGUgZGl2aXNvciAoUHl0aG9uICUpLlxuICAvLyBIQUxGX0VWRU4gIDYgVGhlIElFRUUgNzU0IHJlbWFpbmRlciBmdW5jdGlvbi5cbiAgLy8gRVVDTElEICAgICA5IEV1Y2xpZGlhbiBkaXZpc2lvbi4gcSA9IHNpZ24obikgKiBmbG9vcihhIC8gYWJzKG4pKS4gQWx3YXlzIHBvc2l0aXZlLlxuICAvL1xuICAvLyBUcnVuY2F0ZWQgZGl2aXNpb24gKDEpLCBmbG9vcmVkIGRpdmlzaW9uICgzKSwgdGhlIElFRUUgNzU0IHJlbWFpbmRlciAoNiksIGFuZCBFdWNsaWRpYW5cbiAgLy8gZGl2aXNpb24gKDkpIGFyZSBjb21tb25seSB1c2VkIGZvciB0aGUgbW9kdWx1cyBvcGVyYXRpb24uIFRoZSBvdGhlciByb3VuZGluZyBtb2RlcyBjYW4gYWxzb1xuICAvLyBiZSB1c2VkLCBidXQgdGhleSBtYXkgbm90IGdpdmUgdXNlZnVsIHJlc3VsdHMuXG4gIG1vZHVsbzogMSxcbiAgLy8gMCB0byA5XG4gIC8vIFRoZSBleHBvbmVudCB2YWx1ZSBhdCBhbmQgYmVuZWF0aCB3aGljaCBgdG9TdHJpbmdgIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24uXG4gIC8vIEphdmFTY3JpcHQgbnVtYmVyczogLTdcbiAgdG9FeHBOZWc6IC03LFxuICAvLyAwIHRvIC1FWFBfTElNSVRcbiAgLy8gVGhlIGV4cG9uZW50IHZhbHVlIGF0IGFuZCBhYm92ZSB3aGljaCBgdG9TdHJpbmdgIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24uXG4gIC8vIEphdmFTY3JpcHQgbnVtYmVyczogMjFcbiAgdG9FeHBQb3M6IDIxLFxuICAvLyAwIHRvIEVYUF9MSU1JVFxuICAvLyBUaGUgbWluaW11bSBleHBvbmVudCB2YWx1ZSwgYmVuZWF0aCB3aGljaCB1bmRlcmZsb3cgdG8gemVybyBvY2N1cnMuXG4gIC8vIEphdmFTY3JpcHQgbnVtYmVyczogLTMyNCAgKDVlLTMyNClcbiAgbWluRTogLUVYUF9MSU1JVCxcbiAgLy8gLTEgdG8gLUVYUF9MSU1JVFxuICAvLyBUaGUgbWF4aW11bSBleHBvbmVudCB2YWx1ZSwgYWJvdmUgd2hpY2ggb3ZlcmZsb3cgdG8gSW5maW5pdHkgb2NjdXJzLlxuICAvLyBKYXZhU2NyaXB0IG51bWJlcnM6IDMwOCAgKDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KVxuICBtYXhFOiBFWFBfTElNSVQsXG4gIC8vIDEgdG8gRVhQX0xJTUlUXG4gIC8vIFdoZXRoZXIgdG8gdXNlIGNyeXB0b2dyYXBoaWNhbGx5LXNlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24sIGlmIGF2YWlsYWJsZS5cbiAgY3J5cHRvOiBmYWxzZVxuICAvLyB0cnVlL2ZhbHNlXG59O1xudmFyIGluZXhhY3Q7XG52YXIgcXVhZHJhbnQ7XG52YXIgZXh0ZXJuYWwgPSB0cnVlO1xudmFyIGRlY2ltYWxFcnJvciA9IFwiW0RlY2ltYWxFcnJvcl0gXCI7XG52YXIgaW52YWxpZEFyZ3VtZW50ID0gZGVjaW1hbEVycm9yICsgXCJJbnZhbGlkIGFyZ3VtZW50OiBcIjtcbnZhciBwcmVjaXNpb25MaW1pdEV4Y2VlZGVkID0gZGVjaW1hbEVycm9yICsgXCJQcmVjaXNpb24gbGltaXQgZXhjZWVkZWRcIjtcbnZhciBjcnlwdG9VbmF2YWlsYWJsZSA9IGRlY2ltYWxFcnJvciArIFwiY3J5cHRvIHVuYXZhaWxhYmxlXCI7XG52YXIgdGFnID0gXCJbb2JqZWN0IERlY2ltYWxdXCI7XG52YXIgbWF0aGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBtYXRocG93ID0gTWF0aC5wb3c7XG52YXIgaXNCaW5hcnkgPSAvXjBiKFswMV0rKFxcLlswMV0qKT98XFwuWzAxXSspKHBbKy1dP1xcZCspPyQvaTtcbnZhciBpc0hleCA9IC9eMHgoWzAtOWEtZl0rKFxcLlswLTlhLWZdKik/fFxcLlswLTlhLWZdKykocFsrLV0/XFxkKyk/JC9pO1xudmFyIGlzT2N0YWwgPSAvXjBvKFswLTddKyhcXC5bMC03XSopP3xcXC5bMC03XSspKHBbKy1dP1xcZCspPyQvaTtcbnZhciBpc0RlY2ltYWwgPSAvXihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKShlWystXT9cXGQrKT8kL2k7XG52YXIgQkFTRSA9IDFlNztcbnZhciBMT0dfQkFTRSA9IDc7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG52YXIgTE4xMF9QUkVDSVNJT04gPSBMTjEwLmxlbmd0aCAtIDE7XG52YXIgUElfUFJFQ0lTSU9OID0gUEkubGVuZ3RoIC0gMTtcbnZhciBQID0geyB0b1N0cmluZ1RhZzogdGFnIH07XG5QLmFic29sdXRlVmFsdWUgPSBQLmFicyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xuICBpZiAoeC5zIDwgMClcbiAgICB4LnMgPSAxO1xuICByZXR1cm4gZmluYWxpc2UoeCk7XG59O1xuUC5jZWlsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmaW5hbGlzZShuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKSwgdGhpcy5lICsgMSwgMik7XG59O1xuUC5jbGFtcGVkVG8gPSBQLmNsYW1wID0gZnVuY3Rpb24obWluMiwgbWF4Mikge1xuICB2YXIgaywgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBtaW4yID0gbmV3IEN0b3IobWluMik7XG4gIG1heDIgPSBuZXcgQ3RvcihtYXgyKTtcbiAgaWYgKCFtaW4yLnMgfHwgIW1heDIucylcbiAgICByZXR1cm4gbmV3IEN0b3IoTmFOKTtcbiAgaWYgKG1pbjIuZ3QobWF4MikpXG4gICAgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgbWF4Mik7XG4gIGsgPSB4LmNtcChtaW4yKTtcbiAgcmV0dXJuIGsgPCAwID8gbWluMiA6IHguY21wKG1heDIpID4gMCA/IG1heDIgOiBuZXcgQ3Rvcih4KTtcbn07XG5QLmNvbXBhcmVkVG8gPSBQLmNtcCA9IGZ1bmN0aW9uKHkpIHtcbiAgdmFyIGksIGosIHhkTCwgeWRMLCB4ID0gdGhpcywgeGQgPSB4LmQsIHlkID0gKHkgPSBuZXcgeC5jb25zdHJ1Y3Rvcih5KSkuZCwgeHMgPSB4LnMsIHlzID0geS5zO1xuICBpZiAoIXhkIHx8ICF5ZCkge1xuICAgIHJldHVybiAheHMgfHwgIXlzID8gTmFOIDogeHMgIT09IHlzID8geHMgOiB4ZCA9PT0geWQgPyAwIDogIXhkIF4geHMgPCAwID8gMSA6IC0xO1xuICB9XG4gIGlmICgheGRbMF0gfHwgIXlkWzBdKVxuICAgIHJldHVybiB4ZFswXSA/IHhzIDogeWRbMF0gPyAteXMgOiAwO1xuICBpZiAoeHMgIT09IHlzKVxuICAgIHJldHVybiB4cztcbiAgaWYgKHguZSAhPT0geS5lKVxuICAgIHJldHVybiB4LmUgPiB5LmUgXiB4cyA8IDAgPyAxIDogLTE7XG4gIHhkTCA9IHhkLmxlbmd0aDtcbiAgeWRMID0geWQubGVuZ3RoO1xuICBmb3IgKGkgPSAwLCBqID0geGRMIDwgeWRMID8geGRMIDogeWRMOyBpIDwgajsgKytpKSB7XG4gICAgaWYgKHhkW2ldICE9PSB5ZFtpXSlcbiAgICAgIHJldHVybiB4ZFtpXSA+IHlkW2ldIF4geHMgPCAwID8gMSA6IC0xO1xuICB9XG4gIHJldHVybiB4ZEwgPT09IHlkTCA/IDAgOiB4ZEwgPiB5ZEwgXiB4cyA8IDAgPyAxIDogLTE7XG59O1xuUC5jb3NpbmUgPSBQLmNvcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcHIsIHJtLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIGlmICgheC5kKVxuICAgIHJldHVybiBuZXcgQ3RvcihOYU4pO1xuICBpZiAoIXguZFswXSlcbiAgICByZXR1cm4gbmV3IEN0b3IoMSk7XG4gIHByID0gQ3Rvci5wcmVjaXNpb247XG4gIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgQ3Rvci5wcmVjaXNpb24gPSBwciArIE1hdGgubWF4KHguZSwgeC5zZCgpKSArIExPR19CQVNFO1xuICBDdG9yLnJvdW5kaW5nID0gMTtcbiAgeCA9IGNvc2luZShDdG9yLCB0b0xlc3NUaGFuSGFsZlBpKEN0b3IsIHgpKTtcbiAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgQ3Rvci5yb3VuZGluZyA9IHJtO1xuICByZXR1cm4gZmluYWxpc2UocXVhZHJhbnQgPT0gMiB8fCBxdWFkcmFudCA9PSAzID8geC5uZWcoKSA6IHgsIHByLCBybSwgdHJ1ZSk7XG59O1xuUC5jdWJlUm9vdCA9IFAuY2JydCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZSwgbSwgbiwgciwgcmVwLCBzLCBzZCwgdCwgdDMsIHQzcGx1c3gsIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKCF4LmlzRmluaXRlKCkgfHwgeC5pc1plcm8oKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoeCk7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIHMgPSB4LnMgKiBtYXRocG93KHgucyAqIHgsIDEgLyAzKTtcbiAgaWYgKCFzIHx8IE1hdGguYWJzKHMpID09IDEgLyAwKSB7XG4gICAgbiA9IGRpZ2l0c1RvU3RyaW5nKHguZCk7XG4gICAgZSA9IHguZTtcbiAgICBpZiAocyA9IChlIC0gbi5sZW5ndGggKyAxKSAlIDMpXG4gICAgICBuICs9IHMgPT0gMSB8fCBzID09IC0yID8gXCIwXCIgOiBcIjAwXCI7XG4gICAgcyA9IG1hdGhwb3cobiwgMSAvIDMpO1xuICAgIGUgPSBtYXRoZmxvb3IoKGUgKyAxKSAvIDMpIC0gKGUgJSAzID09IChlIDwgMCA/IC0xIDogMikpO1xuICAgIGlmIChzID09IDEgLyAwKSB7XG4gICAgICBuID0gXCI1ZVwiICsgZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbiA9IHMudG9FeHBvbmVudGlhbCgpO1xuICAgICAgbiA9IG4uc2xpY2UoMCwgbi5pbmRleE9mKFwiZVwiKSArIDEpICsgZTtcbiAgICB9XG4gICAgciA9IG5ldyBDdG9yKG4pO1xuICAgIHIucyA9IHgucztcbiAgfSBlbHNlIHtcbiAgICByID0gbmV3IEN0b3Iocy50b1N0cmluZygpKTtcbiAgfVxuICBzZCA9IChlID0gQ3Rvci5wcmVjaXNpb24pICsgMztcbiAgZm9yICg7IDsgKSB7XG4gICAgdCA9IHI7XG4gICAgdDMgPSB0LnRpbWVzKHQpLnRpbWVzKHQpO1xuICAgIHQzcGx1c3ggPSB0My5wbHVzKHgpO1xuICAgIHIgPSBkaXZpZGUodDNwbHVzeC5wbHVzKHgpLnRpbWVzKHQpLCB0M3BsdXN4LnBsdXModDMpLCBzZCArIDIsIDEpO1xuICAgIGlmIChkaWdpdHNUb1N0cmluZyh0LmQpLnNsaWNlKDAsIHNkKSA9PT0gKG4gPSBkaWdpdHNUb1N0cmluZyhyLmQpKS5zbGljZSgwLCBzZCkpIHtcbiAgICAgIG4gPSBuLnNsaWNlKHNkIC0gMywgc2QgKyAxKTtcbiAgICAgIGlmIChuID09IFwiOTk5OVwiIHx8ICFyZXAgJiYgbiA9PSBcIjQ5OTlcIikge1xuICAgICAgICBpZiAoIXJlcCkge1xuICAgICAgICAgIGZpbmFsaXNlKHQsIGUgKyAxLCAwKTtcbiAgICAgICAgICBpZiAodC50aW1lcyh0KS50aW1lcyh0KS5lcSh4KSkge1xuICAgICAgICAgICAgciA9IHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2QgKz0gNDtcbiAgICAgICAgcmVwID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghK24gfHwgIStuLnNsaWNlKDEpICYmIG4uY2hhckF0KDApID09IFwiNVwiKSB7XG4gICAgICAgICAgZmluYWxpc2UociwgZSArIDEsIDEpO1xuICAgICAgICAgIG0gPSAhci50aW1lcyhyKS50aW1lcyhyKS5lcSh4KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICByZXR1cm4gZmluYWxpc2UociwgZSwgQ3Rvci5yb3VuZGluZywgbSk7XG59O1xuUC5kZWNpbWFsUGxhY2VzID0gUC5kcCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdywgZCA9IHRoaXMuZCwgbiA9IE5hTjtcbiAgaWYgKGQpIHtcbiAgICB3ID0gZC5sZW5ndGggLSAxO1xuICAgIG4gPSAodyAtIG1hdGhmbG9vcih0aGlzLmUgLyBMT0dfQkFTRSkpICogTE9HX0JBU0U7XG4gICAgdyA9IGRbd107XG4gICAgaWYgKHcpXG4gICAgICBmb3IgKDsgdyAlIDEwID09IDA7IHcgLz0gMTApXG4gICAgICAgIG4tLTtcbiAgICBpZiAobiA8IDApXG4gICAgICBuID0gMDtcbiAgfVxuICByZXR1cm4gbjtcbn07XG5QLmRpdmlkZWRCeSA9IFAuZGl2ID0gZnVuY3Rpb24oeSkge1xuICByZXR1cm4gZGl2aWRlKHRoaXMsIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHkpKTtcbn07XG5QLmRpdmlkZWRUb0ludGVnZXJCeSA9IFAuZGl2VG9JbnQgPSBmdW5jdGlvbih5KSB7XG4gIHZhciB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIHJldHVybiBmaW5hbGlzZShkaXZpZGUoeCwgbmV3IEN0b3IoeSksIDAsIDEsIDEpLCBDdG9yLnByZWNpc2lvbiwgQ3Rvci5yb3VuZGluZyk7XG59O1xuUC5lcXVhbHMgPSBQLmVxID0gZnVuY3Rpb24oeSkge1xuICByZXR1cm4gdGhpcy5jbXAoeSkgPT09IDA7XG59O1xuUC5mbG9vciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZmluYWxpc2UobmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyksIHRoaXMuZSArIDEsIDMpO1xufTtcblAuZ3JlYXRlclRoYW4gPSBQLmd0ID0gZnVuY3Rpb24oeSkge1xuICByZXR1cm4gdGhpcy5jbXAoeSkgPiAwO1xufTtcblAuZ3JlYXRlclRoYW5PckVxdWFsVG8gPSBQLmd0ZSA9IGZ1bmN0aW9uKHkpIHtcbiAgdmFyIGsgPSB0aGlzLmNtcCh5KTtcbiAgcmV0dXJuIGsgPT0gMSB8fCBrID09PSAwO1xufTtcblAuaHlwZXJib2xpY0Nvc2luZSA9IFAuY29zaCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaywgbiwgcHIsIHJtLCBsZW4sIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3Rvciwgb25lID0gbmV3IEN0b3IoMSk7XG4gIGlmICgheC5pc0Zpbml0ZSgpKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4LnMgPyAxIC8gMCA6IE5hTik7XG4gIGlmICh4LmlzWmVybygpKVxuICAgIHJldHVybiBvbmU7XG4gIHByID0gQ3Rvci5wcmVjaXNpb247XG4gIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgQ3Rvci5wcmVjaXNpb24gPSBwciArIE1hdGgubWF4KHguZSwgeC5zZCgpKSArIDQ7XG4gIEN0b3Iucm91bmRpbmcgPSAxO1xuICBsZW4gPSB4LmQubGVuZ3RoO1xuICBpZiAobGVuIDwgMzIpIHtcbiAgICBrID0gTWF0aC5jZWlsKGxlbiAvIDMpO1xuICAgIG4gPSAoMSAvIHRpbnlQb3coNCwgaykpLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgayA9IDE2O1xuICAgIG4gPSBcIjIuMzI4MzA2NDM2NTM4Njk2Mjg5MDYyNWUtMTBcIjtcbiAgfVxuICB4ID0gdGF5bG9yU2VyaWVzKEN0b3IsIDEsIHgudGltZXMobiksIG5ldyBDdG9yKDEpLCB0cnVlKTtcbiAgdmFyIGNvc2gyX3gsIGkgPSBrLCBkOCA9IG5ldyBDdG9yKDgpO1xuICBmb3IgKDsgaS0tOyApIHtcbiAgICBjb3NoMl94ID0geC50aW1lcyh4KTtcbiAgICB4ID0gb25lLm1pbnVzKGNvc2gyX3gudGltZXMoZDgubWludXMoY29zaDJfeC50aW1lcyhkOCkpKSk7XG4gIH1cbiAgcmV0dXJuIGZpbmFsaXNlKHgsIEN0b3IucHJlY2lzaW9uID0gcHIsIEN0b3Iucm91bmRpbmcgPSBybSwgdHJ1ZSk7XG59O1xuUC5oeXBlcmJvbGljU2luZSA9IFAuc2luaCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaywgcHIsIHJtLCBsZW4sIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKCF4LmlzRmluaXRlKCkgfHwgeC5pc1plcm8oKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoeCk7XG4gIHByID0gQ3Rvci5wcmVjaXNpb247XG4gIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgQ3Rvci5wcmVjaXNpb24gPSBwciArIE1hdGgubWF4KHguZSwgeC5zZCgpKSArIDQ7XG4gIEN0b3Iucm91bmRpbmcgPSAxO1xuICBsZW4gPSB4LmQubGVuZ3RoO1xuICBpZiAobGVuIDwgMykge1xuICAgIHggPSB0YXlsb3JTZXJpZXMoQ3RvciwgMiwgeCwgeCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgayA9IDEuNCAqIE1hdGguc3FydChsZW4pO1xuICAgIGsgPSBrID4gMTYgPyAxNiA6IGsgfCAwO1xuICAgIHggPSB4LnRpbWVzKDEgLyB0aW55UG93KDUsIGspKTtcbiAgICB4ID0gdGF5bG9yU2VyaWVzKEN0b3IsIDIsIHgsIHgsIHRydWUpO1xuICAgIHZhciBzaW5oMl94LCBkNSA9IG5ldyBDdG9yKDUpLCBkMTYgPSBuZXcgQ3RvcigxNiksIGQyMCA9IG5ldyBDdG9yKDIwKTtcbiAgICBmb3IgKDsgay0tOyApIHtcbiAgICAgIHNpbmgyX3ggPSB4LnRpbWVzKHgpO1xuICAgICAgeCA9IHgudGltZXMoZDUucGx1cyhzaW5oMl94LnRpbWVzKGQxNi50aW1lcyhzaW5oMl94KS5wbHVzKGQyMCkpKSk7XG4gICAgfVxuICB9XG4gIEN0b3IucHJlY2lzaW9uID0gcHI7XG4gIEN0b3Iucm91bmRpbmcgPSBybTtcbiAgcmV0dXJuIGZpbmFsaXNlKHgsIHByLCBybSwgdHJ1ZSk7XG59O1xuUC5oeXBlcmJvbGljVGFuZ2VudCA9IFAudGFuaCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcHIsIHJtLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIGlmICgheC5pc0Zpbml0ZSgpKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4LnMpO1xuICBpZiAoeC5pc1plcm8oKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoeCk7XG4gIHByID0gQ3Rvci5wcmVjaXNpb247XG4gIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgQ3Rvci5wcmVjaXNpb24gPSBwciArIDc7XG4gIEN0b3Iucm91bmRpbmcgPSAxO1xuICByZXR1cm4gZGl2aWRlKHguc2luaCgpLCB4LmNvc2goKSwgQ3Rvci5wcmVjaXNpb24gPSBwciwgQ3Rvci5yb3VuZGluZyA9IHJtKTtcbn07XG5QLmludmVyc2VDb3NpbmUgPSBQLmFjb3MgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhhbGZQaSwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yLCBrID0geC5hYnMoKS5jbXAoMSksIHByID0gQ3Rvci5wcmVjaXNpb24sIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgaWYgKGsgIT09IC0xKSB7XG4gICAgcmV0dXJuIGsgPT09IDAgPyB4LmlzTmVnKCkgPyBnZXRQaShDdG9yLCBwciwgcm0pIDogbmV3IEN0b3IoMCkgOiBuZXcgQ3RvcihOYU4pO1xuICB9XG4gIGlmICh4LmlzWmVybygpKVxuICAgIHJldHVybiBnZXRQaShDdG9yLCBwciArIDQsIHJtKS50aW1lcygwLjUpO1xuICBDdG9yLnByZWNpc2lvbiA9IHByICsgNjtcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIHggPSB4LmFzaW4oKTtcbiAgaGFsZlBpID0gZ2V0UGkoQ3RvciwgcHIgKyA0LCBybSkudGltZXMoMC41KTtcbiAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgQ3Rvci5yb3VuZGluZyA9IHJtO1xuICByZXR1cm4gaGFsZlBpLm1pbnVzKHgpO1xufTtcblAuaW52ZXJzZUh5cGVyYm9saWNDb3NpbmUgPSBQLmFjb3NoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwciwgcm0sIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKHgubHRlKDEpKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4LmVxKDEpID8gMCA6IE5hTik7XG4gIGlmICgheC5pc0Zpbml0ZSgpKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4KTtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBDdG9yLnByZWNpc2lvbiA9IHByICsgTWF0aC5tYXgoTWF0aC5hYnMoeC5lKSwgeC5zZCgpKSArIDQ7XG4gIEN0b3Iucm91bmRpbmcgPSAxO1xuICBleHRlcm5hbCA9IGZhbHNlO1xuICB4ID0geC50aW1lcyh4KS5taW51cygxKS5zcXJ0KCkucGx1cyh4KTtcbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICBDdG9yLnByZWNpc2lvbiA9IHByO1xuICBDdG9yLnJvdW5kaW5nID0gcm07XG4gIHJldHVybiB4LmxuKCk7XG59O1xuUC5pbnZlcnNlSHlwZXJib2xpY1NpbmUgPSBQLmFzaW5oID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwciwgcm0sIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKCF4LmlzRmluaXRlKCkgfHwgeC5pc1plcm8oKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoeCk7XG4gIHByID0gQ3Rvci5wcmVjaXNpb247XG4gIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgQ3Rvci5wcmVjaXNpb24gPSBwciArIDIgKiBNYXRoLm1heChNYXRoLmFicyh4LmUpLCB4LnNkKCkpICsgNjtcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIHggPSB4LnRpbWVzKHgpLnBsdXMoMSkuc3FydCgpLnBsdXMoeCk7XG4gIGV4dGVybmFsID0gdHJ1ZTtcbiAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgQ3Rvci5yb3VuZGluZyA9IHJtO1xuICByZXR1cm4geC5sbigpO1xufTtcblAuaW52ZXJzZUh5cGVyYm9saWNUYW5nZW50ID0gUC5hdGFuaCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcHIsIHJtLCB3cHIsIHhzZCwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoIXguaXNGaW5pdGUoKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoTmFOKTtcbiAgaWYgKHguZSA+PSAwKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4LmFicygpLmVxKDEpID8geC5zIC8gMCA6IHguaXNaZXJvKCkgPyB4IDogTmFOKTtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICB4c2QgPSB4LnNkKCk7XG4gIGlmIChNYXRoLm1heCh4c2QsIHByKSA8IDIgKiAteC5lIC0gMSlcbiAgICByZXR1cm4gZmluYWxpc2UobmV3IEN0b3IoeCksIHByLCBybSwgdHJ1ZSk7XG4gIEN0b3IucHJlY2lzaW9uID0gd3ByID0geHNkIC0geC5lO1xuICB4ID0gZGl2aWRlKHgucGx1cygxKSwgbmV3IEN0b3IoMSkubWludXMoeCksIHdwciArIHByLCAxKTtcbiAgQ3Rvci5wcmVjaXNpb24gPSBwciArIDQ7XG4gIEN0b3Iucm91bmRpbmcgPSAxO1xuICB4ID0geC5sbigpO1xuICBDdG9yLnByZWNpc2lvbiA9IHByO1xuICBDdG9yLnJvdW5kaW5nID0gcm07XG4gIHJldHVybiB4LnRpbWVzKDAuNSk7XG59O1xuUC5pbnZlcnNlU2luZSA9IFAuYXNpbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaGFsZlBpLCBrLCBwciwgcm0sIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKHguaXNaZXJvKCkpXG4gICAgcmV0dXJuIG5ldyBDdG9yKHgpO1xuICBrID0geC5hYnMoKS5jbXAoMSk7XG4gIHByID0gQ3Rvci5wcmVjaXNpb247XG4gIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgaWYgKGsgIT09IC0xKSB7XG4gICAgaWYgKGsgPT09IDApIHtcbiAgICAgIGhhbGZQaSA9IGdldFBpKEN0b3IsIHByICsgNCwgcm0pLnRpbWVzKDAuNSk7XG4gICAgICBoYWxmUGkucyA9IHgucztcbiAgICAgIHJldHVybiBoYWxmUGk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ3RvcihOYU4pO1xuICB9XG4gIEN0b3IucHJlY2lzaW9uID0gcHIgKyA2O1xuICBDdG9yLnJvdW5kaW5nID0gMTtcbiAgeCA9IHguZGl2KG5ldyBDdG9yKDEpLm1pbnVzKHgudGltZXMoeCkpLnNxcnQoKS5wbHVzKDEpKS5hdGFuKCk7XG4gIEN0b3IucHJlY2lzaW9uID0gcHI7XG4gIEN0b3Iucm91bmRpbmcgPSBybTtcbiAgcmV0dXJuIHgudGltZXMoMik7XG59O1xuUC5pbnZlcnNlVGFuZ2VudCA9IFAuYXRhbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaSwgaiwgaywgbiwgcHgsIHQsIHIsIHdwciwgeDIsIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvciwgcHIgPSBDdG9yLnByZWNpc2lvbiwgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBpZiAoIXguaXNGaW5pdGUoKSkge1xuICAgIGlmICgheC5zKVxuICAgICAgcmV0dXJuIG5ldyBDdG9yKE5hTik7XG4gICAgaWYgKHByICsgNCA8PSBQSV9QUkVDSVNJT04pIHtcbiAgICAgIHIgPSBnZXRQaShDdG9yLCBwciArIDQsIHJtKS50aW1lcygwLjUpO1xuICAgICAgci5zID0geC5zO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHguaXNaZXJvKCkpIHtcbiAgICByZXR1cm4gbmV3IEN0b3IoeCk7XG4gIH0gZWxzZSBpZiAoeC5hYnMoKS5lcSgxKSAmJiBwciArIDQgPD0gUElfUFJFQ0lTSU9OKSB7XG4gICAgciA9IGdldFBpKEN0b3IsIHByICsgNCwgcm0pLnRpbWVzKDAuMjUpO1xuICAgIHIucyA9IHgucztcbiAgICByZXR1cm4gcjtcbiAgfVxuICBDdG9yLnByZWNpc2lvbiA9IHdwciA9IHByICsgMTA7XG4gIEN0b3Iucm91bmRpbmcgPSAxO1xuICBrID0gTWF0aC5taW4oMjgsIHdwciAvIExPR19CQVNFICsgMiB8IDApO1xuICBmb3IgKGkgPSBrOyBpOyAtLWkpXG4gICAgeCA9IHguZGl2KHgudGltZXMoeCkucGx1cygxKS5zcXJ0KCkucGx1cygxKSk7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIGogPSBNYXRoLmNlaWwod3ByIC8gTE9HX0JBU0UpO1xuICBuID0gMTtcbiAgeDIgPSB4LnRpbWVzKHgpO1xuICByID0gbmV3IEN0b3IoeCk7XG4gIHB4ID0geDtcbiAgZm9yICg7IGkgIT09IC0xOyApIHtcbiAgICBweCA9IHB4LnRpbWVzKHgyKTtcbiAgICB0ID0gci5taW51cyhweC5kaXYobiArPSAyKSk7XG4gICAgcHggPSBweC50aW1lcyh4Mik7XG4gICAgciA9IHQucGx1cyhweC5kaXYobiArPSAyKSk7XG4gICAgaWYgKHIuZFtqXSAhPT0gdm9pZCAwKVxuICAgICAgZm9yIChpID0gajsgci5kW2ldID09PSB0LmRbaV0gJiYgaS0tOyApXG4gICAgICAgIDtcbiAgfVxuICBpZiAoaylcbiAgICByID0gci50aW1lcygyIDw8IGsgLSAxKTtcbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICByZXR1cm4gZmluYWxpc2UociwgQ3Rvci5wcmVjaXNpb24gPSBwciwgQ3Rvci5yb3VuZGluZyA9IHJtLCB0cnVlKTtcbn07XG5QLmlzRmluaXRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhIXRoaXMuZDtcbn07XG5QLmlzSW50ZWdlciA9IFAuaXNJbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhdGhpcy5kICYmIG1hdGhmbG9vcih0aGlzLmUgLyBMT0dfQkFTRSkgPiB0aGlzLmQubGVuZ3RoIC0gMjtcbn07XG5QLmlzTmFOID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5zO1xufTtcblAuaXNOZWdhdGl2ZSA9IFAuaXNOZWcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucyA8IDA7XG59O1xuUC5pc1Bvc2l0aXZlID0gUC5pc1BvcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zID4gMDtcbn07XG5QLmlzWmVybyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISF0aGlzLmQgJiYgdGhpcy5kWzBdID09PSAwO1xufTtcblAubGVzc1RoYW4gPSBQLmx0ID0gZnVuY3Rpb24oeSkge1xuICByZXR1cm4gdGhpcy5jbXAoeSkgPCAwO1xufTtcblAubGVzc1RoYW5PckVxdWFsVG8gPSBQLmx0ZSA9IGZ1bmN0aW9uKHkpIHtcbiAgcmV0dXJuIHRoaXMuY21wKHkpIDwgMTtcbn07XG5QLmxvZ2FyaXRobSA9IFAubG9nID0gZnVuY3Rpb24oYmFzZSkge1xuICB2YXIgaXNCYXNlMTAsIGQsIGRlbm9taW5hdG9yLCBrLCBpbmYsIG51bSwgc2QsIHIsIGFyZyA9IHRoaXMsIEN0b3IgPSBhcmcuY29uc3RydWN0b3IsIHByID0gQ3Rvci5wcmVjaXNpb24sIHJtID0gQ3Rvci5yb3VuZGluZywgZ3VhcmQgPSA1O1xuICBpZiAoYmFzZSA9PSBudWxsKSB7XG4gICAgYmFzZSA9IG5ldyBDdG9yKDEwKTtcbiAgICBpc0Jhc2UxMCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgYmFzZSA9IG5ldyBDdG9yKGJhc2UpO1xuICAgIGQgPSBiYXNlLmQ7XG4gICAgaWYgKGJhc2UucyA8IDAgfHwgIWQgfHwgIWRbMF0gfHwgYmFzZS5lcSgxKSlcbiAgICAgIHJldHVybiBuZXcgQ3RvcihOYU4pO1xuICAgIGlzQmFzZTEwID0gYmFzZS5lcSgxMCk7XG4gIH1cbiAgZCA9IGFyZy5kO1xuICBpZiAoYXJnLnMgPCAwIHx8ICFkIHx8ICFkWzBdIHx8IGFyZy5lcSgxKSkge1xuICAgIHJldHVybiBuZXcgQ3RvcihkICYmICFkWzBdID8gLTEgLyAwIDogYXJnLnMgIT0gMSA/IE5hTiA6IGQgPyAwIDogMSAvIDApO1xuICB9XG4gIGlmIChpc0Jhc2UxMCkge1xuICAgIGlmIChkLmxlbmd0aCA+IDEpIHtcbiAgICAgIGluZiA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoayA9IGRbMF07IGsgJSAxMCA9PT0gMDsgKVxuICAgICAgICBrIC89IDEwO1xuICAgICAgaW5mID0gayAhPT0gMTtcbiAgICB9XG4gIH1cbiAgZXh0ZXJuYWwgPSBmYWxzZTtcbiAgc2QgPSBwciArIGd1YXJkO1xuICBudW0gPSBuYXR1cmFsTG9nYXJpdGhtKGFyZywgc2QpO1xuICBkZW5vbWluYXRvciA9IGlzQmFzZTEwID8gZ2V0TG4xMChDdG9yLCBzZCArIDEwKSA6IG5hdHVyYWxMb2dhcml0aG0oYmFzZSwgc2QpO1xuICByID0gZGl2aWRlKG51bSwgZGVub21pbmF0b3IsIHNkLCAxKTtcbiAgaWYgKGNoZWNrUm91bmRpbmdEaWdpdHMoci5kLCBrID0gcHIsIHJtKSkge1xuICAgIGRvIHtcbiAgICAgIHNkICs9IDEwO1xuICAgICAgbnVtID0gbmF0dXJhbExvZ2FyaXRobShhcmcsIHNkKTtcbiAgICAgIGRlbm9taW5hdG9yID0gaXNCYXNlMTAgPyBnZXRMbjEwKEN0b3IsIHNkICsgMTApIDogbmF0dXJhbExvZ2FyaXRobShiYXNlLCBzZCk7XG4gICAgICByID0gZGl2aWRlKG51bSwgZGVub21pbmF0b3IsIHNkLCAxKTtcbiAgICAgIGlmICghaW5mKSB7XG4gICAgICAgIGlmICgrZGlnaXRzVG9TdHJpbmcoci5kKS5zbGljZShrICsgMSwgayArIDE1KSArIDEgPT0gMWUxNCkge1xuICAgICAgICAgIHIgPSBmaW5hbGlzZShyLCBwciArIDEsIDApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGNoZWNrUm91bmRpbmdEaWdpdHMoci5kLCBrICs9IDEwLCBybSkpO1xuICB9XG4gIGV4dGVybmFsID0gdHJ1ZTtcbiAgcmV0dXJuIGZpbmFsaXNlKHIsIHByLCBybSk7XG59O1xuUC5taW51cyA9IFAuc3ViID0gZnVuY3Rpb24oeSkge1xuICB2YXIgZCwgZSwgaSwgaiwgaywgbGVuLCBwciwgcm0sIHhkLCB4ZSwgeExUeSwgeWQsIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgeSA9IG5ldyBDdG9yKHkpO1xuICBpZiAoIXguZCB8fCAheS5kKSB7XG4gICAgaWYgKCF4LnMgfHwgIXkucylcbiAgICAgIHkgPSBuZXcgQ3RvcihOYU4pO1xuICAgIGVsc2UgaWYgKHguZClcbiAgICAgIHkucyA9IC15LnM7XG4gICAgZWxzZVxuICAgICAgeSA9IG5ldyBDdG9yKHkuZCB8fCB4LnMgIT09IHkucyA/IHggOiBOYU4pO1xuICAgIHJldHVybiB5O1xuICB9XG4gIGlmICh4LnMgIT0geS5zKSB7XG4gICAgeS5zID0gLXkucztcbiAgICByZXR1cm4geC5wbHVzKHkpO1xuICB9XG4gIHhkID0geC5kO1xuICB5ZCA9IHkuZDtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBpZiAoIXhkWzBdIHx8ICF5ZFswXSkge1xuICAgIGlmICh5ZFswXSlcbiAgICAgIHkucyA9IC15LnM7XG4gICAgZWxzZSBpZiAoeGRbMF0pXG4gICAgICB5ID0gbmV3IEN0b3IoeCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIG5ldyBDdG9yKHJtID09PSAzID8gLTAgOiAwKTtcbiAgICByZXR1cm4gZXh0ZXJuYWwgPyBmaW5hbGlzZSh5LCBwciwgcm0pIDogeTtcbiAgfVxuICBlID0gbWF0aGZsb29yKHkuZSAvIExPR19CQVNFKTtcbiAgeGUgPSBtYXRoZmxvb3IoeC5lIC8gTE9HX0JBU0UpO1xuICB4ZCA9IHhkLnNsaWNlKCk7XG4gIGsgPSB4ZSAtIGU7XG4gIGlmIChrKSB7XG4gICAgeExUeSA9IGsgPCAwO1xuICAgIGlmICh4TFR5KSB7XG4gICAgICBkID0geGQ7XG4gICAgICBrID0gLWs7XG4gICAgICBsZW4gPSB5ZC5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSB5ZDtcbiAgICAgIGUgPSB4ZTtcbiAgICAgIGxlbiA9IHhkLmxlbmd0aDtcbiAgICB9XG4gICAgaSA9IE1hdGgubWF4KE1hdGguY2VpbChwciAvIExPR19CQVNFKSwgbGVuKSArIDI7XG4gICAgaWYgKGsgPiBpKSB7XG4gICAgICBrID0gaTtcbiAgICAgIGQubGVuZ3RoID0gMTtcbiAgICB9XG4gICAgZC5yZXZlcnNlKCk7XG4gICAgZm9yIChpID0gazsgaS0tOyApXG4gICAgICBkLnB1c2goMCk7XG4gICAgZC5yZXZlcnNlKCk7XG4gIH0gZWxzZSB7XG4gICAgaSA9IHhkLmxlbmd0aDtcbiAgICBsZW4gPSB5ZC5sZW5ndGg7XG4gICAgeExUeSA9IGkgPCBsZW47XG4gICAgaWYgKHhMVHkpXG4gICAgICBsZW4gPSBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHhkW2ldICE9IHlkW2ldKSB7XG4gICAgICAgIHhMVHkgPSB4ZFtpXSA8IHlkW2ldO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgayA9IDA7XG4gIH1cbiAgaWYgKHhMVHkpIHtcbiAgICBkID0geGQ7XG4gICAgeGQgPSB5ZDtcbiAgICB5ZCA9IGQ7XG4gICAgeS5zID0gLXkucztcbiAgfVxuICBsZW4gPSB4ZC5sZW5ndGg7XG4gIGZvciAoaSA9IHlkLmxlbmd0aCAtIGxlbjsgaSA+IDA7IC0taSlcbiAgICB4ZFtsZW4rK10gPSAwO1xuICBmb3IgKGkgPSB5ZC5sZW5ndGg7IGkgPiBrOyApIHtcbiAgICBpZiAoeGRbLS1pXSA8IHlkW2ldKSB7XG4gICAgICBmb3IgKGogPSBpOyBqICYmIHhkWy0tal0gPT09IDA7IClcbiAgICAgICAgeGRbal0gPSBCQVNFIC0gMTtcbiAgICAgIC0teGRbal07XG4gICAgICB4ZFtpXSArPSBCQVNFO1xuICAgIH1cbiAgICB4ZFtpXSAtPSB5ZFtpXTtcbiAgfVxuICBmb3IgKDsgeGRbLS1sZW5dID09PSAwOyApXG4gICAgeGQucG9wKCk7XG4gIGZvciAoOyB4ZFswXSA9PT0gMDsgeGQuc2hpZnQoKSlcbiAgICAtLWU7XG4gIGlmICgheGRbMF0pXG4gICAgcmV0dXJuIG5ldyBDdG9yKHJtID09PSAzID8gLTAgOiAwKTtcbiAgeS5kID0geGQ7XG4gIHkuZSA9IGdldEJhc2UxMEV4cG9uZW50KHhkLCBlKTtcbiAgcmV0dXJuIGV4dGVybmFsID8gZmluYWxpc2UoeSwgcHIsIHJtKSA6IHk7XG59O1xuUC5tb2R1bG8gPSBQLm1vZCA9IGZ1bmN0aW9uKHkpIHtcbiAgdmFyIHEsIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgeSA9IG5ldyBDdG9yKHkpO1xuICBpZiAoIXguZCB8fCAheS5zIHx8IHkuZCAmJiAheS5kWzBdKVxuICAgIHJldHVybiBuZXcgQ3RvcihOYU4pO1xuICBpZiAoIXkuZCB8fCB4LmQgJiYgIXguZFswXSkge1xuICAgIHJldHVybiBmaW5hbGlzZShuZXcgQ3Rvcih4KSwgQ3Rvci5wcmVjaXNpb24sIEN0b3Iucm91bmRpbmcpO1xuICB9XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIGlmIChDdG9yLm1vZHVsbyA9PSA5KSB7XG4gICAgcSA9IGRpdmlkZSh4LCB5LmFicygpLCAwLCAzLCAxKTtcbiAgICBxLnMgKj0geS5zO1xuICB9IGVsc2Uge1xuICAgIHEgPSBkaXZpZGUoeCwgeSwgMCwgQ3Rvci5tb2R1bG8sIDEpO1xuICB9XG4gIHEgPSBxLnRpbWVzKHkpO1xuICBleHRlcm5hbCA9IHRydWU7XG4gIHJldHVybiB4Lm1pbnVzKHEpO1xufTtcblAubmF0dXJhbEV4cG9uZW50aWFsID0gUC5leHAgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5hdHVyYWxFeHBvbmVudGlhbCh0aGlzKTtcbn07XG5QLm5hdHVyYWxMb2dhcml0aG0gPSBQLmxuID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuYXR1cmFsTG9nYXJpdGhtKHRoaXMpO1xufTtcblAubmVnYXRlZCA9IFAubmVnID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XG4gIHgucyA9IC14LnM7XG4gIHJldHVybiBmaW5hbGlzZSh4KTtcbn07XG5QLnBsdXMgPSBQLmFkZCA9IGZ1bmN0aW9uKHkpIHtcbiAgdmFyIGNhcnJ5LCBkLCBlLCBpLCBrLCBsZW4sIHByLCBybSwgeGQsIHlkLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIHkgPSBuZXcgQ3Rvcih5KTtcbiAgaWYgKCF4LmQgfHwgIXkuZCkge1xuICAgIGlmICgheC5zIHx8ICF5LnMpXG4gICAgICB5ID0gbmV3IEN0b3IoTmFOKTtcbiAgICBlbHNlIGlmICgheC5kKVxuICAgICAgeSA9IG5ldyBDdG9yKHkuZCB8fCB4LnMgPT09IHkucyA/IHggOiBOYU4pO1xuICAgIHJldHVybiB5O1xuICB9XG4gIGlmICh4LnMgIT0geS5zKSB7XG4gICAgeS5zID0gLXkucztcbiAgICByZXR1cm4geC5taW51cyh5KTtcbiAgfVxuICB4ZCA9IHguZDtcbiAgeWQgPSB5LmQ7XG4gIHByID0gQ3Rvci5wcmVjaXNpb247XG4gIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgaWYgKCF4ZFswXSB8fCAheWRbMF0pIHtcbiAgICBpZiAoIXlkWzBdKVxuICAgICAgeSA9IG5ldyBDdG9yKHgpO1xuICAgIHJldHVybiBleHRlcm5hbCA/IGZpbmFsaXNlKHksIHByLCBybSkgOiB5O1xuICB9XG4gIGsgPSBtYXRoZmxvb3IoeC5lIC8gTE9HX0JBU0UpO1xuICBlID0gbWF0aGZsb29yKHkuZSAvIExPR19CQVNFKTtcbiAgeGQgPSB4ZC5zbGljZSgpO1xuICBpID0gayAtIGU7XG4gIGlmIChpKSB7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBkID0geGQ7XG4gICAgICBpID0gLWk7XG4gICAgICBsZW4gPSB5ZC5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSB5ZDtcbiAgICAgIGUgPSBrO1xuICAgICAgbGVuID0geGQubGVuZ3RoO1xuICAgIH1cbiAgICBrID0gTWF0aC5jZWlsKHByIC8gTE9HX0JBU0UpO1xuICAgIGxlbiA9IGsgPiBsZW4gPyBrICsgMSA6IGxlbiArIDE7XG4gICAgaWYgKGkgPiBsZW4pIHtcbiAgICAgIGkgPSBsZW47XG4gICAgICBkLmxlbmd0aCA9IDE7XG4gICAgfVxuICAgIGQucmV2ZXJzZSgpO1xuICAgIGZvciAoOyBpLS07IClcbiAgICAgIGQucHVzaCgwKTtcbiAgICBkLnJldmVyc2UoKTtcbiAgfVxuICBsZW4gPSB4ZC5sZW5ndGg7XG4gIGkgPSB5ZC5sZW5ndGg7XG4gIGlmIChsZW4gLSBpIDwgMCkge1xuICAgIGkgPSBsZW47XG4gICAgZCA9IHlkO1xuICAgIHlkID0geGQ7XG4gICAgeGQgPSBkO1xuICB9XG4gIGZvciAoY2FycnkgPSAwOyBpOyApIHtcbiAgICBjYXJyeSA9ICh4ZFstLWldID0geGRbaV0gKyB5ZFtpXSArIGNhcnJ5KSAvIEJBU0UgfCAwO1xuICAgIHhkW2ldICU9IEJBU0U7XG4gIH1cbiAgaWYgKGNhcnJ5KSB7XG4gICAgeGQudW5zaGlmdChjYXJyeSk7XG4gICAgKytlO1xuICB9XG4gIGZvciAobGVuID0geGQubGVuZ3RoOyB4ZFstLWxlbl0gPT0gMDsgKVxuICAgIHhkLnBvcCgpO1xuICB5LmQgPSB4ZDtcbiAgeS5lID0gZ2V0QmFzZTEwRXhwb25lbnQoeGQsIGUpO1xuICByZXR1cm4gZXh0ZXJuYWwgPyBmaW5hbGlzZSh5LCBwciwgcm0pIDogeTtcbn07XG5QLnByZWNpc2lvbiA9IFAuc2QgPSBmdW5jdGlvbih6KSB7XG4gIHZhciBrLCB4ID0gdGhpcztcbiAgaWYgKHogIT09IHZvaWQgMCAmJiB6ICE9PSAhIXogJiYgeiAhPT0gMSAmJiB6ICE9PSAwKVxuICAgIHRocm93IEVycm9yKGludmFsaWRBcmd1bWVudCArIHopO1xuICBpZiAoeC5kKSB7XG4gICAgayA9IGdldFByZWNpc2lvbih4LmQpO1xuICAgIGlmICh6ICYmIHguZSArIDEgPiBrKVxuICAgICAgayA9IHguZSArIDE7XG4gIH0gZWxzZSB7XG4gICAgayA9IE5hTjtcbiAgfVxuICByZXR1cm4gaztcbn07XG5QLnJvdW5kID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3I7XG4gIHJldHVybiBmaW5hbGlzZShuZXcgQ3Rvcih4KSwgeC5lICsgMSwgQ3Rvci5yb3VuZGluZyk7XG59O1xuUC5zaW5lID0gUC5zaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHByLCBybSwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoIXguaXNGaW5pdGUoKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoTmFOKTtcbiAgaWYgKHguaXNaZXJvKCkpXG4gICAgcmV0dXJuIG5ldyBDdG9yKHgpO1xuICBwciA9IEN0b3IucHJlY2lzaW9uO1xuICBybSA9IEN0b3Iucm91bmRpbmc7XG4gIEN0b3IucHJlY2lzaW9uID0gcHIgKyBNYXRoLm1heCh4LmUsIHguc2QoKSkgKyBMT0dfQkFTRTtcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIHggPSBzaW5lKEN0b3IsIHRvTGVzc1RoYW5IYWxmUGkoQ3RvciwgeCkpO1xuICBDdG9yLnByZWNpc2lvbiA9IHByO1xuICBDdG9yLnJvdW5kaW5nID0gcm07XG4gIHJldHVybiBmaW5hbGlzZShxdWFkcmFudCA+IDIgPyB4Lm5lZygpIDogeCwgcHIsIHJtLCB0cnVlKTtcbn07XG5QLnNxdWFyZVJvb3QgPSBQLnNxcnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG0sIG4sIHNkLCByLCByZXAsIHQsIHggPSB0aGlzLCBkID0geC5kLCBlID0geC5lLCBzID0geC5zLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKHMgIT09IDEgfHwgIWQgfHwgIWRbMF0pIHtcbiAgICByZXR1cm4gbmV3IEN0b3IoIXMgfHwgcyA8IDAgJiYgKCFkIHx8IGRbMF0pID8gTmFOIDogZCA/IHggOiAxIC8gMCk7XG4gIH1cbiAgZXh0ZXJuYWwgPSBmYWxzZTtcbiAgcyA9IE1hdGguc3FydCgreCk7XG4gIGlmIChzID09IDAgfHwgcyA9PSAxIC8gMCkge1xuICAgIG4gPSBkaWdpdHNUb1N0cmluZyhkKTtcbiAgICBpZiAoKG4ubGVuZ3RoICsgZSkgJSAyID09IDApXG4gICAgICBuICs9IFwiMFwiO1xuICAgIHMgPSBNYXRoLnNxcnQobik7XG4gICAgZSA9IG1hdGhmbG9vcigoZSArIDEpIC8gMikgLSAoZSA8IDAgfHwgZSAlIDIpO1xuICAgIGlmIChzID09IDEgLyAwKSB7XG4gICAgICBuID0gXCI1ZVwiICsgZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbiA9IHMudG9FeHBvbmVudGlhbCgpO1xuICAgICAgbiA9IG4uc2xpY2UoMCwgbi5pbmRleE9mKFwiZVwiKSArIDEpICsgZTtcbiAgICB9XG4gICAgciA9IG5ldyBDdG9yKG4pO1xuICB9IGVsc2Uge1xuICAgIHIgPSBuZXcgQ3RvcihzLnRvU3RyaW5nKCkpO1xuICB9XG4gIHNkID0gKGUgPSBDdG9yLnByZWNpc2lvbikgKyAzO1xuICBmb3IgKDsgOyApIHtcbiAgICB0ID0gcjtcbiAgICByID0gdC5wbHVzKGRpdmlkZSh4LCB0LCBzZCArIDIsIDEpKS50aW1lcygwLjUpO1xuICAgIGlmIChkaWdpdHNUb1N0cmluZyh0LmQpLnNsaWNlKDAsIHNkKSA9PT0gKG4gPSBkaWdpdHNUb1N0cmluZyhyLmQpKS5zbGljZSgwLCBzZCkpIHtcbiAgICAgIG4gPSBuLnNsaWNlKHNkIC0gMywgc2QgKyAxKTtcbiAgICAgIGlmIChuID09IFwiOTk5OVwiIHx8ICFyZXAgJiYgbiA9PSBcIjQ5OTlcIikge1xuICAgICAgICBpZiAoIXJlcCkge1xuICAgICAgICAgIGZpbmFsaXNlKHQsIGUgKyAxLCAwKTtcbiAgICAgICAgICBpZiAodC50aW1lcyh0KS5lcSh4KSkge1xuICAgICAgICAgICAgciA9IHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2QgKz0gNDtcbiAgICAgICAgcmVwID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghK24gfHwgIStuLnNsaWNlKDEpICYmIG4uY2hhckF0KDApID09IFwiNVwiKSB7XG4gICAgICAgICAgZmluYWxpc2UociwgZSArIDEsIDEpO1xuICAgICAgICAgIG0gPSAhci50aW1lcyhyKS5lcSh4KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICByZXR1cm4gZmluYWxpc2UociwgZSwgQ3Rvci5yb3VuZGluZywgbSk7XG59O1xuUC50YW5nZW50ID0gUC50YW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHByLCBybSwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoIXguaXNGaW5pdGUoKSlcbiAgICByZXR1cm4gbmV3IEN0b3IoTmFOKTtcbiAgaWYgKHguaXNaZXJvKCkpXG4gICAgcmV0dXJuIG5ldyBDdG9yKHgpO1xuICBwciA9IEN0b3IucHJlY2lzaW9uO1xuICBybSA9IEN0b3Iucm91bmRpbmc7XG4gIEN0b3IucHJlY2lzaW9uID0gcHIgKyAxMDtcbiAgQ3Rvci5yb3VuZGluZyA9IDE7XG4gIHggPSB4LnNpbigpO1xuICB4LnMgPSAxO1xuICB4ID0gZGl2aWRlKHgsIG5ldyBDdG9yKDEpLm1pbnVzKHgudGltZXMoeCkpLnNxcnQoKSwgcHIgKyAxMCwgMCk7XG4gIEN0b3IucHJlY2lzaW9uID0gcHI7XG4gIEN0b3Iucm91bmRpbmcgPSBybTtcbiAgcmV0dXJuIGZpbmFsaXNlKHF1YWRyYW50ID09IDIgfHwgcXVhZHJhbnQgPT0gNCA/IHgubmVnKCkgOiB4LCBwciwgcm0sIHRydWUpO1xufTtcblAudGltZXMgPSBQLm11bCA9IGZ1bmN0aW9uKHkpIHtcbiAgdmFyIGNhcnJ5LCBlLCBpLCBrLCByLCByTCwgdCwgeGRMLCB5ZEwsIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvciwgeGQgPSB4LmQsIHlkID0gKHkgPSBuZXcgQ3Rvcih5KSkuZDtcbiAgeS5zICo9IHgucztcbiAgaWYgKCF4ZCB8fCAheGRbMF0gfHwgIXlkIHx8ICF5ZFswXSkge1xuICAgIHJldHVybiBuZXcgQ3RvcigheS5zIHx8IHhkICYmICF4ZFswXSAmJiAheWQgfHwgeWQgJiYgIXlkWzBdICYmICF4ZCA/IE5hTiA6ICF4ZCB8fCAheWQgPyB5LnMgLyAwIDogeS5zICogMCk7XG4gIH1cbiAgZSA9IG1hdGhmbG9vcih4LmUgLyBMT0dfQkFTRSkgKyBtYXRoZmxvb3IoeS5lIC8gTE9HX0JBU0UpO1xuICB4ZEwgPSB4ZC5sZW5ndGg7XG4gIHlkTCA9IHlkLmxlbmd0aDtcbiAgaWYgKHhkTCA8IHlkTCkge1xuICAgIHIgPSB4ZDtcbiAgICB4ZCA9IHlkO1xuICAgIHlkID0gcjtcbiAgICByTCA9IHhkTDtcbiAgICB4ZEwgPSB5ZEw7XG4gICAgeWRMID0gckw7XG4gIH1cbiAgciA9IFtdO1xuICByTCA9IHhkTCArIHlkTDtcbiAgZm9yIChpID0gckw7IGktLTsgKVxuICAgIHIucHVzaCgwKTtcbiAgZm9yIChpID0geWRMOyAtLWkgPj0gMDsgKSB7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoayA9IHhkTCArIGk7IGsgPiBpOyApIHtcbiAgICAgIHQgPSByW2tdICsgeWRbaV0gKiB4ZFtrIC0gaSAtIDFdICsgY2Fycnk7XG4gICAgICByW2stLV0gPSB0ICUgQkFTRSB8IDA7XG4gICAgICBjYXJyeSA9IHQgLyBCQVNFIHwgMDtcbiAgICB9XG4gICAgcltrXSA9IChyW2tdICsgY2FycnkpICUgQkFTRSB8IDA7XG4gIH1cbiAgZm9yICg7ICFyWy0tckxdOyApXG4gICAgci5wb3AoKTtcbiAgaWYgKGNhcnJ5KVxuICAgICsrZTtcbiAgZWxzZVxuICAgIHIuc2hpZnQoKTtcbiAgeS5kID0gcjtcbiAgeS5lID0gZ2V0QmFzZTEwRXhwb25lbnQociwgZSk7XG4gIHJldHVybiBleHRlcm5hbCA/IGZpbmFsaXNlKHksIEN0b3IucHJlY2lzaW9uLCBDdG9yLnJvdW5kaW5nKSA6IHk7XG59O1xuUC50b0JpbmFyeSA9IGZ1bmN0aW9uKHNkLCBybSkge1xuICByZXR1cm4gdG9TdHJpbmdCaW5hcnkodGhpcywgMiwgc2QsIHJtKTtcbn07XG5QLnRvRGVjaW1hbFBsYWNlcyA9IFAudG9EUCA9IGZ1bmN0aW9uKGRwLCBybSkge1xuICB2YXIgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICB4ID0gbmV3IEN0b3IoeCk7XG4gIGlmIChkcCA9PT0gdm9pZCAwKVxuICAgIHJldHVybiB4O1xuICBjaGVja0ludDMyKGRwLCAwLCBNQVhfRElHSVRTKTtcbiAgaWYgKHJtID09PSB2b2lkIDApXG4gICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBlbHNlXG4gICAgY2hlY2tJbnQzMihybSwgMCwgOCk7XG4gIHJldHVybiBmaW5hbGlzZSh4LCBkcCArIHguZSArIDEsIHJtKTtcbn07XG5QLnRvRXhwb25lbnRpYWwgPSBmdW5jdGlvbihkcCwgcm0pIHtcbiAgdmFyIHN0ciwgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoZHAgPT09IHZvaWQgMCkge1xuICAgIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrSW50MzIoZHAsIDAsIE1BWF9ESUdJVFMpO1xuICAgIGlmIChybSA9PT0gdm9pZCAwKVxuICAgICAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICAgIGVsc2VcbiAgICAgIGNoZWNrSW50MzIocm0sIDAsIDgpO1xuICAgIHggPSBmaW5hbGlzZShuZXcgQ3Rvcih4KSwgZHAgKyAxLCBybSk7XG4gICAgc3RyID0gZmluaXRlVG9TdHJpbmcoeCwgdHJ1ZSwgZHAgKyAxKTtcbiAgfVxuICByZXR1cm4geC5pc05lZygpICYmICF4LmlzWmVybygpID8gXCItXCIgKyBzdHIgOiBzdHI7XG59O1xuUC50b0ZpeGVkID0gZnVuY3Rpb24oZHAsIHJtKSB7XG4gIHZhciBzdHIsIHksIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKGRwID09PSB2b2lkIDApIHtcbiAgICBzdHIgPSBmaW5pdGVUb1N0cmluZyh4KTtcbiAgfSBlbHNlIHtcbiAgICBjaGVja0ludDMyKGRwLCAwLCBNQVhfRElHSVRTKTtcbiAgICBpZiAocm0gPT09IHZvaWQgMClcbiAgICAgIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgICBlbHNlXG4gICAgICBjaGVja0ludDMyKHJtLCAwLCA4KTtcbiAgICB5ID0gZmluYWxpc2UobmV3IEN0b3IoeCksIGRwICsgeC5lICsgMSwgcm0pO1xuICAgIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHksIGZhbHNlLCBkcCArIHkuZSArIDEpO1xuICB9XG4gIHJldHVybiB4LmlzTmVnKCkgJiYgIXguaXNaZXJvKCkgPyBcIi1cIiArIHN0ciA6IHN0cjtcbn07XG5QLnRvRnJhY3Rpb24gPSBmdW5jdGlvbihtYXhEKSB7XG4gIHZhciBkLCBkMCwgZDEsIGQyLCBlLCBrLCBuLCBuMCwgbjEsIHByLCBxLCByLCB4ID0gdGhpcywgeGQgPSB4LmQsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoIXhkKVxuICAgIHJldHVybiBuZXcgQ3Rvcih4KTtcbiAgbjEgPSBkMCA9IG5ldyBDdG9yKDEpO1xuICBkMSA9IG4wID0gbmV3IEN0b3IoMCk7XG4gIGQgPSBuZXcgQ3RvcihkMSk7XG4gIGUgPSBkLmUgPSBnZXRQcmVjaXNpb24oeGQpIC0geC5lIC0gMTtcbiAgayA9IGUgJSBMT0dfQkFTRTtcbiAgZC5kWzBdID0gbWF0aHBvdygxMCwgayA8IDAgPyBMT0dfQkFTRSArIGsgOiBrKTtcbiAgaWYgKG1heEQgPT0gbnVsbCkge1xuICAgIG1heEQgPSBlID4gMCA/IGQgOiBuMTtcbiAgfSBlbHNlIHtcbiAgICBuID0gbmV3IEN0b3IobWF4RCk7XG4gICAgaWYgKCFuLmlzSW50KCkgfHwgbi5sdChuMSkpXG4gICAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyBuKTtcbiAgICBtYXhEID0gbi5ndChkKSA/IGUgPiAwID8gZCA6IG4xIDogbjtcbiAgfVxuICBleHRlcm5hbCA9IGZhbHNlO1xuICBuID0gbmV3IEN0b3IoZGlnaXRzVG9TdHJpbmcoeGQpKTtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgQ3Rvci5wcmVjaXNpb24gPSBlID0geGQubGVuZ3RoICogTE9HX0JBU0UgKiAyO1xuICBmb3IgKDsgOyApIHtcbiAgICBxID0gZGl2aWRlKG4sIGQsIDAsIDEsIDEpO1xuICAgIGQyID0gZDAucGx1cyhxLnRpbWVzKGQxKSk7XG4gICAgaWYgKGQyLmNtcChtYXhEKSA9PSAxKVxuICAgICAgYnJlYWs7XG4gICAgZDAgPSBkMTtcbiAgICBkMSA9IGQyO1xuICAgIGQyID0gbjE7XG4gICAgbjEgPSBuMC5wbHVzKHEudGltZXMoZDIpKTtcbiAgICBuMCA9IGQyO1xuICAgIGQyID0gZDtcbiAgICBkID0gbi5taW51cyhxLnRpbWVzKGQyKSk7XG4gICAgbiA9IGQyO1xuICB9XG4gIGQyID0gZGl2aWRlKG1heEQubWludXMoZDApLCBkMSwgMCwgMSwgMSk7XG4gIG4wID0gbjAucGx1cyhkMi50aW1lcyhuMSkpO1xuICBkMCA9IGQwLnBsdXMoZDIudGltZXMoZDEpKTtcbiAgbjAucyA9IG4xLnMgPSB4LnM7XG4gIHIgPSBkaXZpZGUobjEsIGQxLCBlLCAxKS5taW51cyh4KS5hYnMoKS5jbXAoZGl2aWRlKG4wLCBkMCwgZSwgMSkubWludXMoeCkuYWJzKCkpIDwgMSA/IFtuMSwgZDFdIDogW24wLCBkMF07XG4gIEN0b3IucHJlY2lzaW9uID0gcHI7XG4gIGV4dGVybmFsID0gdHJ1ZTtcbiAgcmV0dXJuIHI7XG59O1xuUC50b0hleGFkZWNpbWFsID0gUC50b0hleCA9IGZ1bmN0aW9uKHNkLCBybSkge1xuICByZXR1cm4gdG9TdHJpbmdCaW5hcnkodGhpcywgMTYsIHNkLCBybSk7XG59O1xuUC50b05lYXJlc3QgPSBmdW5jdGlvbih5LCBybSkge1xuICB2YXIgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICB4ID0gbmV3IEN0b3IoeCk7XG4gIGlmICh5ID09IG51bGwpIHtcbiAgICBpZiAoIXguZClcbiAgICAgIHJldHVybiB4O1xuICAgIHkgPSBuZXcgQ3RvcigxKTtcbiAgICBybSA9IEN0b3Iucm91bmRpbmc7XG4gIH0gZWxzZSB7XG4gICAgeSA9IG5ldyBDdG9yKHkpO1xuICAgIGlmIChybSA9PT0gdm9pZCAwKSB7XG4gICAgICBybSA9IEN0b3Iucm91bmRpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrSW50MzIocm0sIDAsIDgpO1xuICAgIH1cbiAgICBpZiAoIXguZClcbiAgICAgIHJldHVybiB5LnMgPyB4IDogeTtcbiAgICBpZiAoIXkuZCkge1xuICAgICAgaWYgKHkucylcbiAgICAgICAgeS5zID0geC5zO1xuICAgICAgcmV0dXJuIHk7XG4gICAgfVxuICB9XG4gIGlmICh5LmRbMF0pIHtcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xuICAgIHggPSBkaXZpZGUoeCwgeSwgMCwgcm0sIDEpLnRpbWVzKHkpO1xuICAgIGV4dGVybmFsID0gdHJ1ZTtcbiAgICBmaW5hbGlzZSh4KTtcbiAgfSBlbHNlIHtcbiAgICB5LnMgPSB4LnM7XG4gICAgeCA9IHk7XG4gIH1cbiAgcmV0dXJuIHg7XG59O1xuUC50b051bWJlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gK3RoaXM7XG59O1xuUC50b09jdGFsID0gZnVuY3Rpb24oc2QsIHJtKSB7XG4gIHJldHVybiB0b1N0cmluZ0JpbmFyeSh0aGlzLCA4LCBzZCwgcm0pO1xufTtcblAudG9Qb3dlciA9IFAucG93ID0gZnVuY3Rpb24oeSkge1xuICB2YXIgZSwgaywgcHIsIHIsIHJtLCBzLCB4ID0gdGhpcywgQ3RvciA9IHguY29uc3RydWN0b3IsIHluID0gKyh5ID0gbmV3IEN0b3IoeSkpO1xuICBpZiAoIXguZCB8fCAheS5kIHx8ICF4LmRbMF0gfHwgIXkuZFswXSlcbiAgICByZXR1cm4gbmV3IEN0b3IobWF0aHBvdygreCwgeW4pKTtcbiAgeCA9IG5ldyBDdG9yKHgpO1xuICBpZiAoeC5lcSgxKSlcbiAgICByZXR1cm4geDtcbiAgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgcm0gPSBDdG9yLnJvdW5kaW5nO1xuICBpZiAoeS5lcSgxKSlcbiAgICByZXR1cm4gZmluYWxpc2UoeCwgcHIsIHJtKTtcbiAgZSA9IG1hdGhmbG9vcih5LmUgLyBMT0dfQkFTRSk7XG4gIGlmIChlID49IHkuZC5sZW5ndGggLSAxICYmIChrID0geW4gPCAwID8gLXluIDogeW4pIDw9IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICByID0gaW50UG93KEN0b3IsIHgsIGssIHByKTtcbiAgICByZXR1cm4geS5zIDwgMCA/IG5ldyBDdG9yKDEpLmRpdihyKSA6IGZpbmFsaXNlKHIsIHByLCBybSk7XG4gIH1cbiAgcyA9IHgucztcbiAgaWYgKHMgPCAwKSB7XG4gICAgaWYgKGUgPCB5LmQubGVuZ3RoIC0gMSlcbiAgICAgIHJldHVybiBuZXcgQ3RvcihOYU4pO1xuICAgIGlmICgoeS5kW2VdICYgMSkgPT0gMClcbiAgICAgIHMgPSAxO1xuICAgIGlmICh4LmUgPT0gMCAmJiB4LmRbMF0gPT0gMSAmJiB4LmQubGVuZ3RoID09IDEpIHtcbiAgICAgIHgucyA9IHM7XG4gICAgICByZXR1cm4geDtcbiAgICB9XG4gIH1cbiAgayA9IG1hdGhwb3coK3gsIHluKTtcbiAgZSA9IGsgPT0gMCB8fCAhaXNGaW5pdGUoaykgPyBtYXRoZmxvb3IoeW4gKiAoTWF0aC5sb2coXCIwLlwiICsgZGlnaXRzVG9TdHJpbmcoeC5kKSkgLyBNYXRoLkxOMTAgKyB4LmUgKyAxKSkgOiBuZXcgQ3RvcihrICsgXCJcIikuZTtcbiAgaWYgKGUgPiBDdG9yLm1heEUgKyAxIHx8IGUgPCBDdG9yLm1pbkUgLSAxKVxuICAgIHJldHVybiBuZXcgQ3RvcihlID4gMCA/IHMgLyAwIDogMCk7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIEN0b3Iucm91bmRpbmcgPSB4LnMgPSAxO1xuICBrID0gTWF0aC5taW4oMTIsIChlICsgXCJcIikubGVuZ3RoKTtcbiAgciA9IG5hdHVyYWxFeHBvbmVudGlhbCh5LnRpbWVzKG5hdHVyYWxMb2dhcml0aG0oeCwgcHIgKyBrKSksIHByKTtcbiAgaWYgKHIuZCkge1xuICAgIHIgPSBmaW5hbGlzZShyLCBwciArIDUsIDEpO1xuICAgIGlmIChjaGVja1JvdW5kaW5nRGlnaXRzKHIuZCwgcHIsIHJtKSkge1xuICAgICAgZSA9IHByICsgMTA7XG4gICAgICByID0gZmluYWxpc2UobmF0dXJhbEV4cG9uZW50aWFsKHkudGltZXMobmF0dXJhbExvZ2FyaXRobSh4LCBlICsgaykpLCBlKSwgZSArIDUsIDEpO1xuICAgICAgaWYgKCtkaWdpdHNUb1N0cmluZyhyLmQpLnNsaWNlKHByICsgMSwgcHIgKyAxNSkgKyAxID09IDFlMTQpIHtcbiAgICAgICAgciA9IGZpbmFsaXNlKHIsIHByICsgMSwgMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHIucyA9IHM7XG4gIGV4dGVybmFsID0gdHJ1ZTtcbiAgQ3Rvci5yb3VuZGluZyA9IHJtO1xuICByZXR1cm4gZmluYWxpc2UociwgcHIsIHJtKTtcbn07XG5QLnRvUHJlY2lzaW9uID0gZnVuY3Rpb24oc2QsIHJtKSB7XG4gIHZhciBzdHIsIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKHNkID09PSB2b2lkIDApIHtcbiAgICBzdHIgPSBmaW5pdGVUb1N0cmluZyh4LCB4LmUgPD0gQ3Rvci50b0V4cE5lZyB8fCB4LmUgPj0gQ3Rvci50b0V4cFBvcyk7XG4gIH0gZWxzZSB7XG4gICAgY2hlY2tJbnQzMihzZCwgMSwgTUFYX0RJR0lUUyk7XG4gICAgaWYgKHJtID09PSB2b2lkIDApXG4gICAgICBybSA9IEN0b3Iucm91bmRpbmc7XG4gICAgZWxzZVxuICAgICAgY2hlY2tJbnQzMihybSwgMCwgOCk7XG4gICAgeCA9IGZpbmFsaXNlKG5ldyBDdG9yKHgpLCBzZCwgcm0pO1xuICAgIHN0ciA9IGZpbml0ZVRvU3RyaW5nKHgsIHNkIDw9IHguZSB8fCB4LmUgPD0gQ3Rvci50b0V4cE5lZywgc2QpO1xuICB9XG4gIHJldHVybiB4LmlzTmVnKCkgJiYgIXguaXNaZXJvKCkgPyBcIi1cIiArIHN0ciA6IHN0cjtcbn07XG5QLnRvU2lnbmlmaWNhbnREaWdpdHMgPSBQLnRvU0QgPSBmdW5jdGlvbihzZCwgcm0pIHtcbiAgdmFyIHggPSB0aGlzLCBDdG9yID0geC5jb25zdHJ1Y3RvcjtcbiAgaWYgKHNkID09PSB2b2lkIDApIHtcbiAgICBzZCA9IEN0b3IucHJlY2lzaW9uO1xuICAgIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgfSBlbHNlIHtcbiAgICBjaGVja0ludDMyKHNkLCAxLCBNQVhfRElHSVRTKTtcbiAgICBpZiAocm0gPT09IHZvaWQgMClcbiAgICAgIHJtID0gQ3Rvci5yb3VuZGluZztcbiAgICBlbHNlXG4gICAgICBjaGVja0ludDMyKHJtLCAwLCA4KTtcbiAgfVxuICByZXR1cm4gZmluYWxpc2UobmV3IEN0b3IoeCksIHNkLCBybSk7XG59O1xuUC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yLCBzdHIgPSBmaW5pdGVUb1N0cmluZyh4LCB4LmUgPD0gQ3Rvci50b0V4cE5lZyB8fCB4LmUgPj0gQ3Rvci50b0V4cFBvcyk7XG4gIHJldHVybiB4LmlzTmVnKCkgJiYgIXguaXNaZXJvKCkgPyBcIi1cIiArIHN0ciA6IHN0cjtcbn07XG5QLnRydW5jYXRlZCA9IFAudHJ1bmMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZpbmFsaXNlKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpLCB0aGlzLmUgKyAxLCAxKTtcbn07XG5QLnZhbHVlT2YgPSBQLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IHRoaXMsIEN0b3IgPSB4LmNvbnN0cnVjdG9yLCBzdHIgPSBmaW5pdGVUb1N0cmluZyh4LCB4LmUgPD0gQ3Rvci50b0V4cE5lZyB8fCB4LmUgPj0gQ3Rvci50b0V4cFBvcyk7XG4gIHJldHVybiB4LmlzTmVnKCkgPyBcIi1cIiArIHN0ciA6IHN0cjtcbn07XG5mdW5jdGlvbiBkaWdpdHNUb1N0cmluZyhkKSB7XG4gIHZhciBpLCBrLCB3cywgaW5kZXhPZkxhc3RXb3JkID0gZC5sZW5ndGggLSAxLCBzdHIgPSBcIlwiLCB3ID0gZFswXTtcbiAgaWYgKGluZGV4T2ZMYXN0V29yZCA+IDApIHtcbiAgICBzdHIgKz0gdztcbiAgICBmb3IgKGkgPSAxOyBpIDwgaW5kZXhPZkxhc3RXb3JkOyBpKyspIHtcbiAgICAgIHdzID0gZFtpXSArIFwiXCI7XG4gICAgICBrID0gTE9HX0JBU0UgLSB3cy5sZW5ndGg7XG4gICAgICBpZiAoaylcbiAgICAgICAgc3RyICs9IGdldFplcm9TdHJpbmcoayk7XG4gICAgICBzdHIgKz0gd3M7XG4gICAgfVxuICAgIHcgPSBkW2ldO1xuICAgIHdzID0gdyArIFwiXCI7XG4gICAgayA9IExPR19CQVNFIC0gd3MubGVuZ3RoO1xuICAgIGlmIChrKVxuICAgICAgc3RyICs9IGdldFplcm9TdHJpbmcoayk7XG4gIH0gZWxzZSBpZiAodyA9PT0gMCkge1xuICAgIHJldHVybiBcIjBcIjtcbiAgfVxuICBmb3IgKDsgdyAlIDEwID09PSAwOyApXG4gICAgdyAvPSAxMDtcbiAgcmV0dXJuIHN0ciArIHc7XG59XG5mdW5jdGlvbiBjaGVja0ludDMyKGksIG1pbjIsIG1heDIpIHtcbiAgaWYgKGkgIT09IH5+aSB8fCBpIDwgbWluMiB8fCBpID4gbWF4Mikge1xuICAgIHRocm93IEVycm9yKGludmFsaWRBcmd1bWVudCArIGkpO1xuICB9XG59XG5mdW5jdGlvbiBjaGVja1JvdW5kaW5nRGlnaXRzKGQsIGksIHJtLCByZXBlYXRpbmcpIHtcbiAgdmFyIGRpLCBrLCByLCByZDtcbiAgZm9yIChrID0gZFswXTsgayA+PSAxMDsgayAvPSAxMClcbiAgICAtLWk7XG4gIGlmICgtLWkgPCAwKSB7XG4gICAgaSArPSBMT0dfQkFTRTtcbiAgICBkaSA9IDA7XG4gIH0gZWxzZSB7XG4gICAgZGkgPSBNYXRoLmNlaWwoKGkgKyAxKSAvIExPR19CQVNFKTtcbiAgICBpICU9IExPR19CQVNFO1xuICB9XG4gIGsgPSBtYXRocG93KDEwLCBMT0dfQkFTRSAtIGkpO1xuICByZCA9IGRbZGldICUgayB8IDA7XG4gIGlmIChyZXBlYXRpbmcgPT0gbnVsbCkge1xuICAgIGlmIChpIDwgMykge1xuICAgICAgaWYgKGkgPT0gMClcbiAgICAgICAgcmQgPSByZCAvIDEwMCB8IDA7XG4gICAgICBlbHNlIGlmIChpID09IDEpXG4gICAgICAgIHJkID0gcmQgLyAxMCB8IDA7XG4gICAgICByID0gcm0gPCA0ICYmIHJkID09IDk5OTk5IHx8IHJtID4gMyAmJiByZCA9PSA0OTk5OSB8fCByZCA9PSA1ZTQgfHwgcmQgPT0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgciA9IChybSA8IDQgJiYgcmQgKyAxID09IGsgfHwgcm0gPiAzICYmIHJkICsgMSA9PSBrIC8gMikgJiYgKGRbZGkgKyAxXSAvIGsgLyAxMDAgfCAwKSA9PSBtYXRocG93KDEwLCBpIC0gMikgLSAxIHx8IChyZCA9PSBrIC8gMiB8fCByZCA9PSAwKSAmJiAoZFtkaSArIDFdIC8gayAvIDEwMCB8IDApID09IDA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpIDwgNCkge1xuICAgICAgaWYgKGkgPT0gMClcbiAgICAgICAgcmQgPSByZCAvIDFlMyB8IDA7XG4gICAgICBlbHNlIGlmIChpID09IDEpXG4gICAgICAgIHJkID0gcmQgLyAxMDAgfCAwO1xuICAgICAgZWxzZSBpZiAoaSA9PSAyKVxuICAgICAgICByZCA9IHJkIC8gMTAgfCAwO1xuICAgICAgciA9IChyZXBlYXRpbmcgfHwgcm0gPCA0KSAmJiByZCA9PSA5OTk5IHx8ICFyZXBlYXRpbmcgJiYgcm0gPiAzICYmIHJkID09IDQ5OTk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIgPSAoKHJlcGVhdGluZyB8fCBybSA8IDQpICYmIHJkICsgMSA9PSBrIHx8ICFyZXBlYXRpbmcgJiYgcm0gPiAzICYmIHJkICsgMSA9PSBrIC8gMikgJiYgKGRbZGkgKyAxXSAvIGsgLyAxZTMgfCAwKSA9PSBtYXRocG93KDEwLCBpIC0gMykgLSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRCYXNlKHN0ciwgYmFzZUluLCBiYXNlT3V0KSB7XG4gIHZhciBqLCBhcnIgPSBbMF0sIGFyckwsIGkgPSAwLCBzdHJMID0gc3RyLmxlbmd0aDtcbiAgZm9yICg7IGkgPCBzdHJMOyApIHtcbiAgICBmb3IgKGFyckwgPSBhcnIubGVuZ3RoOyBhcnJMLS07IClcbiAgICAgIGFyclthcnJMXSAqPSBiYXNlSW47XG4gICAgYXJyWzBdICs9IE5VTUVSQUxTLmluZGV4T2Yoc3RyLmNoYXJBdChpKyspKTtcbiAgICBmb3IgKGogPSAwOyBqIDwgYXJyLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoYXJyW2pdID4gYmFzZU91dCAtIDEpIHtcbiAgICAgICAgaWYgKGFycltqICsgMV0gPT09IHZvaWQgMClcbiAgICAgICAgICBhcnJbaiArIDFdID0gMDtcbiAgICAgICAgYXJyW2ogKyAxXSArPSBhcnJbal0gLyBiYXNlT3V0IHwgMDtcbiAgICAgICAgYXJyW2pdICU9IGJhc2VPdXQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnIucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gY29zaW5lKEN0b3IsIHgpIHtcbiAgdmFyIGssIGxlbiwgeTtcbiAgaWYgKHguaXNaZXJvKCkpXG4gICAgcmV0dXJuIHg7XG4gIGxlbiA9IHguZC5sZW5ndGg7XG4gIGlmIChsZW4gPCAzMikge1xuICAgIGsgPSBNYXRoLmNlaWwobGVuIC8gMyk7XG4gICAgeSA9ICgxIC8gdGlueVBvdyg0LCBrKSkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICBrID0gMTY7XG4gICAgeSA9IFwiMi4zMjgzMDY0MzY1Mzg2OTYyODkwNjI1ZS0xMFwiO1xuICB9XG4gIEN0b3IucHJlY2lzaW9uICs9IGs7XG4gIHggPSB0YXlsb3JTZXJpZXMoQ3RvciwgMSwgeC50aW1lcyh5KSwgbmV3IEN0b3IoMSkpO1xuICBmb3IgKHZhciBpID0gazsgaS0tOyApIHtcbiAgICB2YXIgY29zMnggPSB4LnRpbWVzKHgpO1xuICAgIHggPSBjb3MyeC50aW1lcyhjb3MyeCkubWludXMoY29zMngpLnRpbWVzKDgpLnBsdXMoMSk7XG4gIH1cbiAgQ3Rvci5wcmVjaXNpb24gLT0gaztcbiAgcmV0dXJuIHg7XG59XG52YXIgZGl2aWRlID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG11bHRpcGx5SW50ZWdlcih4LCBrLCBiYXNlKSB7XG4gICAgdmFyIHRlbXAsIGNhcnJ5ID0gMCwgaSA9IHgubGVuZ3RoO1xuICAgIGZvciAoeCA9IHguc2xpY2UoKTsgaS0tOyApIHtcbiAgICAgIHRlbXAgPSB4W2ldICogayArIGNhcnJ5O1xuICAgICAgeFtpXSA9IHRlbXAgJSBiYXNlIHwgMDtcbiAgICAgIGNhcnJ5ID0gdGVtcCAvIGJhc2UgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkpXG4gICAgICB4LnVuc2hpZnQoY2FycnkpO1xuICAgIHJldHVybiB4O1xuICB9XG4gIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYiwgYUwsIGJMKSB7XG4gICAgdmFyIGksIHI7XG4gICAgaWYgKGFMICE9IGJMKSB7XG4gICAgICByID0gYUwgPiBiTCA/IDEgOiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gciA9IDA7IGkgPCBhTDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldICE9IGJbaV0pIHtcbiAgICAgICAgICByID0gYVtpXSA+IGJbaV0gPyAxIDogLTE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgZnVuY3Rpb24gc3VidHJhY3QyKGEsIGIsIGFMLCBiYXNlKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBhTC0tOyApIHtcbiAgICAgIGFbYUxdIC09IGk7XG4gICAgICBpID0gYVthTF0gPCBiW2FMXSA/IDEgOiAwO1xuICAgICAgYVthTF0gPSBpICogYmFzZSArIGFbYUxdIC0gYlthTF07XG4gICAgfVxuICAgIGZvciAoOyAhYVswXSAmJiBhLmxlbmd0aCA+IDE7IClcbiAgICAgIGEuc2hpZnQoKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oeCwgeSwgcHIsIHJtLCBkcCwgYmFzZSkge1xuICAgIHZhciBjbXAsIGUsIGksIGssIGxvZ0Jhc2UsIG1vcmUsIHByb2QsIHByb2RMLCBxLCBxZCwgcmVtLCByZW1MLCByZW0wLCBzZCwgdCwgeGksIHhMLCB5ZDAsIHlMLCB5eiwgQ3RvciA9IHguY29uc3RydWN0b3IsIHNpZ24yID0geC5zID09IHkucyA/IDEgOiAtMSwgeGQgPSB4LmQsIHlkID0geS5kO1xuICAgIGlmICgheGQgfHwgIXhkWzBdIHx8ICF5ZCB8fCAheWRbMF0pIHtcbiAgICAgIHJldHVybiBuZXcgQ3RvcihcbiAgICAgICAgLy8gUmV0dXJuIE5hTiBpZiBlaXRoZXIgTmFOLCBvciBib3RoIEluZmluaXR5IG9yIDAuXG4gICAgICAgICF4LnMgfHwgIXkucyB8fCAoeGQgPyB5ZCAmJiB4ZFswXSA9PSB5ZFswXSA6ICF5ZCkgPyBOYU4gOiAoXG4gICAgICAgICAgLy8gUmV0dXJuIFx1MDBCMTAgaWYgeCBpcyAwIG9yIHkgaXMgXHUwMEIxSW5maW5pdHksIG9yIHJldHVybiBcdTAwQjFJbmZpbml0eSBhcyB5IGlzIDAuXG4gICAgICAgICAgeGQgJiYgeGRbMF0gPT0gMCB8fCAheWQgPyBzaWduMiAqIDAgOiBzaWduMiAvIDBcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGJhc2UpIHtcbiAgICAgIGxvZ0Jhc2UgPSAxO1xuICAgICAgZSA9IHguZSAtIHkuZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9IEJBU0U7XG4gICAgICBsb2dCYXNlID0gTE9HX0JBU0U7XG4gICAgICBlID0gbWF0aGZsb29yKHguZSAvIGxvZ0Jhc2UpIC0gbWF0aGZsb29yKHkuZSAvIGxvZ0Jhc2UpO1xuICAgIH1cbiAgICB5TCA9IHlkLmxlbmd0aDtcbiAgICB4TCA9IHhkLmxlbmd0aDtcbiAgICBxID0gbmV3IEN0b3Ioc2lnbjIpO1xuICAgIHFkID0gcS5kID0gW107XG4gICAgZm9yIChpID0gMDsgeWRbaV0gPT0gKHhkW2ldIHx8IDApOyBpKyspXG4gICAgICA7XG4gICAgaWYgKHlkW2ldID4gKHhkW2ldIHx8IDApKVxuICAgICAgZS0tO1xuICAgIGlmIChwciA9PSBudWxsKSB7XG4gICAgICBzZCA9IHByID0gQ3Rvci5wcmVjaXNpb247XG4gICAgICBybSA9IEN0b3Iucm91bmRpbmc7XG4gICAgfSBlbHNlIGlmIChkcCkge1xuICAgICAgc2QgPSBwciArICh4LmUgLSB5LmUpICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2QgPSBwcjtcbiAgICB9XG4gICAgaWYgKHNkIDwgMCkge1xuICAgICAgcWQucHVzaCgxKTtcbiAgICAgIG1vcmUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZCA9IHNkIC8gbG9nQmFzZSArIDIgfCAwO1xuICAgICAgaSA9IDA7XG4gICAgICBpZiAoeUwgPT0gMSkge1xuICAgICAgICBrID0gMDtcbiAgICAgICAgeWQgPSB5ZFswXTtcbiAgICAgICAgc2QrKztcbiAgICAgICAgZm9yICg7IChpIDwgeEwgfHwgaykgJiYgc2QtLTsgaSsrKSB7XG4gICAgICAgICAgdCA9IGsgKiBiYXNlICsgKHhkW2ldIHx8IDApO1xuICAgICAgICAgIHFkW2ldID0gdCAvIHlkIHwgMDtcbiAgICAgICAgICBrID0gdCAlIHlkIHwgMDtcbiAgICAgICAgfVxuICAgICAgICBtb3JlID0gayB8fCBpIDwgeEw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrID0gYmFzZSAvICh5ZFswXSArIDEpIHwgMDtcbiAgICAgICAgaWYgKGsgPiAxKSB7XG4gICAgICAgICAgeWQgPSBtdWx0aXBseUludGVnZXIoeWQsIGssIGJhc2UpO1xuICAgICAgICAgIHhkID0gbXVsdGlwbHlJbnRlZ2VyKHhkLCBrLCBiYXNlKTtcbiAgICAgICAgICB5TCA9IHlkLmxlbmd0aDtcbiAgICAgICAgICB4TCA9IHhkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICB4aSA9IHlMO1xuICAgICAgICByZW0gPSB4ZC5zbGljZSgwLCB5TCk7XG4gICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xuICAgICAgICBmb3IgKDsgcmVtTCA8IHlMOyApXG4gICAgICAgICAgcmVtW3JlbUwrK10gPSAwO1xuICAgICAgICB5eiA9IHlkLnNsaWNlKCk7XG4gICAgICAgIHl6LnVuc2hpZnQoMCk7XG4gICAgICAgIHlkMCA9IHlkWzBdO1xuICAgICAgICBpZiAoeWRbMV0gPj0gYmFzZSAvIDIpXG4gICAgICAgICAgKyt5ZDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBrID0gMDtcbiAgICAgICAgICBjbXAgPSBjb21wYXJlKHlkLCByZW0sIHlMLCByZW1MKTtcbiAgICAgICAgICBpZiAoY21wIDwgMCkge1xuICAgICAgICAgICAgcmVtMCA9IHJlbVswXTtcbiAgICAgICAgICAgIGlmICh5TCAhPSByZW1MKVxuICAgICAgICAgICAgICByZW0wID0gcmVtMCAqIGJhc2UgKyAocmVtWzFdIHx8IDApO1xuICAgICAgICAgICAgayA9IHJlbTAgLyB5ZDAgfCAwO1xuICAgICAgICAgICAgaWYgKGsgPiAxKSB7XG4gICAgICAgICAgICAgIGlmIChrID49IGJhc2UpXG4gICAgICAgICAgICAgICAgayA9IGJhc2UgLSAxO1xuICAgICAgICAgICAgICBwcm9kID0gbXVsdGlwbHlJbnRlZ2VyKHlkLCBrLCBiYXNlKTtcbiAgICAgICAgICAgICAgcHJvZEwgPSBwcm9kLmxlbmd0aDtcbiAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XG4gICAgICAgICAgICAgIGNtcCA9IGNvbXBhcmUocHJvZCwgcmVtLCBwcm9kTCwgcmVtTCk7XG4gICAgICAgICAgICAgIGlmIChjbXAgPT0gMSkge1xuICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICBzdWJ0cmFjdDIocHJvZCwgeUwgPCBwcm9kTCA/IHl6IDogeWQsIHByb2RMLCBiYXNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGsgPT0gMClcbiAgICAgICAgICAgICAgICBjbXAgPSBrID0gMTtcbiAgICAgICAgICAgICAgcHJvZCA9IHlkLnNsaWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHByb2RMIDwgcmVtTClcbiAgICAgICAgICAgICAgcHJvZC51bnNoaWZ0KDApO1xuICAgICAgICAgICAgc3VidHJhY3QyKHJlbSwgcHJvZCwgcmVtTCwgYmFzZSk7XG4gICAgICAgICAgICBpZiAoY21wID09IC0xKSB7XG4gICAgICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xuICAgICAgICAgICAgICBjbXAgPSBjb21wYXJlKHlkLCByZW0sIHlMLCByZW1MKTtcbiAgICAgICAgICAgICAgaWYgKGNtcCA8IDEpIHtcbiAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgc3VidHJhY3QyKHJlbSwgeUwgPCByZW1MID8geXogOiB5ZCwgcmVtTCwgYmFzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY21wID09PSAwKSB7XG4gICAgICAgICAgICBrKys7XG4gICAgICAgICAgICByZW0gPSBbMF07XG4gICAgICAgICAgfVxuICAgICAgICAgIHFkW2krK10gPSBrO1xuICAgICAgICAgIGlmIChjbXAgJiYgcmVtWzBdKSB7XG4gICAgICAgICAgICByZW1bcmVtTCsrXSA9IHhkW3hpXSB8fCAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW0gPSBbeGRbeGldXTtcbiAgICAgICAgICAgIHJlbUwgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKHhpKysgPCB4TCB8fCByZW1bMF0gIT09IHZvaWQgMCkgJiYgc2QtLSk7XG4gICAgICAgIG1vcmUgPSByZW1bMF0gIT09IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmICghcWRbMF0pXG4gICAgICAgIHFkLnNoaWZ0KCk7XG4gICAgfVxuICAgIGlmIChsb2dCYXNlID09IDEpIHtcbiAgICAgIHEuZSA9IGU7XG4gICAgICBpbmV4YWN0ID0gbW9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMSwgayA9IHFkWzBdOyBrID49IDEwOyBrIC89IDEwKVxuICAgICAgICBpKys7XG4gICAgICBxLmUgPSBpICsgZSAqIGxvZ0Jhc2UgLSAxO1xuICAgICAgZmluYWxpc2UocSwgZHAgPyBwciArIHEuZSArIDEgOiBwciwgcm0sIG1vcmUpO1xuICAgIH1cbiAgICByZXR1cm4gcTtcbiAgfTtcbn0oKTtcbmZ1bmN0aW9uIGZpbmFsaXNlKHgsIHNkLCBybSwgaXNUcnVuY2F0ZWQpIHtcbiAgdmFyIGRpZ2l0cywgaSwgaiwgaywgcmQsIHJvdW5kVXAsIHcsIHhkLCB4ZGksIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBvdXQ6XG4gICAgaWYgKHNkICE9IG51bGwpIHtcbiAgICAgIHhkID0geC5kO1xuICAgICAgaWYgKCF4ZClcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICBmb3IgKGRpZ2l0cyA9IDEsIGsgPSB4ZFswXTsgayA+PSAxMDsgayAvPSAxMClcbiAgICAgICAgZGlnaXRzKys7XG4gICAgICBpID0gc2QgLSBkaWdpdHM7XG4gICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgaSArPSBMT0dfQkFTRTtcbiAgICAgICAgaiA9IHNkO1xuICAgICAgICB3ID0geGRbeGRpID0gMF07XG4gICAgICAgIHJkID0gdyAvIG1hdGhwb3coMTAsIGRpZ2l0cyAtIGogLSAxKSAlIDEwIHwgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhkaSA9IE1hdGguY2VpbCgoaSArIDEpIC8gTE9HX0JBU0UpO1xuICAgICAgICBrID0geGQubGVuZ3RoO1xuICAgICAgICBpZiAoeGRpID49IGspIHtcbiAgICAgICAgICBpZiAoaXNUcnVuY2F0ZWQpIHtcbiAgICAgICAgICAgIGZvciAoOyBrKysgPD0geGRpOyApXG4gICAgICAgICAgICAgIHhkLnB1c2goMCk7XG4gICAgICAgICAgICB3ID0gcmQgPSAwO1xuICAgICAgICAgICAgZGlnaXRzID0gMTtcbiAgICAgICAgICAgIGkgJT0gTE9HX0JBU0U7XG4gICAgICAgICAgICBqID0gaSAtIExPR19CQVNFICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWsgb3V0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ID0gayA9IHhkW3hkaV07XG4gICAgICAgICAgZm9yIChkaWdpdHMgPSAxOyBrID49IDEwOyBrIC89IDEwKVxuICAgICAgICAgICAgZGlnaXRzKys7XG4gICAgICAgICAgaSAlPSBMT0dfQkFTRTtcbiAgICAgICAgICBqID0gaSAtIExPR19CQVNFICsgZGlnaXRzO1xuICAgICAgICAgIHJkID0gaiA8IDAgPyAwIDogdyAvIG1hdGhwb3coMTAsIGRpZ2l0cyAtIGogLSAxKSAlIDEwIHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXNUcnVuY2F0ZWQgPSBpc1RydW5jYXRlZCB8fCBzZCA8IDAgfHwgeGRbeGRpICsgMV0gIT09IHZvaWQgMCB8fCAoaiA8IDAgPyB3IDogdyAlIG1hdGhwb3coMTAsIGRpZ2l0cyAtIGogLSAxKSk7XG4gICAgICByb3VuZFVwID0gcm0gPCA0ID8gKHJkIHx8IGlzVHJ1bmNhdGVkKSAmJiAocm0gPT0gMCB8fCBybSA9PSAoeC5zIDwgMCA/IDMgOiAyKSkgOiByZCA+IDUgfHwgcmQgPT0gNSAmJiAocm0gPT0gNCB8fCBpc1RydW5jYXRlZCB8fCBybSA9PSA2ICYmIC8vIENoZWNrIHdoZXRoZXIgdGhlIGRpZ2l0IHRvIHRoZSBsZWZ0IG9mIHRoZSByb3VuZGluZyBkaWdpdCBpcyBvZGQuXG4gICAgICAoaSA+IDAgPyBqID4gMCA/IHcgLyBtYXRocG93KDEwLCBkaWdpdHMgLSBqKSA6IDAgOiB4ZFt4ZGkgLSAxXSkgJSAxMCAmIDEgfHwgcm0gPT0gKHgucyA8IDAgPyA4IDogNykpO1xuICAgICAgaWYgKHNkIDwgMSB8fCAheGRbMF0pIHtcbiAgICAgICAgeGQubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHJvdW5kVXApIHtcbiAgICAgICAgICBzZCAtPSB4LmUgKyAxO1xuICAgICAgICAgIHhkWzBdID0gbWF0aHBvdygxMCwgKExPR19CQVNFIC0gc2QgJSBMT0dfQkFTRSkgJSBMT0dfQkFTRSk7XG4gICAgICAgICAgeC5lID0gLXNkIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeGRbMF0gPSB4LmUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuICAgICAgaWYgKGkgPT0gMCkge1xuICAgICAgICB4ZC5sZW5ndGggPSB4ZGk7XG4gICAgICAgIGsgPSAxO1xuICAgICAgICB4ZGktLTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhkLmxlbmd0aCA9IHhkaSArIDE7XG4gICAgICAgIGsgPSBtYXRocG93KDEwLCBMT0dfQkFTRSAtIGkpO1xuICAgICAgICB4ZFt4ZGldID0gaiA+IDAgPyAodyAvIG1hdGhwb3coMTAsIGRpZ2l0cyAtIGopICUgbWF0aHBvdygxMCwgaikgfCAwKSAqIGsgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKHJvdW5kVXApIHtcbiAgICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgICAgaWYgKHhkaSA9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxLCBqID0geGRbMF07IGogPj0gMTA7IGogLz0gMTApXG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGogPSB4ZFswXSArPSBrO1xuICAgICAgICAgICAgZm9yIChrID0gMTsgaiA+PSAxMDsgaiAvPSAxMClcbiAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgaWYgKGkgIT0gaykge1xuICAgICAgICAgICAgICB4LmUrKztcbiAgICAgICAgICAgICAgaWYgKHhkWzBdID09IEJBU0UpXG4gICAgICAgICAgICAgICAgeGRbMF0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhkW3hkaV0gKz0gaztcbiAgICAgICAgICAgIGlmICh4ZFt4ZGldICE9IEJBU0UpXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgeGRbeGRpLS1dID0gMDtcbiAgICAgICAgICAgIGsgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChpID0geGQubGVuZ3RoOyB4ZFstLWldID09PSAwOyApXG4gICAgICAgIHhkLnBvcCgpO1xuICAgIH1cbiAgaWYgKGV4dGVybmFsKSB7XG4gICAgaWYgKHguZSA+IEN0b3IubWF4RSkge1xuICAgICAgeC5kID0gbnVsbDtcbiAgICAgIHguZSA9IE5hTjtcbiAgICB9IGVsc2UgaWYgKHguZSA8IEN0b3IubWluRSkge1xuICAgICAgeC5lID0gMDtcbiAgICAgIHguZCA9IFswXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiBmaW5pdGVUb1N0cmluZyh4LCBpc0V4cCwgc2QpIHtcbiAgaWYgKCF4LmlzRmluaXRlKCkpXG4gICAgcmV0dXJuIG5vbkZpbml0ZVRvU3RyaW5nKHgpO1xuICB2YXIgaywgZSA9IHguZSwgc3RyID0gZGlnaXRzVG9TdHJpbmcoeC5kKSwgbGVuID0gc3RyLmxlbmd0aDtcbiAgaWYgKGlzRXhwKSB7XG4gICAgaWYgKHNkICYmIChrID0gc2QgLSBsZW4pID4gMCkge1xuICAgICAgc3RyID0gc3RyLmNoYXJBdCgwKSArIFwiLlwiICsgc3RyLnNsaWNlKDEpICsgZ2V0WmVyb1N0cmluZyhrKTtcbiAgICB9IGVsc2UgaWYgKGxlbiA+IDEpIHtcbiAgICAgIHN0ciA9IHN0ci5jaGFyQXQoMCkgKyBcIi5cIiArIHN0ci5zbGljZSgxKTtcbiAgICB9XG4gICAgc3RyID0gc3RyICsgKHguZSA8IDAgPyBcImVcIiA6IFwiZStcIikgKyB4LmU7XG4gIH0gZWxzZSBpZiAoZSA8IDApIHtcbiAgICBzdHIgPSBcIjAuXCIgKyBnZXRaZXJvU3RyaW5nKC1lIC0gMSkgKyBzdHI7XG4gICAgaWYgKHNkICYmIChrID0gc2QgLSBsZW4pID4gMClcbiAgICAgIHN0ciArPSBnZXRaZXJvU3RyaW5nKGspO1xuICB9IGVsc2UgaWYgKGUgPj0gbGVuKSB7XG4gICAgc3RyICs9IGdldFplcm9TdHJpbmcoZSArIDEgLSBsZW4pO1xuICAgIGlmIChzZCAmJiAoayA9IHNkIC0gZSAtIDEpID4gMClcbiAgICAgIHN0ciA9IHN0ciArIFwiLlwiICsgZ2V0WmVyb1N0cmluZyhrKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKGsgPSBlICsgMSkgPCBsZW4pXG4gICAgICBzdHIgPSBzdHIuc2xpY2UoMCwgaykgKyBcIi5cIiArIHN0ci5zbGljZShrKTtcbiAgICBpZiAoc2QgJiYgKGsgPSBzZCAtIGxlbikgPiAwKSB7XG4gICAgICBpZiAoZSArIDEgPT09IGxlbilcbiAgICAgICAgc3RyICs9IFwiLlwiO1xuICAgICAgc3RyICs9IGdldFplcm9TdHJpbmcoayk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBnZXRCYXNlMTBFeHBvbmVudChkaWdpdHMsIGUpIHtcbiAgdmFyIHcgPSBkaWdpdHNbMF07XG4gIGZvciAoZSAqPSBMT0dfQkFTRTsgdyA+PSAxMDsgdyAvPSAxMClcbiAgICBlKys7XG4gIHJldHVybiBlO1xufVxuZnVuY3Rpb24gZ2V0TG4xMChDdG9yLCBzZCwgcHIpIHtcbiAgaWYgKHNkID4gTE4xMF9QUkVDSVNJT04pIHtcbiAgICBleHRlcm5hbCA9IHRydWU7XG4gICAgaWYgKHByKVxuICAgICAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgICB0aHJvdyBFcnJvcihwcmVjaXNpb25MaW1pdEV4Y2VlZGVkKTtcbiAgfVxuICByZXR1cm4gZmluYWxpc2UobmV3IEN0b3IoTE4xMCksIHNkLCAxLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGdldFBpKEN0b3IsIHNkLCBybSkge1xuICBpZiAoc2QgPiBQSV9QUkVDSVNJT04pXG4gICAgdGhyb3cgRXJyb3IocHJlY2lzaW9uTGltaXRFeGNlZWRlZCk7XG4gIHJldHVybiBmaW5hbGlzZShuZXcgQ3RvcihQSSksIHNkLCBybSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBnZXRQcmVjaXNpb24oZGlnaXRzKSB7XG4gIHZhciB3ID0gZGlnaXRzLmxlbmd0aCAtIDEsIGxlbiA9IHcgKiBMT0dfQkFTRSArIDE7XG4gIHcgPSBkaWdpdHNbd107XG4gIGlmICh3KSB7XG4gICAgZm9yICg7IHcgJSAxMCA9PSAwOyB3IC89IDEwKVxuICAgICAgbGVuLS07XG4gICAgZm9yICh3ID0gZGlnaXRzWzBdOyB3ID49IDEwOyB3IC89IDEwKVxuICAgICAgbGVuKys7XG4gIH1cbiAgcmV0dXJuIGxlbjtcbn1cbmZ1bmN0aW9uIGdldFplcm9TdHJpbmcoaykge1xuICB2YXIgenMgPSBcIlwiO1xuICBmb3IgKDsgay0tOyApXG4gICAgenMgKz0gXCIwXCI7XG4gIHJldHVybiB6cztcbn1cbmZ1bmN0aW9uIGludFBvdyhDdG9yLCB4LCBuLCBwcikge1xuICB2YXIgaXNUcnVuY2F0ZWQsIHIgPSBuZXcgQ3RvcigxKSwgayA9IE1hdGguY2VpbChwciAvIExPR19CQVNFICsgNCk7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIGZvciAoOyA7ICkge1xuICAgIGlmIChuICUgMikge1xuICAgICAgciA9IHIudGltZXMoeCk7XG4gICAgICBpZiAodHJ1bmNhdGUoci5kLCBrKSlcbiAgICAgICAgaXNUcnVuY2F0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBuID0gbWF0aGZsb29yKG4gLyAyKTtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgbiA9IHIuZC5sZW5ndGggLSAxO1xuICAgICAgaWYgKGlzVHJ1bmNhdGVkICYmIHIuZFtuXSA9PT0gMClcbiAgICAgICAgKytyLmRbbl07XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgeCA9IHgudGltZXMoeCk7XG4gICAgdHJ1bmNhdGUoeC5kLCBrKTtcbiAgfVxuICBleHRlcm5hbCA9IHRydWU7XG4gIHJldHVybiByO1xufVxuZnVuY3Rpb24gaXNPZGQobikge1xuICByZXR1cm4gbi5kW24uZC5sZW5ndGggLSAxXSAmIDE7XG59XG5mdW5jdGlvbiBtYXhPck1pbihDdG9yLCBhcmdzLCBsdGd0KSB7XG4gIHZhciB5LCB4ID0gbmV3IEN0b3IoYXJnc1swXSksIGkgPSAwO1xuICBmb3IgKDsgKytpIDwgYXJncy5sZW5ndGg7ICkge1xuICAgIHkgPSBuZXcgQ3RvcihhcmdzW2ldKTtcbiAgICBpZiAoIXkucykge1xuICAgICAgeCA9IHk7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKHhbbHRndF0oeSkpIHtcbiAgICAgIHggPSB5O1xuICAgIH1cbiAgfVxuICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIG5hdHVyYWxFeHBvbmVudGlhbCh4LCBzZCkge1xuICB2YXIgZGVub21pbmF0b3IsIGd1YXJkLCBqLCBwb3czLCBzdW0yLCB0LCB3cHIsIHJlcCA9IDAsIGkgPSAwLCBrID0gMCwgQ3RvciA9IHguY29uc3RydWN0b3IsIHJtID0gQ3Rvci5yb3VuZGluZywgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgaWYgKCF4LmQgfHwgIXguZFswXSB8fCB4LmUgPiAxNykge1xuICAgIHJldHVybiBuZXcgQ3Rvcih4LmQgPyAheC5kWzBdID8gMSA6IHgucyA8IDAgPyAwIDogMSAvIDAgOiB4LnMgPyB4LnMgPCAwID8gMCA6IHggOiAwIC8gMCk7XG4gIH1cbiAgaWYgKHNkID09IG51bGwpIHtcbiAgICBleHRlcm5hbCA9IGZhbHNlO1xuICAgIHdwciA9IHByO1xuICB9IGVsc2Uge1xuICAgIHdwciA9IHNkO1xuICB9XG4gIHQgPSBuZXcgQ3RvcigwLjAzMTI1KTtcbiAgd2hpbGUgKHguZSA+IC0yKSB7XG4gICAgeCA9IHgudGltZXModCk7XG4gICAgayArPSA1O1xuICB9XG4gIGd1YXJkID0gTWF0aC5sb2cobWF0aHBvdygyLCBrKSkgLyBNYXRoLkxOMTAgKiAyICsgNSB8IDA7XG4gIHdwciArPSBndWFyZDtcbiAgZGVub21pbmF0b3IgPSBwb3czID0gc3VtMiA9IG5ldyBDdG9yKDEpO1xuICBDdG9yLnByZWNpc2lvbiA9IHdwcjtcbiAgZm9yICg7IDsgKSB7XG4gICAgcG93MyA9IGZpbmFsaXNlKHBvdzMudGltZXMoeCksIHdwciwgMSk7XG4gICAgZGVub21pbmF0b3IgPSBkZW5vbWluYXRvci50aW1lcygrK2kpO1xuICAgIHQgPSBzdW0yLnBsdXMoZGl2aWRlKHBvdzMsIGRlbm9taW5hdG9yLCB3cHIsIDEpKTtcbiAgICBpZiAoZGlnaXRzVG9TdHJpbmcodC5kKS5zbGljZSgwLCB3cHIpID09PSBkaWdpdHNUb1N0cmluZyhzdW0yLmQpLnNsaWNlKDAsIHdwcikpIHtcbiAgICAgIGogPSBrO1xuICAgICAgd2hpbGUgKGotLSlcbiAgICAgICAgc3VtMiA9IGZpbmFsaXNlKHN1bTIudGltZXMoc3VtMiksIHdwciwgMSk7XG4gICAgICBpZiAoc2QgPT0gbnVsbCkge1xuICAgICAgICBpZiAocmVwIDwgMyAmJiBjaGVja1JvdW5kaW5nRGlnaXRzKHN1bTIuZCwgd3ByIC0gZ3VhcmQsIHJtLCByZXApKSB7XG4gICAgICAgICAgQ3Rvci5wcmVjaXNpb24gPSB3cHIgKz0gMTA7XG4gICAgICAgICAgZGVub21pbmF0b3IgPSBwb3czID0gdCA9IG5ldyBDdG9yKDEpO1xuICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgIHJlcCsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmaW5hbGlzZShzdW0yLCBDdG9yLnByZWNpc2lvbiA9IHByLCBybSwgZXh0ZXJuYWwgPSB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQ3Rvci5wcmVjaXNpb24gPSBwcjtcbiAgICAgICAgcmV0dXJuIHN1bTI7XG4gICAgICB9XG4gICAgfVxuICAgIHN1bTIgPSB0O1xuICB9XG59XG5mdW5jdGlvbiBuYXR1cmFsTG9nYXJpdGhtKHksIHNkKSB7XG4gIHZhciBjLCBjMCwgZGVub21pbmF0b3IsIGUsIG51bWVyYXRvciwgcmVwLCBzdW0yLCB0LCB3cHIsIHgxLCB4MiwgbiA9IDEsIGd1YXJkID0gMTAsIHggPSB5LCB4ZCA9IHguZCwgQ3RvciA9IHguY29uc3RydWN0b3IsIHJtID0gQ3Rvci5yb3VuZGluZywgcHIgPSBDdG9yLnByZWNpc2lvbjtcbiAgaWYgKHgucyA8IDAgfHwgIXhkIHx8ICF4ZFswXSB8fCAheC5lICYmIHhkWzBdID09IDEgJiYgeGQubGVuZ3RoID09IDEpIHtcbiAgICByZXR1cm4gbmV3IEN0b3IoeGQgJiYgIXhkWzBdID8gLTEgLyAwIDogeC5zICE9IDEgPyBOYU4gOiB4ZCA/IDAgOiB4KTtcbiAgfVxuICBpZiAoc2QgPT0gbnVsbCkge1xuICAgIGV4dGVybmFsID0gZmFsc2U7XG4gICAgd3ByID0gcHI7XG4gIH0gZWxzZSB7XG4gICAgd3ByID0gc2Q7XG4gIH1cbiAgQ3Rvci5wcmVjaXNpb24gPSB3cHIgKz0gZ3VhcmQ7XG4gIGMgPSBkaWdpdHNUb1N0cmluZyh4ZCk7XG4gIGMwID0gYy5jaGFyQXQoMCk7XG4gIGlmIChNYXRoLmFicyhlID0geC5lKSA8IDE1ZTE0KSB7XG4gICAgd2hpbGUgKGMwIDwgNyAmJiBjMCAhPSAxIHx8IGMwID09IDEgJiYgYy5jaGFyQXQoMSkgPiAzKSB7XG4gICAgICB4ID0geC50aW1lcyh5KTtcbiAgICAgIGMgPSBkaWdpdHNUb1N0cmluZyh4LmQpO1xuICAgICAgYzAgPSBjLmNoYXJBdCgwKTtcbiAgICAgIG4rKztcbiAgICB9XG4gICAgZSA9IHguZTtcbiAgICBpZiAoYzAgPiAxKSB7XG4gICAgICB4ID0gbmV3IEN0b3IoXCIwLlwiICsgYyk7XG4gICAgICBlKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSBuZXcgQ3RvcihjMCArIFwiLlwiICsgYy5zbGljZSgxKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHQgPSBnZXRMbjEwKEN0b3IsIHdwciArIDIsIHByKS50aW1lcyhlICsgXCJcIik7XG4gICAgeCA9IG5hdHVyYWxMb2dhcml0aG0obmV3IEN0b3IoYzAgKyBcIi5cIiArIGMuc2xpY2UoMSkpLCB3cHIgLSBndWFyZCkucGx1cyh0KTtcbiAgICBDdG9yLnByZWNpc2lvbiA9IHByO1xuICAgIHJldHVybiBzZCA9PSBudWxsID8gZmluYWxpc2UoeCwgcHIsIHJtLCBleHRlcm5hbCA9IHRydWUpIDogeDtcbiAgfVxuICB4MSA9IHg7XG4gIHN1bTIgPSBudW1lcmF0b3IgPSB4ID0gZGl2aWRlKHgubWludXMoMSksIHgucGx1cygxKSwgd3ByLCAxKTtcbiAgeDIgPSBmaW5hbGlzZSh4LnRpbWVzKHgpLCB3cHIsIDEpO1xuICBkZW5vbWluYXRvciA9IDM7XG4gIGZvciAoOyA7ICkge1xuICAgIG51bWVyYXRvciA9IGZpbmFsaXNlKG51bWVyYXRvci50aW1lcyh4MiksIHdwciwgMSk7XG4gICAgdCA9IHN1bTIucGx1cyhkaXZpZGUobnVtZXJhdG9yLCBuZXcgQ3RvcihkZW5vbWluYXRvciksIHdwciwgMSkpO1xuICAgIGlmIChkaWdpdHNUb1N0cmluZyh0LmQpLnNsaWNlKDAsIHdwcikgPT09IGRpZ2l0c1RvU3RyaW5nKHN1bTIuZCkuc2xpY2UoMCwgd3ByKSkge1xuICAgICAgc3VtMiA9IHN1bTIudGltZXMoMik7XG4gICAgICBpZiAoZSAhPT0gMClcbiAgICAgICAgc3VtMiA9IHN1bTIucGx1cyhnZXRMbjEwKEN0b3IsIHdwciArIDIsIHByKS50aW1lcyhlICsgXCJcIikpO1xuICAgICAgc3VtMiA9IGRpdmlkZShzdW0yLCBuZXcgQ3RvcihuKSwgd3ByLCAxKTtcbiAgICAgIGlmIChzZCA9PSBudWxsKSB7XG4gICAgICAgIGlmIChjaGVja1JvdW5kaW5nRGlnaXRzKHN1bTIuZCwgd3ByIC0gZ3VhcmQsIHJtLCByZXApKSB7XG4gICAgICAgICAgQ3Rvci5wcmVjaXNpb24gPSB3cHIgKz0gZ3VhcmQ7XG4gICAgICAgICAgdCA9IG51bWVyYXRvciA9IHggPSBkaXZpZGUoeDEubWludXMoMSksIHgxLnBsdXMoMSksIHdwciwgMSk7XG4gICAgICAgICAgeDIgPSBmaW5hbGlzZSh4LnRpbWVzKHgpLCB3cHIsIDEpO1xuICAgICAgICAgIGRlbm9taW5hdG9yID0gcmVwID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmluYWxpc2Uoc3VtMiwgQ3Rvci5wcmVjaXNpb24gPSBwciwgcm0sIGV4dGVybmFsID0gdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEN0b3IucHJlY2lzaW9uID0gcHI7XG4gICAgICAgIHJldHVybiBzdW0yO1xuICAgICAgfVxuICAgIH1cbiAgICBzdW0yID0gdDtcbiAgICBkZW5vbWluYXRvciArPSAyO1xuICB9XG59XG5mdW5jdGlvbiBub25GaW5pdGVUb1N0cmluZyh4KSB7XG4gIHJldHVybiBTdHJpbmcoeC5zICogeC5zIC8gMCk7XG59XG5mdW5jdGlvbiBwYXJzZURlY2ltYWwoeCwgc3RyKSB7XG4gIHZhciBlLCBpLCBsZW47XG4gIGlmICgoZSA9IHN0ci5pbmRleE9mKFwiLlwiKSkgPiAtMSlcbiAgICBzdHIgPSBzdHIucmVwbGFjZShcIi5cIiwgXCJcIik7XG4gIGlmICgoaSA9IHN0ci5zZWFyY2goL2UvaSkpID4gMCkge1xuICAgIGlmIChlIDwgMClcbiAgICAgIGUgPSBpO1xuICAgIGUgKz0gK3N0ci5zbGljZShpICsgMSk7XG4gICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBpKTtcbiAgfSBlbHNlIGlmIChlIDwgMCkge1xuICAgIGUgPSBzdHIubGVuZ3RoO1xuICB9XG4gIGZvciAoaSA9IDA7IHN0ci5jaGFyQ29kZUF0KGkpID09PSA0ODsgaSsrKVxuICAgIDtcbiAgZm9yIChsZW4gPSBzdHIubGVuZ3RoOyBzdHIuY2hhckNvZGVBdChsZW4gLSAxKSA9PT0gNDg7IC0tbGVuKVxuICAgIDtcbiAgc3RyID0gc3RyLnNsaWNlKGksIGxlbik7XG4gIGlmIChzdHIpIHtcbiAgICBsZW4gLT0gaTtcbiAgICB4LmUgPSBlID0gZSAtIGkgLSAxO1xuICAgIHguZCA9IFtdO1xuICAgIGkgPSAoZSArIDEpICUgTE9HX0JBU0U7XG4gICAgaWYgKGUgPCAwKVxuICAgICAgaSArPSBMT0dfQkFTRTtcbiAgICBpZiAoaSA8IGxlbikge1xuICAgICAgaWYgKGkpXG4gICAgICAgIHguZC5wdXNoKCtzdHIuc2xpY2UoMCwgaSkpO1xuICAgICAgZm9yIChsZW4gLT0gTE9HX0JBU0U7IGkgPCBsZW47IClcbiAgICAgICAgeC5kLnB1c2goK3N0ci5zbGljZShpLCBpICs9IExPR19CQVNFKSk7XG4gICAgICBzdHIgPSBzdHIuc2xpY2UoaSk7XG4gICAgICBpID0gTE9HX0JBU0UgLSBzdHIubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBpIC09IGxlbjtcbiAgICB9XG4gICAgZm9yICg7IGktLTsgKVxuICAgICAgc3RyICs9IFwiMFwiO1xuICAgIHguZC5wdXNoKCtzdHIpO1xuICAgIGlmIChleHRlcm5hbCkge1xuICAgICAgaWYgKHguZSA+IHguY29uc3RydWN0b3IubWF4RSkge1xuICAgICAgICB4LmQgPSBudWxsO1xuICAgICAgICB4LmUgPSBOYU47XG4gICAgICB9IGVsc2UgaWYgKHguZSA8IHguY29uc3RydWN0b3IubWluRSkge1xuICAgICAgICB4LmUgPSAwO1xuICAgICAgICB4LmQgPSBbMF07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHguZSA9IDA7XG4gICAgeC5kID0gWzBdO1xuICB9XG4gIHJldHVybiB4O1xufVxuZnVuY3Rpb24gcGFyc2VPdGhlcih4LCBzdHIpIHtcbiAgdmFyIGJhc2UsIEN0b3IsIGRpdmlzb3IsIGksIGlzRmxvYXQsIGxlbiwgcCwgeGQsIHhlO1xuICBpZiAoc3RyLmluZGV4T2YoXCJfXCIpID4gLTEpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvKFxcZClfKD89XFxkKS9nLCBcIiQxXCIpO1xuICAgIGlmIChpc0RlY2ltYWwudGVzdChzdHIpKVxuICAgICAgcmV0dXJuIHBhcnNlRGVjaW1hbCh4LCBzdHIpO1xuICB9IGVsc2UgaWYgKHN0ciA9PT0gXCJJbmZpbml0eVwiIHx8IHN0ciA9PT0gXCJOYU5cIikge1xuICAgIGlmICghK3N0cilcbiAgICAgIHgucyA9IE5hTjtcbiAgICB4LmUgPSBOYU47XG4gICAgeC5kID0gbnVsbDtcbiAgICByZXR1cm4geDtcbiAgfVxuICBpZiAoaXNIZXgudGVzdChzdHIpKSB7XG4gICAgYmFzZSA9IDE2O1xuICAgIHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKGlzQmluYXJ5LnRlc3Qoc3RyKSkge1xuICAgIGJhc2UgPSAyO1xuICB9IGVsc2UgaWYgKGlzT2N0YWwudGVzdChzdHIpKSB7XG4gICAgYmFzZSA9IDg7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgc3RyKTtcbiAgfVxuICBpID0gc3RyLnNlYXJjaCgvcC9pKTtcbiAgaWYgKGkgPiAwKSB7XG4gICAgcCA9ICtzdHIuc2xpY2UoaSArIDEpO1xuICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMiwgaSk7XG4gIH0gZWxzZSB7XG4gICAgc3RyID0gc3RyLnNsaWNlKDIpO1xuICB9XG4gIGkgPSBzdHIuaW5kZXhPZihcIi5cIik7XG4gIGlzRmxvYXQgPSBpID49IDA7XG4gIEN0b3IgPSB4LmNvbnN0cnVjdG9yO1xuICBpZiAoaXNGbG9hdCkge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKFwiLlwiLCBcIlwiKTtcbiAgICBsZW4gPSBzdHIubGVuZ3RoO1xuICAgIGkgPSBsZW4gLSBpO1xuICAgIGRpdmlzb3IgPSBpbnRQb3coQ3RvciwgbmV3IEN0b3IoYmFzZSksIGksIGkgKiAyKTtcbiAgfVxuICB4ZCA9IGNvbnZlcnRCYXNlKHN0ciwgYmFzZSwgQkFTRSk7XG4gIHhlID0geGQubGVuZ3RoIC0gMTtcbiAgZm9yIChpID0geGU7IHhkW2ldID09PSAwOyAtLWkpXG4gICAgeGQucG9wKCk7XG4gIGlmIChpIDwgMClcbiAgICByZXR1cm4gbmV3IEN0b3IoeC5zICogMCk7XG4gIHguZSA9IGdldEJhc2UxMEV4cG9uZW50KHhkLCB4ZSk7XG4gIHguZCA9IHhkO1xuICBleHRlcm5hbCA9IGZhbHNlO1xuICBpZiAoaXNGbG9hdClcbiAgICB4ID0gZGl2aWRlKHgsIGRpdmlzb3IsIGxlbiAqIDQpO1xuICBpZiAocClcbiAgICB4ID0geC50aW1lcyhNYXRoLmFicyhwKSA8IDU0ID8gbWF0aHBvdygyLCBwKSA6IERlY2ltYWwucG93KDIsIHApKTtcbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIHNpbmUoQ3RvciwgeCkge1xuICB2YXIgaywgbGVuID0geC5kLmxlbmd0aDtcbiAgaWYgKGxlbiA8IDMpIHtcbiAgICByZXR1cm4geC5pc1plcm8oKSA/IHggOiB0YXlsb3JTZXJpZXMoQ3RvciwgMiwgeCwgeCk7XG4gIH1cbiAgayA9IDEuNCAqIE1hdGguc3FydChsZW4pO1xuICBrID0gayA+IDE2ID8gMTYgOiBrIHwgMDtcbiAgeCA9IHgudGltZXMoMSAvIHRpbnlQb3coNSwgaykpO1xuICB4ID0gdGF5bG9yU2VyaWVzKEN0b3IsIDIsIHgsIHgpO1xuICB2YXIgc2luMl94LCBkNSA9IG5ldyBDdG9yKDUpLCBkMTYgPSBuZXcgQ3RvcigxNiksIGQyMCA9IG5ldyBDdG9yKDIwKTtcbiAgZm9yICg7IGstLTsgKSB7XG4gICAgc2luMl94ID0geC50aW1lcyh4KTtcbiAgICB4ID0geC50aW1lcyhkNS5wbHVzKHNpbjJfeC50aW1lcyhkMTYudGltZXMoc2luMl94KS5taW51cyhkMjApKSkpO1xuICB9XG4gIHJldHVybiB4O1xufVxuZnVuY3Rpb24gdGF5bG9yU2VyaWVzKEN0b3IsIG4sIHgsIHksIGlzSHlwZXJib2xpYykge1xuICB2YXIgaiwgdCwgdSwgeDIsIGkgPSAxLCBwciA9IEN0b3IucHJlY2lzaW9uLCBrID0gTWF0aC5jZWlsKHByIC8gTE9HX0JBU0UpO1xuICBleHRlcm5hbCA9IGZhbHNlO1xuICB4MiA9IHgudGltZXMoeCk7XG4gIHUgPSBuZXcgQ3Rvcih5KTtcbiAgZm9yICg7IDsgKSB7XG4gICAgdCA9IGRpdmlkZSh1LnRpbWVzKHgyKSwgbmV3IEN0b3IobisrICogbisrKSwgcHIsIDEpO1xuICAgIHUgPSBpc0h5cGVyYm9saWMgPyB5LnBsdXModCkgOiB5Lm1pbnVzKHQpO1xuICAgIHkgPSBkaXZpZGUodC50aW1lcyh4MiksIG5ldyBDdG9yKG4rKyAqIG4rKyksIHByLCAxKTtcbiAgICB0ID0gdS5wbHVzKHkpO1xuICAgIGlmICh0LmRba10gIT09IHZvaWQgMCkge1xuICAgICAgZm9yIChqID0gazsgdC5kW2pdID09PSB1LmRbal0gJiYgai0tOyApXG4gICAgICAgIDtcbiAgICAgIGlmIChqID09IC0xKVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaiA9IHU7XG4gICAgdSA9IHk7XG4gICAgeSA9IHQ7XG4gICAgdCA9IGo7XG4gICAgaSsrO1xuICB9XG4gIGV4dGVybmFsID0gdHJ1ZTtcbiAgdC5kLmxlbmd0aCA9IGsgKyAxO1xuICByZXR1cm4gdDtcbn1cbmZ1bmN0aW9uIHRpbnlQb3coYiwgZSkge1xuICB2YXIgbiA9IGI7XG4gIHdoaWxlICgtLWUpXG4gICAgbiAqPSBiO1xuICByZXR1cm4gbjtcbn1cbmZ1bmN0aW9uIHRvTGVzc1RoYW5IYWxmUGkoQ3RvciwgeCkge1xuICB2YXIgdCwgaXNOZWcyID0geC5zIDwgMCwgcGkgPSBnZXRQaShDdG9yLCBDdG9yLnByZWNpc2lvbiwgMSksIGhhbGZQaSA9IHBpLnRpbWVzKDAuNSk7XG4gIHggPSB4LmFicygpO1xuICBpZiAoeC5sdGUoaGFsZlBpKSkge1xuICAgIHF1YWRyYW50ID0gaXNOZWcyID8gNCA6IDE7XG4gICAgcmV0dXJuIHg7XG4gIH1cbiAgdCA9IHguZGl2VG9JbnQocGkpO1xuICBpZiAodC5pc1plcm8oKSkge1xuICAgIHF1YWRyYW50ID0gaXNOZWcyID8gMyA6IDI7XG4gIH0gZWxzZSB7XG4gICAgeCA9IHgubWludXModC50aW1lcyhwaSkpO1xuICAgIGlmICh4Lmx0ZShoYWxmUGkpKSB7XG4gICAgICBxdWFkcmFudCA9IGlzT2RkKHQpID8gaXNOZWcyID8gMiA6IDMgOiBpc05lZzIgPyA0IDogMTtcbiAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgICBxdWFkcmFudCA9IGlzT2RkKHQpID8gaXNOZWcyID8gMSA6IDQgOiBpc05lZzIgPyAzIDogMjtcbiAgfVxuICByZXR1cm4geC5taW51cyhwaSkuYWJzKCk7XG59XG5mdW5jdGlvbiB0b1N0cmluZ0JpbmFyeSh4LCBiYXNlT3V0LCBzZCwgcm0pIHtcbiAgdmFyIGJhc2UsIGUsIGksIGssIGxlbiwgcm91bmRVcCwgc3RyLCB4ZCwgeSwgQ3RvciA9IHguY29uc3RydWN0b3IsIGlzRXhwID0gc2QgIT09IHZvaWQgMDtcbiAgaWYgKGlzRXhwKSB7XG4gICAgY2hlY2tJbnQzMihzZCwgMSwgTUFYX0RJR0lUUyk7XG4gICAgaWYgKHJtID09PSB2b2lkIDApXG4gICAgICBybSA9IEN0b3Iucm91bmRpbmc7XG4gICAgZWxzZVxuICAgICAgY2hlY2tJbnQzMihybSwgMCwgOCk7XG4gIH0gZWxzZSB7XG4gICAgc2QgPSBDdG9yLnByZWNpc2lvbjtcbiAgICBybSA9IEN0b3Iucm91bmRpbmc7XG4gIH1cbiAgaWYgKCF4LmlzRmluaXRlKCkpIHtcbiAgICBzdHIgPSBub25GaW5pdGVUb1N0cmluZyh4KTtcbiAgfSBlbHNlIHtcbiAgICBzdHIgPSBmaW5pdGVUb1N0cmluZyh4KTtcbiAgICBpID0gc3RyLmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpc0V4cCkge1xuICAgICAgYmFzZSA9IDI7XG4gICAgICBpZiAoYmFzZU91dCA9PSAxNikge1xuICAgICAgICBzZCA9IHNkICogNCAtIDM7XG4gICAgICB9IGVsc2UgaWYgKGJhc2VPdXQgPT0gOCkge1xuICAgICAgICBzZCA9IHNkICogMyAtIDI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhc2UgPSBiYXNlT3V0O1xuICAgIH1cbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZShcIi5cIiwgXCJcIik7XG4gICAgICB5ID0gbmV3IEN0b3IoMSk7XG4gICAgICB5LmUgPSBzdHIubGVuZ3RoIC0gaTtcbiAgICAgIHkuZCA9IGNvbnZlcnRCYXNlKGZpbml0ZVRvU3RyaW5nKHkpLCAxMCwgYmFzZSk7XG4gICAgICB5LmUgPSB5LmQubGVuZ3RoO1xuICAgIH1cbiAgICB4ZCA9IGNvbnZlcnRCYXNlKHN0ciwgMTAsIGJhc2UpO1xuICAgIGUgPSBsZW4gPSB4ZC5sZW5ndGg7XG4gICAgZm9yICg7IHhkWy0tbGVuXSA9PSAwOyApXG4gICAgICB4ZC5wb3AoKTtcbiAgICBpZiAoIXhkWzBdKSB7XG4gICAgICBzdHIgPSBpc0V4cCA/IFwiMHArMFwiIDogXCIwXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICBlLS07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4ID0gbmV3IEN0b3IoeCk7XG4gICAgICAgIHguZCA9IHhkO1xuICAgICAgICB4LmUgPSBlO1xuICAgICAgICB4ID0gZGl2aWRlKHgsIHksIHNkLCBybSwgMCwgYmFzZSk7XG4gICAgICAgIHhkID0geC5kO1xuICAgICAgICBlID0geC5lO1xuICAgICAgICByb3VuZFVwID0gaW5leGFjdDtcbiAgICAgIH1cbiAgICAgIGkgPSB4ZFtzZF07XG4gICAgICBrID0gYmFzZSAvIDI7XG4gICAgICByb3VuZFVwID0gcm91bmRVcCB8fCB4ZFtzZCArIDFdICE9PSB2b2lkIDA7XG4gICAgICByb3VuZFVwID0gcm0gPCA0ID8gKGkgIT09IHZvaWQgMCB8fCByb3VuZFVwKSAmJiAocm0gPT09IDAgfHwgcm0gPT09ICh4LnMgPCAwID8gMyA6IDIpKSA6IGkgPiBrIHx8IGkgPT09IGsgJiYgKHJtID09PSA0IHx8IHJvdW5kVXAgfHwgcm0gPT09IDYgJiYgeGRbc2QgLSAxXSAmIDEgfHwgcm0gPT09ICh4LnMgPCAwID8gOCA6IDcpKTtcbiAgICAgIHhkLmxlbmd0aCA9IHNkO1xuICAgICAgaWYgKHJvdW5kVXApIHtcbiAgICAgICAgZm9yICg7ICsreGRbLS1zZF0gPiBiYXNlIC0gMTsgKSB7XG4gICAgICAgICAgeGRbc2RdID0gMDtcbiAgICAgICAgICBpZiAoIXNkKSB7XG4gICAgICAgICAgICArK2U7XG4gICAgICAgICAgICB4ZC51bnNoaWZ0KDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZW4gPSB4ZC5sZW5ndGg7ICF4ZFtsZW4gLSAxXTsgLS1sZW4pXG4gICAgICAgIDtcbiAgICAgIGZvciAoaSA9IDAsIHN0ciA9IFwiXCI7IGkgPCBsZW47IGkrKylcbiAgICAgICAgc3RyICs9IE5VTUVSQUxTLmNoYXJBdCh4ZFtpXSk7XG4gICAgICBpZiAoaXNFeHApIHtcbiAgICAgICAgaWYgKGxlbiA+IDEpIHtcbiAgICAgICAgICBpZiAoYmFzZU91dCA9PSAxNiB8fCBiYXNlT3V0ID09IDgpIHtcbiAgICAgICAgICAgIGkgPSBiYXNlT3V0ID09IDE2ID8gNCA6IDM7XG4gICAgICAgICAgICBmb3IgKC0tbGVuOyBsZW4gJSBpOyBsZW4rKylcbiAgICAgICAgICAgICAgc3RyICs9IFwiMFwiO1xuICAgICAgICAgICAgeGQgPSBjb252ZXJ0QmFzZShzdHIsIGJhc2UsIGJhc2VPdXQpO1xuICAgICAgICAgICAgZm9yIChsZW4gPSB4ZC5sZW5ndGg7ICF4ZFtsZW4gLSAxXTsgLS1sZW4pXG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGZvciAoaSA9IDEsIHN0ciA9IFwiMS5cIjsgaSA8IGxlbjsgaSsrKVxuICAgICAgICAgICAgICBzdHIgKz0gTlVNRVJBTFMuY2hhckF0KHhkW2ldKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyID0gc3RyLmNoYXJBdCgwKSArIFwiLlwiICsgc3RyLnNsaWNlKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdHIgPSBzdHIgKyAoZSA8IDAgPyBcInBcIiA6IFwicCtcIikgKyBlO1xuICAgICAgfSBlbHNlIGlmIChlIDwgMCkge1xuICAgICAgICBmb3IgKDsgKytlOyApXG4gICAgICAgICAgc3RyID0gXCIwXCIgKyBzdHI7XG4gICAgICAgIHN0ciA9IFwiMC5cIiArIHN0cjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgrK2UgPiBsZW4pXG4gICAgICAgICAgZm9yIChlIC09IGxlbjsgZS0tOyApXG4gICAgICAgICAgICBzdHIgKz0gXCIwXCI7XG4gICAgICAgIGVsc2UgaWYgKGUgPCBsZW4pXG4gICAgICAgICAgc3RyID0gc3RyLnNsaWNlKDAsIGUpICsgXCIuXCIgKyBzdHIuc2xpY2UoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN0ciA9IChiYXNlT3V0ID09IDE2ID8gXCIweFwiIDogYmFzZU91dCA9PSAyID8gXCIwYlwiIDogYmFzZU91dCA9PSA4ID8gXCIwb1wiIDogXCJcIikgKyBzdHI7XG4gIH1cbiAgcmV0dXJuIHgucyA8IDAgPyBcIi1cIiArIHN0ciA6IHN0cjtcbn1cbmZ1bmN0aW9uIHRydW5jYXRlKGFyciwgbGVuKSB7XG4gIGlmIChhcnIubGVuZ3RoID4gbGVuKSB7XG4gICAgYXJyLmxlbmd0aCA9IGxlbjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gYWJzKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmFicygpO1xufVxuZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5hY29zKCk7XG59XG5mdW5jdGlvbiBhY29zaCh4KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5hY29zaCgpO1xufVxuZnVuY3Rpb24gYWRkKHgsIHkpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLnBsdXMoeSk7XG59XG5mdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmFzaW4oKTtcbn1cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmFzaW5oKCk7XG59XG5mdW5jdGlvbiBhdGFuKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmF0YW4oKTtcbn1cbmZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmF0YW5oKCk7XG59XG5mdW5jdGlvbiBhdGFuMih5LCB4KSB7XG4gIHkgPSBuZXcgdGhpcyh5KTtcbiAgeCA9IG5ldyB0aGlzKHgpO1xuICB2YXIgciwgcHIgPSB0aGlzLnByZWNpc2lvbiwgcm0gPSB0aGlzLnJvdW5kaW5nLCB3cHIgPSBwciArIDQ7XG4gIGlmICgheS5zIHx8ICF4LnMpIHtcbiAgICByID0gbmV3IHRoaXMoTmFOKTtcbiAgfSBlbHNlIGlmICgheS5kICYmICF4LmQpIHtcbiAgICByID0gZ2V0UGkodGhpcywgd3ByLCAxKS50aW1lcyh4LnMgPiAwID8gMC4yNSA6IDAuNzUpO1xuICAgIHIucyA9IHkucztcbiAgfSBlbHNlIGlmICgheC5kIHx8IHkuaXNaZXJvKCkpIHtcbiAgICByID0geC5zIDwgMCA/IGdldFBpKHRoaXMsIHByLCBybSkgOiBuZXcgdGhpcygwKTtcbiAgICByLnMgPSB5LnM7XG4gIH0gZWxzZSBpZiAoIXkuZCB8fCB4LmlzWmVybygpKSB7XG4gICAgciA9IGdldFBpKHRoaXMsIHdwciwgMSkudGltZXMoMC41KTtcbiAgICByLnMgPSB5LnM7XG4gIH0gZWxzZSBpZiAoeC5zIDwgMCkge1xuICAgIHRoaXMucHJlY2lzaW9uID0gd3ByO1xuICAgIHRoaXMucm91bmRpbmcgPSAxO1xuICAgIHIgPSB0aGlzLmF0YW4oZGl2aWRlKHksIHgsIHdwciwgMSkpO1xuICAgIHggPSBnZXRQaSh0aGlzLCB3cHIsIDEpO1xuICAgIHRoaXMucHJlY2lzaW9uID0gcHI7XG4gICAgdGhpcy5yb3VuZGluZyA9IHJtO1xuICAgIHIgPSB5LnMgPCAwID8gci5taW51cyh4KSA6IHIucGx1cyh4KTtcbiAgfSBlbHNlIHtcbiAgICByID0gdGhpcy5hdGFuKGRpdmlkZSh5LCB4LCB3cHIsIDEpKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cbmZ1bmN0aW9uIGNicnQoeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuY2JydCgpO1xufVxuZnVuY3Rpb24gY2VpbCh4KSB7XG4gIHJldHVybiBmaW5hbGlzZSh4ID0gbmV3IHRoaXMoeCksIHguZSArIDEsIDIpO1xufVxuZnVuY3Rpb24gY2xhbXAoeCwgbWluMiwgbWF4Mikge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuY2xhbXAobWluMiwgbWF4Mik7XG59XG5mdW5jdGlvbiBjb25maWcob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpXG4gICAgdGhyb3cgRXJyb3IoZGVjaW1hbEVycm9yICsgXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gIHZhciBpLCBwLCB2LCB1c2VEZWZhdWx0cyA9IG9iai5kZWZhdWx0cyA9PT0gdHJ1ZSwgcHMgPSBbXG4gICAgXCJwcmVjaXNpb25cIixcbiAgICAxLFxuICAgIE1BWF9ESUdJVFMsXG4gICAgXCJyb3VuZGluZ1wiLFxuICAgIDAsXG4gICAgOCxcbiAgICBcInRvRXhwTmVnXCIsXG4gICAgLUVYUF9MSU1JVCxcbiAgICAwLFxuICAgIFwidG9FeHBQb3NcIixcbiAgICAwLFxuICAgIEVYUF9MSU1JVCxcbiAgICBcIm1heEVcIixcbiAgICAwLFxuICAgIEVYUF9MSU1JVCxcbiAgICBcIm1pbkVcIixcbiAgICAtRVhQX0xJTUlULFxuICAgIDAsXG4gICAgXCJtb2R1bG9cIixcbiAgICAwLFxuICAgIDlcbiAgXTtcbiAgZm9yIChpID0gMDsgaSA8IHBzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgaWYgKHAgPSBwc1tpXSwgdXNlRGVmYXVsdHMpXG4gICAgICB0aGlzW3BdID0gREVGQVVMVFNbcF07XG4gICAgaWYgKCh2ID0gb2JqW3BdKSAhPT0gdm9pZCAwKSB7XG4gICAgICBpZiAobWF0aGZsb29yKHYpID09PSB2ICYmIHYgPj0gcHNbaSArIDFdICYmIHYgPD0gcHNbaSArIDJdKVxuICAgICAgICB0aGlzW3BdID0gdjtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhyb3cgRXJyb3IoaW52YWxpZEFyZ3VtZW50ICsgcCArIFwiOiBcIiArIHYpO1xuICAgIH1cbiAgfVxuICBpZiAocCA9IFwiY3J5cHRvXCIsIHVzZURlZmF1bHRzKVxuICAgIHRoaXNbcF0gPSBERUZBVUxUU1twXTtcbiAgaWYgKCh2ID0gb2JqW3BdKSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHYgPT09IHRydWUgfHwgdiA9PT0gZmFsc2UgfHwgdiA9PT0gMCB8fCB2ID09PSAxKSB7XG4gICAgICBpZiAodikge1xuICAgICAgICBpZiAodHlwZW9mIGNyeXB0byAhPSBcInVuZGVmaW5lZFwiICYmIGNyeXB0byAmJiAoY3J5cHRvLmdldFJhbmRvbVZhbHVlcyB8fCBjcnlwdG8ucmFuZG9tQnl0ZXMpKSB7XG4gICAgICAgICAgdGhpc1twXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoY3J5cHRvVW5hdmFpbGFibGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW3BdID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKGludmFsaWRBcmd1bWVudCArIHAgKyBcIjogXCIgKyB2KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBjb3MoeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuY29zKCk7XG59XG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmNvc2goKTtcbn1cbmZ1bmN0aW9uIGNsb25lKG9iaikge1xuICB2YXIgaSwgcCwgcHM7XG4gIGZ1bmN0aW9uIERlY2ltYWwyKHYpIHtcbiAgICB2YXIgZSwgaTIsIHQsIHggPSB0aGlzO1xuICAgIGlmICghKHggaW5zdGFuY2VvZiBEZWNpbWFsMikpXG4gICAgICByZXR1cm4gbmV3IERlY2ltYWwyKHYpO1xuICAgIHguY29uc3RydWN0b3IgPSBEZWNpbWFsMjtcbiAgICBpZiAoaXNEZWNpbWFsSW5zdGFuY2UodikpIHtcbiAgICAgIHgucyA9IHYucztcbiAgICAgIGlmIChleHRlcm5hbCkge1xuICAgICAgICBpZiAoIXYuZCB8fCB2LmUgPiBEZWNpbWFsMi5tYXhFKSB7XG4gICAgICAgICAgeC5lID0gTmFOO1xuICAgICAgICAgIHguZCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAodi5lIDwgRGVjaW1hbDIubWluRSkge1xuICAgICAgICAgIHguZSA9IDA7XG4gICAgICAgICAgeC5kID0gWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHguZSA9IHYuZTtcbiAgICAgICAgICB4LmQgPSB2LmQuc2xpY2UoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeC5lID0gdi5lO1xuICAgICAgICB4LmQgPSB2LmQgPyB2LmQuc2xpY2UoKSA6IHYuZDtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdCA9IHR5cGVvZiB2O1xuICAgIGlmICh0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAodiA9PT0gMCkge1xuICAgICAgICB4LnMgPSAxIC8gdiA8IDAgPyAtMSA6IDE7XG4gICAgICAgIHguZSA9IDA7XG4gICAgICAgIHguZCA9IFswXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHYgPCAwKSB7XG4gICAgICAgIHYgPSAtdjtcbiAgICAgICAgeC5zID0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4LnMgPSAxO1xuICAgICAgfVxuICAgICAgaWYgKHYgPT09IH5+diAmJiB2IDwgMWU3KSB7XG4gICAgICAgIGZvciAoZSA9IDAsIGkyID0gdjsgaTIgPj0gMTA7IGkyIC89IDEwKVxuICAgICAgICAgIGUrKztcbiAgICAgICAgaWYgKGV4dGVybmFsKSB7XG4gICAgICAgICAgaWYgKGUgPiBEZWNpbWFsMi5tYXhFKSB7XG4gICAgICAgICAgICB4LmUgPSBOYU47XG4gICAgICAgICAgICB4LmQgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZSA8IERlY2ltYWwyLm1pbkUpIHtcbiAgICAgICAgICAgIHguZSA9IDA7XG4gICAgICAgICAgICB4LmQgPSBbMF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHguZSA9IGU7XG4gICAgICAgICAgICB4LmQgPSBbdl07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHguZSA9IGU7XG4gICAgICAgICAgeC5kID0gW3ZdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAodiAqIDAgIT09IDApIHtcbiAgICAgICAgaWYgKCF2KVxuICAgICAgICAgIHgucyA9IE5hTjtcbiAgICAgICAgeC5lID0gTmFOO1xuICAgICAgICB4LmQgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VEZWNpbWFsKHgsIHYudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIGlmICh0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBFcnJvcihpbnZhbGlkQXJndW1lbnQgKyB2KTtcbiAgICB9XG4gICAgaWYgKChpMiA9IHYuY2hhckNvZGVBdCgwKSkgPT09IDQ1KSB7XG4gICAgICB2ID0gdi5zbGljZSgxKTtcbiAgICAgIHgucyA9IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaTIgPT09IDQzKVxuICAgICAgICB2ID0gdi5zbGljZSgxKTtcbiAgICAgIHgucyA9IDE7XG4gICAgfVxuICAgIHJldHVybiBpc0RlY2ltYWwudGVzdCh2KSA/IHBhcnNlRGVjaW1hbCh4LCB2KSA6IHBhcnNlT3RoZXIoeCwgdik7XG4gIH1cbiAgRGVjaW1hbDIucHJvdG90eXBlID0gUDtcbiAgRGVjaW1hbDIuUk9VTkRfVVAgPSAwO1xuICBEZWNpbWFsMi5ST1VORF9ET1dOID0gMTtcbiAgRGVjaW1hbDIuUk9VTkRfQ0VJTCA9IDI7XG4gIERlY2ltYWwyLlJPVU5EX0ZMT09SID0gMztcbiAgRGVjaW1hbDIuUk9VTkRfSEFMRl9VUCA9IDQ7XG4gIERlY2ltYWwyLlJPVU5EX0hBTEZfRE9XTiA9IDU7XG4gIERlY2ltYWwyLlJPVU5EX0hBTEZfRVZFTiA9IDY7XG4gIERlY2ltYWwyLlJPVU5EX0hBTEZfQ0VJTCA9IDc7XG4gIERlY2ltYWwyLlJPVU5EX0hBTEZfRkxPT1IgPSA4O1xuICBEZWNpbWFsMi5FVUNMSUQgPSA5O1xuICBEZWNpbWFsMi5jb25maWcgPSBEZWNpbWFsMi5zZXQgPSBjb25maWc7XG4gIERlY2ltYWwyLmNsb25lID0gY2xvbmU7XG4gIERlY2ltYWwyLmlzRGVjaW1hbCA9IGlzRGVjaW1hbEluc3RhbmNlO1xuICBEZWNpbWFsMi5hYnMgPSBhYnM7XG4gIERlY2ltYWwyLmFjb3MgPSBhY29zO1xuICBEZWNpbWFsMi5hY29zaCA9IGFjb3NoO1xuICBEZWNpbWFsMi5hZGQgPSBhZGQ7XG4gIERlY2ltYWwyLmFzaW4gPSBhc2luO1xuICBEZWNpbWFsMi5hc2luaCA9IGFzaW5oO1xuICBEZWNpbWFsMi5hdGFuID0gYXRhbjtcbiAgRGVjaW1hbDIuYXRhbmggPSBhdGFuaDtcbiAgRGVjaW1hbDIuYXRhbjIgPSBhdGFuMjtcbiAgRGVjaW1hbDIuY2JydCA9IGNicnQ7XG4gIERlY2ltYWwyLmNlaWwgPSBjZWlsO1xuICBEZWNpbWFsMi5jbGFtcCA9IGNsYW1wO1xuICBEZWNpbWFsMi5jb3MgPSBjb3M7XG4gIERlY2ltYWwyLmNvc2ggPSBjb3NoO1xuICBEZWNpbWFsMi5kaXYgPSBkaXY7XG4gIERlY2ltYWwyLmV4cCA9IGV4cDtcbiAgRGVjaW1hbDIuZmxvb3IgPSBmbG9vcjtcbiAgRGVjaW1hbDIuaHlwb3QgPSBoeXBvdDtcbiAgRGVjaW1hbDIubG4gPSBsbjtcbiAgRGVjaW1hbDIubG9nID0gbG9nO1xuICBEZWNpbWFsMi5sb2cxMCA9IGxvZzEwO1xuICBEZWNpbWFsMi5sb2cyID0gbG9nMjtcbiAgRGVjaW1hbDIubWF4ID0gbWF4O1xuICBEZWNpbWFsMi5taW4gPSBtaW47XG4gIERlY2ltYWwyLm1vZCA9IG1vZDtcbiAgRGVjaW1hbDIubXVsID0gbXVsO1xuICBEZWNpbWFsMi5wb3cgPSBwb3c7XG4gIERlY2ltYWwyLnJhbmRvbSA9IHJhbmRvbTtcbiAgRGVjaW1hbDIucm91bmQgPSByb3VuZDtcbiAgRGVjaW1hbDIuc2lnbiA9IHNpZ247XG4gIERlY2ltYWwyLnNpbiA9IHNpbjtcbiAgRGVjaW1hbDIuc2luaCA9IHNpbmg7XG4gIERlY2ltYWwyLnNxcnQgPSBzcXJ0O1xuICBEZWNpbWFsMi5zdWIgPSBzdWI7XG4gIERlY2ltYWwyLnN1bSA9IHN1bTtcbiAgRGVjaW1hbDIudGFuID0gdGFuO1xuICBEZWNpbWFsMi50YW5oID0gdGFuaDtcbiAgRGVjaW1hbDIudHJ1bmMgPSB0cnVuYztcbiAgaWYgKG9iaiA9PT0gdm9pZCAwKVxuICAgIG9iaiA9IHt9O1xuICBpZiAob2JqKSB7XG4gICAgaWYgKG9iai5kZWZhdWx0cyAhPT0gdHJ1ZSkge1xuICAgICAgcHMgPSBbXCJwcmVjaXNpb25cIiwgXCJyb3VuZGluZ1wiLCBcInRvRXhwTmVnXCIsIFwidG9FeHBQb3NcIiwgXCJtYXhFXCIsIFwibWluRVwiLCBcIm1vZHVsb1wiLCBcImNyeXB0b1wiXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBwcy5sZW5ndGg7IClcbiAgICAgICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkocCA9IHBzW2krK10pKVxuICAgICAgICAgIG9ialtwXSA9IHRoaXNbcF07XG4gICAgfVxuICB9XG4gIERlY2ltYWwyLmNvbmZpZyhvYmopO1xuICByZXR1cm4gRGVjaW1hbDI7XG59XG5mdW5jdGlvbiBkaXYoeCwgeSkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuZGl2KHkpO1xufVxuZnVuY3Rpb24gZXhwKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmV4cCgpO1xufVxuZnVuY3Rpb24gZmxvb3IoeCkge1xuICByZXR1cm4gZmluYWxpc2UoeCA9IG5ldyB0aGlzKHgpLCB4LmUgKyAxLCAzKTtcbn1cbmZ1bmN0aW9uIGh5cG90KCkge1xuICB2YXIgaSwgbiwgdCA9IG5ldyB0aGlzKDApO1xuICBleHRlcm5hbCA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKSB7XG4gICAgbiA9IG5ldyB0aGlzKGFyZ3VtZW50c1tpKytdKTtcbiAgICBpZiAoIW4uZCkge1xuICAgICAgaWYgKG4ucykge1xuICAgICAgICBleHRlcm5hbCA9IHRydWU7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcygxIC8gMCk7XG4gICAgICB9XG4gICAgICB0ID0gbjtcbiAgICB9IGVsc2UgaWYgKHQuZCkge1xuICAgICAgdCA9IHQucGx1cyhuLnRpbWVzKG4pKTtcbiAgICB9XG4gIH1cbiAgZXh0ZXJuYWwgPSB0cnVlO1xuICByZXR1cm4gdC5zcXJ0KCk7XG59XG5mdW5jdGlvbiBpc0RlY2ltYWxJbnN0YW5jZShvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIERlY2ltYWwgfHwgb2JqICYmIG9iai50b1N0cmluZ1RhZyA9PT0gdGFnIHx8IGZhbHNlO1xufVxuZnVuY3Rpb24gbG4oeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkubG4oKTtcbn1cbmZ1bmN0aW9uIGxvZyh4LCB5KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5sb2coeSk7XG59XG5mdW5jdGlvbiBsb2cyKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmxvZygyKTtcbn1cbmZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLmxvZygxMCk7XG59XG5mdW5jdGlvbiBtYXgoKSB7XG4gIHJldHVybiBtYXhPck1pbih0aGlzLCBhcmd1bWVudHMsIFwibHRcIik7XG59XG5mdW5jdGlvbiBtaW4oKSB7XG4gIHJldHVybiBtYXhPck1pbih0aGlzLCBhcmd1bWVudHMsIFwiZ3RcIik7XG59XG5mdW5jdGlvbiBtb2QoeCwgeSkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkubW9kKHkpO1xufVxuZnVuY3Rpb24gbXVsKHgsIHkpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLm11bCh5KTtcbn1cbmZ1bmN0aW9uIHBvdyh4LCB5KSB7XG4gIHJldHVybiBuZXcgdGhpcyh4KS5wb3coeSk7XG59XG5mdW5jdGlvbiByYW5kb20oc2QpIHtcbiAgdmFyIGQsIGUsIGssIG4sIGkgPSAwLCByID0gbmV3IHRoaXMoMSksIHJkID0gW107XG4gIGlmIChzZCA9PT0gdm9pZCAwKVxuICAgIHNkID0gdGhpcy5wcmVjaXNpb247XG4gIGVsc2VcbiAgICBjaGVja0ludDMyKHNkLCAxLCBNQVhfRElHSVRTKTtcbiAgayA9IE1hdGguY2VpbChzZCAvIExPR19CQVNFKTtcbiAgaWYgKCF0aGlzLmNyeXB0bykge1xuICAgIGZvciAoOyBpIDwgazsgKVxuICAgICAgcmRbaSsrXSA9IE1hdGgucmFuZG9tKCkgKiAxZTcgfCAwO1xuICB9IGVsc2UgaWYgKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICBkID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoaykpO1xuICAgIGZvciAoOyBpIDwgazsgKSB7XG4gICAgICBuID0gZFtpXTtcbiAgICAgIGlmIChuID49IDQyOWU3KSB7XG4gICAgICAgIGRbaV0gPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZFtpKytdID0gbiAlIDFlNztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoY3J5cHRvLnJhbmRvbUJ5dGVzKSB7XG4gICAgZCA9IGNyeXB0by5yYW5kb21CeXRlcyhrICo9IDQpO1xuICAgIGZvciAoOyBpIDwgazsgKSB7XG4gICAgICBuID0gZFtpXSArIChkW2kgKyAxXSA8PCA4KSArIChkW2kgKyAyXSA8PCAxNikgKyAoKGRbaSArIDNdICYgMTI3KSA8PCAyNCk7XG4gICAgICBpZiAobiA+PSAyMTRlNykge1xuICAgICAgICBjcnlwdG8ucmFuZG9tQnl0ZXMoNCkuY29weShkLCBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJkLnB1c2gobiAlIDFlNyk7XG4gICAgICAgIGkgKz0gNDtcbiAgICAgIH1cbiAgICB9XG4gICAgaSA9IGsgLyA0O1xuICB9IGVsc2Uge1xuICAgIHRocm93IEVycm9yKGNyeXB0b1VuYXZhaWxhYmxlKTtcbiAgfVxuICBrID0gcmRbLS1pXTtcbiAgc2QgJT0gTE9HX0JBU0U7XG4gIGlmIChrICYmIHNkKSB7XG4gICAgbiA9IG1hdGhwb3coMTAsIExPR19CQVNFIC0gc2QpO1xuICAgIHJkW2ldID0gKGsgLyBuIHwgMCkgKiBuO1xuICB9XG4gIGZvciAoOyByZFtpXSA9PT0gMDsgaS0tKVxuICAgIHJkLnBvcCgpO1xuICBpZiAoaSA8IDApIHtcbiAgICBlID0gMDtcbiAgICByZCA9IFswXTtcbiAgfSBlbHNlIHtcbiAgICBlID0gLTE7XG4gICAgZm9yICg7IHJkWzBdID09PSAwOyBlIC09IExPR19CQVNFKVxuICAgICAgcmQuc2hpZnQoKTtcbiAgICBmb3IgKGsgPSAxLCBuID0gcmRbMF07IG4gPj0gMTA7IG4gLz0gMTApXG4gICAgICBrKys7XG4gICAgaWYgKGsgPCBMT0dfQkFTRSlcbiAgICAgIGUgLT0gTE9HX0JBU0UgLSBrO1xuICB9XG4gIHIuZSA9IGU7XG4gIHIuZCA9IHJkO1xuICByZXR1cm4gcjtcbn1cbmZ1bmN0aW9uIHJvdW5kKHgpIHtcbiAgcmV0dXJuIGZpbmFsaXNlKHggPSBuZXcgdGhpcyh4KSwgeC5lICsgMSwgdGhpcy5yb3VuZGluZyk7XG59XG5mdW5jdGlvbiBzaWduKHgpIHtcbiAgeCA9IG5ldyB0aGlzKHgpO1xuICByZXR1cm4geC5kID8geC5kWzBdID8geC5zIDogMCAqIHgucyA6IHgucyB8fCBOYU47XG59XG5mdW5jdGlvbiBzaW4oeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuc2luKCk7XG59XG5mdW5jdGlvbiBzaW5oKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLnNpbmgoKTtcbn1cbmZ1bmN0aW9uIHNxcnQoeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkuc3FydCgpO1xufVxuZnVuY3Rpb24gc3ViKHgsIHkpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLnN1Yih5KTtcbn1cbmZ1bmN0aW9uIHN1bSgpIHtcbiAgdmFyIGkgPSAwLCBhcmdzID0gYXJndW1lbnRzLCB4ID0gbmV3IHRoaXMoYXJnc1tpXSk7XG4gIGV4dGVybmFsID0gZmFsc2U7XG4gIGZvciAoOyB4LnMgJiYgKytpIDwgYXJncy5sZW5ndGg7IClcbiAgICB4ID0geC5wbHVzKGFyZ3NbaV0pO1xuICBleHRlcm5hbCA9IHRydWU7XG4gIHJldHVybiBmaW5hbGlzZSh4LCB0aGlzLnByZWNpc2lvbiwgdGhpcy5yb3VuZGluZyk7XG59XG5mdW5jdGlvbiB0YW4oeCkge1xuICByZXR1cm4gbmV3IHRoaXMoeCkudGFuKCk7XG59XG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuIG5ldyB0aGlzKHgpLnRhbmgoKTtcbn1cbmZ1bmN0aW9uIHRydW5jKHgpIHtcbiAgcmV0dXJuIGZpbmFsaXNlKHggPSBuZXcgdGhpcyh4KSwgeC5lICsgMSwgMSk7XG59XG5QW1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKV0gPSBQLnRvU3RyaW5nO1xuUFtTeW1ib2wudG9TdHJpbmdUYWddID0gXCJEZWNpbWFsXCI7XG52YXIgRGVjaW1hbCA9IFAuY29uc3RydWN0b3IgPSBjbG9uZShERUZBVUxUUyk7XG5MTjEwID0gbmV3IERlY2ltYWwoTE4xMCk7XG5QSSA9IG5ldyBEZWNpbWFsKFBJKTtcbnZhciBkZWNpbWFsX2RlZmF1bHQgPSBEZWNpbWFsO1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvY29tcHV0ZS1lbmdpbmUudHNcbnZhciBpbXBvcnRfY29tcGxleDIwID0gX190b0VTTShyZXF1aXJlX2NvbXBsZXgoKSk7XG5cbi8vIHNyYy9jb21tb24vZ3JhcGhlbWUtc3BsaXR0ZXIudHNcbmZ1bmN0aW9uIHN0cmluZ1RvQ29kZXBvaW50cyhzdHJpbmcpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNvZGUgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoY29kZSA+PSA1NTI5NiAmJiBjb2RlIDw9IDU2MzE5KSB7XG4gICAgICBjb25zdCBuZXh0Q29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgIGlmIChuZXh0Q29kZSA+PSA1NjMyMCAmJiBuZXh0Q29kZSA8PSA1NzM0Mykge1xuICAgICAgICBjb25zdCBsZWFkID0gY29kZSAtIDU1Mjk2O1xuICAgICAgICBjb25zdCB0cmFpbCA9IG5leHRDb2RlIC0gNTYzMjA7XG4gICAgICAgIGNvZGUgPSAyICoqIDE2ICsgbGVhZCAqIDIgKiogMTAgKyB0cmFpbDtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQucHVzaChjb2RlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxudmFyIFpXSiA9IDgyMDU7XG52YXIgUkVHSU9OQUxfSU5ESUNBVE9SID0gWzEyNzQ2MiwgMTI3NDg3XTtcbmZ1bmN0aW9uIGlzRW1vamlDb21iaW5hdG9yKGNvZGUpIHtcbiAgaWYgKGNvZGUgPT09IFpXSilcbiAgICByZXR1cm4gdHJ1ZTtcbiAgaWYgKGNvZGUgPT09IDY1MDM4IHx8IGNvZGUgPT09IDY1MDM5KVxuICAgIHJldHVybiB0cnVlO1xuICBpZiAoY29kZSA+PSAxMjc5OTUgJiYgY29kZSA8PSAxMjc5OTUgKyA1KVxuICAgIHJldHVybiB0cnVlO1xuICBpZiAoY29kZSA+PSAxMjk0NTYgJiYgY29kZSA8PSAxMjk0NTYgKyA0KVxuICAgIHJldHVybiB0cnVlO1xuICBpZiAoY29kZSA+PSA5MTc1MzYgJiYgY29kZSA8PSA5MTc1MzYgKyA5NilcbiAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNSZWdpb25hbEluZGljYXRvcihjb2RlKSB7XG4gIHJldHVybiBjb2RlID49IFJFR0lPTkFMX0lORElDQVRPUlswXSAmJiBjb2RlIDw9IFJFR0lPTkFMX0lORElDQVRPUlsxXTtcbn1cbmZ1bmN0aW9uIHNwbGl0R3JhcGhlbWVzKHN0cmluZykge1xuICBpZiAoL15bXFx1MDAyMC1cXHUwMEZGXSokLy50ZXN0KHN0cmluZykpXG4gICAgcmV0dXJuIHN0cmluZztcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IGNvZGVQb2ludHMgPSBzdHJpbmdUb0NvZGVwb2ludHMoc3RyaW5nKTtcbiAgbGV0IGluZGV4ID0gMDtcbiAgd2hpbGUgKGluZGV4IDwgY29kZVBvaW50cy5sZW5ndGgpIHtcbiAgICBjb25zdCBjb2RlID0gY29kZVBvaW50c1tpbmRleCsrXTtcbiAgICBjb25zdCBuZXh0ID0gY29kZVBvaW50c1tpbmRleF07XG4gICAgaWYgKG5leHQgPT09IFpXSikge1xuICAgICAgY29uc3QgYmFzZUluZGV4ID0gaW5kZXggLSAxO1xuICAgICAgaW5kZXggKz0gMjtcbiAgICAgIHdoaWxlIChjb2RlUG9pbnRzW2luZGV4XSA9PT0gWldKKSB7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaChcbiAgICAgICAgU3RyaW5nLmZyb21Db2RlUG9pbnQoXG4gICAgICAgICAgLi4uY29kZVBvaW50cy5zbGljZShiYXNlSW5kZXgsIDIgKiBpbmRleCAtIGJhc2VJbmRleCArIDEpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc0Vtb2ppQ29tYmluYXRvcihuZXh0KSkge1xuICAgICAgY29uc3QgYmFzZUluZGV4ID0gaW5kZXggLSAxO1xuICAgICAgd2hpbGUgKGlzRW1vamlDb21iaW5hdG9yKGNvZGVQb2ludHNbaW5kZXhdKSkge1xuICAgICAgICBpbmRleCArPSBjb2RlUG9pbnRzW2luZGV4XSA9PT0gWldKID8gMiA6IDE7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaChcbiAgICAgICAgU3RyaW5nLmZyb21Db2RlUG9pbnQoXG4gICAgICAgICAgLi4uY29kZVBvaW50cy5zbGljZShiYXNlSW5kZXgsIDIgKiBpbmRleCAtIGJhc2VJbmRleCAtIDEpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1JlZ2lvbmFsSW5kaWNhdG9yKGNvZGUpKSB7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cy5zbGljZShpbmRleCAtIDIsIDIpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGUpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC90b2tlbml6ZXIudHNcbnZhciBUb2tlbml6ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHMpIHtcbiAgICB0aGlzLm9iZXlzcGFjZXMgPSBmYWxzZTtcbiAgICBzID0gcy5yZXBsYWNlKC9bXFx1MjAwRVxcdTIwMEZcXHUyMDY2LVxcdTIwNjlcXHUyMDJBLVxcdTIwMkVdL2csIFwiXCIpO1xuICAgIHRoaXMucyA9IHNwbGl0R3JhcGhlbWVzKHMpO1xuICAgIHRoaXMucG9zID0gMDtcbiAgfVxuICAvKipcbiAgICogQHJldHVybiBUcnVlIGlmIHdlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgc3RyZWFtXG4gICAqL1xuICBlbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zID49IHRoaXMucy5sZW5ndGg7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmV4dCBjaGFyIGFuZCBhZHZhbmNlXG4gICAqL1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zIDwgdGhpcy5zLmxlbmd0aCA/IHRoaXMuc1t0aGlzLnBvcysrXSA6IFwiXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmV4dCBjaGFyLCBidXQgZG8gbm90IGFkdmFuY2VcbiAgICovXG4gIHBlZWsoKSB7XG4gICAgcmV0dXJuIHRoaXMuc1t0aGlzLnBvc107XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmV4dCBzdWJzdHJpbmcgbWF0Y2hpbmcgcmVnRXggYW5kIGFkdmFuY2UuXG4gICAqL1xuICBtYXRjaChyZWdFeCkge1xuICAgIGxldCBleGVjUmVzdWx0O1xuICAgIGlmICh0eXBlb2YgdGhpcy5zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBleGVjUmVzdWx0ID0gcmVnRXguZXhlYyh0aGlzLnMuc2xpY2UodGhpcy5wb3MpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhlY1Jlc3VsdCA9IHJlZ0V4LmV4ZWModGhpcy5zLnNsaWNlKHRoaXMucG9zKS5qb2luKFwiXCIpKTtcbiAgICB9XG4gICAgaWYgKGV4ZWNSZXN1bHQ/LlswXSkge1xuICAgICAgdGhpcy5wb3MgKz0gZXhlY1Jlc3VsdFswXS5sZW5ndGg7XG4gICAgICByZXR1cm4gZXhlY1Jlc3VsdFswXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmV4dCB0b2tlbiwgb3IgbnVsbC5cbiAgICovXG4gIG5leHQoKSB7XG4gICAgaWYgKHRoaXMuZW5kKCkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpZiAoIXRoaXMub2JleXNwYWNlcyAmJiB0aGlzLm1hdGNoKC9eWyBcXGZcXG5cXHJcXHRcXHZcXHhBMFxcdTIwMjhcXHUyMDI5XSsvKSkge1xuICAgICAgcmV0dXJuIFwiPHNwYWNlPlwiO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vYmV5c3BhY2VzICYmIHRoaXMubWF0Y2goL15bIFxcZlxcblxcclxcdFxcdlxceEEwXFx1MjAyOFxcdTIwMjldLykpIHtcbiAgICAgIHJldHVybiBcIjxzcGFjZT5cIjtcbiAgICB9XG4gICAgY29uc3QgbmV4dCA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKG5leHQgPT09IFwiXFxcXFwiKSB7XG4gICAgICBpZiAoIXRoaXMuZW5kKCkpIHtcbiAgICAgICAgbGV0IGNvbW1hbmQgPSB0aGlzLm1hdGNoKC9eW2EtekEtWipdKy8pO1xuICAgICAgICBpZiAoY29tbWFuZCkge1xuICAgICAgICAgIHRoaXMubWF0Y2goL15bIFxcZlxcblxcclxcdFxcdlxceEEwXFx1MjAyOFxcdTIwMjldKi8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbW1hbmQgPSB0aGlzLmdldCgpO1xuICAgICAgICAgIGlmIChjb21tYW5kID09PSBcIiBcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiPHNwYWNlPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcXFxcXCIgKyBjb21tYW5kO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV4dCA9PT0gXCJ7XCIpIHtcbiAgICAgIHJldHVybiBcIjx7PlwiO1xuICAgIH0gZWxzZSBpZiAobmV4dCA9PT0gXCJ9XCIpIHtcbiAgICAgIHJldHVybiBcIjx9PlwiO1xuICAgIH0gZWxzZSBpZiAobmV4dCA9PT0gXCJeXCIpIHtcbiAgICAgIGlmICh0aGlzLnBlZWsoKSA9PT0gXCJeXCIpIHtcbiAgICAgICAgdGhpcy5nZXQoKTtcbiAgICAgICAgY29uc3QgaGV4ID0gdGhpcy5tYXRjaChcbiAgICAgICAgICAvXihcXF4oXFxeKFxcXihcXF5bMC05YS1mXSk/WzAtOWEtZl0pP1swLTlhLWZdKT9bMC05YS1mXSk/WzAtOWEtZl1bMC05YS1mXS9cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGhleCkge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChcbiAgICAgICAgICAgIHBhcnNlSW50KGhleC5zbGljZShoZXgubGFzdEluZGV4T2YoXCJeXCIpICsgMSksIDE2KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0gZWxzZSBpZiAobmV4dCA9PT0gXCIjXCIpIHtcbiAgICAgIGlmICghdGhpcy5lbmQoKSkge1xuICAgICAgICBsZXQgaXNQYXJhbSA9IGZhbHNlO1xuICAgICAgICBpZiAoL1swLTk/XS8udGVzdCh0aGlzLnBlZWsoKSkpIHtcbiAgICAgICAgICBpc1BhcmFtID0gdHJ1ZTtcbiAgICAgICAgICBpZiAodGhpcy5wb3MgKyAxIDwgdGhpcy5zLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgYWZ0ZXIgPSB0aGlzLnNbdGhpcy5wb3MgKyAxXTtcbiAgICAgICAgICAgIGlzUGFyYW0gPSAvW14wLTlBLVphLXpdLy50ZXN0KGFmdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUGFyYW0pIHtcbiAgICAgICAgICByZXR1cm4gXCIjXCIgKyB0aGlzLmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIiNcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5leHQgPT09IFwiJFwiKSB7XG4gICAgICBpZiAodGhpcy5wZWVrKCkgPT09IFwiJFwiKSB7XG4gICAgICAgIHRoaXMuZ2V0KCk7XG4gICAgICAgIHJldHVybiBcIjwkJD5cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIjwkPlwiO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dDtcbiAgfVxufTtcbmZ1bmN0aW9uIGV4cGFuZChsZXgyLCBhcmdzKSB7XG4gIGxldCB0b2tlbiA9IGxleDIubmV4dCgpO1xuICBpZiAoIXRva2VuKVxuICAgIHJldHVybiBbXTtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICBpZiAodG9rZW4gPT09IFwiXFxcXHJlbGF4XCIpIHtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gXCJcXFxcbm9leHBhbmRcIikge1xuICAgIHRva2VuID0gbGV4Mi5uZXh0KCk7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICByZXN1bHQucHVzaCh0b2tlbik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHRva2VuID09PSBcIlxcXFxvYmV5c3BhY2VzXCIpIHtcbiAgICBsZXgyLm9iZXlzcGFjZXMgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSBcIlxcXFxzcGFjZVwiIHx8IHRva2VuID09PSBcIn5cIikge1xuICAgIHJlc3VsdC5wdXNoKFwiPHNwYWNlPlwiKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gXCJcXFxcYmdyb3VwXCIpIHtcbiAgICByZXN1bHQucHVzaChcIjx7PlwiKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gXCJcXFxcZWdyb3VwXCIpIHtcbiAgICByZXN1bHQucHVzaChcIjx9PlwiKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gXCJcXFxcc3RyaW5nXCIpIHtcbiAgICB0b2tlbiA9IGxleDIubmV4dCgpO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgaWYgKHRva2VuWzBdID09PSBcIlxcXFxcIikge1xuICAgICAgICBBcnJheS5mcm9tKHRva2VuKS5mb3JFYWNoKFxuICAgICAgICAgICh4KSA9PiByZXN1bHQucHVzaCh4ID09PSBcIlxcXFxcIiA/IFwiXFxcXGJhY2tzbGFzaFwiIDogeClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFwiPHs+XCIpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goXCJcXFxce1wiKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFwiPHNwYWNlPlwiKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFwiflwiKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFwiPH0+XCIpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goXCJcXFxcfVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09IFwiXFxcXGNzbmFtZVwiKSB7XG4gICAgd2hpbGUgKGxleDIucGVlaygpID09PSBcIjxzcGFjZT5cIikge1xuICAgICAgbGV4Mi5uZXh0KCk7XG4gICAgfVxuICAgIGxldCBjb21tYW5kID0gXCJcIjtcbiAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgIGxldCB0b2tlbnMgPSBbXTtcbiAgICBkbyB7XG4gICAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoL14jWzAtOT9dJC8udGVzdChsZXgyLnBlZWsoKSkpIHtcbiAgICAgICAgICBjb25zdCBwYXJhbSA9IGxleDIuZ2V0KCkuc2xpY2UoMSk7XG4gICAgICAgICAgdG9rZW5zID0gdG9rZW5pemUoXG4gICAgICAgICAgICBhcmdzPy5bcGFyYW1dID8/IGFyZ3M/LltcIj9cIl0gPz8gXCJcXFxccGxhY2Vob2xkZXJ7fVwiLFxuICAgICAgICAgICAgYXJnc1xuICAgICAgICAgICk7XG4gICAgICAgICAgdG9rZW4gPSB0b2tlbnNbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW4gPSBsZXgyLm5leHQoKTtcbiAgICAgICAgICB0b2tlbnMgPSB0b2tlbiA/IFt0b2tlbl0gOiBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZG9uZSA9IHRva2Vucy5sZW5ndGggPT09IDA7XG4gICAgICBpZiAoIWRvbmUgJiYgdG9rZW4gPT09IFwiXFxcXGVuZGNzbmFtZVwiKSB7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICB0b2tlbnMuc2hpZnQoKTtcbiAgICAgIH1cbiAgICAgIGlmICghZG9uZSkge1xuICAgICAgICBkb25lID0gdG9rZW4gPT09IFwiPCQ+XCIgfHwgdG9rZW4gPT09IFwiPCQkPlwiIHx8IHRva2VuID09PSBcIjx7PlwiIHx8IHRva2VuID09PSBcIjx9PlwiIHx8ICEhdG9rZW4gJiYgdG9rZW4ubGVuZ3RoID4gMSAmJiB0b2tlblswXSA9PT0gXCJcXFxcXCI7XG4gICAgICB9XG4gICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgY29tbWFuZCArPSB0b2tlbnMuc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9IHdoaWxlICghZG9uZSk7XG4gICAgaWYgKGNvbW1hbmQpIHtcbiAgICAgIHJlc3VsdC5wdXNoKFwiXFxcXFwiICsgY29tbWFuZCk7XG4gICAgfVxuICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodG9rZW5zKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gXCJcXFxcZW5kY3NuYW1lXCIpIHtcbiAgfSBlbHNlIGlmICh0b2tlbi5sZW5ndGggPiAxICYmIHRva2VuWzBdID09PSBcIiNcIikge1xuICAgIGNvbnN0IHBhcmFtID0gdG9rZW4uc2xpY2UoMSk7XG4gICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChcbiAgICAgIHRva2VuaXplKGFyZ3M/LltwYXJhbV0gPz8gYXJncz8uW1wiP1wiXSA/PyBcIlxcXFxwbGFjZWhvbGRlcnt9XCIsIGFyZ3MpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQucHVzaCh0b2tlbik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRva2VuaXplKHMsIGFyZ3MpIHtcbiAgY29uc3QgbGluZXMgPSBzLnRvU3RyaW5nKCkuc3BsaXQoL1xccj9cXG4vKTtcbiAgbGV0IHN0cmVhbSA9IFwiXCI7XG4gIGxldCBzZXAgPSBcIlwiO1xuICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICBzdHJlYW0gKz0gc2VwO1xuICAgIHNlcCA9IFwiIFwiO1xuICAgIGNvbnN0IG0gPSBsaW5lLm1hdGNoKC8oKD86XFxcXCUpfFteJV0pKi8pO1xuICAgIGlmIChtICE9PSBudWxsKVxuICAgICAgc3RyZWFtICs9IG1bMF07XG4gIH1cbiAgY29uc3QgdG9rZW5pemVyID0gbmV3IFRva2VuaXplcihzdHJlYW0pO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZG9cbiAgICByZXN1bHQucHVzaCguLi5leHBhbmQodG9rZW5pemVyLCBhcmdzKSk7XG4gIHdoaWxlICghdG9rZW5pemVyLmVuZCgpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvdW50VG9rZW5zKHMpIHtcbiAgcmV0dXJuIHRva2VuaXplKHMsIFtdKS5sZW5ndGg7XG59XG5mdW5jdGlvbiBqb2luTGF0ZXgoc2VnbWVudHMpIHtcbiAgbGV0IHNlcCA9IFwiXCI7XG4gIGxldCByZXN1bHQgPSBcIlwiO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBpZiAoc2VnbWVudCkge1xuICAgICAgaWYgKC9bYS16QS1aKl0vLnRlc3Qoc2VnbWVudFswXSkpIHtcbiAgICAgICAgcmVzdWx0ICs9IHNlcDtcbiAgICAgIH1cbiAgICAgIGlmICgvXFxcXFthLXpBLVpdK1xcKj8kLy50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHNlcCA9IFwiIFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VwID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCArPSBzZWdtZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdG9rZW5zVG9TdHJpbmcodG9rZW5zKSB7XG4gIGxldCBmbGF0ID0gW107XG4gIGlmIChBcnJheS5pc0FycmF5KHRva2VucykpIHtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdG9rZW5zKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgICAgICBmbGF0ID0gWy4uLmZsYXQsIC4uLml0ZW1dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxhdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmbGF0ID0gW3Rva2Vuc107XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gam9pbkxhdGV4KFxuICAgIGZsYXQubWFwKCh0b2tlbikgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgXCI8c3BhY2U+XCI6IFwiIFwiLFxuICAgICAgICBcIjwkJD5cIjogXCIkJFwiLFxuICAgICAgICBcIjwkPlwiOiBcIiRcIixcbiAgICAgICAgXCI8ez5cIjogXCJ7XCIsXG4gICAgICAgIFwiPH0+XCI6IFwifVwiXG4gICAgICB9W3Rva2VuXSA/PyB0b2tlbjtcbiAgICB9KVxuICApO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGF0ZXgtc3ludGF4L2RpY3Rpb25hcnkvZGVmaW5pdGlvbnMtYWxnZWJyYS50c1xudmFyIERFRklOSVRJT05TX0FMR0VCUkEgPSBbXG4gIHtcbiAgICBuYW1lOiBcIlRvXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcdG9cIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIHByZWNlZGVuY2U6IDI3MFxuICAgIC8vIE1hdGhNTCByaWdodHdhcmRzIGFycm93XG4gIH1cbl07XG5cbi8vIHNyYy9tYXRoLWpzb24vdXRpbHMudHNcbnZhciBNSVNTSU5HID0gW1wiRXJyb3JcIiwgXCInbWlzc2luZydcIl07XG5mdW5jdGlvbiBpc051bWJlckV4cHJlc3Npb24oZXhwcikge1xuICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgZXhwciA9PT0gXCJudW1iZXJcIiB8fCBpc051bWJlck9iamVjdChleHByKSlcbiAgICByZXR1cm4gdHJ1ZTtcbiAgaWYgKHR5cGVvZiBleHByID09PSBcInN0cmluZ1wiICYmIC9eWystXT9bMC05XFwuXS8udGVzdChleHByKSlcbiAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNOdW1iZXJPYmplY3QoZXhwcikge1xuICByZXR1cm4gZXhwciAhPT0gbnVsbCAmJiB0eXBlb2YgZXhwciA9PT0gXCJvYmplY3RcIiAmJiBcIm51bVwiIGluIGV4cHI7XG59XG5mdW5jdGlvbiBpc1N5bWJvbE9iamVjdChleHByKSB7XG4gIHJldHVybiBleHByICE9PSBudWxsICYmIHR5cGVvZiBleHByID09PSBcIm9iamVjdFwiICYmIFwic3ltXCIgaW4gZXhwcjtcbn1cbmZ1bmN0aW9uIGlzU3RyaW5nT2JqZWN0KGV4cHIpIHtcbiAgcmV0dXJuIGV4cHIgIT09IG51bGwgJiYgdHlwZW9mIGV4cHIgPT09IFwib2JqZWN0XCIgJiYgXCJzdHJcIiBpbiBleHByO1xufVxuZnVuY3Rpb24gaXNGdW5jdGlvbk9iamVjdChleHByKSB7XG4gIHJldHVybiBleHByICE9PSBudWxsICYmIHR5cGVvZiBleHByID09PSBcIm9iamVjdFwiICYmIFwiZm5cIiBpbiBleHByO1xufVxudmFyIHJlY29tbWVuZGVkU2NyaXB0c1JlZ2V4O1xuZnVuY3Rpb24gaXNSZWNvbW1lbmRlZFNjcmlwdHModGV4dCkge1xuICBpZiAoIXJlY29tbWVuZGVkU2NyaXB0c1JlZ2V4KSB7XG4gICAgY29uc3QgcmVjb21tZW5kZWRTY3JpcHRzID0gW1xuICAgICAgXCJaeXl5XCIsXG4gICAgICBcIlppbmhcIixcbiAgICAgIFwiQXJhYlwiLFxuICAgICAgXCJBcm1uXCIsXG4gICAgICBcIkJlbmdcIixcbiAgICAgIFwiQm9wb1wiLFxuICAgICAgXCJDeXJsXCIsXG4gICAgICBcIkRldmFcIixcbiAgICAgIFwiRXRoaVwiLFxuICAgICAgXCJHZW9yXCIsXG4gICAgICBcIkdyZWtcIixcbiAgICAgIFwiR3VqclwiLFxuICAgICAgXCJHdXJ1XCIsXG4gICAgICBcIkhhbmdcIixcbiAgICAgIFwiSGFuaVwiLFxuICAgICAgXCJIZWJyXCIsXG4gICAgICBcIkhpcmFcIixcbiAgICAgIFwiS2FuYVwiLFxuICAgICAgXCJLbmRhXCIsXG4gICAgICBcIktobXJcIixcbiAgICAgIFwiTGFvb1wiLFxuICAgICAgXCJMYXRuXCIsXG4gICAgICBcIk1seW1cIixcbiAgICAgIFwiTXltclwiLFxuICAgICAgXCJPcnlhXCIsXG4gICAgICBcIlNpbmhcIixcbiAgICAgIFwiVGFtbFwiLFxuICAgICAgXCJUZWx1XCIsXG4gICAgICBcIlRoYWFcIixcbiAgICAgIFwiVGhhaVwiLFxuICAgICAgXCJUaWJ0XCJcbiAgICBdO1xuICAgIGNvbnN0IHJlZ2V4UGF0dGVybiA9IGBeWyR7cmVjb21tZW5kZWRTY3JpcHRzLm1hcCgoeCkgPT4gYFxcXFxwe1NjcmlwdD0ke3h9fWApLmpvaW4oXCJcIil9XSokYDtcbiAgICByZWNvbW1lbmRlZFNjcmlwdHNSZWdleCA9IG5ldyBSZWdFeHAocmVnZXhQYXR0ZXJuLCBcInVcIik7XG4gIH1cbiAgcmV0dXJuIHJlY29tbWVuZGVkU2NyaXB0c1JlZ2V4LnRlc3QodGV4dCk7XG59XG5mdW5jdGlvbiBpc1ZhbGlkSWRlbnRpZmllcihzKSB7XG4gIGlmICgvXlthLXpBLVpfXVthLXpBLVowLTlfXSokLy50ZXN0KHMpKVxuICAgIHJldHVybiB0cnVlO1xuICBpZiAoT05MWV9FTU9KSVMudGVzdChzKSlcbiAgICByZXR1cm4gdHJ1ZTtcbiAgaWYgKCFpc1JlY29tbWVuZGVkU2NyaXB0cyhzKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAvXltcXHB7WElEU31fXVxccHtYSURDfSokL3UudGVzdChzKTtcbn1cbnZhciBWUzE2ID0gXCJcXFxcdXtGRTBGfVwiO1xudmFyIEtFWUNBUCA9IFwiXFxcXHV7MjBFM31cIjtcbnZhciBaV0oyID0gXCJcXFxcdXsyMDBEfVwiO1xudmFyIEZMQUdfU0VRVUVOQ0UgPSBcIlxcXFxwe1JJfVxcXFxwe1JJfVwiO1xudmFyIFRBR19NT0QgPSBgKD86W1xcXFx1e0UwMDIwfS1cXFxcdXtFMDA3RX1dK1xcXFx1e0UwMDdGfSlgO1xudmFyIEVNT0pJX01PRCA9IGAoPzpcXFxccHtFTW9kfXwke1ZTMTZ9JHtLRVlDQVB9P3wke1RBR19NT0R9KWA7XG52YXIgRU1PSklfTk9UX0lERU5USUZJRVIgPSBgKD86KD89XFxcXFB7WElEQ30pXFxcXHB7RW1vaml9KWA7XG52YXIgWldKX0VMRU1FTlQgPSBgKD86JHtFTU9KSV9OT1RfSURFTlRJRklFUn0ke0VNT0pJX01PRH0qfFxcXFxwe0Vtb2ppfSR7RU1PSklfTU9EfSt8JHtGTEFHX1NFUVVFTkNFfSlgO1xudmFyIFBPU1NJQkxFX0VNT0pJID0gYCg/OiR7WldKX0VMRU1FTlR9KSgke1pXSjJ9JHtaV0pfRUxFTUVOVH0pKmA7XG52YXIgU09NRV9FTU9KSSA9IG5ldyBSZWdFeHAoYCg/OiR7UE9TU0lCTEVfRU1PSkl9KStgLCBcInVcIik7XG52YXIgT05MWV9FTU9KSVMgPSBuZXcgUmVnRXhwKGBeKD86JHtQT1NTSUJMRV9FTU9KSX0pKyRgLCBcInVcIik7XG5mdW5jdGlvbiB2YWxpZGF0ZUlkZW50aWZpZXIocykge1xuICBpZiAodHlwZW9mIHMgIT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIFwibm90LWEtc3RyaW5nXCI7XG4gIGlmIChzID09PSBcIlwiKVxuICAgIHJldHVybiBcImVtcHR5LXN0cmluZ1wiO1xuICBpZiAocy5ub3JtYWxpemUoKSAhPT0gcylcbiAgICByZXR1cm4gXCJleHBlY3RlZC1uZmNcIjtcbiAgaWYgKC9bXFx1MjAwRVxcdTIwMEZcXHUyMDY2LVxcdTIwNjlcXHUyMDJBLVxcdTIwMkVdLy50ZXN0KHMpKVxuICAgIHJldHVybiBcInVuZXhwZWN0ZWQtYmlkaS1tYXJrZXJcIjtcbiAgaWYgKE9OTFlfRU1PSklTLnRlc3QocykpXG4gICAgcmV0dXJuIFwidmFsaWRcIjtcbiAgaWYgKC9cXHB7WElEQ30vdS50ZXN0KHMpICYmIFNPTUVfRU1PSkkudGVzdChzKSlcbiAgICByZXR1cm4gXCJ1bmV4cGVjdGVkLW1peGVkLWVtb2ppXCI7XG4gIGlmICghaXNSZWNvbW1lbmRlZFNjcmlwdHMocykpXG4gICAgcmV0dXJuIFwidW5leHBlY3RlZC1zY3JpcHRcIjtcbiAgaWYgKCFpc1ZhbGlkSWRlbnRpZmllcihzKSkge1xuICAgIGlmICghaXNWYWxpZElkZW50aWZpZXIoc1swXSkpXG4gICAgICByZXR1cm4gXCJpbnZhbGlkLWZpcnN0LWNoYXJcIjtcbiAgICByZXR1cm4gXCJpbnZhbGlkLWNoYXJcIjtcbiAgfVxuICByZXR1cm4gXCJ2YWxpZFwiO1xufVxuZnVuY3Rpb24gc3RyaW5nVmFsdWUoZXhwcikge1xuICBpZiAoZXhwciA9PT0gbnVsbCB8fCBleHByID09PSB2b2lkIDApXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0eXBlb2YgZXhwciA9PT0gXCJvYmplY3RcIiAmJiBcInN0clwiIGluIGV4cHIpXG4gICAgcmV0dXJuIGV4cHIuc3RyO1xuICBpZiAodHlwZW9mIGV4cHIgIT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmIChleHByLmxlbmd0aCA8IDIpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmIChleHByWzBdICE9PSBcIidcIiB8fCBleHByW2V4cHIubGVuZ3RoIC0gMV0gIT09IFwiJ1wiKVxuICAgIHJldHVybiBudWxsO1xuICByZXR1cm4gZXhwci5zdWJzdHJpbmcoMSwgZXhwci5sZW5ndGggLSAxKTtcbn1cbmZ1bmN0aW9uIHN0cmlwVGV4dChleHByKSB7XG4gIGlmIChleHByID09PSBudWxsIHx8IGV4cHIgPT09IHZvaWQgMCB8fCBzdHJpbmdWYWx1ZShleHByKSAhPT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgaCA9IGhlYWQoZXhwcik7XG4gIGlmIChoICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGgsXG4gICAgICAuLi4ob3BzKGV4cHIpID8/IFtdKS5tYXAoKHgpID0+IHN0cmlwVGV4dCh4KSkuZmlsdGVyKCh4KSA9PiB4ICE9PSBudWxsKVxuICAgIF07XG4gIH1cbiAgcmV0dXJuIGV4cHI7XG59XG5mdW5jdGlvbiBoZWFkKGV4cHIpIHtcbiAgaWYgKGV4cHIgPT09IG51bGwgfHwgZXhwciA9PT0gdm9pZCAwKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAoQXJyYXkuaXNBcnJheShleHByKSkge1xuICAgIGlmICh0eXBlb2YgZXhwclswXSA9PT0gXCJzdHJpbmdcIiAmJiAhaXNWYWxpZElkZW50aWZpZXIoZXhwclswXSkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIGlkZW50aWZpZXIgXCIke2V4cHJbMF19XCI6ICR7dmFsaWRhdGVJZGVudGlmaWVyKGV4cHJbMF0pfWBcbiAgICAgICk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHJbMF07XG4gIH1cbiAgaWYgKGlzRnVuY3Rpb25PYmplY3QoZXhwcikpXG4gICAgcmV0dXJuIGV4cHIuZm5bMF07XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaGVhZE5hbWUoZXhwcikge1xuICBjb25zdCBoID0gaGVhZChleHByKTtcbiAgcmV0dXJuIHR5cGVvZiBoID09PSBcInN0cmluZ1wiID8gaCA6IFwiXCI7XG59XG5mdW5jdGlvbiBvcHMoZXhwcikge1xuICBpZiAoZXhwciA9PT0gbnVsbCB8fCBleHByID09PSB2b2lkIDApXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cHIpKVxuICAgIHJldHVybiBleHByLnNsaWNlKDEpO1xuICBpZiAoaXNGdW5jdGlvbk9iamVjdChleHByKSlcbiAgICByZXR1cm4gZXhwci5mbi5zbGljZSgxKTtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBvcChleHByLCBuKSB7XG4gIGlmIChleHByID09PSBudWxsIHx8IGV4cHIgPT09IHZvaWQgMClcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwcikpXG4gICAgcmV0dXJuIGV4cHJbbl0gPz8gbnVsbDtcbiAgaWYgKGlzRnVuY3Rpb25PYmplY3QoZXhwcikpXG4gICAgcmV0dXJuIGV4cHIuZm5bbl0gPz8gbnVsbDtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBvcDEoZXhwcikge1xuICByZXR1cm4gb3AoZXhwciwgMSk7XG59XG5mdW5jdGlvbiBvcDIoZXhwcikge1xuICByZXR1cm4gb3AoZXhwciwgMik7XG59XG5mdW5jdGlvbiBub3BzKGV4cHIpIHtcbiAgaWYgKGV4cHIgPT09IG51bGwgfHwgZXhwciA9PT0gdm9pZCAwKVxuICAgIHJldHVybiAwO1xuICBpZiAoQXJyYXkuaXNBcnJheShleHByKSlcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwci5sZW5ndGggLSAxKTtcbiAgaWYgKGlzRnVuY3Rpb25PYmplY3QoZXhwcikpXG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cHIuZm4ubGVuZ3RoIC0gMSk7XG4gIHJldHVybiAwO1xufVxuZnVuY3Rpb24gc3ltYm9sKGV4cHIpIHtcbiAgaWYgKGV4cHIgPT09IG51bGwgfHwgZXhwciA9PT0gdm9pZCAwKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAodHlwZW9mIGV4cHIgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoL15bK1xcLVxcLjAtOV0vLnRlc3QoZXhwcikpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpZiAoZXhwci5sZW5ndGggPj0gMiAmJiBleHByWzBdID09PSBcIidcIiAmJiBleHByW2V4cHIubGVuZ3RoIC0gMV0gPT09IFwiJ1wiKVxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgcyA9IGlzU3ltYm9sT2JqZWN0KGV4cHIpID8gZXhwci5zeW0gOiBleHByO1xuICBpZiAodHlwZW9mIHMgIT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIG51bGw7XG4gIHJldHVybiBzO1xufVxuZnVuY3Rpb24gaXNMaXN0TGlrZShleHByKSB7XG4gIGlmIChleHByID09PSBudWxsKVxuICAgIHJldHVybiBmYWxzZTtcbiAgY29uc3QgaCA9IGhlYWQoZXhwcik7XG4gIGlmICghaCB8fCB0eXBlb2YgaCAhPT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAvXihMaXN0fFNlcXVlbmNlfFR1cGxlfFNpbmdsZXxQYWlyfFRyaXBsZSkkLy50ZXN0KGgpO1xufVxuZnVuY3Rpb24ga2V5VmFsdWVQYWlyKGV4cHIpIHtcbiAgY29uc3QgaCA9IGhlYWQoZXhwcik7XG4gIGlmIChoID09PSBcIktleVZhbHVlUGFpclwiIHx8IGggPT09IFwiVHVwbGVcIiB8fCBoID09PSBcIlBhaXJcIikge1xuICAgIGNvbnN0IGtleSA9IHN0cmluZ1ZhbHVlKG9wMShleHByKSk7XG4gICAgaWYgKCFrZXkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gW2tleSwgb3AyKGV4cHIpID8/IFwiTm90aGluZ1wiXTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGRpY3Rpb25hcnkoZXhwcikge1xuICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKHR5cGVvZiBleHByID09PSBcIm9iamVjdFwiICYmIFwiZGljdFwiIGluIGV4cHIpXG4gICAgcmV0dXJuIGV4cHIuZGljdDtcbiAgY29uc3Qga3YgPSBrZXlWYWx1ZVBhaXIoZXhwcik7XG4gIGlmIChrdilcbiAgICByZXR1cm4geyBba3ZbMF1dOiBrdlsxXSB9O1xuICBjb25zdCBoID0gaGVhZChleHByKTtcbiAgaWYgKGggPT09IFwiRGljdGlvbmFyeVwiKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBub3BzKGV4cHIpOyBpKyspIHtcbiAgICAgIGNvbnN0IGt2MiA9IGtleVZhbHVlUGFpcihvcChleHByLCBpKSk7XG4gICAgICBpZiAoa3YyKVxuICAgICAgICByZXN1bHRba3YyWzBdXSA9IGt2MlsxXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG1hY2hpbmVWYWx1ZU9mU3RyaW5nKHMpIHtcbiAgcyA9IHMudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bbmRdJC9nLCBcIlwiKS5yZXBsYWNlKC9bXFx1MDAwOS1cXHUwMDBkXFx1MDAyMFxcdTAwYTBdL2csIFwiXCIpO1xuICBpZiAocyA9PT0gXCJuYW5cIilcbiAgICByZXR1cm4gTmFOO1xuICBpZiAocyA9PT0gXCIraW5maW5pdHlcIilcbiAgICByZXR1cm4gSW5maW5pdHk7XG4gIGlmIChzID09PSBcIi1pbmZpbml0eVwiKVxuICAgIHJldHVybiAtSW5maW5pdHk7XG4gIGlmICgvXFwoWzAtOV0rXFwpLy50ZXN0KHMpKSB7XG4gICAgY29uc3QgW18sIGJvZHksIHJlcGVhdCwgdHJhaWxdID0gcy5tYXRjaCgvKC4rKVxcKChbMC05XSspXFwpKC4qKSQvKSA/PyBbXTtcbiAgICBzID0gYm9keSArIHJlcGVhdC5yZXBlYXQoTWF0aC5jZWlsKDE2IC8gcmVwZWF0Lmxlbmd0aCkpICsgKHRyYWlsID8/IFwiXCIpO1xuICB9XG4gIHJldHVybiBwYXJzZUZsb2F0KHMpO1xufVxuZnVuY3Rpb24gbWFjaGluZVZhbHVlKGV4cHIpIHtcbiAgaWYgKGV4cHIgPT09IG51bGwgfHwgZXhwciA9PT0gdm9pZCAwKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAodHlwZW9mIGV4cHIgPT09IFwibnVtYmVyXCIpXG4gICAgcmV0dXJuIGV4cHI7XG4gIGlmICh0eXBlb2YgZXhwciA9PT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gbWFjaGluZVZhbHVlT2ZTdHJpbmcoZXhwcik7XG4gIGlmIChpc051bWJlck9iamVjdChleHByKSlcbiAgICByZXR1cm4gbWFjaGluZVZhbHVlKGV4cHIubnVtKTtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiByYXRpb25hbFZhbHVlKGV4cHIpIHtcbiAgaWYgKGV4cHIgPT09IHZvaWQgMCB8fCBleHByID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAoc3ltYm9sKGV4cHIpID09PSBcIkhhbGZcIilcbiAgICByZXR1cm4gWzEsIDJdO1xuICBjb25zdCBoID0gaGVhZChleHByKTtcbiAgaWYgKCFoKVxuICAgIHJldHVybiBudWxsO1xuICBsZXQgbnVtZXIgPSBudWxsO1xuICBsZXQgZGVub20gPSBudWxsO1xuICBpZiAoaCA9PT0gXCJOZWdhdGVcIikge1xuICAgIGNvbnN0IHIgPSByYXRpb25hbFZhbHVlKG9wMShleHByKSk7XG4gICAgaWYgKHIpXG4gICAgICByZXR1cm4gWy1yWzBdLCByWzFdXTtcbiAgfVxuICBpZiAoaCA9PT0gXCJSYXRpb25hbFwiIHx8IGggPT09IFwiRGl2aWRlXCIpIHtcbiAgICBudW1lciA9IG1hY2hpbmVWYWx1ZShvcDEoZXhwcikpID8/IE5hTjtcbiAgICBkZW5vbSA9IG1hY2hpbmVWYWx1ZShvcDIoZXhwcikpID8/IE5hTjtcbiAgfVxuICBpZiAoaCA9PT0gXCJQb3dlclwiKSB7XG4gICAgY29uc3QgZXhwb25lbnQgPSBtYWNoaW5lVmFsdWUob3AyKGV4cHIpKTtcbiAgICBpZiAoZXhwb25lbnQgPT09IDEpIHtcbiAgICAgIG51bWVyID0gbWFjaGluZVZhbHVlKG9wMShleHByKSk7XG4gICAgICBkZW5vbSA9IDE7XG4gICAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gLTEpIHtcbiAgICAgIG51bWVyID0gMTtcbiAgICAgIGRlbm9tID0gbWFjaGluZVZhbHVlKG9wMShleHByKSk7XG4gICAgfVxuICB9XG4gIGlmIChoID09PSBcIk11bHRpcGx5XCIgJiYgaGVhZChvcDIoZXhwcikpID09PSBcIlBvd2VyXCIgJiYgbWFjaGluZVZhbHVlKG9wMihvcDIoZXhwcikpKSA9PT0gLTEpIHtcbiAgICBudW1lciA9IG1hY2hpbmVWYWx1ZShvcDEoZXhwcikpO1xuICAgIGRlbm9tID0gbWFjaGluZVZhbHVlKG9wMShvcDIoZXhwcikpKTtcbiAgfVxuICBpZiAobnVtZXIgPT09IG51bGwgfHwgZGVub20gPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmIChOdW1iZXIuaXNJbnRlZ2VyKG51bWVyKSAmJiBOdW1iZXIuaXNJbnRlZ2VyKGRlbm9tKSlcbiAgICByZXR1cm4gW251bWVyLCBkZW5vbV07XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gc3VicyhleHByLCBzKSB7XG4gIGNvbnN0IGggPSBoZWFkKGV4cHIpO1xuICBpZiAoaCAhPT0gbnVsbClcbiAgICByZXR1cm4gW3N1YnMoaCwgcyksIC4uLihvcHMoZXhwcikgPz8gW10pLm1hcCgoeCkgPT4gc3Vicyh4LCBzKSldO1xuICBjb25zdCBkaWN0ID0gZGljdGlvbmFyeShleHByKTtcbiAgaWYgKGRpY3QgIT09IG51bGwpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGljdCk7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cylcbiAgICAgIHJlc3VsdFtrZXldID0gc3VicyhkaWN0W2tleV0sIHMpO1xuICAgIHJldHVybiB7IGRpY3Q6IHJlc3VsdCB9O1xuICB9XG4gIGNvbnN0IHN5bSA9IHN5bWJvbChleHByKTtcbiAgaWYgKHN5bSAmJiBzW3N5bV0pXG4gICAgcmV0dXJuIHNbc3ltXTtcbiAgcmV0dXJuIGV4cHI7XG59XG5mdW5jdGlvbiBtYXBBcmdzKGV4cHIsIGZuKSB7XG4gIGxldCBhcmdzID0gbnVsbDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwcikpXG4gICAgYXJncyA9IGV4cHI7XG4gIGlmIChpc0Z1bmN0aW9uT2JqZWN0KGV4cHIpKVxuICAgIGFyZ3MgPSBleHByLmZuO1xuICBpZiAoYXJncyA9PT0gbnVsbClcbiAgICByZXR1cm4gW107XG4gIGxldCBpID0gMTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICByZXN1bHQucHVzaChmbihhcmdzW2ldKSk7XG4gICAgaSArPSAxO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBhcHBseUFzc29jaWF0aXZlT3BlcmF0b3Iob3AzLCBsaHMsIHJocywgYXNzb2NpYXRpdml0eSA9IFwiYm90aFwiKSB7XG4gIGlmIChhc3NvY2lhdGl2aXR5ID09PSBcIm5vblwiKVxuICAgIHJldHVybiBbb3AzLCBsaHMsIHJoc107XG4gIGNvbnN0IGxoc05hbWUgPSBoZWFkKGxocyk7XG4gIGNvbnN0IHJoc05hbWUgPSBoZWFkKHJocyk7XG4gIGlmIChhc3NvY2lhdGl2aXR5ID09PSBcImxlZnRcIikge1xuICAgIGlmIChsaHNOYW1lID09PSBvcDMpXG4gICAgICByZXR1cm4gW29wMywgLi4ub3BzKGxocykgPz8gW10sIHJoc107XG4gICAgcmV0dXJuIFtvcDMsIGxocywgcmhzXTtcbiAgfVxuICBpZiAoYXNzb2NpYXRpdml0eSA9PT0gXCJyaWdodFwiKSB7XG4gICAgaWYgKHJoc05hbWUgPT09IG9wMylcbiAgICAgIHJldHVybiBbb3AzLCBsaHMsIC4uLm9wcyhyaHMpID8/IFtdXTtcbiAgICByZXR1cm4gW29wMywgbGhzLCByaHNdO1xuICB9XG4gIGlmIChsaHNOYW1lID09PSBvcDMgJiYgcmhzTmFtZSA9PT0gb3AzKSB7XG4gICAgcmV0dXJuIFtvcDMsIC4uLm9wcyhsaHMpID8/IFtdLCAuLi5vcHMocmhzKSA/PyBbXV07XG4gIH1cbiAgaWYgKGxoc05hbWUgPT09IG9wMylcbiAgICByZXR1cm4gW29wMywgLi4ub3BzKGxocykgPz8gW10sIHJoc107XG4gIGlmIChyaHNOYW1lID09PSBvcDMpXG4gICAgcmV0dXJuIFtvcDMsIGxocywgLi4ub3BzKHJocykgPz8gW11dO1xuICByZXR1cm4gW29wMywgbGhzLCByaHNdO1xufVxuZnVuY3Rpb24gZ2V0U2VxdWVuY2UoZXhwcikge1xuICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcbiAgbGV0IGggPSBoZWFkKGV4cHIpO1xuICBpZiAoaCA9PT0gXCJEZWxpbWl0ZXJcIikge1xuICAgIGV4cHIgPSBvcChleHByLCAxKTtcbiAgICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICAgIHJldHVybiBbXTtcbiAgICBpZiAoaGVhZChleHByKSAhPT0gXCJTZXF1ZW5jZVwiKVxuICAgICAgcmV0dXJuIFtleHByXTtcbiAgfVxuICBoID0gaGVhZChleHByKTtcbiAgaWYgKGggIT09IFwiU2VxdWVuY2VcIilcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIG9wcyhleHByKSA/PyBbXTtcbn1cbmZ1bmN0aW9uIGlzRW1wdHlTZXF1ZW5jZShleHByKSB7XG4gIHJldHVybiBleHByICE9PSBudWxsICYmIGhlYWQoZXhwcikgPT09IFwiU2VxdWVuY2VcIiAmJiBub3BzKGV4cHIpID09PSAwO1xufVxuZnVuY3Rpb24gbWlzc2luZ0lmRW1wdHkoZXhwcikge1xuICBpZiAoZXhwciA9PT0gbnVsbCB8fCBpc0VtcHR5U2VxdWVuY2UoZXhwcikpXG4gICAgcmV0dXJuIE1JU1NJTkc7XG4gIHJldHVybiBleHByO1xufVxuZnVuY3Rpb24gY291bnRGdW5jdGlvbkxlYXZlcyh4cykge1xuICBpZiAoeHNbMF0gPT09IFwiU3F1YXJlXCIpIHtcbiAgICByZXR1cm4gY291bnRGdW5jdGlvbkxlYXZlcyh4cy5zbGljZSgxKSkgKyAyO1xuICB9XG4gIHJldHVybiB4cy5yZWR1Y2UoKGFjYywgeCkgPT4gYWNjICsgY291bnRMZWF2ZXMoeCksIDApO1xufVxuZnVuY3Rpb24gY291bnRMZWF2ZXMoZXhwcikge1xuICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICByZXR1cm4gMDtcbiAgaWYgKHR5cGVvZiBleHByID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiBleHByID09PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiAxO1xuICBpZiAoaXNOdW1iZXJFeHByZXNzaW9uKGV4cHIpIHx8IGlzU3ltYm9sT2JqZWN0KGV4cHIpIHx8IGlzU3RyaW5nT2JqZWN0KGV4cHIpKVxuICAgIHJldHVybiAxO1xuICBpZiAoQXJyYXkuaXNBcnJheShleHByKSlcbiAgICByZXR1cm4gY291bnRGdW5jdGlvbkxlYXZlcyhleHByKTtcbiAgaWYgKFwiZm5cIiBpbiBleHByKVxuICAgIHJldHVybiBjb3VudEZ1bmN0aW9uTGVhdmVzKGV4cHIuZm4pO1xuICBjb25zdCBkaWN0ID0gZGljdGlvbmFyeShleHByKTtcbiAgaWYgKGRpY3QpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGljdCk7XG4gICAgcmV0dXJuIDEgKyBrZXlzLmxlbmd0aCArIGtleXMucmVkdWNlKChhY2MsIHgpID0+IGFjYyArIGNvdW50TGVhdmVzKGRpY3RbeF0pLCAwKTtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9zZXJpYWxpemVyLXN0eWxlLnRzXG5mdW5jdGlvbiBnZXRBcHBseUZ1bmN0aW9uU3R5bGUoX2V4cHIsIF9sZXZlbCkge1xuICByZXR1cm4gXCJwYXJlblwiO1xufVxuZnVuY3Rpb24gZ2V0R3JvdXBTdHlsZShfZXhwciwgX2xldmVsKSB7XG4gIHJldHVybiBcInBhcmVuXCI7XG59XG5mdW5jdGlvbiBnZXRSb290U3R5bGUoX2V4cHIsIGxldmVsKSB7XG4gIHJldHVybiBsZXZlbCA+IDIgPyBcInNvbGlkdXNcIiA6IFwicmFkaWNhbFwiO1xufVxuZnVuY3Rpb24gZ2V0RnJhY3Rpb25TdHlsZShleHByLCBsZXZlbCkge1xuICBpZiAobGV2ZWwgPiAzKVxuICAgIHJldHVybiBcImlubGluZS1zb2xpZHVzXCI7XG4gIGlmIChoZWFkKGV4cHIpID09PSBcIkRpdmlkZVwiKSB7XG4gICAgY29uc3QgW24sIGRdID0gW2NvdW50TGVhdmVzKG9wMShleHByKSksIGNvdW50TGVhdmVzKG9wMihleHByKSldO1xuICAgIGlmIChkIDw9IDIgJiYgbiA+IDUpXG4gICAgICByZXR1cm4gXCJmYWN0b3JcIjtcbiAgICBpZiAobiA8PSAyICYmIGQgPiA1KVxuICAgICAgcmV0dXJuIFwicmVjaXByb2NhbFwiO1xuICB9XG4gIHJldHVybiBcInF1b3RpZW50XCI7XG59XG5mdW5jdGlvbiBnZXRMb2dpY1N0eWxlKF9leHByLCBfbGV2ZWwpIHtcbiAgcmV0dXJuIFwiYm9vbGVhblwiO1xufVxuZnVuY3Rpb24gZ2V0UG93ZXJTdHlsZShfZXhwciwgX2xldmVsKSB7XG4gIHJldHVybiBcInNvbGlkdXNcIjtcbn1cbmZ1bmN0aW9uIGdldE51bWVyaWNTZXRTdHlsZShfZXhwciwgX2xldmVsKSB7XG4gIHJldHVybiBcImNvbXBhY3RcIjtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9kaWN0aW9uYXJ5L2RlZmluaXRpb25zLWFyaXRobWV0aWMudHNcbmZ1bmN0aW9uIG51bWVyYXRvckRlbm9taW5hdG9yKGV4cHIpIHtcbiAgaWYgKGhlYWQoZXhwcikgIT09IFwiTXVsdGlwbHlcIilcbiAgICByZXR1cm4gW1tdLCBbXV07XG4gIGNvbnN0IG51bWVyYXRvciA9IFtdO1xuICBjb25zdCBkZW5vbWluYXRvciA9IFtdO1xuICBjb25zdCBhcmdzID0gb3BzKGV4cHIpID8/IFtdO1xuICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgaWYgKGhlYWQoYXJnKSA9PT0gXCJQb3dlclwiKSB7XG4gICAgICBjb25zdCBvcDEyID0gb3AoYXJnLCAxKTtcbiAgICAgIGNvbnN0IG9wMjIgPSBvcChhcmcsIDIpO1xuICAgICAgaWYgKGhlYWQob3AyMikgPT09IFwiTmVnYXRlXCIpIHtcbiAgICAgICAgY29uc3QgYiA9IG9wKG9wMjIsIDEpO1xuICAgICAgICBpZiAob3AxMiAmJiBiKVxuICAgICAgICAgIGRlbm9taW5hdG9yLnB1c2goW1wiUG93ZXJcIiwgb3AxMiwgYl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZXhwb25lbnRWYWwgPSBtYWNoaW5lVmFsdWUob3AyMikgPz8gTmFOO1xuICAgICAgICBpZiAoZXhwb25lbnRWYWwgPT09IC0xKSB7XG4gICAgICAgICAgaWYgKG9wMTIpXG4gICAgICAgICAgICBkZW5vbWluYXRvci5wdXNoKG9wMTIpO1xuICAgICAgICB9IGVsc2UgaWYgKGV4cG9uZW50VmFsIDwgMCkge1xuICAgICAgICAgIGlmIChvcDEyKVxuICAgICAgICAgICAgZGVub21pbmF0b3IucHVzaChbXCJQb3dlclwiLCBvcDEyLCAtZXhwb25lbnRWYWxdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBudW1lcmF0b3IucHVzaChhcmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChoZWFkKGFyZykgPT09IFwiUmF0aW9uYWxcIiAmJiBub3BzKGFyZykgPT09IDIpIHtcbiAgICAgIGNvbnN0IG9wMTIgPSBvcChhcmcsIDEpO1xuICAgICAgY29uc3Qgb3AyMiA9IG9wKGFyZywgMik7XG4gICAgICBpZiAobWFjaGluZVZhbHVlKG9wMTIpICE9PSAxKVxuICAgICAgICBudW1lcmF0b3IucHVzaChvcDEyKTtcbiAgICAgIGlmIChtYWNoaW5lVmFsdWUob3AyMikgIT09IDEpXG4gICAgICAgIGRlbm9taW5hdG9yLnB1c2gob3AyMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHIgPSByYXRpb25hbFZhbHVlKGFyZyk7XG4gICAgICBpZiAociAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoclswXSAhPT0gMSlcbiAgICAgICAgICBudW1lcmF0b3IucHVzaChyWzBdKTtcbiAgICAgICAgZGVub21pbmF0b3IucHVzaChyWzFdKTtcbiAgICAgIH0gZWxzZVxuICAgICAgICBudW1lcmF0b3IucHVzaChhcmcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW251bWVyYXRvciwgZGVub21pbmF0b3JdO1xufVxuZnVuY3Rpb24gcGFyc2VSb290KHBhcnNlcikge1xuICBjb25zdCBkZWdyZWUgPSBwYXJzZXIucGFyc2VPcHRpb25hbEdyb3VwKCk7XG4gIGNvbnN0IGJhc2UgPSBwYXJzZXIucGFyc2VHcm91cCgpID8/IHBhcnNlci5wYXJzZVRva2VuKCk7XG4gIGlmIChiYXNlID09PSBudWxsIHx8IGlzRW1wdHlTZXF1ZW5jZShiYXNlKSkge1xuICAgIGlmIChkZWdyZWUgIT09IG51bGwpXG4gICAgICByZXR1cm4gW1wiUm9vdFwiLCBNSVNTSU5HLCBtaXNzaW5nSWZFbXB0eShkZWdyZWUpXTtcbiAgICByZXR1cm4gW1wiU3FydFwiLCBNSVNTSU5HXTtcbiAgfVxuICBpZiAoZGVncmVlICE9PSBudWxsKVxuICAgIHJldHVybiBbXCJSb290XCIsIGJhc2UsIGRlZ3JlZV07XG4gIHJldHVybiBbXCJTcXJ0XCIsIGJhc2VdO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplUm9vdChzZXJpYWxpemVyLCBzdHlsZSwgYmFzZSwgZGVncmVlKSB7XG4gIGlmIChiYXNlID09PSBudWxsKVxuICAgIHJldHVybiBcIlxcXFxzcXJ0e31cIjtcbiAgZGVncmVlID0gZGVncmVlID8/IDI7XG4gIGlmIChzdHlsZSA9PT0gXCJzb2xpZHVzXCIpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplci53cmFwU2hvcnQoYmFzZSkgKyBcIl57MVxcXFwvXCIgKyBzZXJpYWxpemVyLnNlcmlhbGl6ZShkZWdyZWUpICsgXCJ9XCI7XG4gIH0gZWxzZSBpZiAoc3R5bGUgPT09IFwicXVvdGllbnRcIikge1xuICAgIHJldHVybiBzZXJpYWxpemVyLndyYXBTaG9ydChiYXNlKSArIFwiXntcXFxcZnJhY3sxfXtcIiArIHNlcmlhbGl6ZXIuc2VyaWFsaXplKGRlZ3JlZSkgKyBcIn19XCI7XG4gIH1cbiAgY29uc3QgZGVncmVlVmFsdWUgPSBtYWNoaW5lVmFsdWUoZGVncmVlKTtcbiAgaWYgKGRlZ3JlZVZhbHVlID09PSAyKVxuICAgIHJldHVybiBcIlxcXFxzcXJ0e1wiICsgc2VyaWFsaXplci5zZXJpYWxpemUoYmFzZSkgKyBcIn1cIjtcbiAgcmV0dXJuIFwiXFxcXHNxcnRbXCIgKyBzZXJpYWxpemVyLnNlcmlhbGl6ZShkZWdyZWUpICsgXCJde1wiICsgc2VyaWFsaXplci5zZXJpYWxpemUoYmFzZSkgKyBcIn1cIjtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUFkZChzZXJpYWxpemVyLCBleHByKSB7XG4gIHNlcmlhbGl6ZXIubGV2ZWwgLT0gMTtcbiAgY29uc3QgbmFtZSA9IGhlYWQoZXhwcik7XG4gIGxldCByZXN1bHQgPSBcIlwiO1xuICBsZXQgYXJnID0gb3AoZXhwciwgMSk7XG4gIGlmIChuYW1lID09PSBcIk5lZ2F0ZVwiKSB7XG4gICAgcmVzdWx0ID0gXCItXCIgKyBzZXJpYWxpemVyLndyYXAoYXJnLCAyNzYpO1xuICB9IGVsc2UgaWYgKG5hbWUgPT09IFwiQWRkXCIpIHtcbiAgICBpZiAoc2VyaWFsaXplci5jYW5vbmljYWwgJiYgbm9wcyhleHByKSA9PT0gMiAmJiBzZXJpYWxpemVyLm9wdGlvbnMuaW52aXNpYmxlUGx1cyAhPT0gXCIrXCIpIHtcbiAgICAgIGNvbnN0IFtvcDEyLCBvcDIyXSA9IFtvcChleHByLCAxKSwgb3AoZXhwciwgMildO1xuICAgICAgbGV0IFtsaHMsIHJoc10gPSBbb3AxMiwgb3AyMl07XG4gICAgICBsZXQgbGhzVmFsdWUgPSBtYWNoaW5lVmFsdWUobGhzKTtcbiAgICAgIGxldCByaHNWYWx1ZSA9IHJhdGlvbmFsVmFsdWUocmhzKTtcbiAgICAgIGlmIChsaHNWYWx1ZSA9PT0gbnVsbCB8fCByaHNWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBbbGhzLCByaHNdID0gW29wMjIsIG9wMTJdO1xuICAgICAgICBsaHNWYWx1ZSA9IG1hY2hpbmVWYWx1ZShsaHMpO1xuICAgICAgICByaHNWYWx1ZSA9IHJhdGlvbmFsVmFsdWUocmhzKTtcbiAgICAgIH1cbiAgICAgIGlmIChsaHNWYWx1ZSAhPT0gbnVsbCAmJiByaHNWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNGaW5pdGUobGhzVmFsdWUpICYmIE51bWJlci5pc0ludGVnZXIobGhzVmFsdWUpICYmIGxoc1ZhbHVlID49IDAgJiYgbGhzVmFsdWUgPD0gMWUzICYmIGlzRmluaXRlKHJoc1ZhbHVlWzBdKSAmJiBpc0Zpbml0ZShyaHNWYWx1ZVsxXSkgJiYgcmhzVmFsdWVbMF0gPiAwICYmIHJoc1ZhbHVlWzBdIDw9IDEwMCAmJiByaHNWYWx1ZVsxXSA8PSAxMDApIHtcbiAgICAgICAgICByZXN1bHQgPSBqb2luTGF0ZXgoW1xuICAgICAgICAgICAgc2VyaWFsaXplci5zZXJpYWxpemUobGhzKSxcbiAgICAgICAgICAgIHNlcmlhbGl6ZXIub3B0aW9ucy5pbnZpc2libGVQbHVzLFxuICAgICAgICAgICAgc2VyaWFsaXplci5zZXJpYWxpemUocmhzKVxuICAgICAgICAgIF0pO1xuICAgICAgICAgIHNlcmlhbGl6ZXIubGV2ZWwgKz0gMTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCB2YWwgPSBtYWNoaW5lVmFsdWUoYXJnKSA/PyBOYU47XG4gICAgcmVzdWx0ID0gc2VyaWFsaXplci5zZXJpYWxpemUoYXJnKTtcbiAgICBjb25zdCBsYXN0ID0gbm9wcyhleHByKSArIDE7XG4gICAgZm9yIChsZXQgaSA9IDI7IGkgPCBsYXN0OyBpKyspIHtcbiAgICAgIGFyZyA9IG9wKGV4cHIsIGkpO1xuICAgICAgdmFsID0gbWFjaGluZVZhbHVlKGFyZykgPz8gTmFOO1xuICAgICAgaWYgKHZhbCA8IDApIHtcbiAgICAgICAgcmVzdWx0ICs9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKGFyZyk7XG4gICAgICB9IGVsc2UgaWYgKGhlYWQoYXJnKSA9PT0gXCJOZWdhdGVcIikge1xuICAgICAgICByZXN1bHQgKz0gc2VyaWFsaXplci53cmFwKGFyZywgMjc1KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHRlcm0gPSBzZXJpYWxpemVyLndyYXAoYXJnLCAyNzUpO1xuICAgICAgICBpZiAodGVybVswXSA9PT0gXCItXCIgfHwgdGVybVswXSA9PT0gXCIrXCIpXG4gICAgICAgICAgcmVzdWx0ICs9IHRlcm07XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXN1bHQgKz0gXCIrXCIgKyB0ZXJtO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChuYW1lID09PSBcIlN1YnRyYWN0XCIpIHtcbiAgICByZXN1bHQgPSBzZXJpYWxpemVyLndyYXAoYXJnLCAyNzUpO1xuICAgIGNvbnN0IGFyZzIgPSBvcChleHByLCAyKTtcbiAgICBpZiAoYXJnMiAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgdGVybSA9IHNlcmlhbGl6ZXIud3JhcChhcmcyLCAyNzUpO1xuICAgICAgaWYgKHRlcm1bMF0gPT09IFwiLVwiKVxuICAgICAgICByZXN1bHQgKz0gXCIrXCIgKyB0ZXJtLnNsaWNlKDEpO1xuICAgICAgZWxzZSBpZiAodGVybVswXSA9PT0gXCIrXCIpXG4gICAgICAgIHJlc3VsdCArPSBcIi1cIiArIHRlcm0uc2xpY2UoMSk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiLVwiICsgdGVybTtcbiAgICB9XG4gIH1cbiAgc2VyaWFsaXplci5sZXZlbCArPSAxO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gc2VyaWFsaXplTXVsdGlwbHkoc2VyaWFsaXplciwgZXhwcikge1xuICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICByZXR1cm4gXCJcIjtcbiAgc2VyaWFsaXplci5sZXZlbCAtPSAxO1xuICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgaWYgKHNlcmlhbGl6ZXIuY2Fub25pY2FsID09PSB0cnVlKSB7XG4gICAgY29uc3QgW251bWVyLCBkZW5vbV0gPSBudW1lcmF0b3JEZW5vbWluYXRvcihleHByKTtcbiAgICBpZiAoZGVub20ubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGRlbm9tLmxlbmd0aCA9PT0gMSAmJiBkZW5vbVswXSA9PT0gMSkge1xuICAgICAgICBpZiAobnVtZXIubGVuZ3RoID09PSAwKVxuICAgICAgICAgIHJlc3VsdCA9IFwiMVwiO1xuICAgICAgICBlbHNlIGlmIChudW1lci5sZW5ndGggPT09IDEpXG4gICAgICAgICAgcmVzdWx0ID0gc2VyaWFsaXplci5zZXJpYWxpemUobnVtZXJbMF0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmVzdWx0ID0gc2VyaWFsaXplTXVsdGlwbHkoc2VyaWFsaXplciwgW1wiTXVsdGlwbHlcIiwgLi4ubnVtZXJdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKFtcbiAgICAgICAgICBcIkRpdmlkZVwiLFxuICAgICAgICAgIG51bWVyLmxlbmd0aCA9PT0gMSA/IG51bWVyWzBdIDogW1wiTXVsdGlwbHlcIiwgLi4ubnVtZXJdLFxuICAgICAgICAgIGRlbm9tLmxlbmd0aCA9PT0gMSA/IGRlbm9tWzBdIDogW1wiTXVsdGlwbHlcIiwgLi4uZGVub21dXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocmVzdWx0KSB7XG4gICAgc2VyaWFsaXplci5sZXZlbCArPSAxO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGV0IGlzTmVnYXRpdmUgPSBmYWxzZTtcbiAgbGV0IGFyZyA9IG51bGw7XG4gIGNvbnN0IGNvdW50ID0gbm9wcyhleHByKSArIDE7XG4gIGxldCBwcmV2V2FzTnVtYmVyID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgY291bnQ7IGkrKykge1xuICAgIGFyZyA9IG9wKGV4cHIsIGkpO1xuICAgIGlmIChhcmcgPT09IG51bGwpXG4gICAgICBjb250aW51ZTtcbiAgICBsZXQgdGVybTtcbiAgICBpZiAoaXNOdW1iZXJFeHByZXNzaW9uKGFyZykpIHtcbiAgICAgIHRlcm0gPSBzZXJpYWxpemVyLnNlcmlhbGl6ZShhcmcpO1xuICAgICAgaWYgKHRlcm0gPT09IFwiLTFcIiAmJiAhcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGlzTmVnYXRpdmUgPSAhaXNOZWdhdGl2ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0ZXJtWzBdID09PSBcIi1cIikge1xuICAgICAgICAgIHRlcm0gPSB0ZXJtLnNsaWNlKDEpO1xuICAgICAgICAgIGlzTmVnYXRpdmUgPSAhaXNOZWdhdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSAhcmVzdWx0ID8gdGVybSA6IGpvaW5MYXRleChbcmVzdWx0LCBzZXJpYWxpemVyLm9wdGlvbnMubXVsdGlwbHksIHRlcm1dKTtcbiAgICAgIH1cbiAgICAgIHByZXZXYXNOdW1iZXIgPSB0cnVlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChoZWFkKGFyZykgPT09IFwiUG93ZXJcIikge1xuICAgICAgY29uc3QgciA9IHJhdGlvbmFsVmFsdWUob3AoYXJnLCAyKSk7XG4gICAgICBpZiAocikge1xuICAgICAgICBjb25zdCBbbiwgZF0gPSByO1xuICAgICAgICBpZiAobiA9PT0gMSAmJiBkICE9PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHNlcmlhbGl6ZVJvb3QoXG4gICAgICAgICAgICBzZXJpYWxpemVyLFxuICAgICAgICAgICAgZ2V0Um9vdFN0eWxlKGFyZywgc2VyaWFsaXplci5sZXZlbCksXG4gICAgICAgICAgICBvcChhcmcsIDEpLFxuICAgICAgICAgICAgZFxuICAgICAgICAgICk7XG4gICAgICAgICAgcHJldldhc051bWJlciA9IGZhbHNlO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoZWFkKGFyZykgPT09IFwiUG93ZXJcIiAmJiAhaXNOYU4obWFjaGluZVZhbHVlKG9wKGFyZywgMSkpID8/IE5hTikpIHtcbiAgICAgIHRlcm0gPSBzZXJpYWxpemVyLnNlcmlhbGl6ZShhcmcpO1xuICAgICAgcmVzdWx0ID0gIXJlc3VsdCA/IHRlcm0gOiBqb2luTGF0ZXgoW3Jlc3VsdCwgc2VyaWFsaXplci5vcHRpb25zLm11bHRpcGx5LCB0ZXJtXSk7XG4gICAgICBwcmV2V2FzTnVtYmVyID0gdHJ1ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoaGVhZChhcmcpID09PSBcIk5lZ2F0ZVwiKSB7XG4gICAgICBhcmcgPSBvcChhcmcsIDEpO1xuICAgICAgaXNOZWdhdGl2ZSA9ICFpc05lZ2F0aXZlO1xuICAgIH1cbiAgICB0ZXJtID0gc2VyaWFsaXplci53cmFwKGFyZywgMzkwKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmVzdWx0ID0gdGVybTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaCA9IGhlYWQoYXJnKTtcbiAgICAgIGlmIChwcmV2V2FzTnVtYmVyICYmIChoID09PSBcIkRpdmlkZVwiIHx8IGggPT09IFwiUmF0aW9uYWxcIikpIHtcbiAgICAgICAgcmVzdWx0ID0gam9pbkxhdGV4KFtyZXN1bHQsIHNlcmlhbGl6ZXIub3B0aW9ucy5tdWx0aXBseSwgdGVybV0pO1xuICAgICAgfSBlbHNlIGlmICghc2VyaWFsaXplci5vcHRpb25zLmludmlzaWJsZU11bHRpcGx5KSB7XG4gICAgICAgIHJlc3VsdCA9IGpvaW5MYXRleChbcmVzdWx0LCB0ZXJtXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBqb2luTGF0ZXgoW1xuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBzZXJpYWxpemVyLm9wdGlvbnMuaW52aXNpYmxlTXVsdGlwbHksXG4gICAgICAgICAgdGVybVxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcHJldldhc051bWJlciA9IGZhbHNlO1xuICB9XG4gIHNlcmlhbGl6ZXIubGV2ZWwgKz0gMTtcbiAgcmV0dXJuIGlzTmVnYXRpdmUgPyBcIi1cIiArIHJlc3VsdCA6IHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBhcnNlRnJhY3Rpb24ocGFyc2VyKSB7XG4gIGxldCBudW1lciA9IHBhcnNlci5wYXJzZUdyb3VwKCk7XG4gIGxldCBkZW5vbSA9IG51bGw7XG4gIGlmIChudW1lciA9PT0gbnVsbCkge1xuICAgIG51bWVyID0gcGFyc2VyLnBhcnNlVG9rZW4oKTtcbiAgICBkZW5vbSA9IHBhcnNlci5wYXJzZVRva2VuKCk7XG4gIH0gZWxzZSB7XG4gICAgZGVub20gPSBwYXJzZXIucGFyc2VHcm91cCgpO1xuICB9XG4gIG51bWVyID0gbWlzc2luZ0lmRW1wdHkobnVtZXIpO1xuICBkZW5vbSA9IG1pc3NpbmdJZkVtcHR5KGRlbm9tKTtcbiAgaWYgKGhlYWQobnVtZXIpID09PSBcIlBhcnRpYWxEZXJpdmF0aXZlXCIgJiYgKGhlYWQoZGVub20pID09PSBcIlBhcnRpYWxEZXJpdmF0aXZlXCIgfHwgaGVhZChkZW5vbSkgPT09IFwiTXVsdGlwbHlcIiAmJiBoZWFkKG9wKGRlbm9tLCAxKSkgPT09IFwiUGFydGlhbERlcml2YXRpdmVcIikpIHtcbiAgICBjb25zdCBkZWdyZWUgPSBvcChudW1lciwgMykgPz8gbnVsbDtcbiAgICBsZXQgZm4gPSBvcChudW1lciwgMSk7XG4gICAgaWYgKGZuID09PSBudWxsKVxuICAgICAgZm4gPSBtaXNzaW5nSWZFbXB0eShwYXJzZXIucGFyc2VFeHByZXNzaW9uKCkpO1xuICAgIGxldCB2YXJzID0gW107XG4gICAgaWYgKGhlYWQoZGVub20pID09PSBcIk11bHRpcGx5XCIpIHtcbiAgICAgIGZvciAoY29uc3QgYXJnIG9mIG9wcyhkZW5vbSkgPz8gW10pIHtcbiAgICAgICAgaWYgKGhlYWQoYXJnKSA9PT0gXCJQYXJ0aWFsRGVyaXZhdGl2ZVwiKSB7XG4gICAgICAgICAgY29uc3QgdiA9IG9wKGFyZywgMik7XG4gICAgICAgICAgaWYgKHYpXG4gICAgICAgICAgICB2YXJzLnB1c2godik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdiA9IG9wKGRlbm9tLCAyKTtcbiAgICAgIGlmICh2KVxuICAgICAgICB2YXJzLnB1c2godik7XG4gICAgfVxuICAgIGlmICh2YXJzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhcnMgPSBbXCJMaXN0XCIsIC4uLnZhcnNdO1xuICAgIH1cbiAgICByZXR1cm4gW1wiUGFydGlhbERlcml2YXRpdmVcIiwgZm4sIC4uLnZhcnMsIGRlZ3JlZSA9PT0gbnVsbCA/IDEgOiBkZWdyZWVdO1xuICB9XG4gIHJldHVybiBbXCJEaXZpZGVcIiwgbnVtZXIsIGRlbm9tXTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUZyYWN0aW9uKHNlcmlhbGl6ZXIsIGV4cHIpIHtcbiAgaWYgKGV4cHIgPT09IG51bGwpXG4gICAgcmV0dXJuIFwiXCI7XG4gIGNvbnN0IG51bWVyID0gbWlzc2luZ0lmRW1wdHkob3AoZXhwciwgMSkpO1xuICBjb25zdCBkZW5vbSA9IG1pc3NpbmdJZkVtcHR5KG9wKGV4cHIsIDIpKTtcbiAgY29uc3Qgc3R5bGUgPSBzZXJpYWxpemVyLmNhbm9uaWNhbCA/IGdldEZyYWN0aW9uU3R5bGUoZXhwciwgc2VyaWFsaXplci5sZXZlbCkgOiBcInF1b3RpZW50XCI7XG4gIGlmIChzdHlsZSA9PT0gXCJpbmxpbmUtc29saWR1c1wiIHx8IHN0eWxlID09PSBcIm5pY2Utc29saWR1c1wiKSB7XG4gICAgY29uc3QgbnVtZXJTdHIgPSBzZXJpYWxpemVyLndyYXBTaG9ydChudW1lcik7XG4gICAgY29uc3QgZGVub21TdHIgPSBzZXJpYWxpemVyLndyYXBTaG9ydChkZW5vbSk7XG4gICAgaWYgKHN0eWxlID09PSBcImlubGluZS1zb2xpZHVzXCIpXG4gICAgICByZXR1cm4gYCR7bnVtZXJTdHJ9XFxcXC8ke2Rlbm9tU3RyfWA7XG4gICAgcmV0dXJuIGB7fV57JHtudW1lclN0cn19XFxcXCFcXFxcIS9cXFxcIXt9X3ske2Rlbm9tU3RyfX1gO1xuICB9IGVsc2UgaWYgKHN0eWxlID09PSBcInJlY2lwcm9jYWxcIikge1xuICAgIGlmIChtYWNoaW5lVmFsdWUobnVtZXIpID09PSAxKVxuICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIud3JhcChkZW5vbSkgKyBcIl57LTF9XCI7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZXIud3JhcChudW1lcikgKyBzZXJpYWxpemVyLndyYXAoZGVub20pICsgXCJeey0xfVwiO1xuICB9IGVsc2UgaWYgKHN0eWxlID09PSBcImZhY3RvclwiKSB7XG4gICAgaWYgKG1hY2hpbmVWYWx1ZShkZW5vbSkgPT09IDEpXG4gICAgICByZXR1cm4gc2VyaWFsaXplci53cmFwKG51bWVyKTtcbiAgICByZXR1cm4gXCJcXFxcZnJhY3sxfXtcIiArIHNlcmlhbGl6ZXIuc2VyaWFsaXplKGRlbm9tKSArIFwifXtcIiArIHNlcmlhbGl6ZXIud3JhcChudW1lcikgKyBcIn1cIjtcbiAgfVxuICBjb25zdCBudW1lckxhdGV4ID0gc2VyaWFsaXplci5zZXJpYWxpemUobnVtZXIpO1xuICBjb25zdCBkZW5vbUxhdGV4ID0gc2VyaWFsaXplci5zZXJpYWxpemUoZGVub20pO1xuICByZXR1cm4gYFxcXFxmcmFjeyR7bnVtZXJMYXRleH19eyR7ZGVub21MYXRleH19YDtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZVBvd2VyKHNlcmlhbGl6ZXIsIGV4cHIpIHtcbiAgY29uc3QgbmFtZSA9IGhlYWQoZXhwcik7XG4gIGNvbnN0IGJhc2UgPSBtaXNzaW5nSWZFbXB0eShvcChleHByLCAxKSk7XG4gIGlmIChuYW1lID09PSBcIlNxcnRcIikge1xuICAgIHJldHVybiBzZXJpYWxpemVSb290KFxuICAgICAgc2VyaWFsaXplcixcbiAgICAgIGdldFJvb3RTdHlsZShleHByLCBzZXJpYWxpemVyLmxldmVsIC0gMSksXG4gICAgICBiYXNlLFxuICAgICAgMlxuICAgICk7XG4gIH1cbiAgY29uc3QgZXhwMiA9IG1pc3NpbmdJZkVtcHR5KG9wKGV4cHIsIDIpKTtcbiAgaWYgKG5hbWUgPT09IFwiUm9vdFwiKVxuICAgIHJldHVybiBzZXJpYWxpemVSb290KFxuICAgICAgc2VyaWFsaXplcixcbiAgICAgIGdldFJvb3RTdHlsZShleHByLCBzZXJpYWxpemVyLmxldmVsIC0gMSksXG4gICAgICBiYXNlLFxuICAgICAgZXhwMlxuICAgICk7XG4gIGlmIChzZXJpYWxpemVyLmNhbm9uaWNhbCkge1xuICAgIGNvbnN0IHZhbDIgPSBtYWNoaW5lVmFsdWUoZXhwMikgPz8gMTtcbiAgICBpZiAodmFsMiA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBzZXJpYWxpemVyLnNlcmlhbGl6ZShbXCJEaXZpZGVcIiwgXCIxXCIsIGJhc2VdKTtcbiAgICB9IGVsc2UgaWYgKHZhbDIgPCAwKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplci5zZXJpYWxpemUoW1wiRGl2aWRlXCIsIFwiMVwiLCBbXCJQb3dlclwiLCBiYXNlLCAtdmFsMl1dKTtcbiAgICB9IGVsc2UgaWYgKGhlYWQoZXhwMikgPT09IFwiRGl2aWRlXCIgfHwgaGVhZChleHAyKSA9PT0gXCJSYXRpb25hbFwiKSB7XG4gICAgICBpZiAobWFjaGluZVZhbHVlKG9wKGV4cDIsIDEpKSA9PT0gMSkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldFJvb3RTdHlsZShleHByLCBzZXJpYWxpemVyLmxldmVsKTtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZVJvb3Qoc2VyaWFsaXplciwgc3R5bGUsIGJhc2UsIG9wKGV4cDIsIDIpKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYWNoaW5lVmFsdWUob3AoZXhwMiwgMikpID09PSAyKSB7XG4gICAgICAgIHJldHVybiBgJHtzZXJpYWxpemVyLnNlcmlhbGl6ZShbXCJTcXJ0XCIsIGJhc2VdKX1eeyR7c2VyaWFsaXplci5zZXJpYWxpemUoXG4gICAgICAgICAgb3AoZXhwMiwgMSlcbiAgICAgICAgKX19YDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGhlYWQoZXhwMikgPT09IFwiUG93ZXJcIikge1xuICAgICAgaWYgKG1hY2hpbmVWYWx1ZShvcChleHAyLCAyKSkgPT09IC0xKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Um9vdFN0eWxlKGV4cHIsIHNlcmlhbGl6ZXIubGV2ZWwpO1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplUm9vdChzZXJpYWxpemVyLCBzdHlsZSwgYmFzZSwgb3AoZXhwMiwgMSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplci53cmFwU2hvcnQoYmFzZSkgKyBcIl57XCIgKyBzZXJpYWxpemVyLnNlcmlhbGl6ZShleHAyKSArIFwifVwiO1xufVxudmFyIERFRklOSVRJT05TX0FSSVRITUVUSUMgPSBbXG4gIC8vIENvbnN0YW50c1xuICB7IG5hbWU6IFwiQ2F0YWxhbkNvbnN0YW50XCIsIHNlcmlhbGl6ZTogXCJHXCIgfSxcbiAgeyBuYW1lOiBcIkdvbGRlblJhdGlvXCIsIHNlcmlhbGl6ZTogXCJcXFxcdmFycGhpXCIgfSxcbiAgeyBuYW1lOiBcIkV1bGVyR2FtbWFcIiwgc2VyaWFsaXplOiBcIlxcXFxnYW1tYVwiIH0sXG4gIHtcbiAgICBuYW1lOiBcIkRlZ3JlZXNcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxkZWdyZWVcIl0sXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcHJlY2VkZW5jZTogODgwLFxuICAgIHBhcnNlOiAoX3BhcnNlciwgbGhzKSA9PiBbXCJEZWdyZWVzXCIsIGxoc10sXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4ge1xuICAgICAgcmV0dXJuIGpvaW5MYXRleChbc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpLCBcIlxcXFxkZWdyZWVcIl0pO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGRlZ3JlZVwiXSxcbiAgICBraW5kOiBcInBvc3RmaXhcIixcbiAgICBwcmVjZWRlbmNlOiA4ODAsXG4gICAgcGFyc2U6IChfcGFyc2VyLCBsaHMpID0+IFtcIkRlZ3JlZXNcIiwgbGhzXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCIsIFwiPHs+XCIsIFwiXFxcXGNpcmNcIiwgXCI8fT5cIl0sXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcGFyc2U6IChfcGFyc2VyLCBsaHMpID0+IFtcIkRlZ3JlZXNcIiwgbGhzXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCIsIFwiXFxcXGNpcmNcIl0sXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcGFyc2U6IChfcGFyc2VyLCBsaHMpID0+IFtcIkRlZ3JlZXNcIiwgbGhzXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXHhCMFwiXSxcbiAgICBraW5kOiBcInBvc3RmaXhcIixcbiAgICBwcmVjZWRlbmNlOiA4ODAsXG4gICAgcGFyc2U6IChfcGFyc2VyLCBsaHMpID0+IFtcIkRlZ3JlZXNcIiwgbGhzXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcYW5nXCJdLFxuICAgIHBhcnNlOiAocGFyc2VyKSA9PiB7XG4gICAgICBjb25zdCBhcmcgPSBwYXJzZXIucGFyc2VHcm91cCgpO1xuICAgICAgcmV0dXJuIGFyZyA9PT0gbnVsbCA/IFtcIkRlZ3JlZXNcIl0gOiBbXCJEZWdyZWVzXCIsIGFyZ107XG4gICAgfVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcaW5mdHlcIl0sXG4gICAgcGFyc2U6IHsgbnVtOiBcIitJbmZpbml0eVwiIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQ29tcGxleEluZmluaXR5XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcdGlsZGVcIiwgXCJcXFxcaW5mdHlcIl0sXG4gICAgc2VyaWFsaXplOiBcIlxcXFx0aWxkZVxcXFxpbmZ0eVwiXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFx0aWxkZVwiLCBcIjx7PlwiLCBcIlxcXFxpbmZ0eVwiLCBcIjx9PlwiXSxcbiAgICBwYXJzZTogXCJDb21wbGV4SW5maW5pdHlcIlxuICB9LFxuICB7IG5hbWU6IFwiUGlcIiwga2luZDogXCJzeW1ib2xcIiwgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxccGlcIl0gfSxcbiAgeyBsYXRleFRyaWdnZXI6IFtcIlxcdTAzQzBcIl0sIHBhcnNlOiBcIlBpXCIgfSxcbiAge1xuICAgIG5hbWU6IFwiRXhwb25lbnRpYWxFXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZXhwb25lbnRpYWxFXCJdLFxuICAgIHBhcnNlOiBcIkV4cG9uZW50aWFsRVwiLFxuICAgIHNlcmlhbGl6ZTogXCJcXFxcZXhwb25lbnRpYWxFXCJcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogXCJcXFxcb3BlcmF0b3JuYW1le2V9XCIsXG4gICAgcGFyc2U6IFwiRXhwb25lbnRpYWxFXCJcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogXCJcXFxcbWF0aHJte2V9XCIsXG4gICAgcGFyc2U6IFwiRXhwb25lbnRpYWxFXCJcbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIixcbiAgICBpZGVudGlmaWVyVHJpZ2dlcjogXCJleHBcIixcbiAgICBwYXJzZTogXCJFeHBcIlxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxleHBcIixcbiAgICBwYXJzZTogXCJFeHBcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJJbWFnaW5hcnlVbml0XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcaW1hZ2luYXJ5SVwiXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxvcGVyYXRvcm5hbWV7aX1cIixcbiAgICBwYXJzZTogXCJJbWFnaW5hcnlVbml0XCJcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogXCJcXFxcbWF0aHJte2l9XCIsXG4gICAgcGFyc2U6IFwiSW1hZ2luYXJ5VW5pdFwiXG4gIH0sXG4gIC8vIE9wZXJhdGlvbnNcbiAge1xuICAgIC8qKiBDb3VsZCBiZSB0aGUgZGV0ZXJtaW5hbnQgaWYgdGhlIGFyZ3VtZW50IGlzIGEgbWF0cml4ICovXG4gICAgLyoqIEB0b2RvOiBkb21haW4gY2hlY2sgKi9cbiAgICAvKiogSWYgYSBsaXRlcmFsIG1hdHJpeCwgdGhlIGBzZXJpYWxpemVgIHNob3VsZCBiZSBjdXN0b20sIHRoZSBwYXJlbnMgYXJlXG4gICAgICogcmVwbGFjZWQgd2l0aCBiYXJzICovXG4gICAgbmFtZTogXCJBYnNcIixcbiAgICBraW5kOiBcIm1hdGNoZml4XCIsXG4gICAgb3BlblRyaWdnZXI6IFwifFwiLFxuICAgIGNsb3NlVHJpZ2dlcjogXCJ8XCIsXG4gICAgcGFyc2U6IChfcGFyc2VyLCBib2R5KSA9PiBpc0VtcHR5U2VxdWVuY2UoYm9keSkgPyBudWxsIDogW1wiQWJzXCIsIGJvZHldXG4gIH0sXG4gIHtcbiAgICBpZGVudGlmaWVyVHJpZ2dlcjogXCJhYnNcIixcbiAgICBraW5kOiBcImZ1bmN0aW9uXCIsXG4gICAgcGFyc2U6IFwiQWJzXCJcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQWRkXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCIrXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcImJvdGhcIixcbiAgICBwcmVjZWRlbmNlOiAyNzUsXG4gICAgcGFyc2U6IChwYXJzZXIsIGxocywgdW50aWwpID0+IHtcbiAgICAgIGlmICh1bnRpbCAmJiAyNzUgPCB1bnRpbC5taW5QcmVjKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNvbnN0IHJocyA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24oeyAuLi51bnRpbCwgbWluUHJlYzogMjc1IH0pO1xuICAgICAgaWYgKHJocyA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gYXBwbHlBc3NvY2lhdGl2ZU9wZXJhdG9yKFwiQWRkXCIsIGxocywgcmhzKTtcbiAgICB9LFxuICAgIHNlcmlhbGl6ZTogc2VyaWFsaXplQWRkXG4gIH0sXG4gIHtcbiAgICBraW5kOiBcInByZWZpeFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiK1wiXSxcbiAgICBwcmVjZWRlbmNlOiAyNzUsXG4gICAgcGFyc2U6IChwYXJzZXIsIHVudGlsKSA9PiB7XG4gICAgICBpZiAodW50aWwgJiYgMjc1IDwgdW50aWwubWluUHJlYylcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih7IC4uLnVudGlsLCBtaW5QcmVjOiA0MDAgfSk7XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJDZWlsXCIsXG4gICAga2luZDogXCJtYXRjaGZpeFwiLFxuICAgIG9wZW5UcmlnZ2VyOiBcIlxcXFxsY2VpbFwiLFxuICAgIGNsb3NlVHJpZ2dlcjogXCJcXFxccmNlaWxcIixcbiAgICBwYXJzZTogKF9wYXJzZXIsIGJvZHkpID0+IGlzRW1wdHlTZXF1ZW5jZShib2R5KSA/IG51bGwgOiBbXCJDZWlsXCIsIGJvZHldXG4gIH0sXG4gIHtcbiAgICBraW5kOiBcIm1hdGNoZml4XCIsXG4gICAgb3BlblRyaWdnZXI6IFtcIlxcdTIzMDhcIl0sXG4gICAgY2xvc2VUcmlnZ2VyOiBbXCJcXHUyMzA5XCJdLFxuICAgIHBhcnNlOiAoX3BhcnNlciwgYm9keSkgPT4gaXNFbXB0eVNlcXVlbmNlKGJvZHkpID8gbnVsbCA6IFtcIkNlaWxcIiwgYm9keV1cbiAgfSxcbiAge1xuICAgIGlkZW50aWZpZXJUcmlnZ2VyOiBcImNlaWxcIixcbiAgICBraW5kOiBcImZ1bmN0aW9uXCIsXG4gICAgcGFyc2U6IFwiQ2VpbFwiXG4gIH0sXG4gIHsgbmFtZTogXCJDaG9wXCIsIGlkZW50aWZpZXJUcmlnZ2VyOiBcImNob3BcIiwga2luZDogXCJmdW5jdGlvblwiLCBwYXJzZTogXCJDaG9wXCIgfSxcbiAge1xuICAgIG5hbWU6IFwiQ29tcGxleFwiLFxuICAgIHByZWNlZGVuY2U6IDI3NCxcbiAgICAvLyBPbmUgbGVzcyB0aGFuIHByZWNlZGVuY2Ugb2YgYEFkZGA6IHVzZWQgZm9yIGNvcnJlY3Qgd3JhcHBpbmdcbiAgICBzZXJpYWxpemU6IChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgICBjb25zdCByZSA9IG1hY2hpbmVWYWx1ZShvcChleHByLCAxKSk7XG4gICAgICBjb25zdCBpbSA9IG1hY2hpbmVWYWx1ZShvcChleHByLCAyKSk7XG4gICAgICBpZiAoaW0gPT09IDApXG4gICAgICAgIHJldHVybiBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChleHByLCAxKSk7XG4gICAgICBjb25zdCBpbVBhcnQgPSBpbSA9PT0gMSA/IFwiXFxcXGltYWdpbmFyeUlcIiA6IGltID09PSAtMSA/IFwiLVxcXFxpbWFnaW5hcnlJXCIgOiBqb2luTGF0ZXgoW3NlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGV4cHIsIDIpKSwgXCJcXFxcaW1hZ2luYXJ5SVwiXSk7XG4gICAgICBpZiAocmUgPT09IDApXG4gICAgICAgIHJldHVybiBpbVBhcnQ7XG4gICAgICBpZiAoaW0gIT09IG51bGwgJiYgaW0gPCAwKVxuICAgICAgICByZXR1cm4gam9pbkxhdGV4KFtzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChleHByLCAxKSksIGltUGFydF0pO1xuICAgICAgcmV0dXJuIGpvaW5MYXRleChbc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpLCBcIitcIiwgaW1QYXJ0XSk7XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJEaXZpZGVcIixcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXGZyYWNcIixcbiAgICBwcmVjZWRlbmNlOiA2NjAsXG4gICAgLy8gRm9yIFxcZnJhYyBzcGVjaWZpY2FsbHksIG5vdCBmb3IgXFxkaXYsIGV0Yy4uXG4gICAgLy8gaGFuZGxlcyBMZWlibml0eiBub3RhdGlvbiBmb3IgcGFydGlhbCBkZXJpdmF0aXZlc1xuICAgIHBhcnNlOiBwYXJzZUZyYWN0aW9uLFxuICAgIHNlcmlhbGl6ZTogc2VyaWFsaXplRnJhY3Rpb25cbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXG92ZXJcIixcbiAgICBwcmVjZWRlbmNlOiA2NjAsXG4gICAgcGFyc2U6IFwiRGl2aWRlXCJcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXC9cIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwibm9uXCIsXG4gICAgcHJlY2VkZW5jZTogNjYwLFxuICAgIC8vID8/PyBNYXRoTUwgaGFzIDI2NSwgYnV0IGl0J3Mgd3JvbmcuXG4gICAgLy8gSXQgaGFzIHRvIGJlIGF0IGxlYXN0IGhpZ2hlciB0aGFuIG11bHRpcGx5XG4gICAgLy8gZS5nLiBgMS8yKzMqeGAgLT4gYDEvMiArIDMqeGAgLCBub3QgYDEvKDIrMyp4KWBcbiAgICBwYXJzZTogXCJEaXZpZGVcIlxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCIvXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcIm5vblwiLFxuICAgIHByZWNlZGVuY2U6IDY2MCxcbiAgICBwYXJzZTogXCJEaXZpZGVcIlxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZGl2XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcIm5vblwiLFxuICAgIHByZWNlZGVuY2U6IDY2MCxcbiAgICAvLyA/Pz8gYWNjb3JkaW5nIHRvIE1hdGhNTFxuICAgIHBhcnNlOiBcIkRpdmlkZVwiXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkV4cFwiLFxuICAgIHNlcmlhbGl6ZTogKHNlcmlhbGl6ZXIsIGV4cHIpID0+IHtcbiAgICAgIGNvbnN0IG9wMTIgPSBvcChleHByLCAxKTtcbiAgICAgIGlmIChzeW1ib2wob3AxMikgfHwgbWFjaGluZVZhbHVlKG9wMTIpICE9PSBudWxsKVxuICAgICAgICByZXR1cm4gam9pbkxhdGV4KFtcIlxcXFxleHBvbmVudGlhbEVee1wiLCBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcDEyKV0pO1xuICAgICAgcmV0dXJuIGpvaW5MYXRleChbXCJcXFxcZXhwXCIsIHNlcmlhbGl6ZXIud3JhcChtaXNzaW5nSWZFbXB0eShvcDEyKSldKTtcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkZhY3RvcmlhbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiIVwiXSxcbiAgICBraW5kOiBcInBvc3RmaXhcIixcbiAgICBwcmVjZWRlbmNlOiA4MTBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiRmFjdG9yaWFsMlwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiIVwiLCBcIiFcIl0sXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcHJlY2VkZW5jZTogODEwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkZsb29yXCIsXG4gICAga2luZDogXCJtYXRjaGZpeFwiLFxuICAgIG9wZW5UcmlnZ2VyOiBcIlxcXFxsZmxvb3JcIixcbiAgICBjbG9zZVRyaWdnZXI6IFwiXFxcXHJmbG9vclwiLFxuICAgIHBhcnNlOiAoX3BhcnNlciwgYm9keSkgPT4gaXNFbXB0eVNlcXVlbmNlKGJvZHkpID8gbnVsbCA6IFtcIkZsb29yXCIsIGJvZHldXG4gIH0sXG4gIHtcbiAgICBraW5kOiBcIm1hdGNoZml4XCIsXG4gICAgb3BlblRyaWdnZXI6IFtcIlxcdTIzMEFcIl0sXG4gICAgY2xvc2VUcmlnZ2VyOiBbXCJcXHUyMzBCXCJdLFxuICAgIHBhcnNlOiAoX3BhcnNlciwgYm9keSkgPT4gaXNFbXB0eVNlcXVlbmNlKGJvZHkpID8gbnVsbCA6IFtcIkZsb29yXCIsIGJvZHldXG4gIH0sXG4gIHtcbiAgICBpZGVudGlmaWVyVHJpZ2dlcjogXCJmbG9vclwiLFxuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIixcbiAgICBwYXJzZTogXCJGbG9vclwiXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxHYW1tYVwiXSxcbiAgICBwYXJzZTogXCJHYW1tYVwiXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkdjZFwiLFxuICAgIGlkZW50aWZpZXJUcmlnZ2VyOiBcImdjZFwiLFxuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJIYWxmXCIsXG4gICAgc2VyaWFsaXplOiBcIlxcXFxmcmFjMTJcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJMZ1wiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGxnXCJdLFxuICAgIHNlcmlhbGl6ZTogKHNlcmlhbGl6ZXIsIGV4cHIpID0+IFwiXFxcXGxvZ197MTB9XCIgKyBzZXJpYWxpemVyLndyYXBBcmd1bWVudHMoZXhwciksXG4gICAgcGFyc2U6IChwYXJzZXIpID0+IHtcbiAgICAgIGNvbnN0IGFyZ3MgPSBwYXJzZXIucGFyc2VBcmd1bWVudHMoXCJpbXBsaWNpdFwiKTtcbiAgICAgIGlmIChhcmdzID09PSBudWxsKVxuICAgICAgICByZXR1cm4gXCJMZ1wiO1xuICAgICAgcmV0dXJuIFtcIkxvZ1wiLCAuLi5hcmdzLCAxMF07XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJMYlwiLFxuICAgIGxhdGV4VHJpZ2dlcjogXCJcXFxcbGJcIixcbiAgICBwYXJzZTogKHBhcnNlcikgPT4ge1xuICAgICAgY29uc3QgYXJncyA9IHBhcnNlci5wYXJzZUFyZ3VtZW50cyhcImltcGxpY2l0XCIpO1xuICAgICAgaWYgKGFyZ3MgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBcIkxvZ1wiO1xuICAgICAgcmV0dXJuIFtcIkxvZ1wiLCAuLi5hcmdzLCAyXTtcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxuXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbG5cIl0sXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4gXCJcXFxcbG5cIiArIHNlcmlhbGl6ZXIud3JhcEFyZ3VtZW50cyhleHByKSxcbiAgICBwYXJzZTogKHBhcnNlcikgPT4gcGFyc2VMb2coXCJMblwiLCBwYXJzZXIpXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxvZ1wiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGxvZ1wiXSxcbiAgICBwYXJzZTogKHBhcnNlcikgPT4gcGFyc2VMb2coXCJMb2dcIiwgcGFyc2VyKSxcbiAgICBzZXJpYWxpemU6IChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgICBjb25zdCBiYXNlID0gb3AyKGV4cHIpO1xuICAgICAgaWYgKGJhc2UpXG4gICAgICAgIHJldHVybiBqb2luTGF0ZXgoW1xuICAgICAgICAgIFwiXFxcXGxvZ197XCIsXG4gICAgICAgICAgYmFzZS50b1N0cmluZygpLFxuICAgICAgICAgIFwifVwiLFxuICAgICAgICAgIHNlcmlhbGl6ZXIud3JhcChvcDEoZXhwcikpXG4gICAgICAgIF0pO1xuICAgICAgcmV0dXJuIFwiXFxcXGxvZ1wiICsgc2VyaWFsaXplci53cmFwQXJndW1lbnRzKGV4cHIpO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTGNtXCIsXG4gICAgaWRlbnRpZmllclRyaWdnZXI6IFwibGNtXCIsXG4gICAga2luZDogXCJmdW5jdGlvblwiXG4gIH0sXG4gIHsgbmFtZTogXCJNYXhcIiwgaWRlbnRpZmllclRyaWdnZXI6IFwibWF4XCIsIGtpbmQ6IFwiZnVuY3Rpb25cIiB9LFxuICB7IG5hbWU6IFwiTWluXCIsIGlkZW50aWZpZXJUcmlnZ2VyOiBcIm1pblwiLCBraW5kOiBcImZ1bmN0aW9uXCIgfSxcbiAge1xuICAgIG5hbWU6IFwiTWludXNQbHVzXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbXBcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwiYm90aFwiLFxuICAgIHByZWNlZGVuY2U6IDI3MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJNdWx0aXBseVwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHRpbWVzXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcImJvdGhcIixcbiAgICBwcmVjZWRlbmNlOiAzOTAsXG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemVNdWx0aXBseVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcY2RvdFwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJib3RoXCIsXG4gICAgcHJlY2VkZW5jZTogMzkwLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMsIHRlcm1pbmF0b3IpID0+IHtcbiAgICAgIGNvbnN0IHJocyA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24oeyAuLi50ZXJtaW5hdG9yLCBtaW5QcmVjOiAzOTIgfSk7XG4gICAgICBpZiAocmhzID09PSBudWxsKVxuICAgICAgICByZXR1cm4gW1wiTXVsdGlwbHlcIiwgbGhzLCBNSVNTSU5HXTtcbiAgICAgIHJldHVybiBhcHBseUFzc29jaWF0aXZlT3BlcmF0b3IoXCJNdWx0aXBseVwiLCBsaHMsIHJocyk7XG4gICAgfVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCIqXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcImJvdGhcIixcbiAgICBwcmVjZWRlbmNlOiAzOTAsXG4gICAgcGFyc2U6IChwYXJzZXIsIGxocywgdGVybWluYXRvcikgPT4ge1xuICAgICAgY29uc3QgcmhzID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih7IC4uLnRlcm1pbmF0b3IsIG1pblByZWM6IDM5MiB9KTtcbiAgICAgIGlmIChyaHMgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBbXCJNdWx0aXBseVwiLCBsaHMsIE1JU1NJTkddO1xuICAgICAgcmV0dXJuIGFwcGx5QXNzb2NpYXRpdmVPcGVyYXRvcihcIk11bHRpcGx5XCIsIGxocywgcmhzKTtcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk5lZ2F0ZVwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiLVwiXSxcbiAgICBraW5kOiBcInByZWZpeFwiLFxuICAgIHBhcnNlOiAocGFyc2VyLCB0ZXJtaW5hdG9yKSA9PiB7XG4gICAgICBjb25zdCByaHMgPSBwYXJzZXIucGFyc2VFeHByZXNzaW9uKHsgLi4udGVybWluYXRvciwgbWluUHJlYzogNDAwIH0pO1xuICAgICAgcmV0dXJuIFtcIk5lZ2F0ZVwiLCBtaXNzaW5nSWZFbXB0eShyaHMpXTtcbiAgICB9LFxuICAgIHByZWNlZGVuY2U6IDI3NVxuICB9LFxuICAvLyB7XG4gIC8vICAgLyoqIElmIHRoZSBhcmd1bWVudCBpcyBhIHZlY3RvciAqL1xuICAvLyAgIC8qKiBAdG9kbzogZG9tYWluIGNoZWNrICovXG4gIC8vICAgbmFtZTogJ05vcm0nLFxuICAvLyAgIGtpbmQ6ICdtYXRjaGZpeCcsXG4gIC8vICAgb3BlbkRlbGltaXRlcjogJ3wnLFxuICAvLyAgIGNsb3NlRGVsaW1pdGVyOiAnfCcsXG4gIC8vIH0sXG4gIC8vIHtcbiAgLy8gICAvKiogSWYgdGhlIGFyZ3VtZW50IGlzIGEgc2V0ICovXG4gIC8vICAgLyoqIEB0b2RvOiBkb21haW4gY2hlY2sgKi9cbiAgLy8gICBuYW1lOiAnQ2FyZGluYWxpdHknLFxuICAvLyAgIGtpbmQ6ICdtYXRjaGZpeCcsXG4gIC8vICAgb3BlbkRlbGltaXRlcjogJ3wnLFxuICAvLyAgIGNsb3NlRGVsaW1pdGVyOiAnfCcsXG4gIC8vIH0sXG4gIHtcbiAgICAvLyAgIC8qKiBJZiB0aGUgYXJndW1lbnQgaXMgYSB2ZWN0b3IgKi9cbiAgICAvKiogQHRvZG86IGRvbWFpbiBjaGVjayAqL1xuICAgIGtpbmQ6IFwibWF0Y2hmaXhcIixcbiAgICBvcGVuVHJpZ2dlcjogXCJ8fFwiLFxuICAgIGNsb3NlVHJpZ2dlcjogXCJ8fFwiLFxuICAgIHBhcnNlOiAoX3BhcnNlciwgZXhwcikgPT4gaXNFbXB0eVNlcXVlbmNlKGV4cHIpID8gbnVsbCA6IFtcIk5vcm1cIiwgZXhwcl1cbiAgfSxcbiAge1xuICAgIC8vICAgLyoqIElmIHRoZSBhcmd1bWVudCBpcyBhIHZlY3RvciAqL1xuICAgIC8qKiBAdG9kbzogZG9tYWluIGNoZWNrICovXG4gICAgbmFtZTogXCJOb3JtXCIsXG4gICAga2luZDogXCJtYXRjaGZpeFwiLFxuICAgIG9wZW5UcmlnZ2VyOiBbXCJcXFxcbGVmdFwiLCBcIlxcXFxWZXJ0XCJdLFxuICAgIGNsb3NlVHJpZ2dlcjogW1wiXFxcXHJpZ2h0XCIsIFwiXFxcXFZlcnRcIl0sXG4gICAgcGFyc2U6IChfcGFyc2VyLCBleHByKSA9PiBpc0VtcHR5U2VxdWVuY2UoZXhwcikgPyBudWxsIDogW1wiTm9ybVwiLCBleHByXVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJQbHVzTWludXNcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxwbVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJib3RoXCIsXG4gICAgcHJlY2VkZW5jZTogMjcwLFxuICAgIHNlcmlhbGl6ZTogKHNlcmlhbGl6ZXIsIGV4cHIpID0+IHtcbiAgICAgIGNvbnN0IG9wMTIgPSBvcChleHByLCAxKTtcbiAgICAgIGlmIChvcDEyID09PSBudWxsKVxuICAgICAgICByZXR1cm4gXCJcXFxccG1cIjtcbiAgICAgIGlmIChub3BzKGV4cHIpID09PSAxKVxuICAgICAgICByZXR1cm4gam9pbkxhdGV4KFtcIlxcXFxwbVwiLCBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcDEyKV0pO1xuICAgICAgY29uc3Qgb3AyMiA9IG9wKGV4cHIsIDIpO1xuICAgICAgcmV0dXJuIGpvaW5MYXRleChbXG4gICAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wMTIpLFxuICAgICAgICBcIlxcXFxwbVwiLFxuICAgICAgICBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcDIyKVxuICAgICAgXSk7XG4gICAgfVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxccG1cIl0sXG4gICAga2luZDogXCJwcmVmaXhcIixcbiAgICBwcmVjZWRlbmNlOiAyNzAsXG4gICAgcGFyc2U6IChwYXJzZXIsIHRlcm1pbmF0b3IpID0+IHtcbiAgICAgIGNvbnN0IHJocyA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24oeyAuLi50ZXJtaW5hdG9yLCBtaW5QcmVjOiA0MDAgfSk7XG4gICAgICByZXR1cm4gW1wiUGx1c01pbnVzXCIsIG1pc3NpbmdJZkVtcHR5KHJocyldO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHBsdXNtblwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJib3RoXCIsXG4gICAgcHJlY2VkZW5jZTogMjcwLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMsIHRlcm1pbmF0b3IpID0+IHtcbiAgICAgIGNvbnN0IHJocyA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24oeyAuLi50ZXJtaW5hdG9yLCBtaW5QcmVjOiA0MDAgfSk7XG4gICAgICByZXR1cm4gW1wiUGx1c01pbnVzXCIsIGxocywgbWlzc2luZ0lmRW1wdHkocmhzKV07XG4gICAgfVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxccGx1c21uXCJdLFxuICAgIGtpbmQ6IFwicHJlZml4XCIsXG4gICAgcHJlY2VkZW5jZTogMjcwLFxuICAgIHBhcnNlOiAocGFyc2VyLCB0ZXJtaW5hdG9yKSA9PiB7XG4gICAgICBjb25zdCByaHMgPSBwYXJzZXIucGFyc2VFeHByZXNzaW9uKHsgLi4udGVybWluYXRvciwgbWluUHJlYzogNDAwIH0pO1xuICAgICAgcmV0dXJuIFtcIlBsdXNNaW51c1wiLCBtaXNzaW5nSWZFbXB0eShyaHMpXTtcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlBvd2VyXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBzZXJpYWxpemU6IHNlcmlhbGl6ZVBvd2VyXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXHByb2RcIixcbiAgICBwcmVjZWRlbmNlOiAzOTAsXG4gICAgbmFtZTogXCJQcm9kdWN0XCIsXG4gICAgcGFyc2U6IHBhcnNlQmlnT3AoXCJQcm9kdWN0XCIsIDM5MCksXG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemVCaWdPcChcIlxcXFxwcm9kXCIpXG4gIH0sXG4gIC8vIHtcbiAgLy8gICB0cmlnZ2VyOiBbJyonLCAnKiddLFxuICAvLyAgIGtpbmQ6ICdpbmZpeCcsXG4gIC8vICAgYXNzb2NpYXRpdml0eTogJ25vbicsXG4gIC8vICAgcHJlY2VkZW5jZTogNzIwLFxuICAvLyB9LFxuICB7XG4gICAgbmFtZTogXCJSYXRpb25hbFwiLFxuICAgIHByZWNlZGVuY2U6IDY2MCxcbiAgICBzZXJpYWxpemU6IChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgICBpZiAoZXhwciAmJiBub3BzKGV4cHIpID09PSAxKVxuICAgICAgICByZXR1cm4gXCJcXFxcb3BlcmF0b3JuYW1le1JhdGlvbmFsfVwiICsgc2VyaWFsaXplci53cmFwQXJndW1lbnRzKGV4cHIpO1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUZyYWN0aW9uKHNlcmlhbGl6ZXIsIGV4cHIpO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiUm9vdFwiLFxuICAgIHNlcmlhbGl6ZTogc2VyaWFsaXplUG93ZXJcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiUm91bmRcIixcbiAgICBpZGVudGlmaWVyVHJpZ2dlcjogXCJyb3VuZFwiLFxuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJTcXVhcmVcIixcbiAgICBwcmVjZWRlbmNlOiA3MjAsXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4gc2VyaWFsaXplci53cmFwU2hvcnQob3AoZXhwciwgMSkpICsgXCJeMlwiXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzdW1cIl0sXG4gICAgcHJlY2VkZW5jZTogMjc1LFxuICAgIG5hbWU6IFwiU3VtXCIsXG4gICAgcGFyc2U6IHBhcnNlQmlnT3AoXCJTdW1cIiwgMjc1KSxcbiAgICBzZXJpYWxpemU6IHNlcmlhbGl6ZUJpZ09wKFwiXFxcXHN1bVwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJTaWduXCIsXG4gICAgLy8gQXMgcGVyIElTTyA4MDAwMC0yLCBcInNpZ251bVwiIGlzICdzZ24nXG4gICAgaWRlbnRpZmllclRyaWdnZXI6IFwic2duXCIsXG4gICAga2luZDogXCJmdW5jdGlvblwiXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlNxcnRcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzcXJ0XCJdLFxuICAgIHBhcnNlOiBwYXJzZVJvb3QsXG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemVQb3dlclxuICB9LFxuICB7XG4gICAgbmFtZTogXCJTdWJ0cmFjdFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiLVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJib3RoXCIsXG4gICAgcHJlY2VkZW5jZTogMjc1LFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMsIHRlcm1pbmF0b3IpID0+IHtcbiAgICAgIGNvbnN0IHJocyA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24oeyAuLi50ZXJtaW5hdG9yLCBtaW5QcmVjOiAyNzcgfSk7XG4gICAgICByZXR1cm4gW1wiU3VidHJhY3RcIiwgbGhzLCBtaXNzaW5nSWZFbXB0eShyaHMpXTtcbiAgICB9XG4gIH1cbl07XG5mdW5jdGlvbiBwYXJzZUJpZ09wKG5hbWUsIHByZWMpIHtcbiAgcmV0dXJuIChwYXJzZXIpID0+IHtcbiAgICBwYXJzZXIuc2tpcFNwYWNlKCk7XG4gICAgbGV0IHN1cCA9IG51bGw7XG4gICAgbGV0IHN1YjIgPSBudWxsO1xuICAgIHdoaWxlICghKHN1YjIgJiYgc3VwKSAmJiAocGFyc2VyLnBlZWsgPT09IFwiX1wiIHx8IHBhcnNlci5wZWVrID09PSBcIl5cIikpIHtcbiAgICAgIGlmIChwYXJzZXIubWF0Y2goXCJfXCIpKVxuICAgICAgICBzdWIyID0gcGFyc2VyLnBhcnNlR3JvdXAoKSA/PyBwYXJzZXIucGFyc2VUb2tlbigpO1xuICAgICAgZWxzZSBpZiAocGFyc2VyLm1hdGNoKFwiXlwiKSlcbiAgICAgICAgc3VwID0gcGFyc2VyLnBhcnNlR3JvdXAoKSA/PyBwYXJzZXIucGFyc2VUb2tlbigpO1xuICAgICAgcGFyc2VyLnNraXBTcGFjZSgpO1xuICAgIH1cbiAgICBpZiAoc3ViMiA9PT0gXCJOb3RoaW5nXCIgfHwgaXNFbXB0eVNlcXVlbmNlKHN1YjIpKVxuICAgICAgc3ViMiA9IG51bGw7XG4gICAgaWYgKHN1cCA9PT0gXCJOb3RoaW5nXCIgfHwgaXNFbXB0eVNlcXVlbmNlKHN1cCkpXG4gICAgICBzdXAgPSBudWxsO1xuICAgIGxldCBpbmRleCA9IG51bGw7XG4gICAgbGV0IGxvd2VyID0gbnVsbDtcbiAgICBpZiAoaGVhZChzdWIyKSA9PT0gXCJFcXVhbFwiKSB7XG4gICAgICBpbmRleCA9IG9wKHN1YjIsIDEpO1xuICAgICAgbG93ZXIgPSBvcChzdWIyLCAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXggPSBzdWIyO1xuICAgIH1cbiAgICBjb25zdCBzeW0gPSBzeW1ib2woaW5kZXgpO1xuICAgIGlmIChzeW0pXG4gICAgICBwYXJzZXIuY29tcHV0ZUVuZ2luZT8ucHVzaFNjb3BlKHsgW3N5bV06IHsgZG9tYWluOiBcIkludGVnZXJcIiB9IH0pO1xuICAgIGNvbnN0IGZuID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih7IG1pblByZWM6IHByZWMgKyAxIH0pO1xuICAgIGlmIChzeW0pXG4gICAgICBwYXJzZXIuY29tcHV0ZUVuZ2luZT8ucG9wU2NvcGUoKTtcbiAgICBpZiAoIWZuKVxuICAgICAgcmV0dXJuIFtuYW1lXTtcbiAgICBpZiAoc3VwKVxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZm4sXG4gICAgICAgIFtcIlR1cGxlXCIsIGluZGV4ID8gW1wiSG9sZFwiLCBpbmRleF0gOiBcIk5vdGhpbmdcIiwgbG93ZXIgPz8gMSwgc3VwXVxuICAgICAgXTtcbiAgICBpZiAobG93ZXIpXG4gICAgICByZXR1cm4gW25hbWUsIGZuLCBbXCJUdXBsZVwiLCBpbmRleCA/IFtcIkhvbGRcIiwgaW5kZXhdIDogXCJOb3RoaW5nXCIsIGxvd2VyXV07XG4gICAgaWYgKGluZGV4KVxuICAgICAgcmV0dXJuIFtuYW1lLCBmbiwgW1wiVHVwbGVcIiwgW1wiSG9sZFwiLCBpbmRleF1dXTtcbiAgICByZXR1cm4gW25hbWUsIGZuXTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUJpZ09wKGNvbW1hbmQpIHtcbiAgcmV0dXJuIChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgaWYgKCFvcChleHByLCAxKSlcbiAgICAgIHJldHVybiBjb21tYW5kO1xuICAgIGxldCBhcmcgPSBvcChleHByLCAyKTtcbiAgICBjb25zdCBoID0gaGVhZChhcmcpO1xuICAgIGlmIChoICE9PSBcIlR1cGxlXCIgJiYgaCAhPT0gXCJUcmlwbGVcIiAmJiBoICE9PSBcIlBhaXJcIiAmJiBoICE9PSBcIlNpbmdsZVwiKVxuICAgICAgYXJnID0gbnVsbDtcbiAgICBsZXQgaW5kZXggPSBvcChhcmcsIDEpO1xuICAgIGlmIChpbmRleCAmJiBoZWFkKGluZGV4KSA9PT0gXCJIb2xkXCIpXG4gICAgICBpbmRleCA9IG9wKGluZGV4LCAxKTtcbiAgICBjb25zdCBmbiA9IG9wKGV4cHIsIDEpO1xuICAgIGlmICghYXJnKSB7XG4gICAgICBpZiAoIW9wKGV4cHIsIDIpKVxuICAgICAgICByZXR1cm4gam9pbkxhdGV4KFtjb21tYW5kLCBcIl9uXCIsIHNlcmlhbGl6ZXIuc2VyaWFsaXplKGZuKV0pO1xuICAgICAgcmV0dXJuIGpvaW5MYXRleChbXG4gICAgICAgIGNvbW1hbmQsXG4gICAgICAgIFwiX3tcIixcbiAgICAgICAgc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMikpLFxuICAgICAgICBcIn1cIixcbiAgICAgICAgc2VyaWFsaXplci5zZXJpYWxpemUoZm4pXG4gICAgICBdKTtcbiAgICB9XG4gICAgY29uc3QgbG93ZXIgPSBvcChhcmcsIDIpO1xuICAgIGxldCBzdWIyID0gW107XG4gICAgaWYgKGluZGV4ICYmIHN5bWJvbChpbmRleCkgIT09IFwiTm90aGluZ1wiICYmIGxvd2VyKVxuICAgICAgc3ViMiA9IFtzZXJpYWxpemVyLnNlcmlhbGl6ZShpbmRleCksIFwiPVwiLCBzZXJpYWxpemVyLnNlcmlhbGl6ZShsb3dlcildO1xuICAgIGVsc2UgaWYgKGluZGV4ICYmIHN5bWJvbChpbmRleCkgIT09IFwiTm90aGluZ1wiKVxuICAgICAgc3ViMiA9IFtzZXJpYWxpemVyLnNlcmlhbGl6ZShpbmRleCldO1xuICAgIGVsc2UgaWYgKGxvd2VyKVxuICAgICAgc3ViMiA9IFtzZXJpYWxpemVyLnNlcmlhbGl6ZShsb3dlcildO1xuICAgIGlmIChzdWIyLmxlbmd0aCA+IDApXG4gICAgICBzdWIyID0gW1wiX3tcIiwgLi4uc3ViMiwgXCJ9XCJdO1xuICAgIGxldCBzdXAgPSBbXTtcbiAgICBpZiAob3AoYXJnLCAzKSlcbiAgICAgIHN1cCA9IFtcIl57XCIsIHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGFyZywgMykpLCBcIn1cIl07XG4gICAgcmV0dXJuIGpvaW5MYXRleChbY29tbWFuZCwgLi4uc3VwLCAuLi5zdWIyLCBzZXJpYWxpemVyLnNlcmlhbGl6ZShmbildKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlTG9nKGNvbW1hbmQsIHBhcnNlcikge1xuICBsZXQgc3ViMiA9IG51bGw7XG4gIGxldCBiYXNlID0gbnVsbDtcbiAgaWYgKHBhcnNlci5tYXRjaChcIl9cIikpIHtcbiAgICBzdWIyID0gcGFyc2VyLnBhcnNlU3RyaW5nR3JvdXAoKT8udHJpbSgpID8/IHBhcnNlci5uZXh0VG9rZW4oKTtcbiAgICBiYXNlID0gTnVtYmVyLnBhcnNlRmxvYXQoc3ViMiA/PyBcIjEwXCIpO1xuICB9XG4gIGNvbnN0IGFyZ3MgPSBwYXJzZXIucGFyc2VBcmd1bWVudHMoXCJpbXBsaWNpdFwiKTtcbiAgaWYgKGFyZ3MgPT09IG51bGwpXG4gICAgcmV0dXJuIFtjb21tYW5kXTtcbiAgaWYgKGJhc2UgPT09IDEwKVxuICAgIHJldHVybiBbXCJMb2dcIiwgYXJnc1swXV07XG4gIGlmIChiYXNlID09PSAyKVxuICAgIHJldHVybiBbXCJMYlwiLCAuLi5hcmdzXTtcbiAgaWYgKHN1YjIgPT09IG51bGwpXG4gICAgcmV0dXJuIFtjb21tYW5kLCAuLi5hcmdzXTtcbiAgcmV0dXJuIFtcIkxvZ1wiLCAuLi5hcmdzLCBzdWIyXTtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9kaWN0aW9uYXJ5L2RlZmluaXRpb25zLWNvcmUudHNcbmZ1bmN0aW9uIHBhcnNlU2VxdWVuY2UocGFyc2VyLCB0ZXJtaW5hdG9yLCBsaHMsIHByZWMsIHNlcCkge1xuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQobGhzICE9PSBudWxsKTtcbiAgaWYgKHRlcm1pbmF0b3IubWluUHJlYyA+PSBwcmVjKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCByZXN1bHQgPSBbbGhzXTtcbiAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgd2hpbGUgKCFkb25lKSB7XG4gICAgZG9uZSA9IHRydWU7XG4gICAgcGFyc2VyLnNraXBTcGFjZSgpO1xuICAgIHdoaWxlIChwYXJzZXIubWF0Y2goc2VwKSkge1xuICAgICAgcmVzdWx0LnB1c2goXCJOb3RoaW5nXCIpO1xuICAgICAgcGFyc2VyLnNraXBTcGFjZSgpO1xuICAgIH1cbiAgICBpZiAocGFyc2VyLmF0VGVybWluYXRvcih0ZXJtaW5hdG9yKSkge1xuICAgICAgcmVzdWx0LnB1c2goXCJOb3RoaW5nXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByaHMgPSBwYXJzZXIucGFyc2VFeHByZXNzaW9uKHsgLi4udGVybWluYXRvciwgbWluUHJlYzogcHJlYyB9KTtcbiAgICAgIHJlc3VsdC5wdXNoKHJocyA/PyBcIk5vdGhpbmdcIik7XG4gICAgICBkb25lID0gcmhzID09PSBudWxsO1xuICAgIH1cbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIHBhcnNlci5za2lwU3BhY2UoKTtcbiAgICAgIGRvbmUgPSAhcGFyc2VyLm1hdGNoKHNlcCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVPcHMoc2VwID0gXCJcIikge1xuICByZXR1cm4gKHNlcmlhbGl6ZXIsIGV4cHIpID0+IChvcHMoZXhwcikgPz8gW10pLm1hcCgoeCkgPT4gc2VyaWFsaXplci5zZXJpYWxpemUoeCkpLmpvaW4oc2VwKTtcbn1cbnZhciBERUZJTklUSU9OU19DT1JFID0gW1xuICAvL1xuICAvLyBDb25zdGFudHNcbiAgLy9cbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHBsYWNlaG9sZGVyXCJdLFxuICAgIGtpbmQ6IFwic3ltYm9sXCIsXG4gICAgcGFyc2U6IChwYXJzZXIpID0+IHtcbiAgICAgIHdoaWxlIChwYXJzZXIubWF0Y2goXCI8c3BhY2U+XCIpKSB7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLm1hdGNoKFwiW1wiKSlcbiAgICAgICAgd2hpbGUgKCFwYXJzZXIubWF0Y2goXCJdXCIpICYmICFwYXJzZXIuYXRCb3VuZGFyeSlcbiAgICAgICAgICBwYXJzZXIubmV4dFRva2VuKCk7XG4gICAgICB3aGlsZSAocGFyc2VyLm1hdGNoKFwiPHNwYWNlPlwiKSkge1xuICAgICAgfVxuICAgICAgaWYgKHBhcnNlci5tYXRjaChcIjx7PlwiKSlcbiAgICAgICAgd2hpbGUgKCFwYXJzZXIubWF0Y2goXCI8fT5cIikgJiYgIXBhcnNlci5hdEJvdW5kYXJ5KVxuICAgICAgICAgIHBhcnNlci5uZXh0VG9rZW4oKTtcbiAgICAgIHJldHVybiBcIk5vdGhpbmdcIjtcbiAgICB9XG4gIH0sXG4gIC8vXG4gIC8vIEZ1bmN0aW9uc1xuICAvL1xuICB7XG4gICAgbmFtZTogXCJBcHBseVwiLFxuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIixcbiAgICBpZGVudGlmaWVyVHJpZ2dlcjogXCJhcHBseVwiLFxuICAgIHNlcmlhbGl6ZTogKHNlcmlhbGl6ZXIsIGV4cHIpID0+IHNlcmlhbGl6ZXIuc2VyaWFsaXplRnVuY3Rpb24ob3BzKGV4cHIpKVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxyaGRcIixcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgcHJlY2VkZW5jZTogMjAsXG4gICAgcGFyc2U6IFwiQXBwbHlcIlxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxsaGRcIixcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgcHJlY2VkZW5jZTogMjAsXG4gICAgcGFyc2U6IChwYXJzZXIsIGxocykgPT4ge1xuICAgICAgY29uc3QgcmhzID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih7IG1pblByZWM6IDIwIH0pID8/IFwiTm90aGluZ1wiO1xuICAgICAgcmV0dXJuIFtcIkFwcGx5XCIsIHJocywgbGhzXTtcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkJhc2VGb3JtXCIsXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4ge1xuICAgICAgY29uc3QgcmFkaXggPSBtYWNoaW5lVmFsdWUob3AoZXhwciwgMikpID8/IE5hTjtcbiAgICAgIGlmIChpc0Zpbml0ZShyYWRpeCkgJiYgcmFkaXggPj0gMiAmJiByYWRpeCA8PSAzNikge1xuICAgICAgICBjb25zdCBudW0gPSBtYWNoaW5lVmFsdWUob3AoZXhwciwgMSkpID8/IE5hTjtcbiAgICAgICAgaWYgKGlzRmluaXRlKG51bSkgJiYgTnVtYmVyLmlzSW50ZWdlcihudW0pKSB7XG4gICAgICAgICAgbGV0IGRpZ2l0cyA9IE51bWJlcihudW0pLnRvU3RyaW5nKHJhZGl4KTtcbiAgICAgICAgICBsZXQgZ3JvdXBMZW5ndGggPSAwO1xuICAgICAgICAgIGlmIChyYWRpeCA9PT0gMikge1xuICAgICAgICAgICAgZ3JvdXBMZW5ndGggPSA0O1xuICAgICAgICAgIH0gZWxzZSBpZiAocmFkaXggPT09IDEwKSB7XG4gICAgICAgICAgICBncm91cExlbmd0aCA9IDQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChyYWRpeCA9PT0gMTYpIHtcbiAgICAgICAgICAgIGdyb3VwTGVuZ3RoID0gMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJhZGl4ID4gMTYpIHtcbiAgICAgICAgICAgIGdyb3VwTGVuZ3RoID0gNDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGdyb3VwTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgb2xkRGlnaXRzID0gZGlnaXRzO1xuICAgICAgICAgICAgZGlnaXRzID0gXCJcIjtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2xkRGlnaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChpID4gMCAmJiBpICUgZ3JvdXBMZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgZGlnaXRzID0gXCJcXFxcLCBcIiArIGRpZ2l0cztcbiAgICAgICAgICAgICAgZGlnaXRzID0gb2xkRGlnaXRzW29sZERpZ2l0cy5sZW5ndGggLSBpIC0gMV0gKyBkaWdpdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBgKFxcXFx0ZXh0eyR7ZGlnaXRzfX1feyR7cmFkaXh9fWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBcIlxcXFxvcGVyYXRvcm5hbWV7QmFzZUZvcm19KFwiICsgc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpICsgXCIsIFwiICsgc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMikpICsgXCIpXCI7XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJEZWxpbWl0ZXJcIixcbiAgICBzZXJpYWxpemU6IChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgICBjb25zdCBhcmdDb3VudCA9IG5vcHMoZXhwcik7XG4gICAgICBpZiAoYXJnQ291bnQgPT09IDApXG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgY29uc3Qgc3R5bGUgPSBzZXJpYWxpemVyLm9wdGlvbnMuZ3JvdXBTdHlsZShleHByLCBzZXJpYWxpemVyLmxldmVsICsgMSk7XG4gICAgICBjb25zdCBhcmcxID0gb3AoZXhwciwgMSk7XG4gICAgICBjb25zdCBoMSA9IGhlYWQoYXJnMSk7XG4gICAgICBjb25zdCBkZWZhdWx0RmVuY2UgPSB7IExpc3Q6IFwiW10sXCIsIFNlcXVlbmNlOiBcIlwiIH1bdHlwZW9mIGgxID09PSBcInN0cmluZ1wiID8gaDEgOiBcIlwiXSA/PyBcIigpLFwiO1xuICAgICAgbGV0IG9wZW4gPSBkZWZhdWx0RmVuY2VbMF0gPz8gXCJcIjtcbiAgICAgIGxldCBjbG9zZSA9IGRlZmF1bHRGZW5jZVsxXSA/PyBcIlwiO1xuICAgICAgbGV0IHNlcCA9IGRlZmF1bHRGZW5jZVsyXSA/PyBcIlwiO1xuICAgICAgaWYgKGFyZ0NvdW50ID4gMSkge1xuICAgICAgICBjb25zdCBvcDIyID0gc3RyaW5nVmFsdWUob3AoZXhwciwgMikpID8/IFwiXCI7XG4gICAgICAgIG9wZW4gPSBvcDIyWzBdID8/IGRlZmF1bHRGZW5jZVswXTtcbiAgICAgICAgY2xvc2UgPSBvcDIyWzFdID8/IGRlZmF1bHRGZW5jZVsxXTtcbiAgICAgICAgc2VwID0gb3AyMlsyXSA/PyBkZWZhdWx0RmVuY2VbMl07XG4gICAgICB9XG4gICAgICBjb25zdCBib2R5ID0gaXNMaXN0TGlrZShhcmcxKSA/IHNlcmlhbGl6ZU9wcyhzZXApKHNlcmlhbGl6ZXIsIGFyZzEpIDogc2VyaWFsaXplci5zZXJpYWxpemUoYXJnMSk7XG4gICAgICByZXR1cm4gc2VyaWFsaXplci53cmFwU3RyaW5nKGJvZHksIHN0eWxlLCBvcGVuICsgY2xvc2UpO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiRG9tYWluXCIsXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4ge1xuICAgICAgaWYgKGhlYWQoZXhwcikgPT09IFwiRXJyb3JcIilcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIuc2VyaWFsaXplKGV4cHIpO1xuICAgICAgcmV0dXJuIGBcXFxcbWF0aGJmeyR7c2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpfX1gO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXG1hdGh0aXBcIl0sXG4gICAgcGFyc2U6IChwYXJzZXIpID0+IHtcbiAgICAgIGNvbnN0IG9wMTIgPSBwYXJzZXIucGFyc2VHcm91cCgpO1xuICAgICAgY29uc3Qgb3AyMiA9IHBhcnNlci5wYXJzZUdyb3VwKCk7XG4gICAgICByZXR1cm4gb3AxMjtcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFx0ZXh0dGlwXCJdLFxuICAgIHBhcnNlOiAocGFyc2VyKSA9PiB7XG4gICAgICBjb25zdCBvcDEyID0gcGFyc2VyLnBhcnNlR3JvdXAoKTtcbiAgICAgIGNvbnN0IG9wMjIgPSBwYXJzZXIucGFyc2VHcm91cCgpO1xuICAgICAgcmV0dXJuIG9wMTI7XG4gICAgfVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZXJyb3JcIl0sXG4gICAgcGFyc2U6IChwYXJzZXIpID0+IFtcIkVycm9yXCIsIHBhcnNlci5wYXJzZUdyb3VwKCldXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkVycm9yXCIsXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4ge1xuICAgICAgaWYgKHN0cmluZ1ZhbHVlKG9wKGV4cHIsIDEpKSA9PT0gXCJtaXNzaW5nXCIpXG4gICAgICAgIHJldHVybiBgXFxcXGVycm9yeyR7c2VyaWFsaXplci5vcHRpb25zLm1pc3NpbmdTeW1ib2wgPz8gXCJcXFxccGxhY2Vob2xkZXJ7fVwifX1gO1xuICAgICAgY29uc3Qgd2hlcmUgPSBlcnJvckNvbnRleHRBc0xhdGV4KHNlcmlhbGl6ZXIsIGV4cHIpIHx8IFwiXFxcXGJsYWNrc3F1YXJlXCI7XG4gICAgICBjb25zdCBvcDEyID0gb3AoZXhwciwgMSk7XG4gICAgICBjb25zdCBjb2RlID0gaGVhZChvcDEyKSA9PT0gXCJFcnJvckNvZGVcIiA/IHN0cmluZ1ZhbHVlKG9wKG9wMTIsIDEpKSA6IHN0cmluZ1ZhbHVlKG9wMTIpO1xuICAgICAgaWYgKGNvZGUgPT09IFwiaW5jb21wYXRpYmxlLWRvbWFpblwiKSB7XG4gICAgICAgIHJldHVybiBgXFxcXG1hdGh0aXB7XFxcXGVycm9yeyR7d2hlcmV9fX17XFxcXGluICR7c2VyaWFsaXplci5zZXJpYWxpemUoXG4gICAgICAgICAgb3Aob3AxMiwgMylcbiAgICAgICAgKX1cXFxcbm90aW4gJHtzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChvcDEyLCAyKSl9fWA7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGNvZGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIHJldHVybiBgXFxcXGVycm9yeyR7d2hlcmV9fWA7XG4gICAgICByZXR1cm4gYFxcXFxlcnJvcnske3doZXJlfX1gO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiRXJyb3JDb2RlXCIsXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IHN0cmluZ1ZhbHVlKG9wKGV4cHIsIDEpKTtcbiAgICAgIGlmIChjb2RlID09PSBcIm1pc3NpbmdcIilcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIub3B0aW9ucy5taXNzaW5nU3ltYm9sID8/IFwiXFxcXHBsYWNlaG9sZGVye31cIjtcbiAgICAgIGlmIChjb2RlID09PSBcInVuZXhwZWN0ZWQtY29tbWFuZFwiIHx8IGNvZGUgPT09IFwidW5leHBlY3RlZC1vcGVyYXRvclwiIHx8IGNvZGUgPT09IFwidW5leHBlY3RlZC10b2tlblwiIHx8IGNvZGUgPT09IFwiaW52YWxpZC1pZGVudGlmaWVyXCIgfHwgY29kZSA9PT0gXCJ1bmtub3duLWVudmlyb25tZW50XCIgfHwgY29kZSA9PT0gXCJ1bmV4cGVjdGVkLWJhc2VcIiB8fCBjb2RlID09PSBcImluY29tcGF0aWJsZS1kb21haW5cIiB8fCBjb2RlID09PSBcImludmFsaWQtZG9tYWluXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYFxcXFx0ZXh0dGlwe1xcXFxlcnJvcntcXFxcYmxhY2tzcXVhcmV9fXtcXFxcbWF0aHR0eyR7Y29kZX19fWA7XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJGcm9tTGF0ZXhcIixcbiAgICBzZXJpYWxpemU6IChfc2VyaWFsaXplciwgZXhwcikgPT4ge1xuICAgICAgcmV0dXJuIGBcXFxcdGV4dHR0eyR7c2FuaXRpemVMYXRleChzdHJpbmdWYWx1ZShvcChleHByLCAxKSkpfX1gO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTGF0ZXhcIixcbiAgICBzZXJpYWxpemU6IChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICByZXR1cm4gam9pbkxhdGV4KFxuICAgICAgICBtYXBBcmdzKGV4cHIsICh4KSA9PiBzdHJpbmdWYWx1ZSh4KSA/PyBzZXJpYWxpemVyLnNlcmlhbGl6ZSh4KSlcbiAgICAgICk7XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJMYXRleFN0cmluZ1wiLFxuICAgIHNlcmlhbGl6ZTogKHNlcmlhbGl6ZXIsIGV4cHIpID0+IHtcbiAgICAgIGlmIChleHByID09PSBudWxsKVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIHJldHVybiBqb2luTGF0ZXgobWFwQXJncyhleHByLCAoeCkgPT4gc2VyaWFsaXplci5zZXJpYWxpemUoeCkpKTtcbiAgICB9XG4gIH0sXG4gIHsgbmFtZTogXCJMYXRleFRva2Vuc1wiLCBzZXJpYWxpemU6IHNlcmlhbGl6ZUxhdGV4VG9rZW5zIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxpc3RcIixcbiAgICBraW5kOiBcIm1hdGNoZml4XCIsXG4gICAgb3BlblRyaWdnZXI6IFwiXFxcXGxicmFja1wiLFxuICAgIGNsb3NlVHJpZ2dlcjogXCJcXFxccmJyYWNrXCIsXG4gICAgcGFyc2U6IHBhcnNlTGlzdCxcbiAgICBzZXJpYWxpemU6IChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgICByZXR1cm4gam9pbkxhdGV4KFtcbiAgICAgICAgXCJcXFxcbGJyYWNrXCIsXG4gICAgICAgIHNlcmlhbGl6ZU9wcyhcIiwgXCIpKHNlcmlhbGl6ZXIsIGV4cHIpLFxuICAgICAgICBcIlxcXFxyYnJhY2tcIlxuICAgICAgXSk7XG4gICAgfVxuICB9LFxuICAvLyBTeW5vbnltcyBmb3IgTGlzdFxuICB7XG4gICAga2luZDogXCJtYXRjaGZpeFwiLFxuICAgIG9wZW5UcmlnZ2VyOiBcIltcIixcbiAgICBjbG9zZVRyaWdnZXI6IFwiXVwiLFxuICAgIHBhcnNlOiBwYXJzZUxpc3RcbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwibWF0Y2hmaXhcIixcbiAgICBvcGVuVHJpZ2dlcjogXCJcXFxcW1wiLFxuICAgIGNsb3NlVHJpZ2dlcjogXCJcXFxcXVwiLFxuICAgIHBhcnNlOiBwYXJzZUxpc3RcbiAgfSxcbiAgLy8gU3lub255bXMgZm9yIERlbGltaXRlclxuICB7XG4gICAga2luZDogXCJtYXRjaGZpeFwiLFxuICAgIG9wZW5UcmlnZ2VyOiBcIihcIixcbiAgICBjbG9zZVRyaWdnZXI6IFwiKVwiLFxuICAgIHBhcnNlOiBwYXJzZURlbGltaXRlclxuICB9LFxuICB7XG4gICAga2luZDogXCJtYXRjaGZpeFwiLFxuICAgIG9wZW5UcmlnZ2VyOiBcIlxcXFxscGFyZW5cIixcbiAgICBjbG9zZVRyaWdnZXI6IFwiXFxcXHJwYXJlblwiLFxuICAgIHBhcnNlOiBwYXJzZURlbGltaXRlclxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCIsXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBwcmVjZWRlbmNlOiAyMCxcbiAgICAvLyBVbmxpa2UgdGhlIG1hdGNoZml4IHZlcnNpb24gb2YgTGlzdCxcbiAgICAvLyB3aGVuIHRoZSBjb21tYSBvcGVyYXRvciBpcyB1c2VkLCB0aGUgbGhzIGFuZCByaHMgYXJlIGZsYXR0ZW5lZCxcbiAgICAvLyBpLmUuIGAxLDIsM2AgLT4gYFtcIkRlbGltaXRlclwiLCBbXCJMaXN0XCIsIDEsIDIsIDNdLCAgXCIsXCJdYCxcbiAgICAvLyBhbmQgYDEsICgyLCAzKWAgLT4gYFtcIkRlbGltaXRlclwiLFxuICAgIC8vIFtcIlNlcXVlbmNlXCIsIDEsIFtcIkRlbGltaXRlclwiLCBbXCJMaXN0XCIsIDIsIDNdLCAgXCIoKVwiLCBcIixcIl1dXSxcbiAgICBwYXJzZTogKHBhcnNlciwgbGhzLCB0ZXJtaW5hdG9yKSA9PiB7XG4gICAgICBjb25zdCBzZXEgPSBwYXJzZVNlcXVlbmNlKHBhcnNlciwgdGVybWluYXRvciwgbGhzLCAyMCwgXCIsXCIpO1xuICAgICAgaWYgKHNlcSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gW1wiU2VxdWVuY2VcIiwgLi4uc2VxXTtcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlNlcXVlbmNlXCIsXG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemVPcHMoXCJcIilcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiO1wiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgcHJlY2VkZW5jZTogMTksXG4gICAgcGFyc2U6IChwYXJzZXIsIGxocywgdGVybWluYXRvcikgPT4ge1xuICAgICAgY29uc3Qgc2VxID0gcGFyc2VTZXF1ZW5jZShwYXJzZXIsIHRlcm1pbmF0b3IsIGxocywgMTksIFwiO1wiKTtcbiAgICAgIGlmIChzZXEgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgXCJTZXF1ZW5jZVwiLFxuICAgICAgICAuLi5zZXEubWFwKFxuICAgICAgICAgICh4KSA9PiBoZWFkKHgpID09PSBcIlNlcXVlbmNlXCIgPyBbXCJMaXN0XCIsIC4uLm9wcyh4KSA/PyBbXV0gOiB4XG4gICAgICAgIClcbiAgICAgIF07XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJTdHJpbmdcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFx0ZXh0XCJdLFxuICAgIHBhcnNlOiAoc2Nhbm5lcikgPT4gcGFyc2VUZXh0UnVuKHNjYW5uZXIpLFxuICAgIHNlcmlhbGl6ZTogKHNlcmlhbGl6ZXIsIGV4cHIpID0+IHtcbiAgICAgIGNvbnN0IGFyZ3MgPSBvcHMoZXhwcik7XG4gICAgICBpZiAoYXJncyA9PT0gbnVsbCB8fCBhcmdzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIFwiXFxcXHRleHR7fVwiO1xuICAgICAgcmV0dXJuIGpvaW5MYXRleChbXG4gICAgICAgIFwiXFxcXHRleHR7XCIsXG4gICAgICAgIGFyZ3MubWFwKCh4KSA9PiBzZXJpYWxpemVyLnNlcmlhbGl6ZSh4KSkuam9pbihcIlwiKSxcbiAgICAgICAgXCJ9XCJcbiAgICAgIF0pO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3Vic2NyaXB0XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJfXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBzZXJpYWxpemU6IChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgICBpZiAobm9wcyhleHByKSA9PT0gMikge1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpICsgXCJfe1wiICsgc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMikpICsgXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJfe1wiICsgc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpICsgXCJ9XCI7XG4gICAgfVxuICB9LFxuICB7IG5hbWU6IFwiU3VwZXJwbHVzXCIsIGxhdGV4VHJpZ2dlcjogW1wiXlwiLCBcIitcIl0sIGtpbmQ6IFwicG9zdGZpeFwiIH0sXG4gIHsgbmFtZTogXCJTdWJwbHVzXCIsIGxhdGV4VHJpZ2dlcjogW1wiX1wiLCBcIitcIl0sIGtpbmQ6IFwicG9zdGZpeFwiIH0sXG4gIHsgbmFtZTogXCJTdXBlcm1pbnVzXCIsIGxhdGV4VHJpZ2dlcjogW1wiXlwiLCBcIi1cIl0sIGtpbmQ6IFwicG9zdGZpeFwiIH0sXG4gIHsgbmFtZTogXCJTdWJtaW51c1wiLCBsYXRleFRyaWdnZXI6IFtcIl9cIiwgXCItXCJdLCBraW5kOiBcInBvc3RmaXhcIiB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCIsIFwiKlwiXSxcbiAgICBraW5kOiBcInBvc3RmaXhcIixcbiAgICBwYXJzZTogKF9wYXJzZXIsIGxocykgPT4gW1wiU3VwZXJzdGFyXCIsIGxoc11cbiAgfSxcbiAgLy8geyBuYW1lOiAnU3VwZXJzdGFyJywgbGF0ZXhUcmlnZ2VyOiBbJ14nLCAnXFxcXHN0YXInXSwga2luZDogJ3Bvc3RmaXgnIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIl9cIiwgXCIqXCJdLFxuICAgIGtpbmQ6IFwicG9zdGZpeFwiLFxuICAgIHBhcnNlOiAoX3BhcnNlciwgbGhzKSA9PiBbXCJTdWJzdGFyXCIsIGxoc11cbiAgfSxcbiAgeyBuYW1lOiBcIlN1YnN0YXJcIiwgbGF0ZXhUcmlnZ2VyOiBbXCJfXCIsIFwiXFxcXHN0YXJcIl0sIGtpbmQ6IFwicG9zdGZpeFwiIH0sXG4gIHsgbmFtZTogXCJTdXBlcmRhZ2dlclwiLCBsYXRleFRyaWdnZXI6IFtcIl5cIiwgXCJcXFxcZGFnZ2VyXCJdLCBraW5kOiBcInBvc3RmaXhcIiB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCIsIFwiXFxcXGRhZ1wiXSxcbiAgICBraW5kOiBcInBvc3RmaXhcIixcbiAgICBwYXJzZTogKF9wYXJzZXIsIGxocykgPT4gW1wiU3VwZXJkYWdnZXJcIiwgbGhzXVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJQcmltZVwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXlwiLCBcIlxcXFxwcmltZVwiXSxcbiAgICAvLyBOb3RlOiB3ZSBkb24ndCBuZWVkIGEgcHJlY2VkZW5jZSBiZWNhdXNlIHRoZSB0cmlnZ2VyIGlzICdeJ1xuICAgIC8vIGFuZCAnXicgKGFuZCAnXycpIGFyZSB0cmVhdGVkIHNwZWNpYWxseSBieSB0aGUgcGFyc2VyLlxuICAgIGtpbmQ6IFwicG9zdGZpeFwiLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMpID0+IHBhcnNlUHJpbWUocGFyc2VyLCBsaHMsIDEpLFxuICAgIHNlcmlhbGl6ZTogKHNlcmlhbGl6ZXIsIGV4cHIpID0+IHtcbiAgICAgIGNvbnN0IG4yID0gbWFjaGluZVZhbHVlKG9wKGV4cHIsIDIpKSA/PyAxO1xuICAgICAgY29uc3QgYmFzZSA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGV4cHIsIDEpKTtcbiAgICAgIGlmIChuMiA9PT0gMSlcbiAgICAgICAgcmV0dXJuIGJhc2UgKyBcIl5cXFxccHJpbWVcIjtcbiAgICAgIGlmIChuMiA9PT0gMilcbiAgICAgICAgcmV0dXJuIGJhc2UgKyBcIl5cXFxcZG91YmxlcHJpbWVcIjtcbiAgICAgIGlmIChuMiA9PT0gMylcbiAgICAgICAgcmV0dXJuIGJhc2UgKyBcIl5cXFxcdHJpcGxlcHJpbWVcIjtcbiAgICAgIHJldHVybiBiYXNlICsgXCJeeyhcIiArIHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGV4cHIsIDIpKSArIFwiKX1cIjtcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFwiXntcXFxccHJpbWVcXFxccHJpbWV9XCIsXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcGFyc2U6IChwYXJzZXIsIGxocykgPT4gcGFyc2VQcmltZShwYXJzZXIsIGxocywgMilcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogXCJee1xcXFxwcmltZVxcXFxwcmltZVxcXFxwcmltZX1cIixcbiAgICBraW5kOiBcInBvc3RmaXhcIixcbiAgICBwYXJzZTogKHBhcnNlciwgbGhzKSA9PiBwYXJzZVByaW1lKHBhcnNlciwgbGhzLCAzKVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCIsIFwiXFxcXGRvdWJsZXByaW1lXCJdLFxuICAgIGtpbmQ6IFwicG9zdGZpeFwiLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMpID0+IHBhcnNlUHJpbWUocGFyc2VyLCBsaHMsIDIpXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIl5cIiwgXCJcXFxcdHJpcGxlcHJpbWVcIl0sXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcGFyc2U6IChwYXJzZXIsIGxocykgPT4gcGFyc2VQcmltZShwYXJzZXIsIGxocywgMylcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogXCInXCIsXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcHJlY2VkZW5jZTogODEwLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMpID0+IHBhcnNlUHJpbWUocGFyc2VyLCBsaHMsIDEpXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXHByaW1lXCIsXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcHJlY2VkZW5jZTogODEwLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMpID0+IHBhcnNlUHJpbWUocGFyc2VyLCBsaHMsIDEpXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXGRvdWJsZXByaW1lXCIsXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcHJlY2VkZW5jZTogODEwLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMpID0+IHBhcnNlUHJpbWUocGFyc2VyLCBsaHMsIDIpXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXHRyaXBsZXByaW1lXCIsXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcHJlY2VkZW5jZTogODEwLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMpID0+IHBhcnNlUHJpbWUocGFyc2VyLCBsaHMsIDMpXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIl5cIiwgXCI8ez5cIiwgXCIoXCJdLFxuICAgIGtpbmQ6IFwicG9zdGZpeFwiLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMpID0+IHtcbiAgICAgIGlmICghcGFyc2VyLmNvbXB1dGVFbmdpbmU/LmJveChsaHMpPy5kb21haW4uaXNGdW5jdGlvbilcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBjb25zdCBzdGFydCA9IHBhcnNlci5pbmRleDtcbiAgICAgIHBhcnNlci5hZGRCb3VuZGFyeShbXCIpXCJdKTtcbiAgICAgIGNvbnN0IGV4cHIgPSBwYXJzZXIucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICBpZiAoIXBhcnNlci5tYXRjaEJvdW5kYXJ5KCkpIHtcbiAgICAgICAgcGFyc2VyLmluZGV4ID0gc3RhcnQ7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCFwYXJzZXIubWF0Y2goXCI8fT5cIikpIHtcbiAgICAgICAgcGFyc2VyLmluZGV4ID0gc3RhcnQ7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtcIkRlcml2YXRpdmVcIiwgbGhzLCBleHByXTtcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkludmVyc2VGdW5jdGlvblwiLFxuICAgIGxhdGV4VHJpZ2dlcjogXCJeey0xfVwiLFxuICAgIGtpbmQ6IFwicG9zdGZpeFwiLFxuICAgIHBhcnNlOiAocGFyc2VyLCBsaHMpID0+IHtcbiAgICAgIGlmIChwYXJzZXIuY29tcHV0ZUVuZ2luZT8uYm94KGxocyk/LmRvbWFpbi5pc0Z1bmN0aW9uKVxuICAgICAgICByZXR1cm4gW1wiSW52ZXJzZUZ1bmN0aW9uXCIsIGxoc107XG4gICAgICByZXR1cm4gW1wiUG93ZXJcIiwgbWlzc2luZ0lmRW1wdHkobGhzKSwgLTFdO1xuICAgIH0sXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4gc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpICsgXCJeey0xfVwiXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkRlcml2YXRpdmVcIixcbiAgICBzZXJpYWxpemU6IChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgICBjb25zdCBkZWdyZWUgPSBtYWNoaW5lVmFsdWUob3AoZXhwciwgMikpID8/IDE7XG4gICAgICBjb25zdCBiYXNlID0gc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpO1xuICAgICAgaWYgKGRlZ3JlZSA9PT0gMSlcbiAgICAgICAgcmV0dXJuIGJhc2UgKyBcIl57XFxcXHByaW1lfVwiO1xuICAgICAgaWYgKGRlZ3JlZSA9PT0gMilcbiAgICAgICAgcmV0dXJuIGJhc2UgKyBcIl57XFxcXGRvdWJsZXByaW1lfVwiO1xuICAgICAgaWYgKGRlZ3JlZSA9PT0gMylcbiAgICAgICAgcmV0dXJuIGJhc2UgKyBcIl57XFxcXHRyaXBsZXByaW1lfVwiO1xuICAgICAgcmV0dXJuIGJhc2UgKyBcIl57KFwiICsgc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMikpICsgXCIpfVwiO1xuICAgIH1cbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwiZW52aXJvbm1lbnRcIixcbiAgICBuYW1lOiBcIldoaWNoXCIsXG4gICAgaWRlbnRpZmllclRyaWdnZXI6IFwiY2FzZXNcIixcbiAgICBwYXJzZTogKHBhcnNlcikgPT4ge1xuICAgICAgY29uc3QgdGFidWxhciA9IHBhcnNlci5wYXJzZVRhYnVsYXIoKTtcbiAgICAgIGlmICghdGFidWxhcilcbiAgICAgICAgcmV0dXJuIFtcIldoaWNoXCJdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gW1wiV2hpY2hcIl07XG4gICAgICBmb3IgKGNvbnN0IHJvdyBvZiB0YWJ1bGFyKSB7XG4gICAgICAgIGlmIChyb3cubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goXCJUcnVlXCIpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHJvd1swXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocm93Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgIGNvbnN0IHMgPSBzdHJpbmdWYWx1ZShyb3dbMV0pO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHMgPyBcIlRydWVcIiA6IHN0cmlwVGV4dChyb3dbMV0pID8/IFwiVHJ1ZVwiKTtcbiAgICAgICAgICByZXN1bHQucHVzaChyb3dbMF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplMiwgZXhwcikgPT4ge1xuICAgICAgY29uc3Qgcm93cyA9IFtdO1xuICAgICAgY29uc3QgYXJncyA9IG9wcyhleHByKTtcbiAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGFyZ3MubGVuZ3RoIC0gMjsgaSArPSAyKSB7XG4gICAgICAgICAgY29uc3Qgcm93ID0gW107XG4gICAgICAgICAgcm93LnB1c2goc2VyaWFsaXplMi5zZXJpYWxpemUoYXJnc1tpICsgMV0pKTtcbiAgICAgICAgICByb3cucHVzaChzZXJpYWxpemUyLnNlcmlhbGl6ZShhcmdzW2ldKSk7XG4gICAgICAgICAgcm93cy5wdXNoKHJvdy5qb2luKFwiJlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBqb2luTGF0ZXgoW1wiXFxcXGJlZ2lue2Nhc2VzfVwiLCByb3dzLmpvaW4oXCJcXFxcXFxcXFwiKSwgXCJcXFxcZW5ke2Nhc2VzfVwiXSk7XG4gICAgfVxuICB9XG5dO1xuZnVuY3Rpb24gcGFyc2VUZXh0UnVuKHBhcnNlciwgc3R5bGUpIHtcbiAgaWYgKCFwYXJzZXIubWF0Y2goXCI8ez5cIikpXG4gICAgcmV0dXJuIFwiJydcIjtcbiAgY29uc3QgcnVucyA9IFtdO1xuICBsZXQgdGV4dCA9IFwiXCI7XG4gIGxldCBydW5pblN0eWxlID0gbnVsbDtcbiAgd2hpbGUgKCFwYXJzZXIuYXRFbmQgJiYgIXBhcnNlci5tYXRjaChcIjx9PlwiKSkge1xuICAgIGlmIChwYXJzZXIucGVlayA9PT0gXCI8ez5cIikge1xuICAgICAgcnVucy5wdXNoKHBhcnNlVGV4dFJ1bihwYXJzZXIpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnNlci5tYXRjaChcIlxcXFx0ZXh0YmZcIikgJiYgcGFyc2VyLm1hdGNoKFwiPHs+XCIpKSB7XG4gICAgICBydW5zLnB1c2gocGFyc2VUZXh0UnVuKHBhcnNlciwgeyBcImZvbnQtd2VpZ2h0XCI6IFwiYm9sZFwiIH0pKTtcbiAgICB9IGVsc2UgaWYgKHBhcnNlci5tYXRjaChcIlxcXFxjb2xvclwiKSkge1xuICAgICAgY29uc3QgY29sb3IgPSBwYXJzZXIucGFyc2VTdHJpbmdHcm91cCgpO1xuICAgICAgaWYgKGNvbG9yICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChydW5pblN0eWxlICE9PSBudWxsICYmIHRleHQpIHtcbiAgICAgICAgICBydW5zLnB1c2goW1wiU3R5bGVcIiwgdGV4dCwgeyBkaWN0OiBydW5pblN0eWxlIH1dKTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0KSB7XG4gICAgICAgICAgcnVucy5wdXNoKFtcIlN0cmluZ1wiLCB0ZXh0XSk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IFwiXCI7XG4gICAgICAgIHJ1bmluU3R5bGUgPSB7IGNvbG9yIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJzZXIubWF0Y2goXCI8c3BhY2U+XCIpKSB7XG4gICAgICB0ZXh0ICs9IFwiIFwiO1xuICAgIH0gZWxzZSBpZiAocGFyc2VyLm1hdGNoKFwiPCQ+XCIpKSB7XG4gICAgICBjb25zdCBpbmRleCA9IHBhcnNlci5pbmRleDtcbiAgICAgIGNvbnN0IGV4cHIgPSBwYXJzZXIucGFyc2VFeHByZXNzaW9uKCkgPz8gW1wiU2VxdWVuY2VcIl07XG4gICAgICBwYXJzZXIuc2tpcFNwYWNlKCk7XG4gICAgICBpZiAocGFyc2VyLm1hdGNoKFwiPCQ+XCIpKSB7XG4gICAgICAgIHJ1bnMucHVzaChleHByKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgKz0gXCIkXCI7XG4gICAgICAgIHBhcnNlci5pbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyc2VyLm1hdGNoKFwiPCQkPlwiKSkge1xuICAgICAgY29uc3QgaW5kZXggPSBwYXJzZXIuaW5kZXg7XG4gICAgICBjb25zdCBleHByID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbigpID8/IFtcIlNlcXVlbmNlXCJdO1xuICAgICAgcGFyc2VyLnNraXBTcGFjZSgpO1xuICAgICAgaWYgKHBhcnNlci5tYXRjaChcIjwkJD5cIikpIHtcbiAgICAgICAgcnVucy5wdXNoKGV4cHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCArPSBcIiQkXCI7XG4gICAgICAgIHBhcnNlci5pbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZVxuICAgICAgdGV4dCArPSBwYXJzZXIubWF0Y2hDaGFyKCkgPz8gcGFyc2VyLm5leHRUb2tlbigpO1xuICB9XG4gIGlmIChydW5pblN0eWxlICE9PSBudWxsICYmIHRleHQpIHtcbiAgICBydW5zLnB1c2goW1wiU3R5bGVcIiwgYCcke3RleHR9J2AsIHsgZGljdDogcnVuaW5TdHlsZSB9XSk7XG4gIH0gZWxzZSBpZiAodGV4dCkge1xuICAgIHJ1bnMucHVzaChgJyR7dGV4dH0nYCk7XG4gIH1cbiAgbGV0IGJvZHk7XG4gIGlmIChydW5zLmxlbmd0aCA9PT0gMSlcbiAgICBib2R5ID0gcnVuc1swXTtcbiAgZWxzZSB7XG4gICAgaWYgKHJ1bnMuZXZlcnkoKHgpID0+IHN0cmluZ1ZhbHVlKHgpICE9PSBudWxsKSlcbiAgICAgIGJvZHkgPSBcIidcIiArIHJ1bnMubWFwKCh4KSA9PiBzdHJpbmdWYWx1ZSh4KSkuam9pbigpICsgXCInXCI7XG4gICAgZWxzZVxuICAgICAgYm9keSA9IFtcIlN0cmluZ1wiLCAuLi5ydW5zXTtcbiAgfVxuICByZXR1cm4gc3R5bGUgPyBbXCJTdHlsZVwiLCBib2R5LCB7IGRpY3Q6IHN0eWxlIH1dIDogYm9keTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUxhdGV4VG9rZW5zKHNlcmlhbGl6ZXIsIGV4cHIpIHtcbiAgaWYgKGV4cHIgPT09IG51bGwpXG4gICAgcmV0dXJuIFwiXCI7XG4gIHJldHVybiBqb2luTGF0ZXgoXG4gICAgbWFwQXJncyhleHByLCAoeCkgPT4ge1xuICAgICAgY29uc3QgcyA9IHN0cmluZ1ZhbHVlKHgpO1xuICAgICAgaWYgKHMgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBzZXJpYWxpemVyLnNlcmlhbGl6ZSh4KTtcbiAgICAgIGlmIChzID09PSBcIjx7PlwiKVxuICAgICAgICByZXR1cm4gXCJ7XCI7XG4gICAgICBpZiAocyA9PT0gXCI8fT5cIilcbiAgICAgICAgcmV0dXJuIFwifVwiO1xuICAgICAgaWYgKHMgPT09IFwiPCQ+XCIpXG4gICAgICAgIHJldHVybiBcIiRcIjtcbiAgICAgIGlmIChzID09PSBcIjwkJD5cIilcbiAgICAgICAgcmV0dXJuIFwiJCRcIjtcbiAgICAgIGlmIChzID09PSBcIjxzcGFjZT5cIilcbiAgICAgICAgcmV0dXJuIFwiIFwiO1xuICAgICAgcmV0dXJuIHM7XG4gICAgfSlcbiAgKTtcbn1cbmZ1bmN0aW9uIHNhbml0aXplTGF0ZXgocykge1xuICBpZiAocyA9PT0gbnVsbClcbiAgICByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIHMucmVwbGFjZShcbiAgICAvW3t9XFxbXFxdXFxcXDpcXC1cXCQlXS9nLFxuICAgIChjKSA9PiAoe1xuICAgICAgXCJ7XCI6IFwiXFxcXGxicmFjZSBcIixcbiAgICAgIFwifVwiOiBcIlxcXFxyYnJhY2UgXCIsXG4gICAgICBcIltcIjogXCJcXFxcbGJyYWNrIFwiLFxuICAgICAgXCJdXCI6IFwiXFxcXHJicmFjayBcIixcbiAgICAgIFwiOlwiOiBcIlxcXFxjb2xvbiBcIixcbiAgICAgIFwiXFxcXFwiOiBcIlxcXFxiYWNrc2xhc2ggXCJcbiAgICB9KVtjXSA/PyBcIlxcXFxcIiArIGNcbiAgKTtcbn1cbmZ1bmN0aW9uIGVycm9yQ29udGV4dEFzTGF0ZXgoc2VyaWFsaXplciwgZXJyb3IpIHtcbiAgY29uc3QgYXJnID0gb3AoZXJyb3IsIDIpO1xuICBpZiAoIWFyZylcbiAgICByZXR1cm4gXCJcIjtcbiAgaWYgKGhlYWQoYXJnKSA9PT0gXCJMYXRleFwiKVxuICAgIHJldHVybiBgXFxcXHRleHR0dHske3Nhbml0aXplTGF0ZXgoc3RyaW5nVmFsdWUob3AoYXJnLCAxKSkgPz8gXCJcIil9fWA7XG4gIGlmIChoZWFkKGFyZykgPT09IFwiSG9sZFwiKVxuICAgIHJldHVybiBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChhcmcsIDEpKTtcbiAgcmV0dXJuIHNlcmlhbGl6ZXIuc2VyaWFsaXplKGFyZyk7XG59XG5mdW5jdGlvbiBwYXJzZVByaW1lKHBhcnNlciwgbGhzLCBvcmRlcjIpIHtcbiAgY29uc3QgbGhzaCA9IGhlYWQobGhzKTtcbiAgaWYgKGxoc2ggPT09IFwiRGVyaXZhdGl2ZVwiIHx8IGxoc2ggPT09IFwiUHJpbWVcIikge1xuICAgIGNvbnN0IG4gPSBtYWNoaW5lVmFsdWUob3AobGhzLCAyKSkgPz8gMTtcbiAgICByZXR1cm4gW2xoc2gsIG1pc3NpbmdJZkVtcHR5KG9wKGxocywgMSkpLCBuICsgb3JkZXIyXTtcbiAgfVxuICBpZiAocGFyc2VyLmNvbXB1dGVFbmdpbmU/LmJveChsaHMpPy5kb21haW4uaXNGdW5jdGlvbikge1xuICAgIGlmIChvcmRlcjIgPT09IDEpXG4gICAgICByZXR1cm4gW1wiRGVyaXZhdGl2ZVwiLCBsaHNdO1xuICAgIHJldHVybiBbXCJEZXJpdmF0aXZlXCIsIGxocywgb3JkZXIyXTtcbiAgfVxuICBpZiAob3JkZXIyID09PSAxKVxuICAgIHJldHVybiBbXCJQcmltZVwiLCBtaXNzaW5nSWZFbXB0eShsaHMpXTtcbiAgcmV0dXJuIFtcIlByaW1lXCIsIG1pc3NpbmdJZkVtcHR5KGxocyksIG9yZGVyMl07XG59XG5mdW5jdGlvbiBwYXJzZURlbGltaXRlcihwYXJzZXIsIGJvZHkpIHtcbiAgaWYgKGJvZHkgPT09IG51bGwgfHwgaXNFbXB0eVNlcXVlbmNlKGJvZHkpKVxuICAgIHJldHVybiBbXCJTZXF1ZW5jZVwiXTtcbiAgaWYgKGhlYWQoYm9keSkgPT09IFwiU2VxdWVuY2VcIikge1xuICAgIGlmIChub3BzKGJvZHkpID09PSAwKVxuICAgICAgcmV0dXJuIFtcIkRlbGltaXRlclwiXTtcbiAgICByZXR1cm4gW1wiRGVsaW1pdGVyXCIsIFtcIlNlcXVlbmNlXCIsIC4uLm9wcyhib2R5KSA/PyBbXV1dO1xuICB9XG4gIHJldHVybiBbXCJEZWxpbWl0ZXJcIiwgYm9keV07XG59XG5mdW5jdGlvbiBwYXJzZUxpc3QoX3BhcnNlciwgYm9keSkge1xuICBpZiAoYm9keSA9PT0gbnVsbCB8fCBpc0VtcHR5U2VxdWVuY2UoYm9keSkpXG4gICAgcmV0dXJuIFtcIkxpc3RcIl07XG4gIGlmIChoZWFkKGJvZHkpICE9PSBcIlNlcXVlbmNlXCIgJiYgaGVhZChib2R5KSAhPT0gXCJMaXN0XCIpXG4gICAgcmV0dXJuIFtcIkxpc3RcIiwgYm9keV07XG4gIHJldHVybiBbXCJMaXN0XCIsIC4uLm9wcyhib2R5KSA/PyBbXV07XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9sYXRleC1zeW50YXgvZGljdGlvbmFyeS9kZWZpbml0aW9ucy1pbmVxdWFsaXRpZXMudHNcbnZhciBERUZJTklUSU9OU19JTkVRVUFMSVRJRVMgPSBbXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxub3RcIiwgXCI8XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQ2LFxuICAgIHBhcnNlOiBcIk5vdExlc3NcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3RMZXNzXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbmxlc3NcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNDZcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiPFwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI0NSxcbiAgICBwYXJzZTogXCJMZXNzXCJcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTGVzc1wiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGx0XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQ1XG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIjxcIiwgXCI9XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQxLFxuICAgIHBhcnNlOiBcIkxlc3NFcXVhbFwiXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxlc3NFcXVhbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGxlXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQxXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxsZXFcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNDEsXG4gICAgcGFyc2U6IFwiTGVzc0VxdWFsXCJcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGxlcXNsYW50XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjY1LFxuICAgIC8vIE5vdGUgZGlmZmVyZW50IHByZWNlZGVuY2UgdGhhbiBgPD1gIGFzIHBlciBNYXRoTUxcbiAgICBwYXJzZTogXCJMZXNzRXF1YWxcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJMZXNzTm90RXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxsbmVxcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3RMZXNzTm90RXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxubGVxcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJMZXNzT3ZlckVxdWFsXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbGVxcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2NVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJHcmVhdGVyT3ZlckVxdWFsXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZ2VxcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2NSxcbiAgICBwYXJzZTogXCJHcmVhdGVyRXF1YWxcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJFcXVhbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiPVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCIqXCIsIFwiPVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MCxcbiAgICBwYXJzZTogXCJTdGFyRXF1YWxcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJTdGFyRXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzdGFyXCIsIFwiPVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJQbHVzRXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIitcIiwgXCI9XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjYwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk1pbnVzRXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIi1cIiwgXCI9XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjYwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlNsYXNoRXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIi9cIiwgXCI9XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjYwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkVxdWFsRXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIj1cIiwgXCI9XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjYwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkVxdWFsRXF1YWxFcXVhbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiPVwiLCBcIj1cIiwgXCI9XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjY1XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlRpbGRlRnVsbEVxdWFsXCIsXG4gICAgLy8gTWF0aE1MOiBhcHByb3hpbWF0ZWx5IGVxdWFsIHRvXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcY29uZ1wiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3RUaWxkZUZ1bGxFcXVhbFwiLFxuICAgIC8vIE1hdGhNTDogYXBwcm94aW1hdGVseSBidXQgbm90IGFjdHVhbGx5IGVxdWFsIHRvXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbmNvbmdcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNjBcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiOlwiLCBcIj1cIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNjAsXG4gICAgcGFyc2U6IFwiQXNzaWduXCJcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQXNzaWduXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcY29sb25lcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcHByb3hcIixcbiAgICAvLyBOb3RlOiBNYXRoZW1hdGljYSBUaWxkZVRpbGRlXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcYXBwcm94XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQ3XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk5vdEFwcHJveFwiLFxuICAgIC8vIE5vdGU6IE1hdGhlbWF0aWNhIFRpbGRlVGlsZGVcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxub3RcIiwgXCJcXFxcYXBwcm94XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQ3XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkFwcHJveEVxdWFsXCIsXG4gICAgLy8gTm90ZTogTWF0aGVtYXRpY2EgVGlsZGVFcXVhbCwgTWF0aE1MOiBgYXN5bXB0b3RpY2FsbHkgZXF1YWwgdG9gXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcYXBwcm94ZXFcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNjBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTm90QXBwcm94RXF1YWxcIixcbiAgICAvLyBOb3RlOiBNYXRoZW1hdGljYSBOb3RUaWxkZUVxdWFsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbm90XCIsIFwiXFxcXGFwcHJveGVxXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICAvLyBOb3RlOiBubyBMYVRlWCBzeW1ib2wgZm9yIGNoYXIgVSsyMjQ5XG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI1MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3RFcXVhbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXG5lXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjU1XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlVuZXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIiFcIiwgXCI9XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjYwXG4gICAgLy8gTm90ZSBkaWZmZXJlbnQgcHJlY2VuZGVuY2UgdGhhbiBcXFxcbmUgcGVyIE1hdGhNTFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJHcmVhdGVyRXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxnZVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI0MlxuICAgIC8vIE5vdGU6IGRpZmZlcmVudCBwcmVjZW5kZW5jZSB0aGFuIGA+PWAgYXMgcGVyIE1hdGhNTFxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZ2VxXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQyLFxuICAgIC8vIE5vdGU6IGRpZmZlcmVudCBwcmVjZW5kZW5jZSB0aGFuIGA+PWAgYXMgcGVyIE1hdGhNTFxuICAgIHBhcnNlOiBcIkdyZWF0ZXJFcXVhbFwiXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIj5cIiwgXCI9XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQzLFxuICAgIHBhcnNlOiBcIkdyZWF0ZXJFcXVhbFwiXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxnZXFzbGFudFwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2NSxcbiAgICAvLyBOb3RlOiBkaWZmZXJlbnQgcHJlY2VuZGVuY2UgdGhhbiBgPj1gIGFzIHBlciBNYXRoTUxcbiAgICBwYXJzZTogXCJHcmVhdGVyRXF1YWxcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJHcmVhdGVyTm90RXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxnbmVxcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3RHcmVhdGVyTm90RXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxuZ2VxcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCI+XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQ1LFxuICAgIHBhcnNlOiBcIkdyZWF0ZXJcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJHcmVhdGVyXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZ3RcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNDVcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTm90R3JlYXRlclwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXG5ndHJcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNDRcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXG5vdFwiLCBcIj5cIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNDQsXG4gICAgcGFyc2U6IFwiTm90R3JlYXRlclwiXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlJpbmdFcXVhbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGNpcmNlcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJUcmlhbmdsZUVxdWFsXCIsXG4gICAgLy8gTWF0aE1MOiBkZWx0YSBlcXVhbCB0b1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHRyaWFuZ2xlcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJEb3RFcXVhbFwiLFxuICAgIC8vIE1hdGhNTDogYXBwcm9hY2hlcyB0aGUgbGltaXRcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxkb3RlcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2NVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJEb3RFcXVhbERvdFwiLFxuICAgIC8vIE1hdGhNTDogR2VvbWV0cmljYWxseSBlcXVhbFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGRvdGVxZG90XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjY1XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkZhbGxpbmdEb3RFcXVhbFwiLFxuICAgIC8vIE1hdGhNTDogYXBwcm94aW1hdGVseSBlcXVhbCB0byBvciB0aGUgaW1hZ2Ugb2ZcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxmYWxsaW5nZG90c2VxXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjY1XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlJpc2luZ0RvdEVxdWFsXCIsXG4gICAgLy8gTWF0aE1MOiBpbWFnZSBvZiBvciBhcHByb3hpbWF0ZWx5IGVxdWFsIHRvXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZmFsbGluZ2RvdHNlcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2NVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJRdWVzdGlvbkVxdWFsXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxccXVlc3RlcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJNdWNoTGVzc1wiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGxsXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjYwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk11Y2hHcmVhdGVyXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZ2dcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNjBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiUHJlY2VkZXNcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxwcmVjXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjYwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlN1Y2NlZWRzXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcc3VjY1wiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJQcmVjZWRlc0VxdWFsXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxccHJlY2N1cmx5ZXFcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNjBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3VjY2VlZHNFcXVhbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGN1cmx5ZXFwcmVjXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjYwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk5vdFByZWNlZGVzXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbnByZWNcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNjBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTm90U3VjY2VlZHNcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxuc3VjY1wiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJCZXR3ZWVuXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcYmV0d2VlblwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI2NVxuICB9XG5dO1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGF0ZXgtc3ludGF4L2RpY3Rpb25hcnkvZGVmaW5pdGlvbnMtbG9naWMudHNcbnZhciBERUZJTklUSU9OU19MT0dJQyA9IFtcbiAgLy8gQ29uc3RhbnRzXG4gIHtcbiAgICBuYW1lOiBcIlRydWVcIixcbiAgICBraW5kOiBcInN5bWJvbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHRvcFwiXVxuICAgIC8vIFx1MjJBNCBVKzIyQTRcbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwic3ltYm9sXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxtYXRocm17VHJ1ZX1cIixcbiAgICBwYXJzZTogXCJUcnVlXCJcbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwic3ltYm9sXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxvcGVyYXRvcntUcnVlfVwiLFxuICAgIHBhcnNlOiBcIlRydWVcIlxuICB9LFxuICB7XG4gICAga2luZDogXCJzeW1ib2xcIixcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXG1hdGhzZntUfVwiLFxuICAgIHBhcnNlOiBcIlRydWVcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJGYWxzZVwiLFxuICAgIGtpbmQ6IFwic3ltYm9sXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcYm90XCJdXG4gICAgLy8gXHUyMkE1IFUrMjJBNVxuICB9LFxuICB7XG4gICAga2luZDogXCJzeW1ib2xcIixcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXG9wZXJhdG9ye0ZhbHNlfVwiLFxuICAgIHBhcnNlOiBcIlRydWVcIlxuICB9LFxuICB7XG4gICAga2luZDogXCJzeW1ib2xcIixcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXG1hdGhzZntGfVwiLFxuICAgIHBhcnNlOiBcIlRydWVcIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJNYXliZVwiLFxuICAgIGtpbmQ6IFwic3ltYm9sXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxvcGVyYXRvcm5hbWV7TWF5YmV9XCIsXG4gICAgc2VyaWFsaXplOiBcIlxcXFxvcGVyYXRvcm5hbWV7TWF5YmV9XCJcbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwic3ltYm9sXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxtYXRocm17TWF5YmV9XCIsXG4gICAgcGFyc2U6IFwiTWF5YmVcIlxuICB9LFxuICAvLyBPcGVyYXRvcnNcbiAge1xuICAgIG5hbWU6IFwiQW5kXCIsXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGxhbmRcIl0sXG4gICAgcHJlY2VkZW5jZTogMzE3XG4gICAgLy8gc2VyaWFsaXplOiAnXFxcXGxhbmQnLFxuICB9LFxuICB7IGtpbmQ6IFwiaW5maXhcIiwgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcd2VkZ2VcIl0sIHBhcnNlOiBcIkFuZFwiLCBwcmVjZWRlbmNlOiAzMTcgfSxcbiAgeyBraW5kOiBcImluZml4XCIsIGxhdGV4VHJpZ2dlcjogXCJcXFxcJlwiLCBwYXJzZTogXCJBbmRcIiwgcHJlY2VkZW5jZTogMzE3IH0sXG4gIHtcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxvcGVyYXRvcm5hbWV7YW5kfVwiLFxuICAgIHBhcnNlOiBcIkFuZFwiLFxuICAgIHByZWNlZGVuY2U6IDMxN1xuICB9LFxuICB7XG4gICAgbmFtZTogXCJPclwiLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxsb3JcIl0sXG4gICAgcHJlY2VkZW5jZTogMzEwXG4gIH0sXG4gIHsga2luZDogXCJpbmZpeFwiLCBsYXRleFRyaWdnZXI6IFtcIlxcXFx2ZWVcIl0sIHBhcnNlOiBcIk9yXCIsIHByZWNlZGVuY2U6IDMxMCB9LFxuICB7IGtpbmQ6IFwiaW5maXhcIiwgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxwYXJhbGxlbFwiLCBwYXJzZTogXCJPclwiLCBwcmVjZWRlbmNlOiAzMTAgfSxcbiAge1xuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBsYXRleFRyaWdnZXI6IFwiXFxcXG9wZXJhdG9ybmFtZXtvcn1cIixcbiAgICBwYXJzZTogXCJBbmRcIixcbiAgICBwcmVjZWRlbmNlOiAzMTBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiWG9yXCIsXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHZlZWJhclwiXSxcbiAgICBwcmVjZWRlbmNlOiAzMTVcbiAgfSxcbiAgLy8gUG9zc2libGUgYWx0OiBcXG9wbHVzIFx1MjI5NSBVKzIyOTVcbiAge1xuICAgIG5hbWU6IFwiTm90XCIsXG4gICAga2luZDogXCJwcmVmaXhcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxsbm90XCJdLFxuICAgIHByZWNlZGVuY2U6IDg4MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOYW5kXCIsXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGJhcndlZGdlXCJdLFxuICAgIHByZWNlZGVuY2U6IDMxNVxuICAgIC8vIHNlcmlhbGl6ZTogJ1xcXFxtaWQnLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3JcIixcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXHUyMkJEXCJdLFxuICAgIC8vIGJhciB2ZWVcbiAgICBwcmVjZWRlbmNlOiAzMTVcbiAgICAvLyBzZXJpYWxpemU6ICdcXFxcZG93bmFycm93JyxcbiAgfSxcbiAgLy8gRnVuY3Rpb25zXG4gIHtcbiAgICBraW5kOiBcImZ1bmN0aW9uXCIsXG4gICAgaWRlbnRpZmllclRyaWdnZXI6IFwiYW5kXCIsXG4gICAgcGFyc2U6IFwiQW5kXCJcbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIixcbiAgICBpZGVudGlmaWVyVHJpZ2dlcjogXCJvclwiLFxuICAgIHBhcnNlOiBcIk9yXCJcbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIixcbiAgICBpZGVudGlmaWVyVHJpZ2dlcjogXCJub3RcIixcbiAgICBwYXJzZTogXCJOb3RcIlxuICB9LFxuICAvLyBSZWxhdGlvbnNcbiAge1xuICAgIG5hbWU6IFwiSW1wbGllc1wiLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBwcmVjZWRlbmNlOiAyMjAsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGltcGxpZXNcIl0sXG4gICAgc2VyaWFsaXplOiBcIlxcXFxpbXBsaWVzXCJcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXFJpZ2h0YXJyb3dcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIHByZWNlZGVuY2U6IDIyMCxcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcGFyc2U6IFwiSW1wbGllc1wiXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkVxdWl2YWxlbnRcIixcbiAgICAvLyBNYXRoTUw6IGlkZW50aWNhbCB0bywgTWF0aGVtYXRpY2E6IENvbmdydWVudFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGlmZlwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDIxOVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcTGVmdHJpZ2h0YXJyb3dcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyMTksXG4gICAgcGFyc2U6IFwiRXF1aXZhbGVudFwiXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxlcXVpdlwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDIxOSxcbiAgICBwYXJzZTogXCJFcXVpdmFsZW50XCJcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiUHJvdmVzXCIsXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHZkYXNoXCJdLFxuICAgIHByZWNlZGVuY2U6IDIyMCxcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgc2VyaWFsaXplOiBcIlxcXFx2ZGFzaFwiXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkVudGFpbHNcIixcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcdkRhc2hcIl0sXG4gICAgcHJlY2VkZW5jZTogMjIwLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBzZXJpYWxpemU6IFwiXFxcXHZEYXNoXCJcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU2F0aXNmaWVzXCIsXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXG1vZGVsc1wiXSxcbiAgICBwcmVjZWRlbmNlOiAyMjAsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHNlcmlhbGl6ZTogXCJcXFxcbW9kZWxzXCJcbiAgfVxuXTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9kaWN0aW9uYXJ5L2RlZmluaXRpb25zLW90aGVyLnRzXG5mdW5jdGlvbiBwYXJzZVNpbmdsZUFyZyhjbWQpIHtcbiAgcmV0dXJuIChwYXJzZXIpID0+IHtcbiAgICBjb25zdCBhcmcgPSBwYXJzZXIucGFyc2VHcm91cCgpO1xuICAgIHJldHVybiBhcmcgPT09IG51bGwgPyBbY21kXSA6IFtjbWQsIGFyZ107XG4gIH07XG59XG52YXIgREVGSU5JVElPTlNfT1RIRVJTID0gW1xuICB7XG4gICAgbmFtZTogXCJPdmVyc2NyaXB0XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcb3ZlcnNldFwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgcHJlY2VkZW5jZTogNzAwXG4gICAgLy8gQHRvZG86IG5vdCBpbiBNYXRoTUxcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVW5kZXJzY3JpcHRcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFx1bmRlcnNldFwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgcHJlY2VkZW5jZTogNzAwXG4gICAgLy8gQHRvZG86IG5vdCBpbiBNYXRoTUxcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiSW5jcmVtZW50XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCIrXCIsIFwiK1wiXSxcbiAgICBraW5kOiBcInBvc3RmaXhcIixcbiAgICBwcmVjZWRlbmNlOiA4ODBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiRGVjcmVtZW50XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCItXCIsIFwiLVwiXSxcbiAgICBraW5kOiBcInBvc3RmaXhcIixcbiAgICBwcmVjZWRlbmNlOiA4ODBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiUHJlSW5jcmVtZW50XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCIrXCIsIFwiK1wiXSxcbiAgICBraW5kOiBcInByZWZpeFwiLFxuICAgIHByZWNlZGVuY2U6IDg4MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJQcmVEZWNyZW1lbnRcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIi1cIiwgXCItXCJdLFxuICAgIGtpbmQ6IFwicHJlZml4XCIsXG4gICAgcHJlY2VkZW5jZTogODgwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlJpbmdcIixcbiAgICAvLyBBa2EgJ0NvbXBvc2l0aW9uJywgaS5lLiBmdW5jdGlvbiBjb21wb3NpdGlvblxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGNpcmNcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIHByZWNlZGVuY2U6IDI2NVxuICAgIC8vIEB0b2RvOiBNYXRoTUwgaXMgOTUwXG4gICAgLy8gQHRvZG86IGNoZWNrIGxocyBhbmQgcmhzIGFyZSBmdW5jdGlvbnNcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVHJhbnNwb3NlXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCIsIFwiVFwiXSxcbiAgICBraW5kOiBcInBvc3RmaXhcIlxuICAgIC8vIEB0b2RvOiBpZiBsaHMgaXMgYSBsaXN0L3RlbnNvclxuICB9LFxuICB7XG4gICAgLy8gQHRvZG86IGlmIGxocyBpcyBhIGxpc3QvdGVuc29yXG4gICAgbmFtZTogXCJDb25qdWdhdGVUcmFuc3Bvc2VcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIl5cIiwgXCJIXCJdLFxuICAgIGtpbmQ6IFwicG9zdGZpeFwiXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlN0cmluZ0pvaW5cIixcbiAgICAvLyBAdG9kbyBGcm9tIE1hdGhlbWF0aWNhLi4uP1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGx0XCIsIFwiXFxcXGd0XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBwcmVjZWRlbmNlOiA3ODBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3RhcnN0YXJcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzdGFyXCIsIFwiXFxcXHN0YXJcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIHByZWNlZGVuY2U6IDc4MFxuICB9LFxuICB7XG4gICAgLy8gUGFydGlhbCBkZXJpdmF0aXZlIHVzaW5nIGEgdmFyaWF0aW9uIG9mIHRoZSBFdWxlciBub3RhdGlvbjogYFx1MjIwMl94Zih4KWBcbiAgICAvLyAodGhlIEV1bGVyIG5vdGF0aW9uIHVzZXMgYERfMWYoeClgIHdoZXJlIFwiMVwiIGlzIGZvciB0aGUgZmlyc3QgdmFyaWFibGVcbiAgICAvLyBGb3IgdGhlIExlaWJuaXogbm90YXRpb24gc2VlICdEaXZpZGUnIHRoYXQgaGFuZGxlcyBgXHUyMjAyZi9cdTIyMDJ4YFxuICAgIG5hbWU6IFwiUGFydGlhbERlcml2YXRpdmVcIixcbiAgICAvLyBQYXJ0aWFsRGVyaXZhdGl2ZShleHByLCB7bGlzdHMgb2YgdmFyc30sIGRlZ3JlZSlcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxwYXJ0aWFsXCJdLFxuICAgIGtpbmQ6IFwicHJlZml4XCIsXG4gICAgcGFyc2U6IChwYXJzZXIpID0+IHtcbiAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICBsZXQgc3VwID0gXCJOb3RoaW5nXCI7XG4gICAgICBsZXQgc3ViMiA9IFwiTm90aGluZ1wiO1xuICAgICAgd2hpbGUgKCFkb25lKSB7XG4gICAgICAgIHBhcnNlci5za2lwU3BhY2UoKTtcbiAgICAgICAgaWYgKHBhcnNlci5tYXRjaChcIl9cIikpIHtcbiAgICAgICAgICBzdWIyID0gcGFyc2VyLnBhcnNlR3JvdXAoKSA/PyBwYXJzZXIucGFyc2VUb2tlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcnNlci5tYXRjaChcIl5cIikpIHtcbiAgICAgICAgICBzdXAgPSBwYXJzZXIucGFyc2VHcm91cCgpID8/IHBhcnNlci5wYXJzZVRva2VuKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHNlcSA9IGdldFNlcXVlbmNlKHN1YjIpO1xuICAgICAgaWYgKHNlcSlcbiAgICAgICAgc3ViMiA9IFtcIkxpc3RcIiwgLi4uc2VxXTtcbiAgICAgIGlmIChzdWIyID09PSBudWxsIHx8IHN1cCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBsZXQgcmhzID0gcGFyc2VyLnBhcnNlR3JvdXAoKSA/PyBcIk5vdGhpbmdcIjtcbiAgICAgIGlmIChyaHMgIT09IFwiTm90aGluZ1wiICYmICFpc0VtcHR5U2VxdWVuY2UocmhzKSkge1xuICAgICAgICBjb25zdCBhcmdzID0gcGFyc2VyLnBhcnNlQXJndW1lbnRzKCkgPz8gW1wiTm90aGluZ1wiXTtcbiAgICAgICAgcmhzID0gW3JocywgLi4uYXJnc107XG4gICAgICB9XG4gICAgICByZXR1cm4gW1wiUGFydGlhbERlcml2YXRpdmVcIiwgcmhzLCBzdWIyLCBzdXBdO1xuICAgIH0sXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4ge1xuICAgICAgbGV0IHJlc3VsdCA9IFwiXFxcXHBhcnRpYWxcIjtcbiAgICAgIGNvbnN0IGZuID0gb3AoZXhwciwgMSk7XG4gICAgICBjb25zdCB2YXJzID0gb3AoZXhwciwgMik7XG4gICAgICBjb25zdCBkZWdyZWUgPSBvcChleHByLCAzKTtcbiAgICAgIGlmICh2YXJzICE9PSBudWxsICYmIHZhcnMgIT09IFwiTm90aGluZ1wiKSB7XG4gICAgICAgIGlmIChoZWFkKHZhcnMpID09PSBcIkxpc3RcIikge1xuICAgICAgICAgIHJlc3VsdCArPSBcIl97XCIgKyBzZXJpYWxpemVyLnNlcmlhbGl6ZShbXCJTZXF1ZW5jZVwiLCAuLi5vcHModmFycykgPz8gW11dKSArIFwifVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCArPSBcIl97XCIgKyBzZXJpYWxpemVyLnNlcmlhbGl6ZSh2YXJzKSArIFwifVwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVncmVlICE9PSBudWxsICYmIGRlZ3JlZSAhPT0gXCJOb3RoaW5nXCIpXG4gICAgICAgIHJlc3VsdCArPSBcIl57XCIgKyBzZXJpYWxpemVyLnNlcmlhbGl6ZShkZWdyZWUpICsgXCJ9XCI7XG4gICAgICBpZiAoZm4gIT09IG51bGwgJiYgZm4gIT09IFwiTm90aGluZ1wiKVxuICAgICAgICByZXN1bHQgKz0gc2VyaWFsaXplci5zZXJpYWxpemUoZm4pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHByZWNlZGVuY2U6IDc0MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJPdmVyQmFyXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcb3ZlcmxpbmVcIl0sXG4gICAgcGFyc2U6IHBhcnNlU2luZ2xlQXJnKFwiT3ZlckJhclwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJVbmRlckJhclwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHVuZGVybGluZVwiXSxcbiAgICBwYXJzZTogcGFyc2VTaW5nbGVBcmcoXCJVbmRlckJhclwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJPdmVyVmVjdG9yXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcdmVjXCJdLFxuICAgIHBhcnNlOiBwYXJzZVNpbmdsZUFyZyhcIk92ZXJWZWN0b3JcIilcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiT3ZlclRpbGRlXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcdGlsZGVcIl0sXG4gICAgcGFyc2U6IHBhcnNlU2luZ2xlQXJnKFwiT3ZlclRpbGRlXCIpXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk92ZXJIYXRcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxoYXRcIl0sXG4gICAgcGFyc2U6IHBhcnNlU2luZ2xlQXJnKFwiT3ZlckhhdFwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJPdmVyUmlnaHRBcnJvd1wiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXG92ZXJyaWdodGFycm93XCJdLFxuICAgIHBhcnNlOiBwYXJzZVNpbmdsZUFyZyhcIk92ZXJSaWdodEFycm93XCIpXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk92ZXJMZWZ0QXJyb3dcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxvdmVybGVmdGFycm93XCJdLFxuICAgIHBhcnNlOiBwYXJzZVNpbmdsZUFyZyhcIk92ZXJMZWZ0QXJyb3dcIilcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiT3ZlclJpZ2h0RG91YmxlQXJyb3dcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxPdmVycmlnaHRhcnJvd1wiXSxcbiAgICBwYXJzZTogcGFyc2VTaW5nbGVBcmcoXCJPdmVyUmlnaHREb3VibGVBcnJvd1wiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJPdmVyTGVmdEhhcnBvb25cIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxvdmVybGVmdGhhcnBvb25cIl0sXG4gICAgcGFyc2U6IHBhcnNlU2luZ2xlQXJnKFwiT3ZlckxlZnRIYXJwb29uXCIpXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk92ZXJSaWdodEhhcnBvb25cIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxvdmVycmlnaHRoYXJwb29uXCJdLFxuICAgIHBhcnNlOiBwYXJzZVNpbmdsZUFyZyhcIk92ZXJSaWdodEhhcnBvb25cIilcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiT3ZlckxlZnRSaWdodEFycm93XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcb3ZlcmxlZnRyaWdodGFycm93XCJdLFxuICAgIHBhcnNlOiBwYXJzZVNpbmdsZUFyZyhcIk92ZXJMZWZ0UmlnaHRBcnJvd1wiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJPdmVyQnJhY2VcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxvdmVyYnJhY2VcIl0sXG4gICAgcGFyc2U6IHBhcnNlU2luZ2xlQXJnKFwiT3ZlckJyYWNlXCIpXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk92ZXJMaW5lU2VnbWVudFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXG92ZXJsaW5lc2VnbWVudFwiXSxcbiAgICBwYXJzZTogcGFyc2VTaW5nbGVBcmcoXCJPdmVyTGluZVNlZ21lbnRcIilcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiT3Zlckdyb3VwXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcb3Zlcmdyb3VwXCJdLFxuICAgIHBhcnNlOiBwYXJzZVNpbmdsZUFyZyhcIk92ZXJHcm91cFwiKVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZGlzcGxheXN0eWxlXCJdLFxuICAgIHBhcnNlOiAoKSA9PiBbXCJTZXF1ZW5jZVwiXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcdGV4dHN0eWxlXCJdLFxuICAgIHBhcnNlOiAoKSA9PiBbXCJTZXF1ZW5jZVwiXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcc2NyaXB0c3R5bGVcIl0sXG4gICAgcGFyc2U6ICgpID0+IFtcIlNlcXVlbmNlXCJdXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzY3JpcHRzY3JpcHRzdHlsZVwiXSxcbiAgICBwYXJzZTogKCkgPT4gW1wiU2VxdWVuY2VcIl1cbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHRpbnlcIl0sXG4gICAgcGFyc2U6ICgpID0+IFtcIlNlcXVlbmNlXCJdXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzY3JpcHRzaXplXCJdLFxuICAgIHBhcnNlOiAoKSA9PiBbXCJTZXF1ZW5jZVwiXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZm9vdG5vdGVzaXplXCJdLFxuICAgIHBhcnNlOiAoKSA9PiBbXCJTZXF1ZW5jZVwiXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcc21hbGxcIl0sXG4gICAgcGFyc2U6ICgpID0+IFtcIlNlcXVlbmNlXCJdXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxub3JtYWxzaXplXCJdLFxuICAgIHBhcnNlOiAoKSA9PiBbXCJTZXF1ZW5jZVwiXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbGFyZ2VcIl0sXG4gICAgcGFyc2U6ICgpID0+IFtcIlNlcXVlbmNlXCJdXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxMYXJnZVwiXSxcbiAgICBwYXJzZTogKCkgPT4gW1wiU2VxdWVuY2VcIl1cbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXExBUkdFXCJdLFxuICAgIHBhcnNlOiAoKSA9PiBbXCJTZXF1ZW5jZVwiXVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcaHVnZVwiXSxcbiAgICBwYXJzZTogKCkgPT4gW1wiU2VxdWVuY2VcIl1cbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXEh1Z2VcIl0sXG4gICAgcGFyc2U6ICgpID0+IFtcIlNlcXVlbmNlXCJdXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlN0eWxlXCIsXG4gICAgc2VyaWFsaXplOiAoc2VyaWFsaXplciwgZXhwcikgPT4ge1xuICAgICAgbGV0IHJlc3VsdCA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGV4cHIsIDEpKTtcbiAgICAgIGNvbnN0IGRpY3QgPSBkaWN0aW9uYXJ5KG9wKGV4cHIsIDIpKTtcbiAgICAgIGlmIChkaWN0ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgaWYgKHN0cmluZ1ZhbHVlKGRpY3QuZGlzcGxheSkgPT09IFwiYmxvY2tcIilcbiAgICAgICAgcmVzdWx0ID0gam9pbkxhdGV4KFtcIntcXFxcZGlzcGxheXN0eWxlXCIsIHJlc3VsdCwgXCJ9XCJdKTtcbiAgICAgIGVsc2UgaWYgKHN0cmluZ1ZhbHVlKGRpY3QuZGlzcGxheSkgPT09IFwiaW5saW5lXCIpXG4gICAgICAgIHJlc3VsdCA9IGpvaW5MYXRleChbXCJ7XFxcXHRleHRzdHlsZVwiLCByZXN1bHQsIFwifVwiXSk7XG4gICAgICBlbHNlIGlmIChzdHJpbmdWYWx1ZShkaWN0LmRpc3BsYXkpID09PSBcInNjcmlwdFwiKVxuICAgICAgICByZXN1bHQgPSBqb2luTGF0ZXgoW1wie1xcXFxzY3JpcHRzdHlsZVwiLCByZXN1bHQsIFwifVwiXSk7XG4gICAgICBlbHNlIGlmIChzdHJpbmdWYWx1ZShkaWN0LmRpc3BsYXkpID09PSBcInNjcmlwdHNjcmlwdFwiKVxuICAgICAgICByZXN1bHQgPSBqb2luTGF0ZXgoW1wie1xcXFxzY3JpcHRzY3JpcHRzdHlsZVwiLCByZXN1bHQsIFwifVwiXSk7XG4gICAgICBjb25zdCB2ID0gbWFjaGluZVZhbHVlKGRpY3Quc2l6ZSk7XG4gICAgICBpZiAodiAhPT0gbnVsbCAmJiB2ID49IDEgJiYgdiA8PSAxMCkge1xuICAgICAgICByZXN1bHQgPSBqb2luTGF0ZXgoW1xuICAgICAgICAgIFwie1wiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIDE6IFwiXFxcXHRpbnlcIixcbiAgICAgICAgICAgIDI6IFwiXFxcXHNjcmlwdHNpemVcIixcbiAgICAgICAgICAgIDM6IFwiXFxcXGZvb3Rub3Rlc2l6ZVwiLFxuICAgICAgICAgICAgNDogXCJcXFxcc21hbGxcIixcbiAgICAgICAgICAgIDU6IFwiXFxcXG5vcm1hbHNpemVcIixcbiAgICAgICAgICAgIDY6IFwiXFxcXGxhcmdlXCIsXG4gICAgICAgICAgICA3OiBcIlxcXFxMYXJnZVwiLFxuICAgICAgICAgICAgODogXCJcXFxcTEFSR0VcIixcbiAgICAgICAgICAgIDk6IFwiXFxcXGh1Z2VcIixcbiAgICAgICAgICAgIDEwOiBcIlxcXFxIdWdlXCJcbiAgICAgICAgICB9W3ZdLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBcIn1cIlxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcIVwiXSxcbiAgICBwYXJzZTogKCkgPT4gW1wiSG9yaXpvbnRhbFNwYWNpbmdcIiwgLTNdXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFwgXCJdLFxuICAgIHBhcnNlOiAoKSA9PiBbXCJIb3Jpem9udGFsU3BhY2luZ1wiLCA2XVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcOlwiXSxcbiAgICBwYXJzZTogKCkgPT4gW1wiSG9yaXpvbnRhbFNwYWNpbmdcIiwgNF1cbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGVuc2tpcFwiXSxcbiAgICBwYXJzZTogKCkgPT4gW1wiSG9yaXpvbnRhbFNwYWNpbmdcIiwgOV1cbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHF1YWRcIl0sXG4gICAgcGFyc2U6ICgpID0+IFtcIkhvcml6b250YWxTcGFjaW5nXCIsIDE4XVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxccXF1YWRcIl0sXG4gICAgcGFyc2U6ICgpID0+IFtcIkhvcml6b250YWxTcGFjaW5nXCIsIDM2XVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcLFwiXSxcbiAgICBwYXJzZTogKCkgPT4gW1wiSG9yaXpvbnRhbFNwYWNpbmdcIiwgM11cbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXDtcIl0sXG4gICAgcGFyc2U6ICgpID0+IFtcIkhvcml6b250YWxTcGFjaW5nXCIsIDVdXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxlbnNwYWNlXCJdLFxuICAgIHBhcnNlOiAoKSA9PiBbXCJIb3Jpem9udGFsU3BhY2luZ1wiLCA5XVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJIb3Jpem9udGFsU3BhY2luZ1wiLFxuICAgIC8vIFRoZSBgSG9yaXpvbnRhbFNwYWNpbmdgIGZ1bmN0aW9uIGhhcyB0d28gZm9ybXNcbiAgICAvLyBgW1wiSG9yaXpvbnRhbFNwYWNpbmdcIiwgbnVtYmVyXWAgLT4gaW5kaWNhdGUgYSBzcGFjZSBvZiBtdSB1bml0c1xuICAgIC8vIGBbXCJIb3Jpem9udGFsU3BhY2luZ1wiLCBleHByLCAnb3AnfCdiaW4nfHJlbF1gIC0+IGluZGljYXRlIGEgc3BhY2luZyBhcm91bmQgYW5kIGV4cHJlc3Npb24sIGkuZS4gYFxcbWF0aGJpbnt4fWAsIGV0Yy4uLlxuICAgIHNlcmlhbGl6ZTogKHNlcmlhbGl6ZXIsIGV4cHIpID0+IHtcbiAgICAgIGlmIChvcChleHByLCAyKSkge1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpO1xuICAgICAgfVxuICAgICAgY29uc3QgdiA9IG1hY2hpbmVWYWx1ZShvcChleHByLCAxKSk7XG4gICAgICBpZiAodiA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBcIi0zXCI6IFwiXFxcXCFcIixcbiAgICAgICAgNjogXCJcXFxcIFwiLFxuICAgICAgICAzOiBcIlxcXFwsXCIsXG4gICAgICAgIDQ6IFwiXFxcXDpcIixcbiAgICAgICAgNTogXCJcXFxcO1wiLFxuICAgICAgICA5OiBcIlxcXFxlbnNwYWNlXCIsXG4gICAgICAgIDE4OiBcIlxcXFxxdWFkXCIsXG4gICAgICAgIDM2OiBcIlxcXFxxcXVhZFwiXG4gICAgICB9W3ZdID8/IFwiXCI7XG4gICAgfVxuICB9XG4gIC8vIGlmIChcbiAgLy8gICBbXG4gIC8vICAgICAnXFxcXCEnLFxuICAvLyAgICAgJ1xcXFw6JyxcbiAgLy8gICAgICdcXFxcZW5za2lwJyxcbiAgLy8gICAgICdcXFxccXVhZCcsXG4gIC8vICAgICAnXFxcXCwnLFxuICAvLyAgICAgJ1xcXFw7JyxcbiAgLy8gICAgICdcXFxcZW5zcGFjZScsXG4gIC8vICAgICAnXFxcXHFxdWFkJyxcbiAgLy8gICAgICdcXFxcc2VsZWN0Zm9udCcsXG4gIC8vICAgXS5pbmNsdWRlcyh0b2tlbilcbiAgLy8gKSB7XG4gIC8vICAgcmV0dXJuICdza2lwJztcbiAgLy8gfVxuICAvLyB7XG4gIC8vICAgICBuYW1lOiAnJyxcbiAgLy8gICAgIHRyaWdnZXI6ICdcXFxcbWF0aHJpbmcnLFxuICAvLyB9LFxuICAvLyB7XG4gIC8vICAgICBuYW1lOiAnJyxcbiAgLy8gICAgIHRyaWdnZXI6ICdcXFxcY2hlY2snLFxuICAvLyB9LFxuXTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9kaWN0aW9uYXJ5L2RlZmluaXRpb25zLXRyaWdvbm9tZXRyeS50c1xuZnVuY3Rpb24gcGFyc2VUcmlnKG9wMykge1xuICByZXR1cm4gKHBhcnNlciwgdW50aWwpID0+IHtcbiAgICBjb25zdCBoZWFkMiA9IHtcbiAgICAgIFwiXFxcXGFyY3NpblwiOiBcIkFyY3NpblwiLFxuICAgICAgXCJcXFxcYXJjY29zXCI6IFwiQXJjY29zXCIsXG4gICAgICBcIlxcXFxhcmN0YW5cIjogXCJBcmN0YW5cIixcbiAgICAgIFwiXFxcXGFyY3RnXCI6IFwiQXJjdGFuXCIsXG4gICAgICBcIlxcXFxhcmNjdGdcIjogXCJBcmN0YW5cIixcbiAgICAgIFwiXFxcXGFyY3NlY1wiOiBcIkFyY3NlY1wiLFxuICAgICAgXCJcXFxcYXJjY3NjXCI6IFwiIEFyY2NzY1wiLFxuICAgICAgXCJcXFxcYXJzaW5oXCI6IFwiQXJzaW5oXCIsXG4gICAgICBcIlxcXFxhcmNvc2hcIjogXCJBcmNvc2hcIixcbiAgICAgIFwiXFxcXGFydGFuaFwiOiBcIkFydGFuaFwiLFxuICAgICAgXCJcXFxcYXJjc2VjaFwiOiBcIkFyY3NlY2hcIixcbiAgICAgIFwiXFxcXGFyY2NzY2hcIjogXCJBcmNzY2hcIixcbiAgICAgIC8vICdcXFxcYXJnJyxcbiAgICAgIFwiXFxcXGNoXCI6IFwiQ29zaFwiLFxuICAgICAgXCJcXFxcY29zXCI6IFwiQ29zXCIsXG4gICAgICBcIlxcXFxjb3NlY1wiOiBcIkNzY1wiLFxuICAgICAgXCJcXFxcY29zaFwiOiBcIkNzY2hcIixcbiAgICAgIFwiXFxcXGNvdFwiOiBcIkNvdFwiLFxuICAgICAgXCJcXFxcY290Z1wiOiBcIkNvdFwiLFxuICAgICAgXCJcXFxcY290aFwiOiBcIkNvdGhcIixcbiAgICAgIFwiXFxcXGNzY1wiOiBcIkNzY1wiLFxuICAgICAgXCJcXFxcY3RnXCI6IFwiQ290XCIsXG4gICAgICBcIlxcXFxjdGhcIjogXCJDb3RoXCIsXG4gICAgICBcIlxcXFxzZWNcIjogXCJTZWNcIixcbiAgICAgIFwiXFxcXHNpblwiOiBcIlNpblwiLFxuICAgICAgXCJcXFxcc2luaFwiOiBcIlNpbmhcIixcbiAgICAgIFwiXFxcXHNoXCI6IFwiU2luaFwiLFxuICAgICAgXCJcXFxcdGFuXCI6IFwiVGFuXCIsXG4gICAgICBcIlxcXFx0YW5oXCI6IFwiVGFuaFwiLFxuICAgICAgXCJcXFxcdGdcIjogXCJUYW5cIixcbiAgICAgIFwiXFxcXHRoXCI6IFwiVGFuaFwiXG4gICAgfVtvcDMgPz8gXCJcIl0gPz8gb3AzID8/IFwiXCI7XG4gICAgaWYgKHBhcnNlci5hdFRlcm1pbmF0b3IodW50aWwpKVxuICAgICAgcmV0dXJuIGhlYWQyO1xuICAgIGNvbnN0IGZuID0gcGFyc2VyLnBhcnNlUG9zdGZpeE9wZXJhdG9yKGhlYWQyLCB1bnRpbCk7XG4gICAgaWYgKGZuICE9PSBudWxsKVxuICAgICAgcmV0dXJuIGZuO1xuICAgIGNvbnN0IGFyZ3MgPSBwYXJzZXIucGFyc2VBcmd1bWVudHMoXCJpbXBsaWNpdFwiLCB1bnRpbCk7XG4gICAgcmV0dXJuIGFyZ3MgPT09IG51bGwgPyBoZWFkMiA6IFtoZWFkMiwgLi4uYXJnc107XG4gIH07XG59XG52YXIgREVGSU5JVElPTlNfVFJJR09OT01FVFJZID0gW1xuICB7XG4gICAgbmFtZTogXCJBcmNzaW5cIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcmNzaW5cIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyY3NpblwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcmNjb3NcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcmNjb3NcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyY2Nvc1wiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcmN0YW5cIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcmN0YW5cIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyY3RhblwiKVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcYXJjdGdcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyY3RhblwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcmNjb3RcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcmNjdGdcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyY2NvdFwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcmNzZWNcIixcbiAgICBsYXRleFRyaWdnZXI6IFwiYXJjc2VjXCIsXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyY3NlY1wiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcmNjc2NcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcmNjc2NcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyY2NzY1wiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcnNpbmhcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcnNpbmhcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyc2luaFwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcmNvc2hcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcmNvc2hcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyY29zaFwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcnRhbmhcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcnRhbmhcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFydGFuaFwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcnNlY2hcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcnNlY2hcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyc2VjaFwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcmNzY2hcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcmNzY2hcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkFyY3NjaFwiKVxuICB9LFxuICB7XG4gICAgLy8gUnVzaWFuIGh5cGVyYm9saWMgY29zaW5lXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcY2hcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkNvc2hcIilcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQ29zZWNcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxjb3NlY1wiXSxcbiAgICBwYXJzZTogcGFyc2VUcmlnKFwiQ29zZWNcIilcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQ29zaFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGNvc2hcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkNvc2hcIilcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQ290XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcY290XCJdLFxuICAgIHBhcnNlOiBwYXJzZVRyaWcoXCJDb3RcIilcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGNvdGdcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkNvdFwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJDb3RoXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcY290aFwiXSxcbiAgICBwYXJzZTogcGFyc2VUcmlnKFwiQ290aFwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJDc2NcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxjc2NcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkNzY1wiKVxuICB9LFxuICB7XG4gICAgLy8gUnVzaWFuIGNvdGFuZ2VudFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGN0Z1wiXSxcbiAgICBwYXJzZTogcGFyc2VUcmlnKFwiQ290XCIpXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxjdGhcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIkNvdGFuaFwiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJTZWNcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzZWNcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIlNlY1wiKVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJTaW5oXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcc2luaFwiXSxcbiAgICBwYXJzZTogcGFyc2VUcmlnKFwiU2luaFwiKVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcc2hcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIlNpbmhcIilcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVGFuXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcdGFuXCJdLFxuICAgIHBhcnNlOiBwYXJzZVRyaWcoXCJUYW5cIilcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHRnXCJdLFxuICAgIHBhcnNlOiBwYXJzZVRyaWcoXCJUYW5cIilcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVGFuaFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHRhbmhcIl0sXG4gICAgcGFyc2U6IHBhcnNlVHJpZyhcIlRhbmhcIilcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHRoXCJdLFxuICAgIHBhcnNlOiBwYXJzZVRyaWcoXCJUYW5oXCIpXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkNvc1wiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGNvc1wiXSxcbiAgICBwYXJzZTogcGFyc2VUcmlnKFwiQ29zXCIpXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlNpblwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHNpblwiXSxcbiAgICBwYXJzZTogcGFyc2VUcmlnKFwiU2luXCIpXG4gIH1cbl07XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9sYXRleC1zeW50YXgvZGljdGlvbmFyeS9kZWZpbml0aW9ucy1zZXRzLnRzXG52YXIgREVGSU5JVElPTlNfU0VUUyA9IFtcbiAgLy8gQ29uc3RhbnRzXG4gIHsgbmFtZTogXCJBbGdlYnJhaWNOdW1iZXJcIiwgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxiYXJcXFxcUVwiIH0sXG4gIHsgbmFtZTogXCJDb21wbGV4TnVtYmVyXCIsIGxhdGV4VHJpZ2dlcjogW1wiXFxcXENcIl0gfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXG1hdGhiYntDfVwiLCBwYXJzZTogXCJDb21wbGV4TnVtYmVyXCIgfSxcbiAgeyBuYW1lOiBcIkltYWdpbmFyeU51bWJlclwiLCBsYXRleFRyaWdnZXI6IFtcIlxcXFxpbWFnaW5hcnlJXCIsIFwiXFxcXFJcIl0gfSxcbiAgeyBuYW1lOiBcIkV4dGVuZGVkQ29tcGxleE51bWJlclwiLCBsYXRleFRyaWdnZXI6IFtcIlxcXFxiYXJcIiwgXCJcXFxcQ1wiXSB9LFxuICB7IG5hbWU6IFwiRW1wdHlTZXRcIiwgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcZW1wdHlzZXRcIl0gfSxcbiAgeyBsYXRleFRyaWdnZXI6IFtcIlxcXFx2YXJub3RoaW5nXCJdLCBwYXJzZTogXCJFbXB0eVNldFwiIH0sXG4gIC8vIFBhcnNpbmcgb25seVxuICB7IG5hbWU6IFwiSW50ZWdlclwiLCBsYXRleFRyaWdnZXI6IFtcIlxcXFxaXCJdIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxtYXRoYmJ7Wn1cIiwgcGFyc2U6IFwiSW50ZWdlclwiIH0sXG4gIHsgbmFtZTogXCJSYXRpb25hbE51bWJlclwiLCBsYXRleFRyaWdnZXI6IFtcIlxcXFxRXCJdIH0sXG4gIHsgbmFtZTogXCJSZWFsTnVtYmVyXCIsIGxhdGV4VHJpZ2dlcjogW1wiXFxcXFJcIl0gfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXG1hdGhiYntSfVwiLCBwYXJzZTogXCJSZWFsTnVtYmVyXCIgfSxcbiAgeyBuYW1lOiBcIkV4dGVuZGVkUmVhbE51bWJlclwiLCBsYXRleFRyaWdnZXI6IFtcIlxcXFxiYXJcIiwgXCJcXFxcUlwiXSB9LFxuICB7IG5hbWU6IFwiVHJhbnNjZW5kZW50YWxOdW1iZXJcIiwgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxSLVxcXFxiYXJcXFxcUVwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxSXFxcXGJhY2tzbGFzaFxcXFxiYXJcXFxcUVwiLCBwYXJzZTogXCJUcmFuc2NlbmRlbnRhbE51bWJlclwiIH0sXG4gIC8vIFJlYWwgbnVtYmVycyA8IDBcbiAgeyBuYW1lOiBcIk5lZ2F0aXZlTnVtYmVyXCIsIGxhdGV4VHJpZ2dlcjogXCJcXFxcUl4tXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXFJeey19XCIsIHBhcnNlOiBcIk5lZ2F0aXZlTnVtYmVyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXFJfLVwiLCBwYXJzZTogXCJOZWdhdGl2ZU51bWJlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxSX3stfVwiLCBwYXJzZTogXCJOZWdhdGl2ZU51bWJlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxSXntcXFxcbHR9XCIsIHBhcnNlOiBcIk5lZ2F0aXZlTnVtYmVyXCIgfSxcbiAgLy8gUmVhbCBudW1iZXJzID4gMFxuICB7IG5hbWU6IFwiUG9zaXRpdmVOdW1iZXJcIiwgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxSXitcIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcUl57K31cIiwgcGFyc2U6IFwiUG9zaXRpdmVOdW1iZXJcIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcUl8rXCIsIHBhcnNlOiBcIlBvc2l0aXZlTnVtYmVyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXFJfeyt9XCIsIHBhcnNlOiBcIlBvc2l0aXZlTnVtYmVyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXFJee1xcXFxndH1cIiwgcGFyc2U6IFwiUG9zaXRpdmVOdW1iZXJcIiB9LFxuICAvLyBSZWFsIG51bWJlcnMgPD0gMFxuICB7IG5hbWU6IFwiTm9uUG9zaXRpdmVOdW1iZXJcIiwgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxSXnswLX1cIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcUl57LTB9XCIsIHBhcnNlOiBcIk5vblBvc2l0aXZlTnVtYmVyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXFJee1xcXFxsZXF9XCIsIHBhcnNlOiBcIk5vblBvc2l0aXZlTnVtYmVyXCIgfSxcbiAgLy8gSW50ZWdlcnMgPCAwXG4gIHsgbmFtZTogXCJOZWdhdGl2ZUludGVnZXJcIiwgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxaXi1cIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcWl4tXCIsIHBhcnNlOiBcIk5lZ2F0aXZlSW50ZWdlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxaXnstfVwiLCBwYXJzZTogXCJOZWdhdGl2ZUludGVnZXJcIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcWl8tXCIsIHBhcnNlOiBcIk5lZ2F0aXZlSW50ZWdlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxaX3stfVwiLCBwYXJzZTogXCJOZWdhdGl2ZUludGVnZXJcIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcWl57XFxcXGx0fVwiLCBwYXJzZTogXCJOZWdhdGl2ZUludGVnZXJcIiB9LFxuICAvLyBJbnRlZ2VycyA+ICAwXG4gIHsgbmFtZTogXCJQb3NpdGl2ZUludGVnZXJcIiwgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxaXitcIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcWl57K31cIiwgcGFyc2U6IFwiUG9zaXRpdmVJbnRlZ2VyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXFpfK1wiLCBwYXJzZTogXCJQb3NpdGl2ZUludGVnZXJcIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcWl97K31cIiwgcGFyc2U6IFwiUG9zaXRpdmVJbnRlZ2VyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXFpee1xcXFxndH1cIiwgcGFyc2U6IFwiUG9zaXRpdmVJbnRlZ2VyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXFpee1xcXFxndDB9XCIsIHBhcnNlOiBcIlBvc2l0aXZlSW50ZWdlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxOXitcIiwgcGFyc2U6IFwiUG9zaXRpdmVJbnRlZ2VyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXE5eeyt9XCIsIHBhcnNlOiBcIlBvc2l0aXZlSW50ZWdlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxOXipcIiwgcGFyc2U6IFwiUG9zaXRpdmVJbnRlZ2VyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXE5eeyp9XCIsIHBhcnNlOiBcIlBvc2l0aXZlSW50ZWdlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxOXlxcXFxzdGFyXCIsIHBhcnNlOiBcIlBvc2l0aXZlSW50ZWdlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxOXntcXFxcc3Rhcn1cIiwgcGFyc2U6IFwiUG9zaXRpdmVJbnRlZ2VyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXE5fMVwiLCBwYXJzZTogXCJQb3NpdGl2ZUludGVnZXJcIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcTl97MX1cIiwgcGFyc2U6IFwiUG9zaXRpdmVJbnRlZ2VyXCIgfSxcbiAgLy8gaHR0cHM6Ly9tYXRodmF1bHQuY2EvaHViL2hpZ2hlci1tYXRoL21hdGgtc3ltYm9scy9hbGdlYnJhLXN5bWJvbHMvXG4gIC8vIEludGVnZXJzID49ICAwXG4gIHsgbmFtZTogXCJOb25OZWdhdGl2ZUludGVnZXJcIiwgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcTlwiXSB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcWl57KzB9XCIsIHBhcnNlOiBcIk5vbk5lZ2F0aXZlSW50ZWdlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxaXntcXFxcZ2VxfVwiLCBwYXJzZTogXCJOb25OZWdhdGl2ZUludGVnZXJcIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcWl57XFxcXGdlcTB9XCIsIHBhcnNlOiBcIk5vbk5lZ2F0aXZlSW50ZWdlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxaXnswK31cIiwgcGFyc2U6IFwiTm9uTmVnYXRpdmVJbnRlZ2VyXCIgfSxcbiAgeyBsYXRleFRyaWdnZXI6IFwiXFxcXG1hdGhiYntOfVwiLCBwYXJzZTogXCJOb25OZWdhdGl2ZUludGVnZXJcIiB9LFxuICB7IGxhdGV4VHJpZ2dlcjogXCJcXFxcTl8wXCIsIHBhcnNlOiBcIk5vbk5lZ2F0aXZlSW50ZWdlclwiIH0sXG4gIHsgbGF0ZXhUcmlnZ2VyOiBcIlxcXFxOX3swfVwiLCBwYXJzZTogXCJOb25OZWdhdGl2ZUludGVnZXJcIiB9LFxuICAvL1xuICAvLyBTZXQgRXhwcmVzc2lvbnNcbiAgLy9cbiAgLy8gQHRvZG86IGNvdWxkIGFsc28gaGF2ZSBhIGBDYXJ0ZXNpYW5Qb3dlcmAgZnVuY3Rpb24gd2l0aCBhIG51bWJlciBgcmhzYFxuICB7XG4gICAgbmFtZTogXCJDYXJ0ZXNpYW5Qcm9kdWN0XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcdGltZXNcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICAvLyBDYXV0aW9uOiBjYXJ0ZXNpYW4gcHJvZHVjdCBpcyBub3QgYXNzb2NpYXRpdmVcbiAgICBwcmVjZWRlbmNlOiAzOTAsXG4gICAgLy8gU2FtZSBhcyBNdWx0aXBseT9cbiAgICBwYXJzZTogKHBhcnNlciwgbGhzLCB1bnRpbCkgPT4ge1xuICAgICAgaWYgKDM5MCA8IHVudGlsLm1pblByZWMpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY29uc3QgY2UgPSBwYXJzZXIuY29tcHV0ZUVuZ2luZTtcbiAgICAgIGlmICghY2UgfHwgIWNlLmJveChsaHMpLmRvbWFpbi5pc0NvbXBhdGlibGUoXCJTZXRcIikpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY29uc3QgaW5kZXggPSBwYXJzZXIuaW5kZXg7XG4gICAgICBjb25zdCByaHMgPSBwYXJzZXIucGFyc2VFeHByZXNzaW9uKHsgLi4udW50aWwsIG1pblByZWM6IDM5MCB9KTtcbiAgICAgIGlmIChyaHMgPT09IG51bGwgfHwgY2UuYm94KGxocykuZG9tYWluLmlzQ29tcGF0aWJsZShcIlNldFwiKSAhPT0gdHJ1ZSkge1xuICAgICAgICBwYXJzZXIuaW5kZXggPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gW1wiQ2FydGVzaWFuUHJvZHVjdFwiLCBsaHMsIHJoc107XG4gICAgfVxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCIsIFwiXFxcXGNvbXBsZW1lbnRcIl0sXG4gICAga2luZDogXCJwb3N0Zml4XCIsXG4gICAgcGFyc2U6IChfcGFyc2VyLCBsaHMpID0+IHtcbiAgICAgIHJldHVybiBbXCJDb21wbGVtZW50XCIsIGxoc107XG4gICAgfVxuICAgIC8vIHByZWNlZGVuY2U6IDI0MCxcbiAgICAvLyBAdG9kbzogc2VyaWFsaXplIGZvciB0aGUgbXVsdGlwbGUgYXJndW1lbnQgY2FzZVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJDb21wbGVtZW50XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCIsIFwiPHs+XCIsIFwiXFxcXGNvbXBsZW1lbnRcIiwgXCI8fT5cIl0sXG4gICAga2luZDogXCJwb3N0Zml4XCJcbiAgICAvLyBwcmVjZWRlbmNlOiAyNDAsXG4gICAgLy8gQHRvZG86IHNlcmlhbGl6ZSBmb3IgdGhlIG11bHRpcGxlIGFyZ3VtZW50IGNhc2VcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiSW50ZXJzZWN0aW9uXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcY2FwXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBwcmVjZWRlbmNlOiAzNTBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiSW50ZXJ2YWxcIixcbiAgICAvLyBAdG9kbzogcGFyc2Ugb3BlbmluZyAnWycgb3IgJ10nIG9yICcoJ1xuICAgIHNlcmlhbGl6ZTogc2VyaWFsaXplU2V0XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk11bHRpcGxlXCIsXG4gICAgLy8gQHRvZG86IHBhcnNlXG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemVTZXRcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVW5pb25cIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxjdXBcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIHByZWNlZGVuY2U6IDM1MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJSYW5nZVwiLFxuICAgIC8vIEB0b2RvOiBwYXJzZSBvcGVuaW5nICdbJyBvciAnXScgb3IgJygnXG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemVTZXRcbiAgfSxcbiAgLy8ge1xuICAvLyAgIG5hbWU6ICdTZXQnLFxuICAvLyAgIGtpbmQ6ICdtYXRjaGZpeCcsXG4gIC8vICAgb3BlbkRlbGltaXRlcjogJ3snLFxuICAvLyAgIGNsb3NlRGVsaW1pdGVyOiAnfScsXG4gIC8vICAgcHJlY2VkZW5jZTogMjAsXG4gIC8vICAgLy8gQHRvZG86IHRoZSBzZXQgc3ludGF4IGNhbiBhbHNvIGluY2x1ZGUgY29uZGl0aW9ucy4uLlxuICAvLyB9LFxuICB7XG4gICAgbmFtZTogXCJTZXRNaW51c1wiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHNldG1pbnVzXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBwcmVjZWRlbmNlOiA2NTBcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3ltbWV0cmljRGlmZmVyZW5jZVwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHRyaWFuZ2xlXCJdLFxuICAgIC8vIG9yIFxcXFxvbWludXNcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgLy8gQHRvZG86IHBhcnNlciBjb3VsZCBjaGVjayB0aGF0IGxocyBhbmQgcmhzIGFyZSBzZXRzXG4gICAgcHJlY2VkZW5jZTogMjYwXG4gIH0sXG4gIC8vIFByZWRpY2F0ZXMvUmVsYXRpb25zXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxuaVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDE2MCxcbiAgICAvLyBBcyBwZXIgTWF0aE1MLCBsb3dlciBwcmVjZWRlbmNlXG4gICAgcGFyc2U6IChwYXJzZXIsIGxocywgdGVybWluYXRvcikgPT4ge1xuICAgICAgY29uc3QgcmhzID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih0ZXJtaW5hdG9yKTtcbiAgICAgIHJldHVybiByaHMgPT09IG51bGwgPyBudWxsIDogW1wiRWxlbWVudFwiLCByaHMsIGxoc107XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJFbGVtZW50XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcaW5cIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIHByZWNlZGVuY2U6IDI0MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3RFbGVtZW50XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbm90aW5cIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIHByZWNlZGVuY2U6IDI0MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3RTdWJzZXRcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxuc3Vic2V0XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIk5vdFN1cGVyc2V0XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbnN1cHNldFwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI0MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3RTdWJzZXROb3RFcXVhbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXG5zdWJzZXRlcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgYXNzb2NpYXRpdml0eTogXCJyaWdodFwiLFxuICAgIHByZWNlZGVuY2U6IDI0MFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJOb3RTdXBlcnNldE5vdEVxdWFsXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcbnN1cHNldGVxXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlNxdWFyZVN1YnNldFwiLFxuICAgIC8vIE1hdGhNTDogc3F1YXJlIGltYWdlIG9mXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcc3FzdWJzZXRcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNjVcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3F1YXJlU3Vic2V0RXF1YWxcIixcbiAgICAvLyBNYXRoTUw6IHNxdWFyZSBpbWFnZSBvZiBvciBlcXVhbCB0b1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHNxc3Vic2V0ZXFcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNjVcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3F1YXJlU3VwZXJzZXRcIixcbiAgICAvLyBNYXRoTUw6IHNxdWFyZSBvcmlnaW5hbCBvZlxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHNxc3Vwc2V0XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjY1XG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlNxdWFyZVN1cGVyc2V0RXF1YWxcIixcbiAgICAvLyBNYXRoTUw6IHNxdWFyZSBvcmlnaW5hbCBvZiBvciBlcXVhbFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHNxc3Vwc2V0ZXFcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNjVcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3Vic2V0XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcc3Vic2V0XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQwXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzdWJzZXRuZXFcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNDAsXG4gICAgcGFyc2U6IFwiU3Vic2V0XCJcbiAgfSxcbiAge1xuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHZhcnN1YnNldG5lcXFcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNDAsXG4gICAgcGFyc2U6IFwiU3Vic2V0XCJcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3Vic2V0RXF1YWxcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzdWJzZXRlcVwiXSxcbiAgICBraW5kOiBcImluZml4XCIsXG4gICAgcHJlY2VkZW5jZTogMjQwXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlN1cGVyc2V0XCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcc3Vwc2V0XCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQwXG4gIH0sXG4gIHtcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxzdXBzZXRuZXFcIl0sXG4gICAga2luZDogXCJpbmZpeFwiLFxuICAgIGFzc29jaWF0aXZpdHk6IFwicmlnaHRcIixcbiAgICBwcmVjZWRlbmNlOiAyNDAsXG4gICAgcGFyc2U6IFwiU3VwZXJzZXRcIlxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcdmFyc3Vwc2V0bmVxXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQwLFxuICAgIHBhcnNlOiBcIlN1cGVyc2V0XCJcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3VwZXJzZXRFcXVhbFwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXHN1cHNldGVxXCJdLFxuICAgIGtpbmQ6IFwiaW5maXhcIixcbiAgICBhc3NvY2lhdGl2aXR5OiBcInJpZ2h0XCIsXG4gICAgcHJlY2VkZW5jZTogMjQwXG4gIH1cbl07XG5mdW5jdGlvbiBzZXJpYWxpemVTZXQoc2VyaWFsaXplciwgZXhwcikge1xuICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICByZXR1cm4gXCJcIjtcbiAgY29uc3QgaCA9IGhlYWQoZXhwcik7XG4gIGlmIChoID09PSBudWxsKVxuICAgIHJldHVybiBcIlwiO1xuICBpZiAoaCA9PT0gXCJTZXRcIikge1xuICAgIGlmIChub3BzKGV4cHIpID09PSAwKVxuICAgICAgcmV0dXJuIFwiXFxcXGVtcHR5c2V0XCI7XG4gICAgaWYgKG5vcHMoZXhwcikgPT09IDIgJiYgaGVhZChvcChleHByLCAyKSkgPT09IFwiQ29uZGl0aW9uXCIpIHtcbiAgICAgIHJldHVybiBqb2luTGF0ZXgoW1xuICAgICAgICBcIlxcXFxsZWZ0XFxcXGxicmFjZVwiLFxuICAgICAgICBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChleHByLCAxKSksXG4gICAgICAgIFwiXFxcXG1pZGRsZVxcXFxtaWRcIixcbiAgICAgICAgc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMikpLFxuICAgICAgICBcIlxcXFxyaWdodFxcXFxyYnJhY2VcIlxuICAgICAgXSk7XG4gICAgfVxuICAgIHJldHVybiBqb2luTGF0ZXgoW1xuICAgICAgXCJcXFxcbGVmdFxcXFxsYnJhY2VcIixcbiAgICAgIC4uLihvcHMoZXhwcikgPz8gW10pLm1hcCgoeCkgPT4gc2VyaWFsaXplci5zZXJpYWxpemUoeCkgKyBcIiAsXCIpLFxuICAgICAgXCJcXFxccmlnaHRcXFxccmJyYWNlXCJcbiAgICBdKTtcbiAgfVxuICBpZiAoaCA9PT0gXCJNdWx0aXBsZVwiKSB7XG4gIH1cbiAgaWYgKGggPT09IFwiUmFuZ2VcIikge1xuICAgIHJldHVybiBqb2luTGF0ZXgoW1xuICAgICAgXCJcXFxcbWF0aG9wZW5cXFxcbGJyYWNrXCIsXG4gICAgICBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChleHByLCAxKSksXG4gICAgICBcIiwgXCIsXG4gICAgICBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChleHByLCAyKSksXG4gICAgICBcIlxcXFxtYXRoY2xvc2VcXFxccmJyYWNrXCJcbiAgICBdKTtcbiAgfVxuICBpZiAoaCA9PT0gXCJJbnRlcnZhbFwiKSB7XG4gICAgbGV0IG9wMTIgPSBvcChleHByLCAxKTtcbiAgICBsZXQgb3AyMiA9IG9wKGV4cHIsIDIpO1xuICAgIGxldCBvcGVuTGVmdCA9IGZhbHNlO1xuICAgIGxldCBvcGVuUmlnaHQgPSBmYWxzZTtcbiAgICBpZiAoaGVhZChvcDEyKSA9PT0gXCJPcGVuXCIpIHtcbiAgICAgIG9wMTIgPSBvcChvcDEyLCAxKTtcbiAgICAgIG9wZW5MZWZ0ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGhlYWQob3AyMikgPT09IFwiT3BlblwiKSB7XG4gICAgICBvcDIyID0gb3Aob3AyMiwgMSk7XG4gICAgICBvcGVuUmlnaHQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gam9pbkxhdGV4KFtcbiAgICAgIGBcXFxcbWF0aG9wZW4ke29wZW5MZWZ0ID8gXCJcXFxccmJyYWNrXCIgOiBcIlxcXFxsYnJhY2tcIn1gLFxuICAgICAgc2VyaWFsaXplci5zZXJpYWxpemUob3AxMiksXG4gICAgICBcIiwgXCIsXG4gICAgICBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcDIyKSxcbiAgICAgIGBcXFxcbWF0aGNsb3NlJHtvcGVuUmlnaHQgPyBcIlxcXFxsYnJhY2tcIiA6IFwiXFxcXHJicmFja1wifWBcbiAgICBdKTtcbiAgfVxuICBjb25zdCBzdHlsZSA9IHNlcmlhbGl6ZXIubnVtZXJpY1NldFN0eWxlKGV4cHIsIHNlcmlhbGl6ZXIubGV2ZWwpO1xuICBpZiAoc3R5bGUgPT09IFwiY29tcGFjdFwiKSB7XG4gIH0gZWxzZSBpZiAoc3R5bGUgPT09IFwiaW50ZXJ2YWxcIikge1xuICB9IGVsc2UgaWYgKHN0eWxlID09PSBcInJlZ3VsYXJcIikge1xuICB9IGVsc2UgaWYgKHN0eWxlID09PSBcInNldC1idWlsZGVyXCIpIHtcbiAgfVxuICByZXR1cm4gXCJcIjtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9kaWN0aW9uYXJ5L2RlZmluaXRpb25zLWNhbGN1bHVzLnRzXG5mdW5jdGlvbiBwYXJzZUludGVncmFsKGNvbW1hbmQsIG4gPSAxKSB7XG4gIHJldHVybiAocGFyc2VyKSA9PiB7XG4gICAgcGFyc2VyLnNraXBTcGFjZSgpO1xuICAgIGxldCBzdXAgPSBudWxsO1xuICAgIGxldCBzdWIyID0gbnVsbDtcbiAgICB3aGlsZSAoIShzdWIyICE9PSBudWxsICYmIHN1cCAhPT0gbnVsbCkgJiYgKHBhcnNlci5wZWVrID09PSBcIl9cIiB8fCBwYXJzZXIucGVlayA9PT0gXCJeXCIpKSB7XG4gICAgICBpZiAocGFyc2VyLm1hdGNoKFwiX1wiKSlcbiAgICAgICAgc3ViMiA9IHBhcnNlci5wYXJzZUdyb3VwKCkgPz8gcGFyc2VyLnBhcnNlVG9rZW4oKTtcbiAgICAgIGVsc2UgaWYgKHBhcnNlci5tYXRjaChcIl5cIikpIHtcbiAgICAgICAgc3VwID0gcGFyc2VyLnBhcnNlR3JvdXAoKSA/PyBwYXJzZXIucGFyc2VUb2tlbigpO1xuICAgICAgfVxuICAgICAgcGFyc2VyLnNraXBTcGFjZSgpO1xuICAgIH1cbiAgICBpZiAoc3ViMiA9PT0gXCJOb3RoaW5nXCIgfHwgaXNFbXB0eVNlcXVlbmNlKHN1YjIpKVxuICAgICAgc3ViMiA9IG51bGw7XG4gICAgaWYgKHN1cCA9PT0gXCJOb3RoaW5nXCIgfHwgaXNFbXB0eVNlcXVlbmNlKHN1cCkpXG4gICAgICBzdXAgPSBudWxsO1xuICAgIGxldCBbZm4sIGluZGV4XSA9IHBhcnNlSW50ZWdyYWxCb2R5KHBhcnNlciwgbik7XG4gICAgaWYgKGZuICYmICFpbmRleCkge1xuICAgICAgaWYgKGhlYWQoZm4pID09PSBcIkFkZFwiIHx8IGhlYWQoZm4pID09PSBcIlN1YnRyYWN0XCIpIHtcbiAgICAgICAgY29uc3QgbmV3T3AgPSBbXTtcbiAgICAgICAgY29uc3QgcmVzdCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG9wMyBvZiBvcHMoZm4pID8/IFtdKSB7XG4gICAgICAgICAgaWYgKGluZGV4KVxuICAgICAgICAgICAgcmVzdC5wdXNoKG9wMyk7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgb3AyMjtcbiAgICAgICAgICAgIFtvcDIyLCBpbmRleF0gPSBwYXJzZUludGVncmFsQm9keUV4cHJlc3Npb24ob3AzKTtcbiAgICAgICAgICAgIG5ld09wLnB1c2gob3AyMiA/PyBvcDMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggIT09IG51bGwgJiYgcmVzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiQWRkXCIsXG4gICAgICAgICAgICBtYWtlSW50ZWdyYWwoXG4gICAgICAgICAgICAgIHBhcnNlcixcbiAgICAgICAgICAgICAgY29tbWFuZCxcbiAgICAgICAgICAgICAgW1wiQWRkXCIsIC4uLm5ld09wXSxcbiAgICAgICAgICAgICAgW3sgaW5kZXgsIHN1Yjogc3ViMiwgc3VwIH1dXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaGVhZChmbikgPT09IFwiRGl2aWRlXCIpIHtcbiAgICAgICAgbGV0IGFsdE51bWVyYXRvcjtcbiAgICAgICAgW2FsdE51bWVyYXRvciwgaW5kZXhdID0gcGFyc2VJbnRlZ3JhbEJvZHlFeHByZXNzaW9uKG9wKGZuLCAxKSk7XG4gICAgICAgIGlmIChhbHROdW1lcmF0b3IgIT09IG51bGwgJiYgaW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICBmbiA9IFtcIkRpdmlkZVwiLCBhbHROdW1lcmF0b3IsIG9wKGZuLCAyKV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1ha2VJbnRlZ3JhbChwYXJzZXIsIGNvbW1hbmQsIGZuLCBbeyBpbmRleCwgc3ViOiBzdWIyLCBzdXAgfV0pO1xuICB9O1xufVxuZnVuY3Rpb24gbWFrZUludGVncmFsKHBhcnNlciwgY29tbWFuZCwgZm4sIHJhbmdlcykge1xuICBpZiAoZm4gJiYgcmFuZ2VzLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gW2NvbW1hbmQsIGZuXTtcbiAgZm4gPz8gKGZuID0gXCJOb3RoaW5nXCIpO1xuICBpZiAocGFyc2VyLmNvbXB1dGVFbmdpbmUpIHtcbiAgICBjb25zdCBjZSA9IHBhcnNlci5jb21wdXRlRW5naW5lO1xuICAgIGxldCBoYXNJbmRleCA9IGZhbHNlO1xuICAgIGNvbnN0IGlkVGFibGUgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHIgb2YgcmFuZ2VzKVxuICAgICAgaWYgKHIuaW5kZXgpIHtcbiAgICAgICAgaGFzSW5kZXggPSB0cnVlO1xuICAgICAgICBpZFRhYmxlW3IuaW5kZXhdID0geyBkb21haW46IFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCIgfTtcbiAgICAgIH1cbiAgICBpZiAoaGFzSW5kZXgpXG4gICAgICBjZS5wdXNoU2NvcGUoaWRUYWJsZSk7XG4gICAgZm4gPSBjZS5ib3goZm4pLmpzb247XG4gICAgaWYgKGhhc0luZGV4KVxuICAgICAgY2UucG9wU2NvcGUoKTtcbiAgfVxuICByZXR1cm4gW2NvbW1hbmQsIGZuLCAuLi5yYW5nZXMubWFwKChyKSA9PiBtYWtlUmFuZ2UocikpXTtcbn1cbmZ1bmN0aW9uIG1ha2VSYW5nZShyYW5nZSkge1xuICBjb25zdCBoZWxkSW5kZXggPSByYW5nZS5pbmRleCA/IFtcIkhvbGRcIiwgcmFuZ2UuaW5kZXhdIDogXCJOb3RoaW5nXCI7XG4gIGlmIChyYW5nZS5zdXAgIT09IG51bGwpXG4gICAgcmV0dXJuIFtcIlR1cGxlXCIsIGhlbGRJbmRleCwgcmFuZ2Uuc3ViID8/IFwiTm90aGluZ1wiLCByYW5nZS5zdXBdO1xuICBpZiAocmFuZ2Uuc3ViICE9PSBudWxsKVxuICAgIHJldHVybiBbXCJUdXBsZVwiLCBoZWxkSW5kZXgsIHJhbmdlLnN1Yl07XG4gIHJldHVybiBoZWxkSW5kZXg7XG59XG5mdW5jdGlvbiBwYXJzZUludGVncmFsQm9keShwYXJzZXIsIG4gPSAxKSB7XG4gIGNvbnN0IHN0YXJ0ID0gcGFyc2VyLmluZGV4O1xuICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgbGV0IGZuID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih7XG4gICAgbWluUHJlYzogMjY2LFxuICAgIGNvbmRpdGlvbjogKCkgPT4ge1xuICAgICAgaWYgKHBhcnNlci5tYXRjaEFsbChbXCJcXFxcbWF0aHJtXCIsIFwiPHs+XCIsIFwiZFwiLCBcIjx9PlwiXSkpXG4gICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgIGVsc2UgaWYgKHBhcnNlci5tYXRjaEFsbChbXCJcXFxcb3BlcmF0b3JuYW1lXCIsIFwiPHs+XCIsIFwiZFwiLCBcIjx9PlwiXSkpXG4gICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG4gIH0pO1xuICBpZiAoIWZvdW5kKSB7XG4gICAgcGFyc2VyLmluZGV4ID0gc3RhcnQ7XG4gICAgZm4gPSBwYXJzZXIucGFyc2VFeHByZXNzaW9uKHtcbiAgICAgIG1pblByZWM6IDI2NixcbiAgICAgIGNvbmRpdGlvbjogKCkgPT4ge1xuICAgICAgICBpZiAocGFyc2VyLm1hdGNoKFwiZFwiKSlcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAoZm4gJiYgIWZvdW5kKVxuICAgIHJldHVybiBwYXJzZUludGVncmFsQm9keUV4cHJlc3Npb24oZm4pO1xuICBjb25zdCBpbmRleGVzID0gcGFyc2VJbmRleGVzKHBhcnNlciwgbik7XG4gIHJldHVybiBbZm4sIGluZGV4ZXNbMF0gPz8gbnVsbF07XG59XG5mdW5jdGlvbiBwYXJzZUluZGV4ZXMocGFyc2VyLCBuID0gMSkge1xuICBwYXJzZXIuc2tpcFNwYWNlKCk7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBpbmRleCA9IHN5bWJvbChwYXJzZXIucGFyc2VTeW1ib2woKSk7XG4gIGlmIChpbmRleCA9PT0gbnVsbClcbiAgICByZXR1cm4gW107XG4gIHJlc3VsdC5wdXNoKGluZGV4KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBhcnNlSW50ZWdyYWxCb2R5RXhwcmVzc2lvbihleHByKSB7XG4gIGNvbnN0IGggPSBoZWFkKGV4cHIpO1xuICBjb25zdCBvcDEyID0gb3AoZXhwciwgMSk7XG4gIGlmICghb3AxMilcbiAgICByZXR1cm4gW2V4cHIsIG51bGxdO1xuICBpZiAoaCA9PT0gXCJNdWx0aXBseVwiKSB7XG4gICAgY29uc3QgYXJncyA9IG9wcyhleHByKTtcbiAgICBpZiAoYXJncyAmJiBhcmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN5bSA9IHN5bWJvbChhcmdzW2FyZ3MubGVuZ3RoIC0gMl0pO1xuICAgICAgaWYgKHN5bSA9PT0gXCJkXCIgfHwgc3ltID09PSBcImRfdXByaWdodFwiKSB7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMilcbiAgICAgICAgICByZXR1cm4gW251bGwsIHN5bWJvbChhcmdzWzFdKV07XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMylcbiAgICAgICAgICByZXR1cm4gW2FyZ3NbMF0sIHN5bWJvbChhcmdzWzJdKV07XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgW1wiTXVsdGlwbHlcIiwgLi4uYXJncy5zbGljZSgwLCAtMildLFxuICAgICAgICAgIHN5bWJvbChhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgICBjb25zdCBbZm4yLCBpbmRleF0gPSBwYXJzZUludGVncmFsQm9keUV4cHJlc3Npb24oYXJnc1thcmdzLmxlbmd0aCAtIDFdKTtcbiAgICAgIGlmIChmbjIpXG4gICAgICAgIHJldHVybiBbW1wiTXVsdGlwbHlcIiwgLi4uYXJncy5zbGljZSgwLCAtMSksIGZuMl0sIGluZGV4XTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaCA9PT0gXCJEZWxpbWl0ZXJcIikge1xuICAgIGNvbnN0IFtmbjIsIGluZGV4XSA9IHBhcnNlSW50ZWdyYWxCb2R5RXhwcmVzc2lvbihvcDEyKTtcbiAgICBpZiAoaW5kZXgpIHtcbiAgICAgIGlmICghZm4yKVxuICAgICAgICByZXR1cm4gW251bGwsIGluZGV4XTtcbiAgICAgIHJldHVybiBbW1wiRGVsaW1pdGVyXCIsIGZuMiwgLi4ub3BzKGV4cHIpLnNsaWNlKDEpXSwgaW5kZXhdO1xuICAgIH1cbiAgfSBlbHNlIGlmIChoID09PSBcIkFkZFwiKSB7XG4gICAgY29uc3QgYXJncyA9IG9wcyhleHByKTtcbiAgICBpZiAoYXJncyAmJiBhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IFtmbjIsIGluZGV4XSA9IHBhcnNlSW50ZWdyYWxCb2R5RXhwcmVzc2lvbihhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pO1xuICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgIGlmIChmbjIpXG4gICAgICAgICAgcmV0dXJuIFtbXCJBZGRcIiwgLi4uYXJncy5zbGljZSgwLCAtMSksIGZuMl0sIGluZGV4XTtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMilcbiAgICAgICAgICByZXR1cm4gW1tcIkFkZFwiLCAuLi5hcmdzLnNsaWNlKDAsIC0xKV0sIGluZGV4XTtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMilcbiAgICAgICAgICByZXR1cm4gW2FyZ3NbMF0sIGluZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaCA9PT0gXCJOZWdhdGVcIikge1xuICAgIGNvbnN0IFtmbjIsIGluZGV4XSA9IHBhcnNlSW50ZWdyYWxCb2R5RXhwcmVzc2lvbihvcDEyKTtcbiAgICBpZiAoaW5kZXgpXG4gICAgICByZXR1cm4gW2ZuMiA/IFtcIk5lZ2F0ZVwiLCBmbjJdIDogbnVsbCwgaW5kZXhdO1xuICB9IGVsc2UgaWYgKGggPT09IFwiRGl2aWRlXCIpIHtcbiAgICBjb25zdCBbZm4yLCBpbmRleF0gPSBwYXJzZUludGVncmFsQm9keUV4cHJlc3Npb24ob3AxMik7XG4gICAgaWYgKGluZGV4KVxuICAgICAgcmV0dXJuIFtbXCJEaXZpZGVcIiwgZm4yID8/IDEsIG9wKGV4cHIsIDIpXSwgaW5kZXhdO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGFyZ3MgPSBvcHMoZXhwcik7XG4gICAgaWYgKGFyZ3M/Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgW2FyZzIsIGluZGV4XSA9IHBhcnNlSW50ZWdyYWxCb2R5RXhwcmVzc2lvbihhcmdzWzBdKTtcbiAgICAgIGlmIChpbmRleClcbiAgICAgICAgcmV0dXJuIFtbaGVhZChleHByKSwgYXJnMl0sIGluZGV4XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtleHByLCBudWxsXTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUludGVncmFsKGNvbW1hbmQpIHtcbiAgcmV0dXJuIChzZXJpYWxpemVyLCBleHByKSA9PiB7XG4gICAgaWYgKCFvcChleHByLCAxKSlcbiAgICAgIHJldHVybiBjb21tYW5kO1xuICAgIGxldCBhcmcgPSBvcChleHByLCAyKTtcbiAgICBjb25zdCBoID0gaGVhZChhcmcpO1xuICAgIGxldCBpbmRleEV4cHIgPSBudWxsO1xuICAgIGlmIChoID09PSBcIlR1cGxlXCIgfHwgaCA9PT0gXCJUcmlwbGVcIiB8fCBoID09PSBcIlBhaXJcIiB8fCBoID09PSBcIlNpbmdsZVwiKSB7XG4gICAgICBpbmRleEV4cHIgPSBvcChhcmcsIDEpO1xuICAgIH0gZWxzZSBpZiAoaCA9PT0gXCJIb2xkXCIpIHtcbiAgICAgIGluZGV4RXhwciA9IG9wKGFyZywgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4RXhwciA9IG9wKGFyZywgMSkgPz8gXCJ4XCI7XG4gICAgICBhcmcgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoaGVhZChpbmRleEV4cHIpID09PSBcIkhvbGRcIilcbiAgICAgIGluZGV4RXhwciA9IG9wKGluZGV4RXhwciwgMSk7XG4gICAgY29uc3QgaW5kZXggPSBpbmRleEV4cHIgIT09IG51bGwgPyBzeW1ib2woaW5kZXhFeHByKSA6IG51bGw7XG4gICAgbGV0IGZuID0gb3AoZXhwciwgMSk7XG4gICAgaWYgKGhlYWQoZm4pID09PSBcIkxhbWJkYVwiICYmIG9wKGZuLCAxKSlcbiAgICAgIGZuID0gc3VicyhvcChmbiwgMSksIHsgXzogaW5kZXggPz8gXCJ4XCIsIF8xOiBpbmRleCA/PyBcInhcIiB9KTtcbiAgICBpZiAoIWFyZykge1xuICAgICAgaWYgKCFpbmRleCB8fCBpbmRleCA9PT0gXCJOb3RoaW5nXCIpXG4gICAgICAgIHJldHVybiBqb2luTGF0ZXgoW2NvbW1hbmQsIFwiXFxcXCFcIiwgc2VyaWFsaXplci5zZXJpYWxpemUoZm4pXSk7XG4gICAgICByZXR1cm4gam9pbkxhdGV4KFtcbiAgICAgICAgY29tbWFuZCxcbiAgICAgICAgXCJcXFxcIVwiLFxuICAgICAgICBzZXJpYWxpemVyLnNlcmlhbGl6ZShmbiksXG4gICAgICAgIFwiXFxcXCxcXFxcb3BlcmF0b3JuYW1le2R9XCIsXG4gICAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplKGluZGV4KVxuICAgICAgXSk7XG4gICAgfVxuICAgIGNvbnN0IHN1YlN5bWJvbCA9IG9wKGFyZywgMikgPyBzeW1ib2wob3AoYXJnLCAyKSkgOiBudWxsO1xuICAgIGxldCBzdWIyID0gYXJnICYmIHN1YlN5bWJvbCAhPT0gXCJOb3RoaW5nXCIgPyBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChhcmcsIDIpKSA6IFwiXCI7XG4gICAgaWYgKHN1YjIubGVuZ3RoID4gMClcbiAgICAgIHN1YjIgPSBgX3ske3N1YjJ9fWA7XG4gICAgbGV0IHN1cCA9IFwiXCI7XG4gICAgY29uc3Qgc3VwU3ltYm9sID0gb3AoYXJnLCAzKSA/IHN5bWJvbChvcChhcmcsIDMpKSA6IG51bGw7XG4gICAgaWYgKG9wKGFyZywgMykgJiYgc3VwU3ltYm9sICE9PSBcIk5vdGhpbmdcIilcbiAgICAgIHN1cCA9IGBeeyR7c2VyaWFsaXplci5zZXJpYWxpemUob3AoYXJnLCAzKSl9fWA7XG4gICAgcmV0dXJuIGpvaW5MYXRleChbXG4gICAgICBjb21tYW5kLFxuICAgICAgc3VwLFxuICAgICAgc3ViMixcbiAgICAgIFwiXFxcXCFcIixcbiAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplKGZuKSxcbiAgICAgIC4uLmluZGV4ICYmIHN5bWJvbChpbmRleCkgIT09IFwiTm90aGluZ1wiID8gW1wiXFxcXCxcXFxcb3BlcmF0b3JuYW1le2R9XCIsIHNlcmlhbGl6ZXIuc2VyaWFsaXplKGluZGV4KV0gOiBbXVxuICAgIF0pO1xuICB9O1xufVxudmFyIERFRklOSVRJT05TX0NBTENVTFVTID0gW1xuICB7XG4gICAga2luZDogXCJleHByZXNzaW9uXCIsXG4gICAgbmFtZTogXCJJbnRlZ3JhdGVcIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxpbnRcIl0sXG4gICAgcGFyc2U6IHBhcnNlSW50ZWdyYWwoXCJJbnRlZ3JhdGVcIiksXG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemVJbnRlZ3JhbChcIlxcXFxpbnRcIilcbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwiZXhwcmVzc2lvblwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGlpbnRcIl0sXG4gICAgcGFyc2U6IHBhcnNlSW50ZWdyYWwoXCJJbnRlZ3JhdGVcIiwgMilcbiAgfSxcbiAge1xuICAgIGtpbmQ6IFwiZXhwcmVzc2lvblwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXGlpaW50XCJdLFxuICAgIHBhcnNlOiBwYXJzZUludGVncmFsKFwiSW50ZWdyYXRlXCIsIDMpXG4gIH0sXG4gIHtcbiAgICBraW5kOiBcImV4cHJlc3Npb25cIixcbiAgICBuYW1lOiBcIkNpcmN1bGFySW50ZWdyYXRlXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcb2ludFwiXSxcbiAgICBwYXJzZTogcGFyc2VJbnRlZ3JhbChcIkNpcmN1bGFySW50ZWdyYXRlXCIpLFxuICAgIHNlcmlhbGl6ZTogc2VyaWFsaXplSW50ZWdyYWwoXCJcXFxcb2ludFwiKVxuICB9LFxuICB7XG4gICAga2luZDogXCJleHByZXNzaW9uXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcb2lpbnRcIl0sXG4gICAgcGFyc2U6IHBhcnNlSW50ZWdyYWwoXCJDaXJjdWxhckludGVncmF0ZVwiLCAyKVxuICB9LFxuICB7XG4gICAga2luZDogXCJleHByZXNzaW9uXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcb2lpaW50XCJdLFxuICAgIHBhcnNlOiBwYXJzZUludGVncmFsKFwiQ2lyY3VsYXJJbnRlZ3JhdGVcIiwgMylcbiAgfVxuXTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9kaWN0aW9uYXJ5L2RlZmluaXRpb25zLXN5bWJvbHMudHNcbnZhciBTWU1CT0xTID0gW1xuICAvLyBHcmVla1xuICBbXCJhbHBoYVwiLCBcIlxcXFxhbHBoYVwiLCA5NDVdLFxuICBbXCJiZXRhXCIsIFwiXFxcXGJldGFcIiwgOTQ2XSxcbiAgW1wiZ2FtbWFcIiwgXCJcXFxcZ2FtbWFcIiwgOTQ3XSxcbiAgW1wiZGVsdGFcIiwgXCJcXFxcZGVsdGFcIiwgOTQ4XSxcbiAgW1wiZXBzaWxvblwiLCBcIlxcXFxlcHNpbG9uXCIsIDk0OV0sXG4gIFtcImVwc2lsb25TeW1ib2xcIiwgXCJcXFxcdmFyZXBzaWxvblwiLCAxMDEzXSxcbiAgLy8gR1JFRUsgTFVOQVRFIEVQU0lMT04gU1lNQk9MXG4gIFtcInpldGFcIiwgXCJcXFxcemV0YVwiLCA5NTBdLFxuICBbXCJldGFcIiwgXCJcXFxcZXRhXCIsIDk1MV0sXG4gIFtcInRoZXRhXCIsIFwiXFxcXHRoZXRhXCIsIDk1Ml0sXG4gIFtcInRoZXRhU3ltYm9sXCIsIFwiXFxcXHZhcnRoZXRhXCIsIDk3N10sXG4gIC8vIFVuaWNvZGUgR1JFRUsgVEhFVEEgU1lNQk9MXG4gIFtcImlvdGFcIiwgXCJcXFxcaW90YVwiLCA5NTNdLFxuICBbXCJrYXBwYVwiLCBcIlxcXFxrYXBwYVwiLCA5NTRdLFxuICBbXCJrYXBwYVN5bWJvbFwiLCBcIlxcXFx2YXJrYXBwYVwiLCAxMDA4XSxcbiAgLy8gR1JFRUsgS0FQUEEgU1lNQk9MXG4gIFtcImxhbWJkYVwiLCBcIlxcXFxsYW1iZGFcIiwgOTU1XSxcbiAgW1wibXVcIiwgXCJcXFxcbXVcIiwgOTU2XSxcbiAgW1wibnVcIiwgXCJcXFxcbnVcIiwgOTU3XSxcbiAgW1wieGlcIiwgXCJcXFxceGlcIiwgOTU4XSxcbiAgW1wib21pY3JvblwiLCBcIlxcXFxvbWljcm9uXCIsIDk1OV0sXG4gIFtcInBpXCIsIFwiXFxcXHBpXCIsIDk2MF0sXG4gIFtcInBpU3ltYm9sXCIsIFwiXFxcXHZhcnBpXCIsIDk4Ml0sXG4gIC8vIEdSRUVLIFBJIFNZTUJPTFxuICBbXCJyaG9cIiwgXCJcXFxccmhvXCIsIDk2MV0sXG4gIFtcInJob1N5bWJvbFwiLCBcIlxcXFx2YXJyaG9cIiwgMTAwOV0sXG4gIC8vIEdSRUVLIFJITyBTWU1CT0xcbiAgW1wic2lnbWFcIiwgXCJcXFxcc2lnbWFcIiwgOTYzXSxcbiAgW1wiZmluYWxTaWdtYVwiLCBcIlxcXFx2YXJzaWdtYVwiLCA5NjJdLFxuICAvL0dSRUVLIFNNQUxMIExFVFRFUiBGSU5BTCBTSUdNQVxuICBbXCJ0YXVcIiwgXCJcXFxcdGF1XCIsIDk2NF0sXG4gIFtcInBoaVwiLCBcIlxcXFxwaGlcIiwgOTgxXSxcbiAgLy8gTm90ZSBHUkVFSyBQSEkgU1lNQk9MLCBidXQgY29tbW9uIHVzYWdlIGluIG1hdGhcbiAgW1wicGhpTGV0dGVyXCIsIFwiXFxcXHZhcnBoaVwiLCA5NjZdLFxuICBbXCJ1cHNpbG9uXCIsIFwiXFxcXHVwc2lsb25cIiwgOTY1XSxcbiAgW1wiY2hpXCIsIFwiXFxcXGNoaVwiLCA5NjddLFxuICBbXCJwc2lcIiwgXCJcXFxccHNpXCIsIDk2OF0sXG4gIFtcIm9tZWdhXCIsIFwiXFxcXG9tZWdhXCIsIDk2OV0sXG4gIFtcIkFscGhhXCIsIFwiXFxcXEFscGhhXCIsIDkxM10sXG4gIFtcIkJldGFcIiwgXCJcXFxcQmV0YVwiLCA5MTRdLFxuICBbXCJHYW1tYVwiLCBcIlxcXFxHYW1tYVwiLCA5MTVdLFxuICBbXCJEZWx0YVwiLCBcIlxcXFxEZWx0YVwiLCA5MTZdLFxuICBbXCJFcHNpbG9uXCIsIFwiXFxcXEVwc2lsb25cIiwgOTE3XSxcbiAgW1wiWmV0YVwiLCBcIlxcXFxaZXRhXCIsIDkxOF0sXG4gIFtcIkV0YVwiLCBcIlxcXFxFdGFcIiwgOTE5XSxcbiAgW1wiVGhldGFcIiwgXCJcXFxcVGhldGFcIiwgOTIwXSxcbiAgW1wiSW90YVwiLCBcIlxcXFxJb3RhXCIsIDkyMV0sXG4gIFtcIkthcHBhXCIsIFwiXFxcXEthcHBhXCIsIDkyMl0sXG4gIFtcIkxhbWJkYVwiLCBcIlxcXFxMYW1iZGFcIiwgOTIzXSxcbiAgW1wiTXVcIiwgXCJcXFxcTXVcIiwgOTI0XSxcbiAgW1wiTnVcIiwgXCJcXFxcTnVcIiwgOTI1XSxcbiAgW1wiWGlcIiwgXCJcXFxcWGlcIiwgOTI2XSxcbiAgW1wiT21pY3JvblwiLCBcIlxcXFxPbWljcm9uXCIsIDkyN10sXG4gIC8vIFsnUGknLCAnXFxcXFBpJywgMHgwM2EwXSxcbiAgW1wiUmhvXCIsIFwiXFxcXFJob1wiLCA5MjldLFxuICBbXCJTaWdtYVwiLCBcIlxcXFxTaWdtYVwiLCA5MzFdLFxuICBbXCJUYXVcIiwgXCJcXFxcVGF1XCIsIDkzMl0sXG4gIFtcIlBoaVwiLCBcIlxcXFxQaGlcIiwgOTM0XSxcbiAgW1wiVXBzaWxvblwiLCBcIlxcXFxVcHNpbG9uXCIsIDkzM10sXG4gIFtcIkNoaVwiLCBcIlxcXFxDaGlcIiwgOTM1XSxcbiAgW1wiUHNpXCIsIFwiXFxcXFBzaVwiLCA5MzZdLFxuICBbXCJPbWVnYVwiLCBcIlxcXFxPbWVnYVwiLCA5MzddLFxuICBbXCJkaWdhbW1hXCIsIFwiXFxcXGRpZ2FtbWFcIiwgOTg5XSxcbiAgLy8gSGVicmV3XG4gIFtcImFsZXBoXCIsIFwiXFxcXGFsZXBoXCIsIDg1MDFdLFxuICAvLyBVbmljb2RlIEFMRUYgU1lNQk9MXG4gIFtcImJldFwiLCBcIlxcXFxiZXRoXCIsIDg1MDJdLFxuICBbXCJnaW1lbFwiLCBcIlxcXFxnaW1lbFwiLCA4NTAzXSxcbiAgW1wiZGFsZXRcIiwgXCJcXFxcZGFsZXRoXCIsIDg1MDRdLFxuICAvLyBMZXR0ZXItbGlrZVxuICBbXCJlbGxcIiwgXCJcXFxcZWxsXCIsIDg0OTldLFxuICAvLyBVbmljb2RlIFNDUklQVCBTTUFMTCBMXG4gIFtcInR1cm5lZENhcGl0YWxGXCIsIFwiXFxcXEZpbnZcIiwgODQ5OF0sXG4gIC8vIFVuaWNvZGUgVFVSTkVEIENBUElUQUwgRidcbiAgW1widHVybmVkQ2FwaXRhbEdcIiwgXCJcXFxcR2FtZVwiLCA4NTEzXSxcbiAgLy8gVFVSTkVEIFNBTlMtU0VSSUYgQ0FQSVRBTCBHXG4gIFtcIndlaWVyc3RyYXNzXCIsIFwiXFxcXHdwXCIsIDg0NzJdLFxuICAvLyBVbmljb2RlIFNDUklQVCBDQVBJVEFMIFBcbiAgW1wiZXRoXCIsIFwiXFxcXGV0aFwiLCAyNDBdLFxuICBbXCJpbnZlcnRlZE9obVwiLCBcIlxcXFxtaG9cIiwgODQ4N10sXG4gIC8vIFVuaWNvZGUgSU5WRVJURUQgT0hNIFNJR05cbiAgW1wiaEJhclwiLCBcIlxcXFxoYmFyXCIsIDI5NV0sXG4gIC8vIFVuaWNvZGUgTEFUSU4gU01BTEwgTEVUVEVSIEggV0lUSCBTVFJPS0VcbiAgW1wiaFNsYXNoXCIsIFwiXFxcXGhzbGFzaFwiLCA4NDYzXSxcbiAgLy8gVW5pY29kZSBQTEFOQ0sgQ09OU1RBTlQgT1ZFUiBUV08gUElcbiAgLy8gU3ltYm9sc1xuICBbXCJibGFja0NsdWJTdWl0XCIsIFwiXFxcXGNsdWJzdWl0XCIsIDk4MjddLFxuICBbXCJ3aGl0ZUhlYXJ0U3VpdFwiLCBcIlxcXFxoZWFydHN1aXRcIiwgOTgyNV0sXG4gIFtcImJsYWNrU3BhZGVTdWl0XCIsIFwiXFxcXHNwYWRlc3VpdFwiLCA5ODI0XSxcbiAgW1wid2hpdGVEaWFtb25kU3VpdFwiLCBcIlxcXFxkaWFtb25kc3VpdFwiLCA5ODI2XSxcbiAgW1wic2hhcnBcIiwgXCJcXFxcc2hhcnBcIiwgOTgzOV0sXG4gIFtcImZsYXRcIiwgXCJcXFxcZmxhdFwiLCA5ODM3XSxcbiAgW1wibmF0dXJhbFwiLCBcIlxcXFxuYXR1cmFsXCIsIDk4MzhdXG5dO1xudmFyIERFRklOSVRJT05TX1NZTUJPTFMgPSBbXG4gIC4uLlNZTUJPTFMubWFwKChbc3ltYm9sMiwgbGF0ZXgsIF9jb2RlcG9pbnRdKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IFwic3ltYm9sXCIsXG4gICAgICBuYW1lOiBzeW1ib2wyLFxuICAgICAgbGF0ZXhUcmlnZ2VyOiBbbGF0ZXhdLFxuICAgICAgcGFyc2U6IHN5bWJvbDJcbiAgICB9O1xuICB9KSxcbiAgLi4uU1lNQk9MUy5tYXAoKFtzeW1ib2wyLCBfbGF0ZXgsIGNvZGVwb2ludF0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogXCJzeW1ib2xcIixcbiAgICAgIGxhdGV4VHJpZ2dlcjogW1N0cmluZy5mcm9tQ29kZVBvaW50KGNvZGVwb2ludCldLFxuICAgICAgcGFyc2U6IHN5bWJvbDJcbiAgICB9O1xuICB9KVxuXTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9kaWN0aW9uYXJ5L2RlZmluaXRpb25zLWNvbXBsZXgudHNcbnZhciBERUZJTklUSU9OU19DT01QTEVYID0gW1xuICB7XG4gICAgbmFtZTogXCJSZWFsXCIsXG4gICAga2luZDogXCJmdW5jdGlvblwiLFxuICAgIGxhdGV4VHJpZ2dlcjogW1wiXFxcXFJlXCJdXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkltYWdpbmFyeVwiLFxuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxJbVwiXVxuICB9LFxuICB7XG4gICAgbmFtZTogXCJBcmd1bWVudFwiLFxuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIixcbiAgICBsYXRleFRyaWdnZXI6IFtcIlxcXFxhcmdcIl1cbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQ29uanVnYXRlXCIsXG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJeXCIsIFwiXFxcXHN0YXJcIl0sXG4gICAga2luZDogXCJwb3N0Zml4XCJcbiAgfVxuXTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9kaWN0aW9uYXJ5L2RlZmluaXRpb25zLXN0YXRpc3RpY3MudHNcbnZhciBERUZJTklUSU9OU19TVEFUSVNUSUNTID0gW1xuICB7XG4gICAgbmFtZTogXCJNZWFuXCIsXG4gICAga2luZDogXCJmdW5jdGlvblwiLFxuICAgIGlkZW50aWZpZXJUcmlnZ2VyOiBcIm1lYW5cIlxuICB9LFxuICB7XG4gICAgbmFtZTogXCJNZWRpYW5cIixcbiAgICBraW5kOiBcImZ1bmN0aW9uXCIsXG4gICAgaWRlbnRpZmllclRyaWdnZXI6IFwibWVkaWFuXCJcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiU3RhbmRhckRldmlhdGlvblwiLFxuICAgIGtpbmQ6IFwiZnVuY3Rpb25cIixcbiAgICBpZGVudGlmaWVyVHJpZ2dlcjogXCJzdGRkZXZcIlxuICB9LFxuICB7XG4gICAgbGF0ZXhUcmlnZ2VyOiBbXCJcXFxcYmFyXCJdLFxuICAgIGtpbmQ6IFwiZXhwcmVzc2lvblwiLFxuICAgIHBhcnNlOiAocGFyc2VyLCBfdW50aWwpID0+IHtcbiAgICAgIGNvbnN0IGV4cHIgPSBwYXJzZXIucGFyc2VHcm91cCgpID8/IHBhcnNlci5wYXJzZVRva2VuKCk7XG4gICAgICBpZiAoIWV4cHIgfHwgIXN5bWJvbChleHByKSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gW1wiTWVhblwiLCBleHByXTtcbiAgICB9XG4gIH1cbl07XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9sYXRleC1zeW50YXgvZGljdGlvbmFyeS9kZWZpbml0aW9ucy50c1xudmFyIERFRkFVTFRfREVMSU1JVEVSID0ge1xuICBcIihcIjogXCIoXCIsXG4gIFwiKVwiOiBcIilcIixcbiAgXCJbXCI6IFwiXFxcXGxicmFja1wiLFxuICBcIl1cIjogXCJcXFxccmJyYWNrXCIsXG4gIFwie1wiOiBcIlxcXFxsYnJhY2VcIixcbiAgXCJ9XCI6IFwiXFxcXHJicmFjZVwiLFxuICBcIjxcIjogXCJcXFxcbGFuZ2xlXCIsXG4gIFwiPlwiOiBcIlxcXFxyYW5nbGVcIixcbiAgXCJ8XCI6IFwiXFxcXHZlcnRcIixcbiAgXCJ8fFwiOiBcIlxcXFxWZXJ0XCIsXG4gIFwiXFxcXGxjZWlsXCI6IFwiXFxcXGxjZWlsXCIsXG4gIFwiXFxcXGxmbG9vclwiOiBcIlxcXFxsZmxvb3JcIixcbiAgXCJcXFxccmNlaWxcIjogXCJcXFxccmNlaWxcIixcbiAgXCJcXFxccmZsb29yXCI6IFwiXFxcXHJmbG9vclwiXG59O1xuZnVuY3Rpb24gYWRkRW50cnkocmVzdWx0LCBlbnRyeSwgb25FcnJvcikge1xuICBjb25zdCBpbmRleGVkRW50cnkgPSBtYWtlSW5kZXhlZEVudHJ5KGVudHJ5LCBvbkVycm9yKTtcbiAgaWYgKGluZGV4ZWRFbnRyeSA9PT0gbnVsbClcbiAgICByZXR1cm47XG4gIGNvbnN0IGtpbmQgPSBcImtpbmRcIiBpbiBlbnRyeSA/IGVudHJ5LmtpbmQgOiBcImV4cHJlc3Npb25cIjtcbiAgY29uc3QgbGF0ZXhUcmlnZ2VyID0gaW5kZXhlZEVudHJ5LmxhdGV4VHJpZ2dlcjtcbiAgaWYgKHR5cGVvZiBsYXRleFRyaWdnZXIgPT09IFwic3RyaW5nXCIpXG4gICAgcmVzdWx0Lmxvb2thaGVhZCA9IE1hdGgubWF4KHJlc3VsdC5sb29rYWhlYWQsIGNvdW50VG9rZW5zKGxhdGV4VHJpZ2dlcikpO1xuICBjb25zdCB0b2tlbnNUcmlnZ2VyID0gdG9rZW5pemUobGF0ZXhUcmlnZ2VyID8/IFwiXCIsIFtdKTtcbiAgaWYgKGxhdGV4VHJpZ2dlcj8uWzFdID09PSBcIlxcXFxwcmltZVwiKVxuICAgIDtcbiAgaWYgKHRva2Vuc1RyaWdnZXIubGVuZ3RoID09PSAyICYmIC9bX15dLy50ZXN0KHRva2Vuc1RyaWdnZXJbMF0pICYmIHRva2Vuc1RyaWdnZXJbMV0gIT09IFwiPHs+XCIgJiYga2luZCAhPT0gXCJmdW5jdGlvblwiICYmIGtpbmQgIT09IFwiZW52aXJvbm1lbnRcIiAmJiBraW5kICE9PSBcIm1hdGNoZml4XCIpIHtcbiAgICBsZXQgcGFyc2UgPSBlbnRyeS5wYXJzZTtcbiAgICBpZiAoIXBhcnNlICYmIGVudHJ5Lm5hbWUpIHtcbiAgICAgIGlmIChraW5kID09PSBcInBvc3RmaXhcIiB8fCBraW5kID09PSBcInByZWZpeFwiKVxuICAgICAgICBwYXJzZSA9IChfcGFyc2VyLCBleHByKSA9PiBbZW50cnkubmFtZSwgZXhwcl07XG4gICAgICBlbHNlXG4gICAgICAgIHBhcnNlID0gZW50cnkubmFtZTtcbiAgICB9XG4gICAgYWRkRW50cnkoXG4gICAgICByZXN1bHQsXG4gICAgICB7XG4gICAgICAgIC4uLmVudHJ5LFxuICAgICAgICBraW5kLFxuICAgICAgICBuYW1lOiB2b2lkIDAsXG4gICAgICAgIHNlcmlhbGl6ZTogdm9pZCAwLFxuICAgICAgICBwYXJzZSxcbiAgICAgICAgbGF0ZXhUcmlnZ2VyOiBbdG9rZW5zVHJpZ2dlclswXSwgXCI8ez5cIiwgdG9rZW5zVHJpZ2dlclsxXSwgXCI8fT5cIl1cbiAgICAgIH0sXG4gICAgICBvbkVycm9yXG4gICAgKTtcbiAgfVxuICByZXN1bHQuZGVmcy5wdXNoKGluZGV4ZWRFbnRyeSk7XG4gIGlmIChpbmRleGVkRW50cnkubmFtZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHJlc3VsdC5pZHMuaGFzKGluZGV4ZWRFbnRyeS5uYW1lKSkge1xuICAgICAgb25FcnJvcih7XG4gICAgICAgIHNldmVyaXR5OiBcIndhcm5pbmdcIixcbiAgICAgICAgbWVzc2FnZTogW1xuICAgICAgICAgIFwiaW52YWxpZC1kaWN0aW9uYXJ5LWVudHJ5XCIsXG4gICAgICAgICAgaW5kZXhlZEVudHJ5Lm5hbWUsXG4gICAgICAgICAgXCJEdXBsaWNhdGUgZGVmaW5pdGlvbi4gVGhlIG5hbWUgKE1hdGhKU09OIGlkZW50aWZpZXIpIG11c3QgYmUgdW5pcXVlLCBidXQgdHJpZ2dlcnMgY2FuIGJlIHNoYXJlZCBieSBtdWx0aXBsZSBkZWZpbml0aW9ucy5cIlxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVzdWx0Lmlkcy5zZXQoaW5kZXhlZEVudHJ5Lm5hbWUsIGluZGV4ZWRFbnRyeSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGluZGV4TGF0ZXhEaWN0aW9uYXJ5KGRpYywgb25FcnJvcikge1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgbG9va2FoZWFkOiAxLFxuICAgIGlkczogLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSxcbiAgICBkZWZzOiBbXVxuICB9O1xuICBmb3IgKGNvbnN0IGVudHJ5IG9mIGRpYylcbiAgICBhZGRFbnRyeShyZXN1bHQsIGVudHJ5LCBvbkVycm9yKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1ha2VJbmRleGVkRW50cnkoZW50cnksIG9uRXJyb3IpIHtcbiAgaWYgKCFpc1ZhbGlkRW50cnkoZW50cnksIG9uRXJyb3IpKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAga2luZDogXCJraW5kXCIgaW4gZW50cnkgPyBlbnRyeS5raW5kIDogXCJleHByZXNzaW9uXCJcbiAgfTtcbiAgbGV0IHRva2Vuc1RyaWdnZXIgPSBudWxsO1xuICBpZiAoXCJsYXRleFRyaWdnZXJcIiBpbiBlbnRyeSkge1xuICAgIGlmICh0eXBlb2YgZW50cnkubGF0ZXhUcmlnZ2VyID09PSBcInN0cmluZ1wiKVxuICAgICAgdG9rZW5zVHJpZ2dlciA9IHRva2VuaXplKGVudHJ5LmxhdGV4VHJpZ2dlciwgW10pO1xuICAgIGVsc2VcbiAgICAgIHRva2Vuc1RyaWdnZXIgPSBlbnRyeS5sYXRleFRyaWdnZXI7XG4gIH1cbiAgbGV0IGlkVHJpZ2dlciA9IG51bGw7XG4gIGlmIChcImlkZW50aWZpZXJUcmlnZ2VyXCIgaW4gZW50cnkpIHtcbiAgICBpZFRyaWdnZXIgPSBlbnRyeS5pZGVudGlmaWVyVHJpZ2dlcjtcbiAgfVxuICBpZiAodG9rZW5zVHJpZ2dlciAhPT0gbnVsbClcbiAgICByZXN1bHQubGF0ZXhUcmlnZ2VyID0gdG9rZW5zVG9TdHJpbmcodG9rZW5zVHJpZ2dlcik7XG4gIGlmIChpZFRyaWdnZXIgIT09IG51bGwpXG4gICAgcmVzdWx0LmlkZW50aWZpZXJUcmlnZ2VyID0gaWRUcmlnZ2VyO1xuICBpZiAoZW50cnkubmFtZSkge1xuICAgIHJlc3VsdC5uYW1lID0gZW50cnkubmFtZTtcbiAgICByZXN1bHQuc2VyaWFsaXplID0gbWFrZVNlcmlhbGl6ZUhhbmRsZXIoZW50cnksIHRva2Vuc1RyaWdnZXIsIGlkVHJpZ2dlcik7XG4gIH1cbiAgaWYgKHJlc3VsdC5raW5kID09PSBcIm1hdGNoZml4XCIgJiYgaXNNYXRjaGZpeEVudHJ5KGVudHJ5KSkge1xuICAgIHJlc3VsdC5vcGVuRGVsaW1pdGVyID0gZW50cnkub3BlblRyaWdnZXI7XG4gICAgcmVzdWx0LmNsb3NlRGVsaW1pdGVyID0gZW50cnkuY2xvc2VUcmlnZ2VyO1xuICB9XG4gIGlmIChyZXN1bHQua2luZCA9PT0gXCJzeW1ib2xcIiAmJiBpc1N5bWJvbEVudHJ5KGVudHJ5KSkge1xuICAgIHJlc3VsdC5wcmVjZWRlbmNlID0gZW50cnkucHJlY2VkZW5jZSA/PyAxZTQ7XG4gIH1cbiAgaWYgKChyZXN1bHQua2luZCA9PT0gXCJwcmVmaXhcIiB8fCByZXN1bHQua2luZCA9PT0gXCJwb3N0Zml4XCIpICYmIChpc1ByZWZpeEVudHJ5KGVudHJ5KSB8fCBpc1Bvc3RmaXhFbnRyeShlbnRyeSkpKSB7XG4gICAgaWYgKHRva2Vuc1RyaWdnZXIgJiYgKHRva2Vuc1RyaWdnZXJbMF0gPT09IFwiXlwiIHx8IHRva2Vuc1RyaWdnZXJbMF0gPT09IFwiX1wiKSkge1xuICAgICAgcmVzdWx0LnByZWNlZGVuY2UgPSA3MjA7XG4gICAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoXG4gICAgICAgIGVudHJ5LnByZWNlZGVuY2UgPT09IHZvaWQgMCxcbiAgICAgICAgXCIncHJlY2VkZW5jZScgaXMgZml4ZWQgYW5kIGNhbm5vdCBiZSBtb2RpZmllZCB3aXRoIF4gYW5kIF8gdHJpZ2dlcnNcIlxuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIHJlc3VsdC5wcmVjZWRlbmNlID0gZW50cnkucHJlY2VkZW5jZSA/PyAxZTQ7XG4gIH1cbiAgaWYgKHJlc3VsdC5raW5kID09PSBcImluZml4XCIgJiYgaXNJbmZpeEVudHJ5KGVudHJ5KSkge1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChcbiAgICAgICF0b2tlbnNUcmlnZ2VyIHx8IHRva2Vuc1RyaWdnZXJbMF0gIT09IFwiXlwiICYmIHRva2Vuc1RyaWdnZXJbMF0gIT09IFwiX1wiIHx8ICFlbnRyeS5hc3NvY2lhdGl2aXR5IHx8IGVudHJ5LmFzc29jaWF0aXZpdHkgPT09IFwibm9uXCJcbiAgICApO1xuICAgIHJlc3VsdC5hc3NvY2lhdGl2aXR5ID0gZW50cnkuYXNzb2NpYXRpdml0eSA/PyBcIm5vblwiO1xuICAgIHJlc3VsdC5wcmVjZWRlbmNlID0gZW50cnkucHJlY2VkZW5jZSA/PyAxZTQ7XG4gIH1cbiAgY29uc3QgcGFyc2UgPSBtYWtlUGFyc2VIYW5kbGVyKGVudHJ5LCB0b2tlbnNUcmlnZ2VyLCBpZFRyaWdnZXIpO1xuICBpZiAocGFyc2UpXG4gICAgcmVzdWx0LnBhcnNlID0gcGFyc2U7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtYWtlU2VyaWFsaXplSGFuZGxlcihlbnRyeSwgbGF0ZXhUcmlnZ2VyLCBpZFRyaWdnZXIpIHtcbiAgaWYgKHR5cGVvZiBlbnRyeS5zZXJpYWxpemUgPT09IFwiZnVuY3Rpb25cIilcbiAgICByZXR1cm4gZW50cnkuc2VyaWFsaXplO1xuICBjb25zdCBraW5kID0gZW50cnlbXCJraW5kXCJdID8/IFwiZXhwcmVzc2lvblwiO1xuICBpZiAoa2luZCA9PT0gXCJlbnZpcm9ubWVudFwiKSB7XG4gICAgY29uc3QgZW52TmFtZSA9IGVudHJ5W1wiaWRlbnRpZmllclRyaWdnZXJcIl0gPz8gZW50cnkubmFtZSA/PyBcInVua25vd25cIjtcbiAgICByZXR1cm4gKHNlcmlhbGl6ZXIsIGV4cHIpID0+IGpvaW5MYXRleChbXG4gICAgICBgXFxcXGJlZ2lueyR7ZW52TmFtZX19YCxcbiAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGV4cHIsIDEpKSxcbiAgICAgIGBcXFxcZW5keyR7ZW52TmFtZX19YFxuICAgIF0pO1xuICB9XG4gIGlmIChpc01hdGNoZml4RW50cnkoZW50cnkpKSB7XG4gICAgY29uc3Qgb3BlbkRlbGltID0gdHlwZW9mIGVudHJ5Lm9wZW5UcmlnZ2VyID09PSBcInN0cmluZ1wiID8gREVGQVVMVF9ERUxJTUlURVJbZW50cnkub3BlblRyaWdnZXJdIDogdG9rZW5zVG9TdHJpbmcoZW50cnlbXCJvcGVuRGVsaW1pdGVyXCJdKTtcbiAgICBjb25zdCBjbG9zZURlbGltID0gdHlwZW9mIGVudHJ5LmNsb3NlVHJpZ2dlciA9PT0gXCJzdHJpbmdcIiA/IERFRkFVTFRfREVMSU1JVEVSW2VudHJ5LmNsb3NlVHJpZ2dlcl0gOiB0b2tlbnNUb1N0cmluZyhlbnRyeVtcImNsb3NlRGVsaW1pdGVyXCJdKTtcbiAgICByZXR1cm4gKHNlcmlhbGl6ZXIsIGV4cHIpID0+IGpvaW5MYXRleChbb3BlbkRlbGltLCBzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChleHByLCAxKSksIGNsb3NlRGVsaW1dKTtcbiAgfVxuICBsZXQgbGF0ZXggPSBlbnRyeS5zZXJpYWxpemU7XG4gIGlmIChsYXRleCA9PT0gdm9pZCAwICYmIGxhdGV4VHJpZ2dlcilcbiAgICBsYXRleCA9IHRva2Vuc1RvU3RyaW5nKGxhdGV4VHJpZ2dlcik7XG4gIGlmIChsYXRleCkge1xuICAgIGlmIChraW5kID09PSBcInBvc3RmaXhcIilcbiAgICAgIHJldHVybiAoc2VyaWFsaXplciwgZXhwcikgPT4gam9pbkxhdGV4KFtzZXJpYWxpemVyLnNlcmlhbGl6ZShvcChleHByLCAxKSksIGxhdGV4XSk7XG4gICAgaWYgKGtpbmQgPT09IFwicHJlZml4XCIpXG4gICAgICByZXR1cm4gKHNlcmlhbGl6ZXIsIGV4cHIpID0+IGpvaW5MYXRleChbbGF0ZXgsIHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGV4cHIsIDEpKV0pO1xuICAgIGlmIChraW5kID09PSBcImluZml4XCIpIHtcbiAgICAgIHJldHVybiAoc2VyaWFsaXplciwgZXhwcikgPT4gam9pbkxhdGV4KFxuICAgICAgICAob3BzKGV4cHIpID8/IFtdKS5mbGF0TWFwKFxuICAgICAgICAgICh2YWwsIGkpID0+IGkgPCBub3BzKGV4cHIpIC0gMSA/IFtzZXJpYWxpemVyLnNlcmlhbGl6ZSh2YWwpLCBsYXRleF0gOiBbc2VyaWFsaXplci5zZXJpYWxpemUodmFsKV1cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChzZXJpYWxpemVyLCBleHByKSA9PiBoZWFkKGV4cHIpID8gam9pbkxhdGV4KFtsYXRleCwgc2VyaWFsaXplci53cmFwQXJndW1lbnRzKGV4cHIpXSkgOiBsYXRleDtcbiAgfVxuICBjb25zdCBpZCA9IGlkVHJpZ2dlciA/PyBlbnRyeS5uYW1lID8/IFwidW5rbm93blwiO1xuICBpZiAoa2luZCA9PT0gXCJwb3N0Zml4XCIpXG4gICAgcmV0dXJuIChzZXJpYWxpemVyLCBleHByKSA9PiBqb2luTGF0ZXgoW1xuICAgICAgc2VyaWFsaXplci5zZXJpYWxpemUob3AoZXhwciwgMSkpLFxuICAgICAgc2VyaWFsaXplci5zZXJpYWxpemVTeW1ib2woaWQpXG4gICAgXSk7XG4gIGlmIChraW5kID09PSBcInByZWZpeFwiKVxuICAgIHJldHVybiAoc2VyaWFsaXplciwgZXhwcikgPT4gam9pbkxhdGV4KFtcbiAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplU3ltYm9sKGlkKSxcbiAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGV4cHIsIDEpKVxuICAgIF0pO1xuICBpZiAoa2luZCA9PT0gXCJpbmZpeFwiKVxuICAgIHJldHVybiAoc2VyaWFsaXplciwgZXhwcikgPT4gam9pbkxhdGV4KFtcbiAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGV4cHIsIDEpKSxcbiAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplU3ltYm9sKGlkKSxcbiAgICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplKG9wKGV4cHIsIDIpKVxuICAgIF0pO1xuICByZXR1cm4gKHNlcmlhbGl6ZXIsIGV4cHIpID0+IGhlYWQoZXhwcikgPyBqb2luTGF0ZXgoW1xuICAgIHNlcmlhbGl6ZXIuc2VyaWFsaXplU3ltYm9sKGlkKSxcbiAgICBzZXJpYWxpemVyLndyYXBBcmd1bWVudHMoZXhwcilcbiAgXSkgOiBzZXJpYWxpemVyLnNlcmlhbGl6ZVN5bWJvbChpZCk7XG59XG5mdW5jdGlvbiBtYWtlUGFyc2VIYW5kbGVyKGVudHJ5LCBsYXRleFRyaWdnZXIsIGlkVHJpZ2dlcikge1xuICBpZiAoXCJwYXJzZVwiIGluIGVudHJ5ICYmIHR5cGVvZiBlbnRyeS5wYXJzZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgIHJldHVybiBlbnRyeS5wYXJzZTtcbiAgY29uc3Qga2luZCA9IFwia2luZFwiIGluIGVudHJ5ID8gZW50cnkua2luZCA6IFwiZXhwcmVzc2lvblwiO1xuICBpZiAoa2luZCA9PT0gXCJlbnZpcm9ubWVudFwiKSB7XG4gICAgY29uc3QgZW52TmFtZSA9IGVudHJ5LnBhcnNlID8/IGVudHJ5Lm5hbWUgPz8gaWRUcmlnZ2VyO1xuICAgIGlmIChlbnZOYW1lKVxuICAgICAgcmV0dXJuIChwYXJzZXIsIF91bnRpbCkgPT4ge1xuICAgICAgICBjb25zdCBhcnJheSA9IHBhcnNlci5wYXJzZVRhYnVsYXIoKTtcbiAgICAgICAgaWYgKGFycmF5ID09PSBudWxsKVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gW2Vudk5hbWUsIFtcIkxpc3RcIiwgYXJyYXkubWFwKChyb3cpID0+IFtcIkxpc3RcIiwgLi4ucm93XSldXTtcbiAgICAgIH07XG4gIH1cbiAgaWYgKGtpbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNvbnN0IGZuTmFtZSA9IGVudHJ5LnBhcnNlID8/IGVudHJ5Lm5hbWUgPz8gaWRUcmlnZ2VyO1xuICAgIGlmIChmbk5hbWUpXG4gICAgICByZXR1cm4gKHBhcnNlciwgdW50aWwpID0+IHtcbiAgICAgICAgY29uc3QgYXJncyA9IHBhcnNlci5wYXJzZUFyZ3VtZW50cyhcImVuY2xvc3VyZVwiLCB1bnRpbCk7XG4gICAgICAgIHJldHVybiBhcmdzID09PSBudWxsID8gZm5OYW1lIDogW2ZuTmFtZSwgLi4uYXJnc107XG4gICAgICB9O1xuICB9XG4gIGlmIChraW5kID09PSBcInN5bWJvbFwiKSB7XG4gICAgY29uc3Qgc3ltTmFtZSA9IGVudHJ5LnBhcnNlID8/IGVudHJ5Lm5hbWUgPz8gaWRUcmlnZ2VyO1xuICAgIGlmIChzeW1OYW1lKVxuICAgICAgcmV0dXJuIChfcGFyc2VyLCBfdGVybWluYXRvcikgPT4gc3ltTmFtZTtcbiAgfVxuICBpZiAoa2luZCA9PT0gXCJwcmVmaXhcIikge1xuICAgIGNvbnN0IGggPSBlbnRyeS5wYXJzZSA/PyBlbnRyeS5uYW1lID8/IGlkVHJpZ2dlcjtcbiAgICBpZiAoaCkge1xuICAgICAgY29uc3QgcHJlYyA9IGVudHJ5W1wicHJlY2VkZW5jZVwiXSA/PyAxZTQ7XG4gICAgICByZXR1cm4gKHBhcnNlciwgdW50aWwpID0+IHtcbiAgICAgICAgY29uc3QgcmhzID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbih7XG4gICAgICAgICAgLi4udW50aWwgPz8gW10sXG4gICAgICAgICAgbWluUHJlYzogcHJlY1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJocyA9PT0gbnVsbCA/IG51bGwgOiBbaCwgcmhzXTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGlmIChraW5kID09PSBcInBvc3RmaXhcIikge1xuICAgIGNvbnN0IGggPSBlbnRyeS5wYXJzZSA/PyBlbnRyeS5uYW1lO1xuICAgIGlmIChoKVxuICAgICAgcmV0dXJuIChfcGFyc2VyLCBsaHMpID0+IGxocyA9PT0gbnVsbCA/IG51bGwgOiBbaCwgbGhzXTtcbiAgfVxuICBpZiAoa2luZCA9PT0gXCJpbmZpeFwiKSB7XG4gICAgaWYgKC9bX15dLy50ZXN0KGxhdGV4VHJpZ2dlcj8uWzBdID8/IFwiXCIpKSB7XG4gICAgICBjb25zdCBoMiA9IGVudHJ5Lm5hbWUgPz8gZW50cnkucGFyc2U7XG4gICAgICByZXR1cm4gKF9wYXJzZXIsIGFyZykgPT4gW1xuICAgICAgICBoMixcbiAgICAgICAgbWlzc2luZ0lmRW1wdHkob3AoYXJnLCAxKSksXG4gICAgICAgIG1pc3NpbmdJZkVtcHR5KG9wKGFyZywgMikpXG4gICAgICBdO1xuICAgIH1cbiAgICBjb25zdCBoID0gZW50cnkucGFyc2UgPz8gZW50cnkubmFtZSA/PyBpZFRyaWdnZXI7XG4gICAgY29uc3QgcHJlYyA9IGVudHJ5W1wicHJlY2VkZW5jZVwiXSA/PyAxZTQ7XG4gICAgY29uc3QgYXNzb2NpYXRpdml0eSA9IGVudHJ5W1wiYXNzb2NpYXRpdml0eVwiXSA/PyBcIm5vblwiO1xuICAgIGlmIChoKVxuICAgICAgcmV0dXJuIChwYXJzZXIsIGxocywgdW50aWwpID0+IHtcbiAgICAgICAgaWYgKGxocyA9PT0gbnVsbClcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHByZWMgPCB1bnRpbC5taW5QcmVjKVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCByaHMgPSBtaXNzaW5nSWZFbXB0eShcbiAgICAgICAgICBwYXJzZXIucGFyc2VFeHByZXNzaW9uKHsgLi4udW50aWwsIG1pblByZWM6IHByZWMgfSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBoID09PSBcInN0cmluZ1wiID8gYXBwbHlBc3NvY2lhdGl2ZU9wZXJhdG9yKGgsIGxocywgcmhzLCBhc3NvY2lhdGl2aXR5KSA6IFtoLCBsaHMsIHJoc107XG4gICAgICB9O1xuICB9XG4gIGlmIChraW5kID09PSBcIm1hdGNoZml4XCIpIHtcbiAgICBjb25zdCBoID0gZW50cnkucGFyc2UgPz8gZW50cnkubmFtZTtcbiAgICBpZiAoaClcbiAgICAgIHJldHVybiAoX3BhcnNlciwgYm9keSkgPT4ge1xuICAgICAgICBpZiAoYm9keSA9PT0gbnVsbCB8fCBpc0VtcHR5U2VxdWVuY2UoYm9keSkpXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBbaCwgYm9keV07XG4gICAgICB9O1xuICB9XG4gIGlmIChraW5kID09PSBcImV4cHJlc3Npb25cIikge1xuICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gZW50cnkucGFyc2UgPz8gZW50cnkubmFtZSA/PyBpZFRyaWdnZXI7XG4gICAgaWYgKHBhcnNlUmVzdWx0KVxuICAgICAgcmV0dXJuICgpID0+IHBhcnNlUmVzdWx0O1xuICB9XG4gIGlmIChcInBhcnNlXCIgaW4gZW50cnkpIHtcbiAgICBjb25zdCBwYXJzZVJlc3VsdCA9IGVudHJ5LnBhcnNlO1xuICAgIHJldHVybiAoKSA9PiBwYXJzZVJlc3VsdDtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gaXNWYWxpZEVudHJ5KGVudHJ5LCBvbkVycm9yKSB7XG4gIGxldCBzdWJqZWN0ID0gZW50cnkubmFtZSA/PyBlbnRyeVtcImxhdGV4VHJpZ2dlclwiXSA/PyBlbnRyeVtcImlkZW50aWZpZXJUcmlnZ2VyXCJdID8/IGVudHJ5W1wib3BlbkRlbGltaXRlclwiXTtcbiAgaWYgKCFzdWJqZWN0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHN1YmplY3QgPSBKU09OLnN0cmluZ2lmeShlbnRyeSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc3ViamVjdCA9IFwiPz8/XCI7XG4gICAgfVxuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHN1YmplY3QpKVxuICAgIHN1YmplY3QgPSB0b2tlbnNUb1N0cmluZyhzdWJqZWN0KTtcbiAgaWYgKFwidHJpZ2dlclwiIGluIGVudHJ5KSB7XG4gICAgb25FcnJvcih7XG4gICAgICBzZXZlcml0eTogXCJ3YXJuaW5nXCIsXG4gICAgICBtZXNzYWdlOiBbXG4gICAgICAgIFwiaW52YWxpZC1kaWN0aW9uYXJ5LWVudHJ5XCIsXG4gICAgICAgIHN1YmplY3QsXG4gICAgICAgIGBUaGUgJ3RyaWdnZXInIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuIFVzZSAnbGF0ZXhUcmlnZ2VyJyBvciAnaWRlbnRpZmllclRyaWdnZXInIGluc3RlYWRgXG4gICAgICBdXG4gICAgfSk7XG4gIH1cbiAgaWYgKFwia2luZFwiIGluIGVudHJ5ICYmICFbXG4gICAgXCJleHByZXNzaW9uXCIsXG4gICAgXCJzeW1ib2xcIixcbiAgICBcImZ1bmN0aW9uXCIsXG4gICAgXCJpbmZpeFwiLFxuICAgIFwicG9zdGZpeFwiLFxuICAgIFwicHJlZml4XCIsXG4gICAgXCJtYXRjaGZpeFwiLFxuICAgIFwiZW52aXJvbm1lbnRcIlxuICBdLmluY2x1ZGVzKGVudHJ5LmtpbmQpKSB7XG4gICAgb25FcnJvcih7XG4gICAgICBzZXZlcml0eTogXCJ3YXJuaW5nXCIsXG4gICAgICBtZXNzYWdlOiBbXG4gICAgICAgIFwiaW52YWxpZC1kaWN0aW9uYXJ5LWVudHJ5XCIsXG4gICAgICAgIHN1YmplY3QsXG4gICAgICAgIGBUaGUgJ2tpbmQnIHByb3BlcnR5IG11c3QgYmUgb25lIG9mICdleHByZXNzaW9uJywgJ3N5bWJvbCcsICdmdW5jdGlvbicsICdpbmZpeCcsICdwb3N0Zml4JywgJ3ByZWZpeCcsICdtYXRjaGZpeCcsICdlbnZpcm9ubWVudCdgXG4gICAgICBdXG4gICAgfSk7XG4gIH1cbiAgaWYgKGVudHJ5LnNlcmlhbGl6ZSAhPT0gdm9pZCAwICYmICFlbnRyeS5uYW1lKSB7XG4gICAgb25FcnJvcih7XG4gICAgICBzZXZlcml0eTogXCJ3YXJuaW5nXCIsXG4gICAgICBtZXNzYWdlOiBbXG4gICAgICAgIFwiaW52YWxpZC1kaWN0aW9uYXJ5LWVudHJ5XCIsXG4gICAgICAgIHN1YmplY3QsXG4gICAgICAgIGBBICduYW1lJyBwcm9wZXJ0eSBtdXN0IGJlIHByb3ZpZGVkIGlmIGEgJ3NlcmlhbGl6ZScgaGFuZGxlciBpcyBwcm92aWRlZGBcbiAgICAgIF1cbiAgICB9KTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKFwiaWRlbnRpZmllclRyaWdnZXJcIiBpbiBlbnRyeSkge1xuICAgIGlmICh0eXBlb2YgZW50cnkuaWRlbnRpZmllclRyaWdnZXIgIT09IFwic3RyaW5nXCIgfHwgIWlzVmFsaWRJZGVudGlmaWVyKGVudHJ5LmlkZW50aWZpZXJUcmlnZ2VyKSkge1xuICAgICAgb25FcnJvcih7XG4gICAgICAgIHNldmVyaXR5OiBcIndhcm5pbmdcIixcbiAgICAgICAgbWVzc2FnZTogW1xuICAgICAgICAgIFwiaW52YWxpZC1kaWN0aW9uYXJ5LWVudHJ5XCIsXG4gICAgICAgICAgc3ViamVjdCxcbiAgICAgICAgICBgVGhlICdpZGVudGlmaWVyVHJpZ2dlcicgcHJvcGVydHkgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJgXG4gICAgICAgIF1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoXCJuYW1lXCIgaW4gZW50cnkpIHtcbiAgICBpZiAodHlwZW9mIGVudHJ5Lm5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmIChlbnRyeS5uYW1lICE9PSB2b2lkIDApXG4gICAgICAgIG9uRXJyb3Ioe1xuICAgICAgICAgIHNldmVyaXR5OiBcIndhcm5pbmdcIixcbiAgICAgICAgICBtZXNzYWdlOiBbXG4gICAgICAgICAgICBcImludmFsaWQtZGljdGlvbmFyeS1lbnRyeVwiLFxuICAgICAgICAgICAgc3ViamVjdCxcbiAgICAgICAgICAgIGBUaGUgJ25hbWUnIHByb3BlcnR5IG11c3QgYmUgYSBzdHJpbmdgXG4gICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFpc1ZhbGlkSWRlbnRpZmllcihlbnRyeS5uYW1lKSkge1xuICAgICAgb25FcnJvcih7XG4gICAgICAgIHNldmVyaXR5OiBcIndhcm5pbmdcIixcbiAgICAgICAgbWVzc2FnZTogW1xuICAgICAgICAgIFwiaW52YWxpZC1kaWN0aW9uYXJ5LWVudHJ5XCIsXG4gICAgICAgICAgZW50cnkubmFtZSxcbiAgICAgICAgICBgVGhlICduYW1lJyBwcm9wZXJ0eSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllcmBcbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChpc01hdGNoZml4RW50cnkoZW50cnkpKSB7XG4gICAgaWYgKFwibGF0ZXhUcmlnZ2VyXCIgaW4gZW50cnkgfHwgXCJpZGVudGlmaWVyVHJpZ2dlclwiIGluIGlzUHJlZml4RW50cnkpIHtcbiAgICAgIG9uRXJyb3Ioe1xuICAgICAgICBzZXZlcml0eTogXCJ3YXJuaW5nXCIsXG4gICAgICAgIG1lc3NhZ2U6IFtcbiAgICAgICAgICBcImludmFsaWQtZGljdGlvbmFyeS1lbnRyeVwiLFxuICAgICAgICAgIHN1YmplY3QsXG4gICAgICAgICAgYCdtYXRjaGZpeCcgb3BlcmF0b3JzIHVzZSBhICdvcGVuRGVsaW1pdGVyJyBhbmQgJ2Nsb3NlRGVsaW1pdGVyJyBpbnN0ZWFkIG9mIGEgJ2xhdGV4VHJpZ2dlcicgb3IgJ2lkZW50aWZpZXJUcmlnZ2VyJy4gYFxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFlbnRyeS5vcGVuVHJpZ2dlciB8fCAhZW50cnkuY2xvc2VUcmlnZ2VyKSB7XG4gICAgICBvbkVycm9yKHtcbiAgICAgICAgc2V2ZXJpdHk6IFwid2FybmluZ1wiLFxuICAgICAgICBtZXNzYWdlOiBbXG4gICAgICAgICAgXCJpbnZhbGlkLWRpY3Rpb25hcnktZW50cnlcIixcbiAgICAgICAgICBzdWJqZWN0LFxuICAgICAgICAgIFwiRXhwZWN0ZWQgYG9wZW5EZWxpbWl0ZXJgIGFuZCBhIGBjbG9zZURlbGltaXRlcmAgZm9yIG1hdGNoZml4IG9wZXJhdG9yXCJcbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW50cnkub3BlblRyaWdnZXIgIT09IHR5cGVvZiBlbnRyeS5jbG9zZVRyaWdnZXIpIHtcbiAgICAgIG9uRXJyb3Ioe1xuICAgICAgICBzZXZlcml0eTogXCJ3YXJuaW5nXCIsXG4gICAgICAgIG1lc3NhZ2U6IFtcbiAgICAgICAgICBcImludmFsaWQtZGljdGlvbmFyeS1lbnRyeVwiLFxuICAgICAgICAgIHN1YmplY3QsXG4gICAgICAgICAgXCJFeHBlY3RlZCBgb3BlbkRlbGltaXRlcmAgYW5kIGBjbG9zZURlbGltaXRlcmAgdG8gYm90aCBiZSBzdHJpbmdzIG9yIGFycmF5IG9mIExhdGV4VG9rZW5cIlxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzSW5maXhFbnRyeShlbnRyeSkgfHwgaXNQb3N0Zml4RW50cnkoZW50cnkpIHx8IGlzUHJlZml4RW50cnkoZW50cnkpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZW50cnkubGF0ZXhUcmlnZ2VyKSAmJiAoZW50cnkubGF0ZXhUcmlnZ2VyWzBdID09PSBcIl9cIiB8fCBlbnRyeS5sYXRleFRyaWdnZXJbMF0gPT09IFwiXlwiKSB8fCB0eXBlb2YgZW50cnkubGF0ZXhUcmlnZ2VyID09PSBcInN0cmluZ1wiICYmIChlbnRyeS5sYXRleFRyaWdnZXIuc3RhcnRzV2l0aChcIl5cIikgfHwgZW50cnkubGF0ZXhUcmlnZ2VyLnN0YXJ0c1dpdGgoXCJfXCIpKSkge1xuICAgICAgaWYgKGVudHJ5LnByZWNlZGVuY2UgIT09IHZvaWQgMCB8fCBlbnRyeVtcImFzc29jaWF0aXZpdHlcIl0gIT09IHZvaWQgMCkge1xuICAgICAgICBvbkVycm9yKHtcbiAgICAgICAgICBzZXZlcml0eTogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgbWVzc2FnZTogW1xuICAgICAgICAgICAgXCJpbnZhbGlkLWRpY3Rpb25hcnktZW50cnlcIixcbiAgICAgICAgICAgIHN1YmplY3QsXG4gICAgICAgICAgICBgVW5leHBlY3RlZCBcInByZWNlZGVuY2VcIiBvciBcImFzc29jaWF0aXZpdHlcIiBmb3Igc3VwZXJzY3JpcHQvc3Vic2NyaXB0IG9wZXJhdG9yYFxuICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVudHJ5LnByZWNlZGVuY2UgPT09IHZvaWQgMCkge1xuICAgICAgb25FcnJvcih7XG4gICAgICAgIHNldmVyaXR5OiBcIndhcm5pbmdcIixcbiAgICAgICAgbWVzc2FnZTogW1xuICAgICAgICAgIFwiaW52YWxpZC1kaWN0aW9uYXJ5LWVudHJ5XCIsXG4gICAgICAgICAgc3ViamVjdCxcbiAgICAgICAgICBgRXhwZWN0ZWQgYSBcInByZWNlZGVuY2VcIiBmb3IgJHtlbnRyeS5raW5kfSBvcGVyYXRvcmBcbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChlbnRyeVtcImFzc29jaWF0aXZpdHlcIl0gIT09IHZvaWQgMCkge1xuICAgICAgb25FcnJvcih7XG4gICAgICAgIHNldmVyaXR5OiBcIndhcm5pbmdcIixcbiAgICAgICAgbWVzc2FnZTogW1xuICAgICAgICAgIFwiaW52YWxpZC1kaWN0aW9uYXJ5LWVudHJ5XCIsXG4gICAgICAgICAgc3ViamVjdCxcbiAgICAgICAgICAnVW5leHBlY3RlZCBcImFzc29jaWF0aXZpdHlcIiBvcGVyYXRvcidcbiAgICAgICAgXVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmICghaXNNYXRjaGZpeEVudHJ5KGVudHJ5KSAmJiAhaXNFbnZpcm9ubWVudEVudHJ5KGVudHJ5KSkge1xuICAgIGlmICghZW50cnkubGF0ZXhUcmlnZ2VyICYmICFlbnRyeS5pZGVudGlmaWVyVHJpZ2dlciAmJiAhZW50cnkubmFtZSkge1xuICAgICAgb25FcnJvcih7XG4gICAgICAgIHNldmVyaXR5OiBcIndhcm5pbmdcIixcbiAgICAgICAgbWVzc2FnZTogW1xuICAgICAgICAgIFwiaW52YWxpZC1kaWN0aW9uYXJ5LWVudHJ5XCIsXG4gICAgICAgICAgc3ViamVjdCxcbiAgICAgICAgICBgRXhwZWN0ZWQgYSAnbmFtZScsIGEgJ2xhdGV4VHJpZ2dlcicgb3IgYSAnaWRlbnRpZmllclRyaWdnZXInYFxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGVudHJ5W1wicGFyc2VcIl0gPT09IHZvaWQgMCAmJiBlbnRyeS5uYW1lID09PSB2b2lkIDApIHtcbiAgICBvbkVycm9yKHtcbiAgICAgIHNldmVyaXR5OiBcIndhcm5pbmdcIixcbiAgICAgIG1lc3NhZ2U6IFtcbiAgICAgICAgXCJpbnZhbGlkLWRpY3Rpb25hcnktZW50cnlcIixcbiAgICAgICAgc3ViamVjdCxcbiAgICAgICAgYEV4cGVjdGVkIGEgJ3BhcnNlJyBvciAnbmFtZSdgXG4gICAgICBdXG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxudmFyIERFRkFVTFRfTEFURVhfRElDVElPTkFSWSA9IHtcbiAgYWxnZWJyYTogREVGSU5JVElPTlNfQUxHRUJSQSxcbiAgYXJpdGhtZXRpYzogREVGSU5JVElPTlNfQVJJVEhNRVRJQyxcbiAgY2FsY3VsdXM6IERFRklOSVRJT05TX0NBTENVTFVTLFxuICBjb21wbGV4OiBERUZJTklUSU9OU19DT01QTEVYLFxuICBjb3JlOiBERUZJTklUSU9OU19DT1JFLFxuICBsb2dpYzogREVGSU5JVElPTlNfTE9HSUMsXG4gIHJlbG9wOiBERUZJTklUSU9OU19JTkVRVUFMSVRJRVMsXG4gIG90aGVyOiBERUZJTklUSU9OU19PVEhFUlMsXG4gIHBoeXNpY3M6IFtcbiAgICB7XG4gICAgICBuYW1lOiBcIm11MFwiLFxuICAgICAga2luZDogXCJzeW1ib2xcIixcbiAgICAgIGxhdGV4VHJpZ2dlcjogXCJcXFxcbXVfMFwiXG4gICAgfVxuICBdLFxuICBzZXRzOiBERUZJTklUSU9OU19TRVRTLFxuICBzdGF0aXN0aWNzOiBERUZJTklUSU9OU19TVEFUSVNUSUNTLFxuICBzeW1ib2xzOiBERUZJTklUSU9OU19TWU1CT0xTLFxuICB0cmlnb25vbWV0cnk6IERFRklOSVRJT05TX1RSSUdPTk9NRVRSWVxufTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9wYXJzZS1pZGVudGlmaWVyLnRzXG52YXIgSURFTlRJRklFUl9QUkVGSVggPSB7XG4gIC8vIFRob3NlIGFyZSBcImdyb3VwaW5nXCIgcHJlZml4IHRoYXQgYWxzbyBzcGVjaWZ5IHNwYWNpbmdcbiAgLy8gYXJvdW5kIHRoZSBzeW1ib2wuIFdlIGlnbm9yZSB0aGUgc3BhY2luZywgdGhvdWdoLlxuICBcIlxcXFxtYXRob3JkXCI6IFwiXCIsXG4gIFwiXFxcXG1hdGhvcFwiOiBcIlwiLFxuICBcIlxcXFxtYXRoYmluXCI6IFwiXCIsXG4gIFwiXFxcXG1hdGhyZWxcIjogXCJcIixcbiAgXCJcXFxcbWF0aG9wZW5cIjogXCJcIixcbiAgXCJcXFxcbWF0aGNsb3NlXCI6IFwiXCIsXG4gIFwiXFxcXG1hdGhwdW5jdFwiOiBcIlwiLFxuICBcIlxcXFxtYXRoaW5uZXJcIjogXCJcIixcbiAgLy8gVGhpcyBpcyB0aGUgcHJlZmVycmVkIHdheSB0byBzcGVjaWZ5IGFuIGlkZW50aWZpZXJcbiAgLy8gaXQgZGVmaW5lcyBib3RoIHNwYWNpbmcgYW5kIGZvbnQuIEJ5IGRlZmF1bHQsIGlkZW50aWZpZXJzXG4gIC8vIGFyZSB3cmFwcGVyIHdpdGggYFxcXFxvcGVyYXRvcm5hbWV7fWAuXG4gIFwiXFxcXG9wZXJhdG9ybmFtZVwiOiBcIlwiLFxuICAvLyBUaGVzZSBzdHlsaW5nIGNvbW1hbmRzIGFyZSB1c2VkIHRvIGNoYW5nZSB0aGUgZm9udCBvZiBhbiBpZGVudGlmaWVyXG4gIC8vIFRoZXkgbWF5IGJlIHByb2JsZW1hdGljLCBhcyBhZGphY2VudCBpZGVudGlmaWVycyBtYXkgYmUgbWVyZ2VkXG4gIC8vIGludG8gYSBzaW5nbGUgaWRlbnRpZmllciB3aGVuIHVzZWQgaW4gZWRpdG9ycywgc3VjaCBhIE1hdGhMaXZlLlxuICAvLyBGb3IgZXhhbXBsZSBgXFxtYXRocm17c3BlZWR9XFxtYXRocm17c291bmR9YCBjYW4gYmUgY29uZnVzZWQgd2l0aCBgXFxtYXRocm17c3BlZWRzb3VuZH1gXG4gIFwiXFxcXG1hdGhybVwiOiBcIl91cHJpZ2h0XCIsXG4gIFwiXFxcXG1hdGhpdFwiOiBcIl9pdGFsaWNcIixcbiAgXCJcXFxcbWF0aGJmXCI6IFwiX2JvbGRcIixcbiAgXCJcXFxcbWF0aHNjclwiOiBcIl9zY3JpcHRcIixcbiAgXCJcXFxcbWF0aGNhbFwiOiBcIl9jYWxsaWdyYXBoaWNcIixcbiAgXCJcXFxcbWF0aGZyYWtcIjogXCJfZnJha3R1clwiLFxuICBcIlxcXFxtYXRoc2ZcIjogXCJfc2Fuc3NlcmlmXCIsXG4gIFwiXFxcXG1hdGh0dFwiOiBcIl9tb25vc3BhY2VcIixcbiAgXCJcXFxcbWF0aGJiXCI6IFwiX2RvdWJsZXN0cnVja1wiXG59O1xudmFyIElERU5USUZJRVJfTU9ESUZJRVIgPSB7XG4gIFwiXFxcXG1hdGhyaW5nXCI6IFwiX3JpbmdcIixcbiAgXCJcXFxcaGF0XCI6IFwiX2hhdFwiLFxuICBcIlxcXFx0aWxkZVwiOiBcIl90aWxkZVwiLFxuICBcIlxcXFx2ZWNcIjogXCJfdmVjXCIsXG4gIFwiXFxcXG92ZXJsaW5lXCI6IFwiX2JhclwiLFxuICBcIlxcXFx1bmRlcmxpbmVcIjogXCJfdW5kZXJiYXJcIixcbiAgXCJcXFxcZG90XCI6IFwiX2RvdFwiLFxuICBcIlxcXFxkZG90XCI6IFwiX2Rkb3RcIixcbiAgXCJcXFxcZGRkb3RcIjogXCJfZGRkb3RcIixcbiAgXCJcXFxcZGRkZG90XCI6IFwiX2RkZGRvdFwiLFxuICBcIlxcXFxhY3V0ZVwiOiBcIl9hY3V0ZVwiLFxuICBcIlxcXFxncmF2ZVwiOiBcIl9ncmF2ZVwiLFxuICBcIlxcXFxicmV2ZVwiOiBcIl9icmV2ZVwiLFxuICBcIlxcXFxjaGVja1wiOiBcIl9jaGVja1wiXG59O1xuZnVuY3Rpb24gcGFyc2VJZGVudGlmaWVyVG9rZW4ocGFyc2VyLCBvcHRpb25zKSB7XG4gIGlmIChwYXJzZXIuYXRFbmQpXG4gICAgcmV0dXJuIG51bGw7XG4gIGNvbnN0IHRva2VuID0gcGFyc2VyLnBlZWs7XG4gIGxldCBzcGVjaWFsID0ge1xuICAgIFwiXFxcXF9cIjogXCJfXCIsXG4gICAgXCJcXFxcI1wiOiBcImhhc2hcIlxuICB9W3Rva2VuXTtcbiAgaWYgKCFzcGVjaWFsICYmICFvcHRpb25zLnRvcGxldmVsKSB7XG4gICAgc3BlY2lhbCA9IHtcbiAgICAgIFwiK1wiOiBcInBsdXNcIixcbiAgICAgIFwiLVwiOiBcIm1pbnVzXCIsXG4gICAgICBcIlxcXFxwbHVzbW5cIjogXCJwbVwiLFxuICAgICAgXCJcXFxccG1cIjogXCJwbVwiLFxuICAgICAgXCJcXFxcYXN0XCI6IFwiYXN0XCIsXG4gICAgICBcIlxcXFxkYWdcIjogXCJkYWdcIixcbiAgICAgIFwiXFxcXGRkYWdcIjogXCJkZGFnXCIsXG4gICAgICBcIlxcXFxib3RcIjogXCJib3R0b21cIixcbiAgICAgIFwiXFxcXHRvcFwiOiBcInRvcFwiLFxuICAgICAgXCJcXFxcYnVsbGV0XCI6IFwiYnVsbGV0XCIsXG4gICAgICBcIlxcXFxjaXJcIjogXCJjaXJjbGVcIixcbiAgICAgIFwiXFxcXGRpYW1vbmRcIjogXCJkaWFtb25kXCIsXG4gICAgICBcIlxcXFx0aW1lc1wiOiBcInRpbWVzXCIsXG4gICAgICBcIlxcXFxzcXVhcmVcIjogXCJzcXVhcmVcIixcbiAgICAgIFwiXFxcXHN0YXJcIjogXCJzdGFyXCJcbiAgICB9W3Rva2VuXTtcbiAgfVxuICBpZiAoc3BlY2lhbCkge1xuICAgIHBhcnNlci5uZXh0VG9rZW4oKTtcbiAgICByZXR1cm4gc3BlY2lhbDtcbiAgfVxuICBjb25zdCBpID0gU1lNQk9MUy5maW5kSW5kZXgoKHgpID0+IHhbMV0gPT09IHRva2VuKTtcbiAgaWYgKGkgPj0gMCkge1xuICAgIHBhcnNlci5uZXh0VG9rZW4oKTtcbiAgICByZXR1cm4gU1lNQk9MU1tpXVswXTtcbiAgfVxuICByZXR1cm4gcGFyc2VyLm1hdGNoQ2hhcigpID8/IHBhcnNlci5uZXh0VG9rZW4oKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSWRlbnRpZmllckJvZHkocGFyc2VyKSB7XG4gIGxldCBpZCA9IG1hdGNoUHJlZml4ZWRJZGVudGlmaWVyKHBhcnNlcik7XG4gIGNvbnN0IHN0YXJ0ID0gcGFyc2VyLmluZGV4O1xuICBjb25zdCBwcmVmaXggPSBJREVOVElGSUVSX01PRElGSUVSW3BhcnNlci5wZWVrXSA/PyBudWxsO1xuICBpZiAocHJlZml4KSB7XG4gICAgcGFyc2VyLm5leHRUb2tlbigpO1xuICAgIGlmICghcGFyc2VyLm1hdGNoKFwiPHs+XCIpKSB7XG4gICAgICBwYXJzZXIuaW5kZXggPSBzdGFydDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBib2R5ID0gcGFyc2VJZGVudGlmaWVyQm9keShwYXJzZXIpO1xuICAgIGlmIChib2R5ID09PSBudWxsIHx8ICFwYXJzZXIubWF0Y2goXCI8fT5cIikpIHtcbiAgICAgIHBhcnNlci5pbmRleCA9IHN0YXJ0O1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlkID0gYCR7Ym9keX0ke3ByZWZpeH1gO1xuICB9XG4gIGlmIChpZCA9PT0gbnVsbCkge1xuICAgIGlkID0gXCJcIjtcbiAgICB3aGlsZSAoIXBhcnNlci5hdEVuZCkge1xuICAgICAgY29uc3QgdG9rZW4gPSBwYXJzZXIucGVlaztcbiAgICAgIGlmICh0b2tlbiA9PT0gXCI8fT5cIiB8fCB0b2tlbiA9PT0gXCJfXCIgfHwgdG9rZW4gPT09IFwiXlwiKVxuICAgICAgICBicmVhaztcbiAgICAgIGNvbnN0IG5leHQgPSBwYXJzZUlkZW50aWZpZXJUb2tlbihwYXJzZXIsIHsgdG9wbGV2ZWw6IGZhbHNlIH0pO1xuICAgICAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICAgICAgcGFyc2VyLmluZGV4ID0gc3RhcnQ7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWQgKz0gbmV4dDtcbiAgICB9XG4gICAgd2hpbGUgKCFwYXJzZXIuYXRFbmQgJiYgL1xcZC8udGVzdChwYXJzZXIucGVlaykpXG4gICAgICBpZCArPSBwYXJzZXIubmV4dFRva2VuKCk7XG4gIH1cbiAgd2hpbGUgKCFwYXJzZXIuYXRFbmQpIHtcbiAgICBpZiAocGFyc2VyLm1hdGNoKFwiXFxcXGRlZ3JlZVwiKSlcbiAgICAgIGlkICs9IFwiX2RlZ1wiO1xuICAgIGVsc2UgaWYgKHBhcnNlci5tYXRjaEFsbChbXCJeXCIsIFwiXFxcXHByaW1lXCJdKSlcbiAgICAgIGlkICs9IFwiX3ByaW1lXCI7XG4gICAgZWxzZSBpZiAocGFyc2VyLm1hdGNoQWxsKFtcIl5cIiwgXCI8ez5cIiwgXCJcXFxccHJpbWVcIiwgXCI8fT5cIl0pKVxuICAgICAgaWQgKz0gXCJfcHJpbWVcIjtcbiAgICBlbHNlIGlmIChwYXJzZXIubWF0Y2hBbGwoW1wiXlwiLCBcIjx7PlwiLCBcIlxcXFxkb3VibGVwcmltZVwiLCBcIjx9PlwiXSkpXG4gICAgICBpZCArPSBcIl9kcHJpbWVcIjtcbiAgICBlbHNlIGlmIChwYXJzZXIubWF0Y2hBbGwoW1wiXlwiLCBcIjx7PlwiLCBcIlxcXFxwcmltZVwiLCBcIlxcXFxwcmltZVwiLCBcIjx9PlwiXSkpXG4gICAgICBpZCArPSBcIl9kcHJpbWVcIjtcbiAgICBlbHNlXG4gICAgICBicmVhaztcbiAgfVxuICBjb25zdCBzdXBzID0gW107XG4gIGNvbnN0IHN1YnMyID0gW107XG4gIHdoaWxlICghcGFyc2VyLmF0RW5kKSB7XG4gICAgaWYgKHBhcnNlci5tYXRjaChcIl9cIikpIHtcbiAgICAgIGNvbnN0IGhhc0JyYWNlID0gcGFyc2VyLm1hdGNoKFwiPHs+XCIpO1xuICAgICAgY29uc3Qgc3ViMiA9IHBhcnNlSWRlbnRpZmllckJvZHkocGFyc2VyKTtcbiAgICAgIGlmIChoYXNCcmFjZSAmJiAhcGFyc2VyLm1hdGNoKFwiPH0+XCIpIHx8IHN1YjIgPT09IG51bGwpIHtcbiAgICAgICAgcGFyc2VyLmluZGV4ID0gc3RhcnQ7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgc3ViczIucHVzaChzdWIyKTtcbiAgICB9IGVsc2UgaWYgKHBhcnNlci5tYXRjaChcIl5cIikpIHtcbiAgICAgIGNvbnN0IGhhc0JyYWNlID0gcGFyc2VyLm1hdGNoKFwiPHs+XCIpO1xuICAgICAgY29uc3Qgc3VwID0gcGFyc2VJZGVudGlmaWVyQm9keShwYXJzZXIpO1xuICAgICAgaWYgKGhhc0JyYWNlICYmICFwYXJzZXIubWF0Y2goXCI8fT5cIikgfHwgc3VwID09PSBudWxsKSB7XG4gICAgICAgIHBhcnNlci5pbmRleCA9IHN0YXJ0O1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHN1cHMucHVzaChzdXApO1xuICAgIH0gZWxzZVxuICAgICAgYnJlYWs7XG4gIH1cbiAgaWYgKHN1cHMubGVuZ3RoID4gMClcbiAgICBpZCArPSBcIl9fXCIgKyBzdXBzLmpvaW4oXCJcIik7XG4gIGlmIChzdWJzMi5sZW5ndGggPiAwKVxuICAgIGlkICs9IFwiX1wiICsgc3ViczIuam9pbihcIlwiKTtcbiAgcmV0dXJuIGlkO1xufVxuZnVuY3Rpb24gbWF0Y2hQcmVmaXhlZElkZW50aWZpZXIocGFyc2VyKSB7XG4gIGNvbnN0IHN0YXJ0ID0gcGFyc2VyLmluZGV4O1xuICBjb25zdCBwcmVmaXggPSBJREVOVElGSUVSX1BSRUZJWFtwYXJzZXIucGVla10gPz8gbnVsbDtcbiAgaWYgKHByZWZpeCA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcbiAgcGFyc2VyLm5leHRUb2tlbigpO1xuICBpZiAocGFyc2VyLm1hdGNoKFwiPHs+XCIpKSB7XG4gICAgbGV0IGJvZHkgPSBcIlwiO1xuICAgIGNvbnN0IGRpZ2l0ID0ge1xuICAgICAgMDogXCJ6ZXJvXCIsXG4gICAgICAxOiBcIm9uZVwiLFxuICAgICAgMjogXCJ0d29cIixcbiAgICAgIDM6IFwidGhyZWVcIixcbiAgICAgIDQ6IFwiZm91clwiLFxuICAgICAgNTogXCJmaXZlXCIsXG4gICAgICA2OiBcInNpeFwiLFxuICAgICAgNzogXCJzZXZlblwiLFxuICAgICAgODogXCJlaWdodFwiLFxuICAgICAgOTogXCJuaW5lXCJcbiAgICB9W3BhcnNlci5wZWVrXSA/PyBcIlwiO1xuICAgIGlmIChkaWdpdCkge1xuICAgICAgYm9keSA9IGRpZ2l0O1xuICAgICAgcGFyc2VyLm5leHRUb2tlbigpO1xuICAgIH1cbiAgICBib2R5ICs9IHBhcnNlSWRlbnRpZmllckJvZHkocGFyc2VyKTtcbiAgICBpZiAoYm9keSA9PT0gbnVsbCB8fCAhcGFyc2VyLm1hdGNoKFwiPH0+XCIpKSB7XG4gICAgICBwYXJzZXIuaW5kZXggPSBzdGFydDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocHJlZml4ID09PSBcIl91cHJpZ2h0XCIgJiYgYm9keS5sZW5ndGggPiAxKVxuICAgICAgcmV0dXJuIGJvZHk7XG4gICAgcmV0dXJuIGJvZHkgKyBwcmVmaXg7XG4gIH1cbiAgcGFyc2VyLmluZGV4ID0gc3RhcnQ7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcGFyc2VJbnZhbGlkSWRlbnRpZmllcihwYXJzZXIpIHtcbiAgY29uc3Qgc3RhcnQgPSBwYXJzZXIuaW5kZXg7XG4gIGNvbnN0IGlkID0gbWF0Y2hQcmVmaXhlZElkZW50aWZpZXIocGFyc2VyKTtcbiAgaWYgKGlkID09PSBudWxsIHx8IGlzVmFsaWRJZGVudGlmaWVyKGlkKSkge1xuICAgIHBhcnNlci5pbmRleCA9IHN0YXJ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBwYXJzZXIuZXJyb3IoXG4gICAgW1wiaW52YWxpZC1pZGVudGlmaWVyXCIsIHsgc3RyOiB2YWxpZGF0ZUlkZW50aWZpZXIoaWQpIH1dLFxuICAgIHN0YXJ0XG4gICk7XG59XG5mdW5jdGlvbiBwYXJzZUlkZW50aWZpZXIocGFyc2VyKSB7XG4gIGlmICgvXlthLXpBLVpdJC8udGVzdChwYXJzZXIucGVlaykgfHwgL15cXHB7WElEU30kL3UudGVzdChwYXJzZXIucGVlaykpXG4gICAgcmV0dXJuIHBhcnNlci5uZXh0VG9rZW4oKTtcbiAgY29uc3Qgc3RhcnQgPSBwYXJzZXIuaW5kZXg7XG4gIGxldCBpZCA9IG1hdGNoUHJlZml4ZWRJZGVudGlmaWVyKHBhcnNlcik7XG4gIGlmICghaWQpIHtcbiAgICBpZCA9IFwiXCI7XG4gICAgd2hpbGUgKCFwYXJzZXIuYXRFbmQgJiYgT05MWV9FTU9KSVMudGVzdChpZCArIHBhcnNlci5wZWVrKSlcbiAgICAgIGlkICs9IHBhcnNlci5uZXh0VG9rZW4oKTtcbiAgICBpZiAoIWlkKVxuICAgICAgaWQgPSBudWxsO1xuICB9XG4gIGlkID8/IChpZCA9IHBhcnNlSWRlbnRpZmllclRva2VuKHBhcnNlciwgeyB0b3BsZXZlbDogdHJ1ZSB9KSk7XG4gIGlmIChpZCkge1xuICAgIGlkID0gaWQubm9ybWFsaXplKCk7XG4gICAgaWYgKGlzVmFsaWRJZGVudGlmaWVyKGlkKSlcbiAgICAgIHJldHVybiBpZDtcbiAgfVxuICBwYXJzZXIuaW5kZXggPSBzdGFydDtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9sYXRleC1zeW50YXgvcGFyc2UudHNcbnZhciBERUxJTUlURVJfU0hPUlRIQU5EID0ge1xuICBcIihcIjogW1wiXFxcXGxwYXJlblwiLCBcIihcIl0sXG4gIFwiKVwiOiBbXCJcXFxccnBhcmVuXCIsIFwiKVwiXSxcbiAgXCJbXCI6IFtcIlxcXFxsYnJhY2tcIl0sXG4gIFwiXVwiOiBbXCJcXFxccmJyYWNrXCJdLFxuICBcIjxcIjogW1wiPFwiLCBcIlxcXFxsYW5nbGVcIl0sXG4gIFwiPlwiOiBbXCI+XCIsIFwiXFxcXHJhbmdsZVwiXSxcbiAgXCJ7XCI6IFtcIlxcXFx7XCIsIFwiXFxcXGxicmFjZVwiXSxcbiAgXCJ9XCI6IFtcIlxcXFx9XCIsIFwiXFxcXHJicmFjZVwiXSxcbiAgXCI6XCI6IFtcIjpcIiwgXCJcXFxcY29sb25cIl0sXG4gIFwifFwiOiBbXCJ8XCIsIFwiXFxcXHxcIiwgXCJcXFxcbHZlcnRcIiwgXCJcXFxccnZlcnRcIl0sXG4gIC8vc3BlY2lhbDogJ1xcbHZlcnRgIHdoZW4gb3BlbiwgYFxccnZlcnRgIHdoZW4gY2xvc2VcbiAgXCJ8fFwiOiBbXCJ8fFwiLCBcIlxcXFxWZXJ0XCIsIFwiXFxcXGxWZXJ0XCIsIFwiXFxcXHJWZXJ0XCJdLFxuICAvLyBzcGVjaWFsOiBgXFxsVmVydGAgd2hlbiBvcGVuLCBgXFxyVmVydGAgd2hlbiBjbG9zZVxuICBcIlxcXFxsZmxvb3JcIjogW1wiXFxcXGxmbG9vclwiXSxcbiAgXCJcXFxccmZsb29yXCI6IFtcIlxcXFxyZmxvb3JcIl0sXG4gIFwiXFxcXGxjZWlsXCI6IFtcIlxcXFxsY2VpbFwiXSxcbiAgXCJcXFxccmNlaWxcIjogW1wiXFxcXHJjZWlsXCJdLFxuICBcIlxcXFx1bGNvcm5lclwiOiBbXCJcXFxcdWxjb3JuZXJcIl0sXG4gIFwiXFxcXHVyY29ybmVyXCI6IFtcIlxcXFx1cmNvcm5lclwiXSxcbiAgXCJcXFxcbGxjb3JuZXJcIjogW1wiXFxcXGxsY29ybmVyXCJdLFxuICBcIlxcXFxscmNvcm5lclwiOiBbXCJcXFxcbHJjb3JuZXJcIl0sXG4gIFwiXFxcXGxncm91cFwiOiBbXCJcXFxcbGdyb3VwXCJdLFxuICBcIlxcXFxyZ3JvdXBcIjogW1wiXFxcXHJncm91cFwiXSxcbiAgXCJcXFxcbG1vdXN0YWNoZVwiOiBbXCJcXFxcbG1vdXN0YWNoZVwiXSxcbiAgXCJcXFxccm1vdXN0YWNoZVwiOiBbXCJcXFxccm1vdXN0YWNoZVwiXVxufTtcbnZhciBPUEVOX0RFTElNSVRFUl9QUkVGSVggPSB7XG4gIFwiXFxcXGxlZnRcIjogXCJcXFxccmlnaHRcIixcbiAgXCJcXFxcYmlnbFwiOiBcIlxcXFxiaWdyXCIsXG4gIFwiXFxcXEJpZ2xcIjogXCJcXFxcQmlnclwiLFxuICBcIlxcXFxiaWdnbFwiOiBcIlxcXFxiaWdnclwiLFxuICBcIlxcXFxCaWdnbFwiOiBcIlxcXFxCaWdnclwiLFxuICBcIlxcXFxiaWdcIjogXCJcXFxcYmlnXCIsXG4gIFwiXFxcXEJpZ1wiOiBcIlxcXFxCaWdcIixcbiAgXCJcXFxcYmlnZ1wiOiBcIlxcXFxiaWdnXCIsXG4gIFwiXFxcXEJpZ2dcIjogXCJcXFxcQmlnZ1wiXG59O1xudmFyIENMT1NFX0RFTElNSVRFUiA9IHtcbiAgXCIoXCI6IFwiKVwiLFxuICBcIltcIjogXCJdXCIsXG4gIFwiXFxcXHtcIjogXCJcXFxcfVwiLFxuICBcIlxcXFxsYnJhY2VcIjogXCJcXFxccmJyYWNlXCIsXG4gIFwiXFxcXGxwYXJlblwiOiBcIlxcXFxycGFyZW5cIixcbiAgXCJcXFxcbGFuZ2xlXCI6IFwiXFxcXHJhbmdsZVwiLFxuICBcIlxcXFxsZmxvb3JcIjogXCJcXFxccmZsb29yXCIsXG4gIFwiXFxcXGxjZWlsXCI6IFwiXFxcXHJjZWlsXCIsXG4gIFwiXFxcXHZlcnRcIjogXCJcXFxcdmVydFwiLFxuICBcIlxcXFxsdmVydFwiOiBcIlxcXFxydmVydFwiLFxuICBcIlxcXFxWZXJ0XCI6IFwiXFxcXFZlcnRcIixcbiAgXCJcXFxcbFZlcnRcIjogXCJcXFxcclZlcnRcIixcbiAgXCJcXFxcbGJyYWNrXCI6IFwiXFxcXHJicmFja1wiLFxuICBcIlxcXFx1bGNvcm5lclwiOiBcIlxcXFx1cmNvcm5lclwiLFxuICBcIlxcXFxsbGNvcm5lclwiOiBcIlxcXFxscmNvcm5lclwiLFxuICBcIlxcXFxsZ3JvdXBcIjogXCJcXFxccmdyb3VwXCIsXG4gIFwiXFxcXGxtb3VzdGFjaGVcIjogXCJcXFxccm1vdXN0YWNoZVwiXG59O1xudmFyIERFRkFVTFRfTEFURVhfTlVNQkVSX09QVElPTlMgPSB7XG4gIHByZWNpc2lvbjogNixcbiAgLy8gd2l0aCBtYWNoaW5lIG51bWJlcnMsIHVwIHRvIDE1IGFzc3VtaW5nIDJeNTMgYml0cyBmbG9hdGluZyBwb2ludHNcbiAgcG9zaXRpdmVJbmZpbml0eTogXCJcXFxcaW5mdHlcIixcbiAgbmVnYXRpdmVJbmZpbml0eTogXCItXFxcXGluZnR5XCIsXG4gIG5vdEFOdW1iZXI6IFwiXFxcXG9wZXJhdG9ybmFtZXtOYU59XCIsXG4gIGRlY2ltYWxNYXJrZXI6IFwiLlwiLFxuICAvLyBVc2UgYHssfWAgZm9yIGNvbW1hIGFzIGEgZGVjaW1hbCBtYXJrZXJcbiAgZ3JvdXBTZXBhcmF0b3I6IFwiXFxcXCxcIixcbiAgLy8gZm9yIHRob3VzYW5kcywgZXRjLi4uXG4gIGV4cG9uZW50UHJvZHVjdDogXCJcXFxcY2RvdFwiLFxuICBiZWdpbkV4cG9uZW50TWFya2VyOiBcIjEwXntcIixcbiAgLy8gY291bGQgYmUgJ2UnXG4gIGVuZEV4cG9uZW50TWFya2VyOiBcIn1cIixcbiAgbm90YXRpb246IFwiYXV0b1wiLFxuICB0cnVuY2F0aW9uTWFya2VyOiBcIlxcXFxsZG90c1wiLFxuICBiZWdpblJlcGVhdGluZ0RpZ2l0czogXCJcXFxcb3ZlcmxpbmV7XCIsXG4gIGVuZFJlcGVhdGluZ0RpZ2l0czogXCJ9XCIsXG4gIGltYWdpbmFyeVVuaXQ6IFwiXFxcXGltYWdpbmFyeUlcIixcbiAgYXZvaWRFeHBvbmVudHNJblJhbmdlOiBbLTcsIDIwXVxufTtcbnZhciBERUZBVUxUX1BBUlNFX0xBVEVYX09QVElPTlMgPSB7XG4gIGFwcGx5SW52aXNpYmxlT3BlcmF0b3I6IFwiYXV0b1wiLFxuICBza2lwU3BhY2U6IHRydWUsXG4gIHBhcnNlQXJndW1lbnRzT2ZVbmtub3duTGF0ZXhDb21tYW5kczogdHJ1ZSxcbiAgcGFyc2VOdW1iZXJzOiB0cnVlLFxuICBwYXJzZVVua25vd25JZGVudGlmaWVyOiAoaWQsIHBhcnNlcikgPT4gcGFyc2VyLmNvbXB1dGVFbmdpbmU/Lmxvb2t1cEZ1bmN0aW9uKGlkKSAhPT0gdm9pZCAwID8gXCJmdW5jdGlvblwiIDogXCJzeW1ib2xcIixcbiAgcHJlc2VydmVMYXRleDogZmFsc2Vcbn07XG52YXIgX1BhcnNlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IodG9rZW5zLCBvcHRpb25zLCBkaWN0aW9uYXJ5MiwgY29tcHV0ZUVuZ2luZSkge1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIC8vIEEgcGFyc2luZyBib3VuZGFyeSBpcyBhIHNlcXVlbmNlIG9mIHRva2VucyB0aGF0IGluZGljYXRlIHRoYXQgYVxuICAgIC8vIHJlY3Vyc2l2ZSBwYXJzaW5nIG9wZXJhdGlvbiBzaG91bGQgc3RvcC5cbiAgICAvLyBJbiBhIHRyYWRpdGlvbmFsIHBhcnNlciwga2VlcGluZyB0cmFjayBvZiBwYXJzaW5nIGJvdW5kYXJpZXMgd291bGRcbiAgICAvLyBub3QgYmUgbmVjZXNzYXJ5LiBIb3dldmVyLCBiZWNhdXNlIHdlIGF0dGVtcHQgdG8gZGVsaXZlciB0aGUgYmVzdFxuICAgIC8vIGludGVycHJldGF0aW9uIG9mIGEgcGFydGlhbCBleHByZXNzaW9uLCBib3VuZGFyaWVzIGFsbG93IHVzIHRvIGZhaWxcbiAgICAvLyBwYXJzaW5nIG1vcmUgbG9jYWxseS5cbiAgICAvLyBGb3IgZXhhbXBsZSwgaW4gYFxcYmVnaW57Y2FzZXN9IHwgXFxlbmR7Y2FzZXN9YCwgd2l0aG91dCBib3VuZGFyeVxuICAgIC8vIGRldGVjdGlvbiwgdGhlIHBhcnNpbmcgb2YgYHxgIHdvdWxkIGF0dGVtcHQgdG8gZ29ibGUgdXAgYFxcZW5ke2Nhc2VzfWBcbiAgICAvLyB3aGljaCB3b3VsZCBiZSBpbnRlcnByZXRlZCBhcyBhbiB1bmV4cGVjdGVkIGNvbW1hbmQsIGFuZCB0aGUgd2hvbGUgYFxcYmVnaW5gXG4gICAgLy8gd291bGQgYmUgcmVqZWN0ZWQgYXMgYW4gdW5iYWxhbmNlZCBlbnZpcm9ubWVudC4gV2l0aCBgXFxlbmR7Y2FzZXN9YCBhcyBhXG4gICAgLy8gYm91bmRhcnksIHRoZSBwYXJzaW5nIG9mIHRoZSBgfGAgYXJndW1lbnQgc3RvcHMgYXMgc29vbiBhcyBpdCBlbmNvdW50ZXJzXG4gICAgLy8gdGhlIGBcXGVuZHtjYXNlc31gIGFuZCBjYW4gcHJvcGVybHkgcmVwb3J0IGFuIHVuZXhwZWN0ZWQgdG9rZSBvbiB0aGUgYHxgXG4gICAgLy8gb25seSB3aGlsZSBjb3JyZWN0bHkgaW50ZXJwcmV0aW5nIHRoZSBgXFxiZWdpbntjYXNlc30uLi5cXGVuZHtjYXNlc31gXG4gICAgdGhpcy5fYm91bmRhcmllcyA9IFtdO1xuICAgIC8vIFRob3NlIHR3byBwcm9wZXJ0aWVzIGFyZSB1c2VkIHRvIGRldGVjdCBpbmZpbml0ZSBsb29wcyB3aGlsZSBwYXJzaW5nXG4gICAgdGhpcy5fbGFzdFBlZWsgPSBcIlwiO1xuICAgIHRoaXMuX3BlZWtDb3VudGVyID0gMDtcbiAgICB0aGlzLl90b2tlbnMgPSB0b2tlbnM7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgLi4uREVGQVVMVF9MQVRFWF9OVU1CRVJfT1BUSU9OUyxcbiAgICAgIC4uLkRFRkFVTFRfUEFSU0VfTEFURVhfT1BUSU9OUyxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuICAgIHRoaXMuX2RpY3Rpb25hcnkgPSBkaWN0aW9uYXJ5MjtcbiAgICB0aGlzLmNvbXB1dGVFbmdpbmUgPSBjb21wdXRlRW5naW5lO1xuICAgIHRoaXMuX3Bvc2l0aXZlSW5maW5pdHlUb2tlbnMgPSB0b2tlbml6ZSh0aGlzLm9wdGlvbnMucG9zaXRpdmVJbmZpbml0eSwgW10pO1xuICAgIHRoaXMuX25lZ2F0aXZlSW5maW5pdHlUb2tlbnMgPSB0b2tlbml6ZSh0aGlzLm9wdGlvbnMubmVnYXRpdmVJbmZpbml0eSwgW10pO1xuICAgIHRoaXMuX25vdEFOdW1iZXJUb2tlbnMgPSB0b2tlbml6ZSh0aGlzLm9wdGlvbnMubm90QU51bWJlciwgW10pO1xuICAgIHRoaXMuX2RlY2ltYWxNYXJrZXJUb2tlbnMgPSB0b2tlbml6ZSh0aGlzLm9wdGlvbnMuZGVjaW1hbE1hcmtlciwgW10pO1xuICAgIHRoaXMuX2dyb3VwU2VwYXJhdG9yVG9rZW5zID0gdG9rZW5pemUodGhpcy5vcHRpb25zLmdyb3VwU2VwYXJhdG9yLCBbXSk7XG4gICAgdGhpcy5fZXhwb25lbnRQcm9kdWN0VG9rZW5zID0gdG9rZW5pemUodGhpcy5vcHRpb25zLmV4cG9uZW50UHJvZHVjdCwgW10pO1xuICAgIHRoaXMuX2JlZ2luRXhwb25lbnRNYXJrZXJUb2tlbnMgPSB0b2tlbml6ZShcbiAgICAgIHRoaXMub3B0aW9ucy5iZWdpbkV4cG9uZW50TWFya2VyLFxuICAgICAgW11cbiAgICApO1xuICAgIHRoaXMuX2VuZEV4cG9uZW50TWFya2VyVG9rZW5zID0gdG9rZW5pemUoXG4gICAgICB0aGlzLm9wdGlvbnMuZW5kRXhwb25lbnRNYXJrZXIsXG4gICAgICBbXVxuICAgICk7XG4gICAgdGhpcy5fdHJ1bmNhdGlvbk1hcmtlclRva2VucyA9IHRva2VuaXplKHRoaXMub3B0aW9ucy50cnVuY2F0aW9uTWFya2VyLCBbXSk7XG4gICAgdGhpcy5fYmVnaW5SZXBlYXRpbmdEaWdpdHNUb2tlbnMgPSB0b2tlbml6ZShcbiAgICAgIHRoaXMub3B0aW9ucy5iZWdpblJlcGVhdGluZ0RpZ2l0cyxcbiAgICAgIFtdXG4gICAgKTtcbiAgICB0aGlzLl9lbmRSZXBlYXRpbmdEaWdpdHNUb2tlbnMgPSB0b2tlbml6ZShcbiAgICAgIHRoaXMub3B0aW9ucy5lbmRSZXBlYXRpbmdEaWdpdHMsXG4gICAgICBbXVxuICAgICk7XG4gICAgdGhpcy5faW1hZ2luYXJ5TnVtYmVyVG9rZW5zID0gdG9rZW5pemUodGhpcy5vcHRpb25zLmltYWdpbmFyeVVuaXQsIFtdKTtcbiAgfVxuICB1cGRhdGVPcHRpb25zKG9wdCkge1xuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKG9wdCkpXG4gICAgICBpZiAoayBpbiB0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zW2tdID0gdjtcbiAgICAgICAgaWYgKHR5cGVvZiB2ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgaWYgKGsgPT09IFwicG9zaXRpdmVJbmZpbml0eVwiKVxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpdmVJbmZpbml0eVRva2VucyA9IHRva2VuaXplKHYsIFtdKTtcbiAgICAgICAgICBpZiAoayA9PT0gXCJuZWdhdGl2ZUluZmluaXR5XCIpXG4gICAgICAgICAgICB0aGlzLl9uZWdhdGl2ZUluZmluaXR5VG9rZW5zID0gdG9rZW5pemUodiwgW10pO1xuICAgICAgICAgIGlmIChrID09PSBcIm5vdEFOdW1iZXJcIilcbiAgICAgICAgICAgIHRoaXMuX25vdEFOdW1iZXJUb2tlbnMgPSB0b2tlbml6ZSh2LCBbXSk7XG4gICAgICAgICAgaWYgKGsgPT09IFwiZGVjaW1hbE1hcmtlclwiKVxuICAgICAgICAgICAgdGhpcy5fZGVjaW1hbE1hcmtlclRva2VucyA9IHRva2VuaXplKHYsIFtdKTtcbiAgICAgICAgICBpZiAoayA9PT0gXCJncm91cFNlcGFyYXRvclwiKVxuICAgICAgICAgICAgdGhpcy5fZ3JvdXBTZXBhcmF0b3JUb2tlbnMgPSB0b2tlbml6ZSh2LCBbXSk7XG4gICAgICAgICAgaWYgKGsgPT09IFwiZXhwb25lbnRQcm9kdWN0XCIpXG4gICAgICAgICAgICB0aGlzLl9leHBvbmVudFByb2R1Y3RUb2tlbnMgPSB0b2tlbml6ZSh2LCBbXSk7XG4gICAgICAgICAgaWYgKGsgPT09IFwiYmVnaW5FeHBvbmVudE1hcmtlclwiKVxuICAgICAgICAgICAgdGhpcy5fYmVnaW5FeHBvbmVudE1hcmtlclRva2VucyA9IHRva2VuaXplKHYsIFtdKTtcbiAgICAgICAgICBpZiAoayA9PT0gXCJlbmRFeHBvbmVudE1hcmtlclwiKVxuICAgICAgICAgICAgdGhpcy5fZW5kRXhwb25lbnRNYXJrZXJUb2tlbnMgPSB0b2tlbml6ZSh2LCBbXSk7XG4gICAgICAgICAgaWYgKGsgPT09IFwidHJ1bmNhdGlvbk1hcmtlclwiKVxuICAgICAgICAgICAgdGhpcy5fdHJ1bmNhdGlvbk1hcmtlclRva2VucyA9IHRva2VuaXplKHYsIFtdKTtcbiAgICAgICAgICBpZiAoayA9PT0gXCJiZWdpblJlcGVhdGluZ0RpZ2l0c1wiKVxuICAgICAgICAgICAgdGhpcy5fYmVnaW5SZXBlYXRpbmdEaWdpdHNUb2tlbnMgPSB0b2tlbml6ZSh2LCBbXSk7XG4gICAgICAgICAgaWYgKGsgPT09IFwiZW5kUmVwZWF0aW5nRGlnaXRzXCIpXG4gICAgICAgICAgICB0aGlzLl9lbmRSZXBlYXRpbmdEaWdpdHNUb2tlbnMgPSB0b2tlbml6ZSh2LCBbXSk7XG4gICAgICAgICAgaWYgKGsgPT09IFwiaW1hZ2luYXJ5TnVtYmVyXCIpXG4gICAgICAgICAgICB0aGlzLl9pbWFnaW5hcnlOdW1iZXJUb2tlbnMgPSB0b2tlbml6ZSh2LCBbXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZVxuICAgICAgICB0aHJvdyBFcnJvcihgVW5leHBlY3RlZCBvcHRpb24gXCIke2t9XCJgKTtcbiAgfVxuICBnZXQgYXRFbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXggPj0gdGhpcy5fdG9rZW5zLmxlbmd0aDtcbiAgfVxuICBnZXQgcGVlaygpIHtcbiAgICBjb25zdCBwZWVrID0gdGhpcy5fdG9rZW5zW3RoaXMuaW5kZXhdO1xuICAgIGlmIChwZWVrID09PSB0aGlzLl9sYXN0UGVlaylcbiAgICAgIHRoaXMuX3BlZWtDb3VudGVyICs9IDE7XG4gICAgZWxzZVxuICAgICAgdGhpcy5fcGVla0NvdW50ZXIgPSAwO1xuICAgIGlmICh0aGlzLl9wZWVrQ291bnRlciA+PSAxMDI0KSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgSW5maW5pdGUgbG9vcCBkZXRlY3RlZCB3aGlsZSBwYXJzaW5nIFwiJHt0aGlzLmxhdGV4KDApfVwiIGF0IFwiJHt0aGlzLl9sYXN0UGVla31cIiAoaW5kZXggJHt0aGlzLmluZGV4fSlgXG4gICAgICApO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW5maW5pdGUgbG9vcCBkZXRlY3RlZCB3aGlsZSBwYXJzaW5nIFwiJHt0aGlzLmxhdGV4KDApfVwiIGF0ICR7dGhpcy5fbGFzdFBlZWt9IChpbmRleCAke3RoaXMuaW5kZXh9KWBcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX2xhc3RQZWVrID0gcGVlaztcbiAgICByZXR1cm4gcGVlaztcbiAgfVxuICBuZXh0VG9rZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Rva2Vuc1t0aGlzLmluZGV4KytdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdHJ1ZSBpZlxuICAgKiAtIGF0IGVuZCBvZiB0aGUgdG9rZW4gc3RyZWFtXG4gICAqIC0gdGhlIGB0LmNvbmRpdGlvbmAgZnVuY3Rpb24gcmV0dXJucyB0cnVlXG4gICAqIE5vdGU6IHRoZSBgbWluUHJlY2AgY29uZGl0aW9uIGlzIG5vdCBjaGVja2VkLiBJdCBzaG91bGQgYmUgY2hlY2tlZCBzZXBhcmF0ZWx5LlxuICAgKi9cbiAgYXRUZXJtaW5hdG9yKHQpIHtcbiAgICByZXR1cm4gdGhpcy5hdEJvdW5kYXJ5IHx8ICgodD8uY29uZGl0aW9uICYmIHQuY29uZGl0aW9uKHRoaXMpKSA/PyBmYWxzZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRydWUgaWYgdGhlIGN1cnJlbnQgdG9rZW4gbWF0Y2hlcyBhbnkgb2YgdGhlIGJvdW5kYXJpZXMgd2UgYXJlXG4gICAqIHdhaXRpbmcgZm9yLlxuICAgKi9cbiAgZ2V0IGF0Qm91bmRhcnkoKSB7XG4gICAgaWYgKHRoaXMuYXRFbmQpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgZm9yIChjb25zdCBib3VuZGFyeSBvZiB0aGlzLl9ib3VuZGFyaWVzKSB7XG4gICAgICBpZiAodGhpcy5tYXRjaEFsbChib3VuZGFyeS50b2tlbnMpKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhZGRCb3VuZGFyeShib3VuZGFyeSkge1xuICAgIHRoaXMuX2JvdW5kYXJpZXMucHVzaCh7IGluZGV4OiB0aGlzLmluZGV4LCB0b2tlbnM6IGJvdW5kYXJ5IH0pO1xuICB9XG4gIHJlbW92ZUJvdW5kYXJ5KCkge1xuICAgIHRoaXMuX2JvdW5kYXJpZXMucG9wKCk7XG4gIH1cbiAgbWF0Y2hCb3VuZGFyeSgpIHtcbiAgICBjb25zdCBjdXJyZW50Qm91bmRhcnkgPSB0aGlzLl9ib3VuZGFyaWVzW3RoaXMuX2JvdW5kYXJpZXMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgbWF0Y2gyID0gY3VycmVudEJvdW5kYXJ5ICYmIHRoaXMubWF0Y2hBbGwoY3VycmVudEJvdW5kYXJ5LnRva2Vucyk7XG4gICAgaWYgKG1hdGNoMilcbiAgICAgIHRoaXMuX2JvdW5kYXJpZXMucG9wKCk7XG4gICAgcmV0dXJuIG1hdGNoMjtcbiAgfVxuICBib3VuZGFyeUVycm9yKG1zZykge1xuICAgIGNvbnN0IGN1cnJlbnRCb3VuZGFyeSA9IHRoaXMuX2JvdW5kYXJpZXNbdGhpcy5fYm91bmRhcmllcy5sZW5ndGggLSAxXTtcbiAgICB0aGlzLl9ib3VuZGFyaWVzLnBvcCgpO1xuICAgIHJldHVybiB0aGlzLmVycm9yKG1zZywgY3VycmVudEJvdW5kYXJ5LmluZGV4KTtcbiAgfVxuICBsYXRleChzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHRva2Vuc1RvU3RyaW5nKHRoaXMuX3Rva2Vucy5zbGljZShzdGFydCwgZW5kKSk7XG4gIH1cbiAgbGF0ZXhBaGVhZChuKSB7XG4gICAgcmV0dXJuIHRoaXMubGF0ZXgodGhpcy5pbmRleCwgdGhpcy5pbmRleCArIG4pO1xuICB9XG4gIC8vIGxhdGV4QmVmb3JlKCk6IHN0cmluZyB7XG4gIC8vICAgcmV0dXJuIHRoaXMubGF0ZXgoMCwgdGhpcy5pbmRleCk7XG4gIC8vIH1cbiAgLy8gbGF0ZXhBZnRlcigpOiBzdHJpbmcge1xuICAvLyAgIHJldHVybiB0aGlzLmxhdGV4KHRoaXMuaW5kZXgpO1xuICAvLyB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYXQgbW9zdCBgdGhpcy5fZGljdGlvbmFyeS5sb29rYWhlYWRgIExhVGVYIHRva2Vucy5cbiAgICpcbiAgICogVGhlIGluZGV4IGluIHRoZSByZXR1cm5lZCBhcnJheSBjb3JyZXNwb25kIHRvIHRoZSBudW1iZXIgb2YgdG9rZW5zLlxuICAgKiBOb3RlIHRoYXQgc2luY2UgYSB0b2tlbiBjYW4gYmUgbG9uZ2VyIHRoYW4gb25lIGNoYXIgKCdcXFxccGknLCBidXQgYWxzb1xuICAgKiBzb21lIGFzdHJhbCBwbGFuZSB1bmljb2RlIGNoYXJhY3RlcnMpLCB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmdcbiAgICogZG9lcyBub3QgbWF0Y2ggdGhhdCBpbmRleC4gSG93ZXZlciwga25vd2luZyB0aGUgaW5kZXggaXMgaW1wb3J0YW50XG4gICAqIHRvIGtub3cgYnkgaG93IG1hbnkgdG9rZW5zIHRvIGFkdmFuY2UuXG4gICAqXG4gICAqIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgW2VtcHR5LCAnXFxcXHNxcnQnLCAnXFxcXHNxcnR7JywgJ1xcXFxzcXJ0ezInLCAnXFxcXHNxcnR7Mn0nXWBcbiAgICpcbiAgICovXG4gIGxvb2tBaGVhZCgpIHtcbiAgICBsZXQgbiA9IE1hdGgubWluKFxuICAgICAgdGhpcy5fZGljdGlvbmFyeS5sb29rYWhlYWQsXG4gICAgICB0aGlzLl90b2tlbnMubGVuZ3RoIC0gdGhpcy5pbmRleFxuICAgICk7XG4gICAgaWYgKG4gPD0gMClcbiAgICAgIHJldHVybiBbXTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICB3aGlsZSAobiA+IDApXG4gICAgICByZXN1bHQucHVzaChbbiwgdGhpcy5sYXRleEFoZWFkKG4tLSldKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHBlZWtEZWZpbml0aW9ucyhraW5kKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgZGVmcyA9IFsuLi50aGlzLmdldERlZnMoa2luZCldO1xuICAgIGZvciAoY29uc3QgZGVmIG9mIGRlZnMpXG4gICAgICBpZiAoZGVmLmxhdGV4VHJpZ2dlciA9PT0gXCJcIilcbiAgICAgICAgcmVzdWx0LnB1c2goW2RlZiwgMF0pO1xuICAgIGZvciAoY29uc3QgW24sIHRva2Vuc10gb2YgdGhpcy5sb29rQWhlYWQoKSkge1xuICAgICAgZm9yIChjb25zdCBkZWYgb2YgZGVmcylcbiAgICAgICAgaWYgKGRlZi5sYXRleFRyaWdnZXIgPT09IHRva2VucylcbiAgICAgICAgICByZXN1bHQucHVzaChbZGVmLCBuXSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGVmIG9mIGRlZnMpIHtcbiAgICAgIGlmIChkZWYuaWRlbnRpZmllclRyaWdnZXIpIHtcbiAgICAgICAgY29uc3QgbiA9IHBhcnNlQ29tcGxleElkKHRoaXMsIGRlZi5pZGVudGlmaWVyVHJpZ2dlcik7XG4gICAgICAgIGlmIChuID4gMClcbiAgICAgICAgICByZXN1bHQucHVzaChbZGVmLCBuXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqIFNraXAgc3RyaWN0bHkgYDxzcGFjZT5gIHRva2Vucy5cbiAgICogVG8gYWxzbyBza2lwIGB7fWAgc2VlIGBza2lwU3BhY2UoKWAuXG4gICAqIFRvIHNraXAgdmlzdWFsIHNwYWNlIChlLmcuIGBcXCxgKSBzZWUgYHNraXBWaXN1YWxTcGFjZSgpYC5cbiAgICovXG4gIHNraXBTcGFjZVRva2VucygpIHtcbiAgICB3aGlsZSAodGhpcy5tYXRjaChcIjxzcGFjZT5cIikpIHtcbiAgICB9XG4gIH1cbiAgLyoqIFdoaWxlIHBhcnNpbmcgaW4gbWF0aCBtb2RlLCBza2lwIGFwcGxpY2FibGUgc3BhY2VzLCB3aGljaCBpbmNsdWRlcyBge31gLlxuICAgKiBEbyBub3QgdXNlIHRvIHNraXAgc3BhY2VzIHdoaWxlIHBhcnNpbmcgYSBzdHJpbmcuIFNlZSAgYHNraXBTcGFjZVRva2VucygpYFxuICAgKiBpbnN0ZWFkLlxuICAgKi9cbiAgc2tpcFNwYWNlKCkge1xuICAgIGlmICghdGhpcy5hdEVuZCAmJiB0aGlzLnBlZWsgPT09IFwiPHs+XCIpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICB3aGlsZSAodGhpcy5tYXRjaChcIjxzcGFjZT5cIikpIHtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5leHRUb2tlbigpID09PSBcIjx9PlwiKSB7XG4gICAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5za2lwU3BhY2UpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICAgIHdoaWxlICh0aGlzLm1hdGNoKFwiPHNwYWNlPlwiKSlcbiAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgaWYgKHJlc3VsdClcbiAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBza2lwVmlzdWFsU3BhY2UoKSB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc2tpcFNwYWNlKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgaWYgKFtcbiAgICAgIFwiXFxcXCFcIixcbiAgICAgIFwiXFxcXCxcIixcbiAgICAgIFwiXFxcXDpcIixcbiAgICAgIFwiXFxcXDtcIixcbiAgICAgIFwiXFxcXGVuc2tpcFwiLFxuICAgICAgXCJcXFxcZW5zcGFjZVwiLFxuICAgICAgXCJcXFxcc3BhY2VcIixcbiAgICAgIFwiXFxcXHF1YWRcIixcbiAgICAgIFwiXFxcXHFxdWFkXCJcbiAgICBdLmluY2x1ZGVzKHRoaXMucGVlaykpIHtcbiAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICB0aGlzLnNraXBWaXN1YWxTcGFjZSgpO1xuICAgIH1cbiAgICB0aGlzLnNraXBTcGFjZSgpO1xuICB9XG4gIG1hdGNoKHRva2VuKSB7XG4gICAgaWYgKHRoaXMuX3Rva2Vuc1t0aGlzLmluZGV4XSA9PT0gdG9rZW4pIHtcbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbWF0Y2hBbGwodG9rZW5zKSB7XG4gICAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KEFycmF5LmlzQXJyYXkodG9rZW5zKSk7XG4gICAgaWYgKHRva2Vucy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IG1hdGNoZWQgPSB0cnVlO1xuICAgIGxldCBpID0gMDtcbiAgICBkbyB7XG4gICAgICBtYXRjaGVkID0gdGhpcy5fdG9rZW5zW3RoaXMuaW5kZXggKyBpXSA9PT0gdG9rZW5zW2krK107XG4gICAgfSB3aGlsZSAobWF0Y2hlZCAmJiBpIDwgdG9rZW5zLmxlbmd0aCk7XG4gICAgaWYgKG1hdGNoZWQpXG4gICAgICB0aGlzLmluZGV4ICs9IGk7XG4gICAgcmV0dXJuIG1hdGNoZWQ7XG4gIH1cbiAgbWF0Y2hBbnkodG9rZW5zKSB7XG4gICAgaWYgKHRva2Vucy5pbmNsdWRlcyh0aGlzLl90b2tlbnNbdGhpcy5pbmRleF0pKVxuICAgICAgcmV0dXJuIHRoaXMuX3Rva2Vuc1t0aGlzLmluZGV4KytdO1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIG1hdGNoQ2hhcigpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgbGV0IGNhcmV0Q291bnQgPSAwO1xuICAgIHdoaWxlICh0aGlzLm1hdGNoKFwiXlwiKSlcbiAgICAgIGNhcmV0Q291bnQgKz0gMTtcbiAgICBpZiAoY2FyZXRDb3VudCA8IDIpXG4gICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgaWYgKGNhcmV0Q291bnQgPj0gMikge1xuICAgICAgbGV0IGRpZ2l0cyA9IFwiXCI7XG4gICAgICBsZXQgbiA9IDA7XG4gICAgICB3aGlsZSAobiAhPSBjYXJldENvdW50KSB7XG4gICAgICAgIGNvbnN0IGRpZ2l0ID0gdGhpcy5tYXRjaEFueShbXG4gICAgICAgICAgXCIwXCIsXG4gICAgICAgICAgXCIxXCIsXG4gICAgICAgICAgXCIyXCIsXG4gICAgICAgICAgXCIzXCIsXG4gICAgICAgICAgXCI0XCIsXG4gICAgICAgICAgXCI1XCIsXG4gICAgICAgICAgXCI2XCIsXG4gICAgICAgICAgXCI3XCIsXG4gICAgICAgICAgXCI4XCIsXG4gICAgICAgICAgXCI5XCIsXG4gICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgXCJiXCIsXG4gICAgICAgICAgXCJjXCIsXG4gICAgICAgICAgXCJkXCIsXG4gICAgICAgICAgXCJlXCIsXG4gICAgICAgICAgXCJmXCJcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICghZGlnaXQpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRpZ2l0cyArPSBkaWdpdDtcbiAgICAgICAgbiArPSAxO1xuICAgICAgfVxuICAgICAgaWYgKGRpZ2l0cy5sZW5ndGggPT09IGNhcmV0Q291bnQpXG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChOdW1iZXIucGFyc2VJbnQoZGlnaXRzLCAxNikpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaChcIlxcXFxjaGFyXCIpKSB7XG4gICAgICBsZXQgY29kZXBvaW50ID0gTWF0aC5mbG9vcih0aGlzLm1hdGNoTGF0ZXhOdW1iZXIoKSA/PyBOdW1iZXIuTmFOKTtcbiAgICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGNvZGVwb2ludCkgfHwgY29kZXBvaW50IDwgMCB8fCBjb2RlcG9pbnQgPiAxMTE0MTExKSB7XG4gICAgICAgIGNvZGVwb2ludCA9IDEwMDY3O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGVwb2ludCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm1hdGNoKFwiXFxcXHVuaWNvZGVcIikpIHtcbiAgICAgIHRoaXMuc2tpcFNwYWNlVG9rZW5zKCk7XG4gICAgICBpZiAodGhpcy5tYXRjaChcIjx7PlwiKSkge1xuICAgICAgICBjb25zdCBjb2RlcG9pbnQgPSB0aGlzLm1hdGNoTGF0ZXhOdW1iZXIoKTtcbiAgICAgICAgaWYgKHRoaXMubWF0Y2goXCI8fT5cIikgJiYgY29kZXBvaW50ICE9PSBudWxsICYmIGNvZGVwb2ludCA+PSAwICYmIGNvZGVwb2ludCA8PSAxMTE0MTExKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KGNvZGVwb2ludCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvZGVwb2ludCA9IHRoaXMubWF0Y2hMYXRleE51bWJlcigpO1xuICAgICAgICBpZiAoY29kZXBvaW50ICE9PSBudWxsICYmIGNvZGVwb2ludCA+PSAwICYmIGNvZGVwb2ludCA8PSAxMTE0MTExKVxuICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlcG9pbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqIElmIHRoZSBuZXh0IHRva2VuIG1hdGNoZXMgdGhlIG9wZW4gZGVsaW1pdGVyLCBzZXQgYSBib3VuZGFyeSB3aXRoXG4gICAqIHRoZSBjbG9zZSB0b2tlbiBhbmQgcmV0dXJuIHRydWUuXG4gICAqXG4gICAqIE5vdGUgdGhpcyBtZXRob2QgaGFuZGxlcyBnZW5lcmljIGRlbGltaXRlcnMsIGkuZS4gJygnIHdpbGwgbWF0aCBib3RoXG4gICAqICcoJywgJ1xcbGVmdCgnLCAnXFxiaWdsKCcsIGV0Yy4uLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIGRlZmluaXRpb25zIGZvciBtYXRjaGZpeCBtYXkgbmVlZCB0byBpbmNsdWRlIHN5bm9ueW1zXG4gICAqIGZvciBleGFtcGxlOlxuICAgKlxuICAgKiB7XG4gICAqICAgIG9wZW5EZWxpbWl0ZXI6ICcoJyxcbiAgICogICAgY2xvc2VEZWxpbWl0ZXI6ICcpJ1xuICAgKiB9XG4gICAqXG4gICAqIGFuZFxuICAgKlxuICAgKiB7XG4gICAqICAgb3BlbkRlbGltaXRlcjogJ1xcXFxscGFyZW4nLFxuICAgKiAgIGNsb3NlRGVsaW1pdGVyOiAnXFxcXHJwYXJlbidcbiAgICogfVxuICAgKlxuICAgKiBGb3I6XG4gICAqIC0gJ1snOiAnXFxcXGxicmFjaycgYW5kICdcXFxcWydcbiAgICogLSAnXSc6ICdcXFxccmJyYWNrJyBhbmQgJ1xcXFxdJ1xuICAgKiAtICd7JzogJ1xcXFxsYnJhY2UnIGFuZCAnXFxcXH0nXG4gICAqIC0gJ30nOiAnXFxcXHJicmFjZScgYW5kICdcXFxcfSdcbiAgICogLSAnPCc6ICdcXFxcbGFuZ2xlJ1xuICAgKiAtICc+JzogJ1xcXFxyYW5nbGUnXG4gICAqIC0gJ3wnOiAnXFxcXHZlcnQnXG4gICAqIC0gJ3x8JzogJ1xcXFxWZXJ0J1xuICAgKiAtICd8JzogJ1xcXFxsdmVydCcgYW5kICdcXFxccnZlcnQnXG4gICAqIC0gJ3x8JzogJ1xcXFxsVmVydCcgYW5kICdcXFxcclZlcnQnXG4gICAqL1xuICBtYXRjaERlbGltaXRlcihvcGVuLCBjbG9zZSkge1xuICAgIGlmICh0aGlzLnBlZWsgPT09IFwiW1wiKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9wZW4pKSB7XG4gICAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoQXJyYXkuaXNBcnJheShjbG9zZSkpO1xuICAgICAgaWYgKHRoaXMubWF0Y2hBbGwob3BlbikpIHtcbiAgICAgICAgdGhpcy5hZGRCb3VuZGFyeShjbG9zZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgY29uc3QgY2xvc2VQcmVmaXggPSBPUEVOX0RFTElNSVRFUl9QUkVGSVhbdGhpcy5wZWVrXTtcbiAgICBpZiAoY2xvc2VQcmVmaXgpXG4gICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgIGlmIChvcGVuID09PSBcInx8XCIgJiYgdGhpcy5tYXRjaEFsbChbXCJ8XCIsIFwifFwiXSkpIHtcbiAgICAgIHRoaXMuYWRkQm91bmRhcnkoW1wifFwiLCBcInxcIl0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghdGhpcy5tYXRjaChvcGVuKSkge1xuICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmFkZEJvdW5kYXJ5KGNsb3NlUHJlZml4ID8gW2Nsb3NlUHJlZml4LCBjbG9zZV0gOiBbY2xvc2VdKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBwYXJzZUdyb3VwKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB0aGlzLnNraXBTcGFjZVRva2VucygpO1xuICAgIGlmICh0aGlzLm1hdGNoKFwiPHs+XCIpKSB7XG4gICAgICB0aGlzLmFkZEJvdW5kYXJ5KFtcIjx9PlwiXSk7XG4gICAgICBjb25zdCBleHByID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgICBpZiAodGhpcy5tYXRjaEJvdW5kYXJ5KCkpXG4gICAgICAgIHJldHVybiBleHByID8/IFtcIlNlcXVlbmNlXCJdO1xuICAgICAgY29uc3QgZnJvbSA9IHRoaXMuaW5kZXg7XG4gICAgICB3aGlsZSAoIXRoaXMubWF0Y2hCb3VuZGFyeSgpICYmICF0aGlzLmF0RW5kKVxuICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgY29uc3QgZXJyID0gdGhpcy5lcnJvcihcInN5bnRheC1lcnJvclwiLCBmcm9tKTtcbiAgICAgIHJldHVybiBleHByID8gW1wiU2VxdWVuY2VcIiwgZXhwciwgZXJyXSA6IGVycjtcbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIFNvbWUgTGFUZVggY29tbWFuZHMgKGJ1dCBub3QgYWxsKSBjYW4gYWNjZXB0IGFuIGFyZ3VtZW50IHdpdGhvdXQgYnJhY2VzLFxuICAvLyBmb3IgZXhhbXBsZSBgXmAgLCBgXFxzcXJ0YCBvciBgXFxmcmFjYC5cbiAgLy8gVGhpcyBhcmd1bWVudCB3aWxsIHVzdWFsbHkgYmUgYSBzaW5nbGUgdG9rZW4sIGJ1dCBjYW4gYmUgYSBzZXF1ZW5jZSBvZlxuICAvLyB0b2tlbnMgKGUuZy4gYFxcc3FydFxcZnJhYzEyYCBvciBgXFxzcXJ0XFxvcGVyYXRvcm5hbWV7c3BlZWR9YCkuXG4gIHBhcnNlVG9rZW4oKSB7XG4gICAgY29uc3QgZXhjbHVkaW5nID0gW1xuICAgICAgLi4uJyFcIiMkJSYoKSwvOzo/QFtdXFxcXGB8ficuc3BsaXQoXCJcIiksXG4gICAgICBcIlxcXFxsZWZ0XCIsXG4gICAgICBcIlxcXFxiaWdsXCJcbiAgICBdO1xuICAgIGlmIChleGNsdWRpbmcuaW5jbHVkZXModGhpcy5wZWVrKSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGlmICgvXlswLTldJC8udGVzdCh0aGlzLnBlZWspKVxuICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMubmV4dFRva2VuKCkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGFyc2VHZW5lcmljRXhwcmVzc2lvbigpID8/IHRoaXMucGFyc2VTeW1ib2woKTtcbiAgICBpZiAoIXJlc3VsdClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcGFyc2VPcHRpb25hbEdyb3VwKCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICB0aGlzLnNraXBTcGFjZVRva2VucygpO1xuICAgIGlmICh0aGlzLm1hdGNoKFwiW1wiKSkge1xuICAgICAgdGhpcy5hZGRCb3VuZGFyeShbXCJdXCJdKTtcbiAgICAgIGNvbnN0IGV4cHIgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgdGhpcy5za2lwU3BhY2UoKTtcbiAgICAgIGlmICh0aGlzLm1hdGNoQm91bmRhcnkoKSlcbiAgICAgICAgcmV0dXJuIGV4cHI7XG4gICAgICByZXR1cm4gdGhpcy5ib3VuZGFyeUVycm9yKFwiZXhwZWN0ZWQtY2xvc2luZy1kZWxpbWl0ZXJcIik7XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogUGFyc2UgYW4gZXhwcmVzc2lvbiBpbiBhIHRhYnVsYXIgZm9ybWF0LCB3aGVyZSByb3dzIGFyZSBzZXBhcmF0ZWQgYnkgYFxcXFxgXG4gICAqIGFuZCBjb2x1bW5zIGJ5IGAmYC5cbiAgICpcbiAgICogUmV0dXJuIHJvd3Mgb2Ygc3BhcnNlIGNvbHVtbnM6IGVtcHR5IHJvd3MgYXJlIGluZGljYXRlZCB3aXRoIGBOb3RoaW5nYCxcbiAgICogYW5kIGVtcHR5IGNlbGxzIGFyZSBhbHNvIGluZGljYXRlZCB3aXRoIGBOb3RoaW5nYC5cbiAgICovXG4gIHBhcnNlVGFidWxhcigpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgcm93ID0gW107XG4gICAgbGV0IGV4cHIgPSBudWxsO1xuICAgIHdoaWxlICghdGhpcy5hdEJvdW5kYXJ5KSB7XG4gICAgICB0aGlzLnNraXBTcGFjZSgpO1xuICAgICAgaWYgKHRoaXMubWF0Y2goXCImXCIpKSB7XG4gICAgICAgIHJvdy5wdXNoKGV4cHIgPz8gXCJOb3RoaW5nXCIpO1xuICAgICAgICBleHByID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaChcIlxcXFxcXFxcXCIpIHx8IHRoaXMubWF0Y2goXCJcXFxcY3JcIikpIHtcbiAgICAgICAgdGhpcy5za2lwU3BhY2UoKTtcbiAgICAgICAgdGhpcy5wYXJzZU9wdGlvbmFsR3JvdXAoKTtcbiAgICAgICAgaWYgKGV4cHIgIT09IG51bGwpXG4gICAgICAgICAgcm93LnB1c2goZXhwcik7XG4gICAgICAgIHJlc3VsdC5wdXNoKHJvdyk7XG4gICAgICAgIHJvdyA9IFtdO1xuICAgICAgICBleHByID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBbXTtcbiAgICAgICAgbGV0IHBlZWsgPSB0aGlzLnBlZWs7XG4gICAgICAgIHdoaWxlIChwZWVrICE9PSBcIiZcIiAmJiBwZWVrICE9PSBcIlxcXFxcXFxcXCIgJiYgcGVlayAhPT0gXCJcXFxcY3JcIiAmJiAhdGhpcy5hdEJvdW5kYXJ5KSB7XG4gICAgICAgICAgZXhwciA9IHRoaXMucGFyc2VFeHByZXNzaW9uKHtcbiAgICAgICAgICAgIG1pblByZWM6IDAsXG4gICAgICAgICAgICBjb25kaXRpb246IChwKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHBlZWsyID0gcC5wZWVrO1xuICAgICAgICAgICAgICByZXR1cm4gcGVlazIgPT09IFwiJlwiIHx8IHBlZWsyID09PSBcIlxcXFxcXFxcXCIgfHwgcGVlazIgPT09IFwiXFxcXGNyXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGV4cHIpXG4gICAgICAgICAgICBjZWxsLnB1c2goZXhwcik7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjZWxsLnB1c2goW1wiRXJyb3JcIiwgW1wiJ3VuZXhwZWN0ZWQtdG9rZW4nXCIsIHBlZWtdXSk7XG4gICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNraXBTcGFjZSgpO1xuICAgICAgICAgIHBlZWsgPSB0aGlzLnBlZWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNlbGwubGVuZ3RoID4gMSlcbiAgICAgICAgICBleHByID0gW1wiU2VxdWVuY2VcIiwgLi4uY2VsbF07XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBleHByID0gY2VsbFswXSA/PyBcIk5vdGhpbmdcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV4cHIgIT09IG51bGwpXG4gICAgICByb3cucHVzaChleHByKTtcbiAgICBpZiAocm93Lmxlbmd0aCA+IDApXG4gICAgICByZXN1bHQucHVzaChyb3cpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqIFBhcnNlIGEgZ3JvdXAgYXMgYSBhIHN0cmluZywgZm9yIGV4YW1wbGUgZm9yIGBcXG9wZXJhdG9ybmFtZWAgb3IgYFxcYmVnaW5gICovXG4gIHBhcnNlU3RyaW5nR3JvdXAoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHdoaWxlICh0aGlzLm1hdGNoKFwiPHNwYWNlPlwiKSkge1xuICAgIH1cbiAgICBpZiAodGhpcy5tYXRjaChcIjx7PlwiKSkge1xuICAgICAgdGhpcy5hZGRCb3VuZGFyeShbXCI8fT5cIl0pO1xuICAgICAgY29uc3QgYXJnID0gdGhpcy5wYXJzZVN0cmluZ0dyb3VwQ29udGVudCgpO1xuICAgICAgaWYgKHRoaXMubWF0Y2hCb3VuZGFyeSgpKVxuICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgdGhpcy5yZW1vdmVCb3VuZGFyeSgpO1xuICAgIH1cbiAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqIFBhcnNlIGFuIGVudmlyb25tZW50OiBgXFxiZWdpbntlbnZ9Li4uXFxlbmR7ZW5kfWBcbiAgICovXG4gIHBhcnNlRW52aXJvbm1lbnQodW50aWwpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgaWYgKCF0aGlzLm1hdGNoKFwiXFxcXGJlZ2luXCIpKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMucGFyc2VTdHJpbmdHcm91cCgpPy50cmltKCk7XG4gICAgaWYgKCFuYW1lKVxuICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoXCJleHBlY3RlZC1lbnZpcm9ubWVudC1uYW1lXCIsIGluZGV4KTtcbiAgICB0aGlzLmFkZEJvdW5kYXJ5KFtcIlxcXFxlbmRcIiwgXCI8ez5cIiwgLi4ubmFtZS5zcGxpdChcIlwiKSwgXCI8fT5cIl0pO1xuICAgIGZvciAoY29uc3QgZGVmIG9mIHRoaXMuZ2V0RGVmcyhcImVudmlyb25tZW50XCIpKVxuICAgICAgaWYgKGRlZi5pZGVudGlmaWVyVHJpZ2dlciA9PT0gbmFtZSkge1xuICAgICAgICBjb25zdCBleHByID0gZGVmLnBhcnNlKHRoaXMsIHVudGlsKTtcbiAgICAgICAgdGhpcy5za2lwU3BhY2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLm1hdGNoQm91bmRhcnkoKSlcbiAgICAgICAgICByZXR1cm4gdGhpcy5ib3VuZGFyeUVycm9yKFwidW5iYWxhbmNlZC1lbnZpcm9ubWVudFwiKTtcbiAgICAgICAgaWYgKGV4cHIgIT09IG51bGwpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb3JhdGUoZXhwciwgaW5kZXgpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIHRoaXMucGFyc2VUYWJ1bGFyKCk7XG4gICAgdGhpcy5za2lwU3BhY2UoKTtcbiAgICBpZiAoIXRoaXMubWF0Y2hCb3VuZGFyeSgpKVxuICAgICAgcmV0dXJuIHRoaXMuYm91bmRhcnlFcnJvcihcInVuYmFsYW5jZWQtZW52aXJvbm1lbnRcIik7XG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoW1widW5rbm93bi1lbnZpcm9ubWVudFwiLCB7IHN0cjogbmFtZSB9XSwgaW5kZXgpO1xuICB9XG4gIC8qKiBJZiB0aGUgbmV4dCB0b2tlbiBtYXRjaGVzIGEgYCtgIG9yIGAtYCBzaWduLCByZXR1cm4gaXQgYW5kIGFkdmFuY2UgdGhlIGluZGV4LlxuICAgKiBPdGhlcndpc2UgcmV0dXJuIGAnJ2AgYW5kIGRvIG5vdCBhZHZhbmNlICovXG4gIHBhcnNlT3B0aW9uYWxTaWduKCkge1xuICAgIGxldCBpc05lZ2F0aXZlID0gISF0aGlzLm1hdGNoQW55KFtcIi1cIiwgXCJcXHUyMjEyXCJdKTtcbiAgICB3aGlsZSAodGhpcy5tYXRjaEFueShbXCIrXCIsIFwiXFx1RkU2MlwiXSkgfHwgdGhpcy5za2lwU3BhY2UoKSlcbiAgICAgIGlmICh0aGlzLm1hdGNoQW55KFtcIi1cIiwgXCJcXHUyMjEyXCJdKSlcbiAgICAgICAgaXNOZWdhdGl2ZSA9ICFpc05lZ2F0aXZlO1xuICAgIHJldHVybiBpc05lZ2F0aXZlID8gXCItXCIgOiBcIitcIjtcbiAgfVxuICBwYXJzZURlY2ltYWxEaWdpdHMob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPz8gKG9wdGlvbnMgPSB7fSk7XG4gICAgb3B0aW9ucy53aXRoR3JvdXBpbmcgPz8gKG9wdGlvbnMud2l0aEdyb3VwaW5nID0gZmFsc2UpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgd2hpbGUgKCFkb25lKSB7XG4gICAgICB3aGlsZSAoL15bMC05XSQvLnRlc3QodGhpcy5wZWVrKSkge1xuICAgICAgICByZXN1bHQucHVzaCh0aGlzLm5leHRUb2tlbigpKTtcbiAgICAgICAgdGhpcy5za2lwVmlzdWFsU3BhY2UoKTtcbiAgICAgIH1cbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgaWYgKG9wdGlvbnMud2l0aEdyb3VwaW5nICYmIHRoaXMub3B0aW9ucy5ncm91cFNlcGFyYXRvcikge1xuICAgICAgICBjb25zdCBzYXZlZEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgdGhpcy5za2lwVmlzdWFsU3BhY2UoKTtcbiAgICAgICAgaWYgKHRoaXMubWF0Y2hBbGwodGhpcy5fZ3JvdXBTZXBhcmF0b3JUb2tlbnMpKSB7XG4gICAgICAgICAgdGhpcy5za2lwVmlzdWFsU3BhY2UoKTtcbiAgICAgICAgICBpZiAoL15bMC05XSQvLnRlc3QodGhpcy5wZWVrKSlcbiAgICAgICAgICAgIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gc2F2ZWRJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XG4gIH1cbiAgcGFyc2VTaWduZWRJbnRlZ2VyKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID8/IChvcHRpb25zID0ge30pO1xuICAgIG9wdGlvbnMud2l0aEdyb3VwaW5nID8/IChvcHRpb25zLndpdGhHcm91cGluZyA9IGZhbHNlKTtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgY29uc3Qgc2lnbjIgPSB0aGlzLnBhcnNlT3B0aW9uYWxTaWduKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wYXJzZURlY2ltYWxEaWdpdHMob3B0aW9ucyk7XG4gICAgaWYgKHJlc3VsdClcbiAgICAgIHJldHVybiBzaWduMiA9PT0gXCItXCIgPyBcIi1cIiArIHJlc3VsdCA6IHJlc3VsdDtcbiAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgcGFyc2VFeHBvbmVudCgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgaWYgKHRoaXMubWF0Y2hBbnkoW1wiZVwiLCBcIkVcIl0pKSB7XG4gICAgICBjb25zdCBleHBvbmVudCA9IHRoaXMucGFyc2VTaWduZWRJbnRlZ2VyKHsgd2l0aEdyb3VwaW5nOiBmYWxzZSB9KTtcbiAgICAgIGlmIChleHBvbmVudClcbiAgICAgICAgcmV0dXJuIFwiZVwiICsgZXhwb25lbnQ7XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICBpZiAodGhpcy5tYXRjaChcIlxcXFx0aW1lc1wiKSkge1xuICAgICAgdGhpcy5za2lwU3BhY2VUb2tlbnMoKTtcbiAgICAgIGlmICh0aGlzLm1hdGNoKFwiMVwiKSAmJiB0aGlzLm1hdGNoKFwiMFwiKSAmJiB0aGlzLm1hdGNoKFwiXlwiKSkge1xuICAgICAgICBpZiAoL15bMC05XSQvLnRlc3QodGhpcy5wZWVrKSlcbiAgICAgICAgICByZXR1cm4gXCJlXCIgKyB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICBpZiAodGhpcy5tYXRjaChcIjx7PlwiKSkge1xuICAgICAgICAgIHRoaXMuc2tpcFNwYWNlVG9rZW5zKCk7XG4gICAgICAgICAgY29uc3QgZXhwb25lbnQgPSB0aGlzLnBhcnNlU2lnbmVkSW50ZWdlcigpO1xuICAgICAgICAgIHRoaXMuc2tpcFNwYWNlVG9rZW5zKCk7XG4gICAgICAgICAgaWYgKHRoaXMubWF0Y2goXCI8fT5cIikgJiYgZXhwb25lbnQpXG4gICAgICAgICAgICByZXR1cm4gXCJlXCIgKyBleHBvbmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG4gICAgdGhpcy5za2lwU3BhY2VUb2tlbnMoKTtcbiAgICBpZiAodGhpcy5tYXRjaChcIlxcXFwlXCIpKVxuICAgICAgcmV0dXJuIGBlLTJgO1xuICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICBpZiAodGhpcy5tYXRjaEFsbCh0aGlzLl9leHBvbmVudFByb2R1Y3RUb2tlbnMpKSB7XG4gICAgICB0aGlzLnNraXBTcGFjZVRva2VucygpO1xuICAgICAgaWYgKHRoaXMubWF0Y2hBbGwodGhpcy5fYmVnaW5FeHBvbmVudE1hcmtlclRva2VucykpIHtcbiAgICAgICAgdGhpcy5za2lwU3BhY2VUb2tlbnMoKTtcbiAgICAgICAgY29uc3QgZXhwb25lbnQgPSB0aGlzLnBhcnNlU2lnbmVkSW50ZWdlcigpO1xuICAgICAgICB0aGlzLnNraXBTcGFjZVRva2VucygpO1xuICAgICAgICBpZiAodGhpcy5tYXRjaEFsbCh0aGlzLl9lbmRFeHBvbmVudE1hcmtlclRva2VucykgJiYgZXhwb25lbnQpXG4gICAgICAgICAgcmV0dXJuIFwiZVwiICsgZXhwb25lbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBwYXJzZVJlcGVhdGluZ0RlY2ltYWwoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIGxldCByZXBlYXRpbmdEZWNpbWFsczIgPSBcIlwiO1xuICAgIGlmICh0aGlzLm1hdGNoKFwiKFwiKSkge1xuICAgICAgcmVwZWF0aW5nRGVjaW1hbHMyID0gdGhpcy5wYXJzZURlY2ltYWxEaWdpdHMoKTtcbiAgICAgIGlmIChyZXBlYXRpbmdEZWNpbWFsczIgJiYgdGhpcy5tYXRjaChcIilcIikpXG4gICAgICAgIHJldHVybiBcIihcIiArIHJlcGVhdGluZ0RlY2ltYWxzMiArIFwiKVwiO1xuICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICBpZiAodGhpcy5tYXRjaEFsbChbYFxcXFxsZWZ0YCwgXCIoXCJdKSkge1xuICAgICAgcmVwZWF0aW5nRGVjaW1hbHMyID0gdGhpcy5wYXJzZURlY2ltYWxEaWdpdHMoKTtcbiAgICAgIGlmIChyZXBlYXRpbmdEZWNpbWFsczIgJiYgdGhpcy5tYXRjaEFsbChbYFxcXFxyaWdodGAsIFwiKVwiXSkpXG4gICAgICAgIHJldHVybiBcIihcIiArIHJlcGVhdGluZ0RlY2ltYWxzMiArIFwiKVwiO1xuICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICBpZiAodGhpcy5tYXRjaEFsbChbYFxcXFxvdmVybGluZWAsIFwiPHs+XCJdKSkge1xuICAgICAgcmVwZWF0aW5nRGVjaW1hbHMyID0gdGhpcy5wYXJzZURlY2ltYWxEaWdpdHMoKTtcbiAgICAgIGlmIChyZXBlYXRpbmdEZWNpbWFsczIgJiYgdGhpcy5tYXRjaChcIjx9PlwiKSlcbiAgICAgICAgcmV0dXJuIFwiKFwiICsgcmVwZWF0aW5nRGVjaW1hbHMyICsgXCIpXCI7XG4gICAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgIGlmICh0aGlzLm1hdGNoQWxsKHRoaXMuX2JlZ2luUmVwZWF0aW5nRGlnaXRzVG9rZW5zKSkge1xuICAgICAgcmVwZWF0aW5nRGVjaW1hbHMyID0gdGhpcy5wYXJzZURlY2ltYWxEaWdpdHMoKTtcbiAgICAgIGlmIChyZXBlYXRpbmdEZWNpbWFsczIgJiYgdGhpcy5tYXRjaEFsbCh0aGlzLl9lbmRSZXBlYXRpbmdEaWdpdHNUb2tlbnMpKVxuICAgICAgICByZXR1cm4gXCIoXCIgKyByZXBlYXRpbmdEZWNpbWFsczIgKyBcIilcIjtcbiAgICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlIGEgbnVtYmVyLCB3aXRoIGFuIG9wdGlvbmFsIHNpZ24sIGV4cG9uZW50LCBkZWNpbWFsIG1hcmtlcixcbiAgICogcmVwZWF0aW5nIGRlY2ltYWxzLCBldGMuLi5cbiAgICovXG4gIHBhcnNlTnVtYmVyKCkge1xuICAgIGlmICghdGhpcy5vcHRpb25zLnBhcnNlTnVtYmVycylcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB0aGlzLnNraXBWaXN1YWxTcGFjZSgpO1xuICAgIHRoaXMubWF0Y2goXCIrXCIpO1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGxldCBkb3RQcmVmaXggPSBmYWxzZTtcbiAgICBpZiAodGhpcy5tYXRjaChcIi5cIikgfHwgdGhpcy5tYXRjaEFsbCh0aGlzLl9kZWNpbWFsTWFya2VyVG9rZW5zKSkge1xuICAgICAgY29uc3QgcGVlayA9IHRoaXMucGVlaztcbiAgICAgIGlmIChwZWVrICE9PSBcIlxcXFxvdmVybGluZVwiICYmIHBlZWsgIT09IHRoaXMuX2JlZ2luUmVwZWF0aW5nRGlnaXRzVG9rZW5zWzBdICYmICEvWzAtOVxcKF0vLnRlc3QocGVlaykpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGRvdFByZWZpeCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMucGFyc2VEZWNpbWFsRGlnaXRzKHsgd2l0aEdyb3VwaW5nOiB0cnVlIH0pO1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGhhc0RlY2ltYWwgPSB0cnVlO1xuICAgIGlmICghZG90UHJlZml4ICYmICh0aGlzLm1hdGNoKFwiLlwiKSB8fCB0aGlzLm1hdGNoQWxsKHRoaXMuX2RlY2ltYWxNYXJrZXJUb2tlbnMpKSlcbiAgICAgIHJlc3VsdCArPSBcIi5cIiArIHRoaXMucGFyc2VEZWNpbWFsRGlnaXRzKHsgd2l0aEdyb3VwaW5nOiB0cnVlIH0pO1xuICAgIGVsc2UgaWYgKGRvdFByZWZpeClcbiAgICAgIHJlc3VsdCA9IFwiMC5cIiArIHRoaXMucGFyc2VEZWNpbWFsRGlnaXRzKHsgd2l0aEdyb3VwaW5nOiB0cnVlIH0pO1xuICAgIGVsc2VcbiAgICAgIGhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICBpZiAoaGFzRGVjaW1hbCkge1xuICAgICAgY29uc3QgcmVwZWF0ID0gdGhpcy5wYXJzZVJlcGVhdGluZ0RlY2ltYWwoKTtcbiAgICAgIGlmIChyZXBlYXQpXG4gICAgICAgIHJlc3VsdCArPSByZXBlYXQ7XG4gICAgICBlbHNlIGlmICh0aGlzLm1hdGNoKFwiXFxcXGxkb3RzXCIpIHx8IHRoaXMubWF0Y2hBbGwodGhpcy5fdHJ1bmNhdGlvbk1hcmtlclRva2VucykpIHtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5za2lwVmlzdWFsU3BhY2UoKTtcbiAgICByZXR1cm4gcmVzdWx0ICsgdGhpcy5wYXJzZUV4cG9uZW50KCk7XG4gIH1cbiAgLyoqXG4gICAqIEEgTGF0ZXggbnVtYmVyIGNhbiBiZSBhIGRlY2ltYWwsIGhleCBvciBvY3RhbCBudW1iZXIuXG4gICAqIEl0IGlzIHVzZWQgaW4gc29tZSBMYXRleCBjb21tYW5kcywgc3VjaCBhcyBgXFxjaGFyYFxuICAgKlxuICAgKiBGcm9tIFRlWDo4Njk1IChzY2FuX2ludCk6XG4gICAqID4gQW4gaW50ZWdlciBudW1iZXIgY2FuIGJlIHByZWNlZGVkIGJ5IGFueSBudW1iZXIgb2Ygc3BhY2VzIGFuZCBgKycgb3JcbiAgICogPiBgLScgc2lnbnMuIFRoZW4gY29tZXMgZWl0aGVyIGEgZGVjaW1hbCBjb25zdGFudCAoaS5lLiwgcmFkaXggMTApLCBhblxuICAgKiA+IG9jdGFsIGNvbnN0YW50IChpLmUuLCByYWRpeCA4LCBwcmVjZWRlZCBieSAnKSwgYSBoZXhhZGVjaW1hbCBjb25zdGFudFxuICAgKiA+IChyYWRpeCAxNiwgcHJlY2VkZWQgYnkgXCIpLCBhbiBhbHBoYWJldGljIGNvbnN0YW50IChwcmVjZWRlZCBieSBgKSwgb3JcbiAgICogPiBhbiBpbnRlcm5hbCB2YXJpYWJsZS5cbiAgICovXG4gIG1hdGNoTGF0ZXhOdW1iZXIoaXNJbnRlZ2VyID0gdHJ1ZSkge1xuICAgIGxldCBuZWdhdGl2ZSA9IGZhbHNlO1xuICAgIGxldCB0b2tlbiA9IHRoaXMucGVlaztcbiAgICB3aGlsZSAodG9rZW4gPT09IFwiPHNwYWNlPlwiIHx8IHRva2VuID09PSBcIitcIiB8fCB0b2tlbiA9PT0gXCItXCIpIHtcbiAgICAgIGlmICh0b2tlbiA9PT0gXCItXCIpXG4gICAgICAgIG5lZ2F0aXZlID0gIW5lZ2F0aXZlO1xuICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgIHRva2VuID0gdGhpcy5wZWVrO1xuICAgIH1cbiAgICBsZXQgcmFkaXggPSAxMDtcbiAgICBsZXQgZGlnaXRzID0gW1wiMFwiLCBcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIiwgXCI1XCIsIFwiNlwiLCBcIjdcIiwgXCI4XCIsIFwiOVwiXTtcbiAgICBpZiAodGhpcy5tYXRjaChcIidcIikpIHtcbiAgICAgIHJhZGl4ID0gODtcbiAgICAgIGRpZ2l0cyA9IFtcIjBcIiwgXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCJdO1xuICAgICAgaXNJbnRlZ2VyID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2goJ1wiJykgfHwgdGhpcy5tYXRjaChcInhcIikpIHtcbiAgICAgIHJhZGl4ID0gMTY7XG4gICAgICBkaWdpdHMgPSBbXG4gICAgICAgIFwiMFwiLFxuICAgICAgICBcIjFcIixcbiAgICAgICAgXCIyXCIsXG4gICAgICAgIFwiM1wiLFxuICAgICAgICBcIjRcIixcbiAgICAgICAgXCI1XCIsXG4gICAgICAgIFwiNlwiLFxuICAgICAgICBcIjdcIixcbiAgICAgICAgXCI4XCIsXG4gICAgICAgIFwiOVwiLFxuICAgICAgICBcIkFcIixcbiAgICAgICAgXCJCXCIsXG4gICAgICAgIFwiQ1wiLFxuICAgICAgICBcIkRcIixcbiAgICAgICAgXCJFXCIsXG4gICAgICAgIFwiRlwiXG4gICAgICBdO1xuICAgICAgaXNJbnRlZ2VyID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubWF0Y2goXCJgXCIpKSB7XG4gICAgICB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuLnN0YXJ0c1dpdGgoXCJcXFxcXCIpICYmIHRva2VuLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgIHJldHVybiAobmVnYXRpdmUgPyAtMSA6IDEpICogKHRva2VuLmNvZGVQb2ludEF0KDEpID8/IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobmVnYXRpdmUgPyAtMSA6IDEpICogKHRva2VuLmNvZGVQb2ludEF0KDApID8/IDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCB2YWx1ZSA9IFwiXCI7XG4gICAgd2hpbGUgKGRpZ2l0cy5pbmNsdWRlcyh0aGlzLnBlZWspKSB7XG4gICAgICB2YWx1ZSArPSB0aGlzLm5leHRUb2tlbigpO1xuICAgIH1cbiAgICBpZiAoIWlzSW50ZWdlciAmJiB0aGlzLm1hdGNoKFwiLlwiKSkge1xuICAgICAgdmFsdWUgKz0gXCIuXCI7XG4gICAgICB3aGlsZSAoZGlnaXRzLmluY2x1ZGVzKHRoaXMucGVlaykpIHtcbiAgICAgICAgdmFsdWUgKz0gdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gaXNJbnRlZ2VyID8gTnVtYmVyLnBhcnNlSW50KHZhbHVlLCByYWRpeCkgOiBOdW1iZXIucGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgaWYgKE51bWJlci5pc05hTihyZXN1bHQpKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIG5lZ2F0aXZlID8gLXJlc3VsdCA6IHJlc3VsdDtcbiAgfVxuICBwYXJzZVByZWZpeE9wZXJhdG9yKHVudGlsKSB7XG4gICAgaWYgKCF1bnRpbClcbiAgICAgIHVudGlsID0geyBtaW5QcmVjOiAwIH07XG4gICAgaWYgKCF1bnRpbC5taW5QcmVjKVxuICAgICAgdW50aWwgPSB7IC4uLnVudGlsLCBtaW5QcmVjOiAwIH07XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIGZvciAoY29uc3QgW2RlZiwgbl0gb2YgdGhpcy5wZWVrRGVmaW5pdGlvbnMoXCJwcmVmaXhcIikpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBzdGFydCArIG47XG4gICAgICBjb25zdCByaHMgPSBkZWYucGFyc2UodGhpcywgdW50aWwpO1xuICAgICAgaWYgKHJocylcbiAgICAgICAgcmV0dXJuIHJocztcbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHBhcnNlSW5maXhPcGVyYXRvcihsaHMsIHVudGlsKSB7XG4gICAgdW50aWwgPz8gKHVudGlsID0geyBtaW5QcmVjOiAwIH0pO1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydCh1bnRpbC5taW5QcmVjICE9PSB2b2lkIDApO1xuICAgIGlmICh1bnRpbC5taW5QcmVjID09PSB2b2lkIDApXG4gICAgICB1bnRpbCA9IHsgLi4udW50aWwsIG1pblByZWM6IDAgfTtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgZm9yIChjb25zdCBbZGVmLCBuXSBvZiB0aGlzLnBlZWtEZWZpbml0aW9ucyhcImluZml4XCIpKSB7XG4gICAgICBpZiAoZGVmLnByZWNlZGVuY2UgPj0gdW50aWwubWluUHJlYykge1xuICAgICAgICB0aGlzLmluZGV4ID0gc3RhcnQgKyBuO1xuICAgICAgICBjb25zdCByaHMgPSBkZWYucGFyc2UodGhpcywgbGhzLCB1bnRpbCk7XG4gICAgICAgIGlmIChyaHMpXG4gICAgICAgICAgcmV0dXJuIHJocztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIHJldHVybnMgYW4gYXJyYXkgb2YgYXJndW1lbnRzIChhcyBpbiBhIGZ1bmN0aW9uIGFwcGxpY2F0aW9uKSxcbiAgICogb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBtYXRjaC5cbiAgICpcbiAgICogLSAnZW5jbG9zdXJlJyA6IHdpbGwgbG9vayBmb3IgYW4gYXJndW1lbnQgaW5zaWRlIGFuIGVuY2xvc3VyZVxuICAgKiAgIChvcGVuL2Nsb3NlIGZlbmNlKVxuICAgKiAtICdpbXBsaWNpdCc6IGVpdGhlciBhbiBleHByZXNzaW9uIGluc2lkZSBhIHBhaXIgb2YgYCgpYCwgb3IganVzdCBhIHByb2R1Y3RcbiAgICogIChpLmUuIHdlIGludGVycHJldCBgXFxjb3MgMnggKyAxYCBhcyBgXFxjb3MoMngpICsgMWApXG4gICAqXG4gICAqL1xuICBwYXJzZUFyZ3VtZW50cyhraW5kID0gXCJlbmNsb3N1cmVcIiwgdW50aWwpIHtcbiAgICBpZiAodGhpcy5hdFRlcm1pbmF0b3IodW50aWwpKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3Qgc2F2ZWRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgY29uc3QgZ3JvdXAgPSB0aGlzLnBhcnNlRW5jbG9zdXJlKCk7XG4gICAgaWYgKGtpbmQgPT09IFwiZW5jbG9zdXJlXCIpIHtcbiAgICAgIGlmIChncm91cCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gZ2V0U2VxdWVuY2UoZ3JvdXApID8/IFtdO1xuICAgIH1cbiAgICBpZiAoa2luZCA9PT0gXCJpbXBsaWNpdFwiKSB7XG4gICAgICBpZiAoaGVhZChncm91cCkgPT09IFwiRGVsaW1pdGVyXCIpXG4gICAgICAgIHJldHVybiBnZXRTZXF1ZW5jZShncm91cCkgPz8gW107XG4gICAgICBpZiAoZ3JvdXAgIT09IG51bGwpXG4gICAgICAgIHJldHVybiBbZ3JvdXBdO1xuICAgICAgY29uc3QgcHJpbWFyeSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKHsgLi4udW50aWwsIG1pblByZWM6IDM5MCB9KTtcbiAgICAgIHJldHVybiBwcmltYXJ5ID09PSBudWxsID8gbnVsbCA6IFtwcmltYXJ5XTtcbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IHNhdmVkSW5kZXg7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqIElmIG1hdGNoZXMgdGhlIG5vcm1hbGl6ZWQgb3BlbiBkZWxpbWl0ZXIsIHJldHVybiB0aGVcbiAgICogZXhwZWN0ZWQgY2xvc2luZyBkZWxpbWl0ZXIuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBpZiBgZGVsaW1pdGVyYCBpcyBgKGAsIGl0IHdvdWxkIG1hdGNoIGBcXGxlZnRcXGxwYXJlbmAgYW5kXG4gICAqIHJldHVybiBgWydcXHJpZ2h0JywgJ1xccnBhcmVuJ11gLCB3aGljaCBjYW4gYmUgbWF0Y2hlZCB3aXRoIGBtYXRjaEFsbCgpYFxuICAgKlxuICAgKiBJZiB5b3UgbmVlZCB0byBtYXRjaCBzZXZlcmFsIHRva2VucywgdXNlIGBtYXRjaEFsbCgpYFxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1hdGNoT3BlbkRlbGltaXRlcihvcGVuRGVsaW0sIGNsb3NlRGVsaW0pIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgY29uc3QgY2xvc2VQcmVmaXggPSBPUEVOX0RFTElNSVRFUl9QUkVGSVhbdGhpcy5wZWVrXTtcbiAgICBpZiAoY2xvc2VQcmVmaXgpXG4gICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgIGNvbnN0IGFsdGVybmF0aXZlcyA9IERFTElNSVRFUl9TSE9SVEhBTkRbb3BlbkRlbGltXSA/PyBbb3BlbkRlbGltXTtcbiAgICBjb25zdCByZXN1bHQgPSBjbG9zZVByZWZpeCA/IFtjbG9zZVByZWZpeF0gOiBbXTtcbiAgICBpZiAoYWx0ZXJuYXRpdmVzLmluY2x1ZGVzKFwifHxcIikgJiYgdGhpcy5tYXRjaEFsbChbXCJ8XCIsIFwifFwiXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKFwifFwiKTtcbiAgICAgIHJlc3VsdC5wdXNoKFwifFwiKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGlmICghYWx0ZXJuYXRpdmVzLmluY2x1ZGVzKHRoaXMucGVlaykpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoQ0xPU0VfREVMSU1JVEVSW29wZW5EZWxpbV0gPT09IGNsb3NlRGVsaW0pIHtcbiAgICAgIHJlc3VsdC5wdXNoKENMT1NFX0RFTElNSVRFUlt0aGlzLnBlZWtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2goY2xvc2VEZWxpbSk7XG4gICAgfVxuICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvLyBtYXRjaE1pZGRsZURlbGltaXRlcihkZWxpbWl0ZXI6ICd8JyB8ICc6JyB8IExhdGV4VG9rZW4pOiBib29sZWFuIHtcbiAgLy8gICBjb25zdCBkZWxpbWl0ZXJzID0gTUlERExFX0RFTElNSVRFUltkZWxpbWl0ZXJdID8/IFtkZWxpbWl0ZXJdO1xuICAvLyAgIGlmIChNSURETEVfREVMSU1JVEVSX1BSRUZJWC5pbmNsdWRlcyh0aGlzLnBlZWspKSB7XG4gIC8vICAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG4gIC8vICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAvLyAgICAgaWYgKGRlbGltaXRlcnMuaW5jbHVkZXModGhpcy5wZWVrKSkge1xuICAvLyAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAvLyAgICAgICByZXR1cm4gdHJ1ZTtcbiAgLy8gICAgIH1cbiAgLy8gICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgLy8gICAgIHJldHVybiBmYWxzZTtcbiAgLy8gICB9IGVsc2UgaWYgKGRlbGltaXRlcnMuaW5jbHVkZSh0aGlzLnBlZWspKSB7XG4gIC8vICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAvLyAgICAgcmV0dXJuIHRydWU7XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiBmYWxzZTtcbiAgLy8gfVxuICAvKiogRm9yIGVycm9yIGhhbmRsaW5nLCB3aGVuIHRoZXJlIGlzIHBvdGVudGlhbGx5IGEgbWlzbWF0Y2hlZCBkZWxpbWl0ZXIuXG4gICAqIFJldHVybiBhIExhVGVYIGZyYWdtZW50IG9mIHRoZSBleHBlY3RlZCBjbG9zaW5nIGRlbGltaXRlclxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1hdGNoRW5jbG9zdXJlT3BlbigpIHtcbiAgICBjb25zdCBkZWZzID0gdGhpcy5nZXREZWZzKFwibWF0Y2hmaXhcIik7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIGZvciAoY29uc3QgZGVmIG9mIGRlZnMpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlZi5vcGVuRGVsaW1pdGVyKSkge1xuICAgICAgICBpZiAodGhpcy5tYXRjaEFsbChkZWYub3BlbkRlbGltaXRlcikpXG4gICAgICAgICAgcmV0dXJuIHRva2Vuc1RvU3RyaW5nKGRlZi5jbG9zZURlbGltaXRlcik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgY2xvc2VEZWxpbWl0ZXIgPSB0aGlzLm1hdGNoT3BlbkRlbGltaXRlcihcbiAgICAgICAgZGVmLm9wZW5EZWxpbWl0ZXIsXG4gICAgICAgIGRlZi5jbG9zZURlbGltaXRlclxuICAgICAgKTtcbiAgICAgIGlmIChjbG9zZURlbGltaXRlciAhPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHRva2Vuc1RvU3RyaW5nKGNsb3NlRGVsaW1pdGVyKTtcbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBVc2VkIGZvciBlcnJvciBoYW5kbGluZ1xuICAgKiBAaW50ZXJuYWwgKi9cbiAgbWF0Y2hFbmNsb3N1cmVDbG9zZSgpIHtcbiAgICBjb25zdCBkZWZzID0gdGhpcy5nZXREZWZzKFwibWF0Y2hmaXhcIik7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIGZvciAoY29uc3QgZGVmIG9mIGRlZnMpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlZi5jbG9zZURlbGltaXRlcikpIHtcbiAgICAgICAgaWYgKHRoaXMubWF0Y2hBbGwoZGVmLmNsb3NlRGVsaW1pdGVyKSlcbiAgICAgICAgICByZXR1cm4gdG9rZW5zVG9TdHJpbmcoZGVmLm9wZW5EZWxpbWl0ZXIpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICAgIGxldCBwZWVrID0gdGhpcy5wZWVrO1xuICAgICAgY29uc3QgcHJlZml4ID0gT2JqZWN0LmtleXMoT1BFTl9ERUxJTUlURVJfUFJFRklYKS5maW5kKFxuICAgICAgICAoeCkgPT4gT1BFTl9ERUxJTUlURVJfUFJFRklYW3hdID09PSBwZWVrXG4gICAgICApO1xuICAgICAgaWYgKHByZWZpeClcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgIGxldCBvcGVuRGVsaW1pdGVyID0gW107XG4gICAgICBwZWVrID0gdGhpcy5wZWVrO1xuICAgICAgY29uc3QgbWF0Y2hpbmdEZWxpbSA9IE9iamVjdC5rZXlzKENMT1NFX0RFTElNSVRFUikuZmluZChcbiAgICAgICAgKHgpID0+IENMT1NFX0RFTElNSVRFUlt4XSA9PT0gcGVla1xuICAgICAgKTtcbiAgICAgIGlmIChtYXRjaGluZ0RlbGltKVxuICAgICAgICBvcGVuRGVsaW1pdGVyID0gW21hdGNoaW5nRGVsaW1dO1xuICAgICAgaWYgKHByZWZpeClcbiAgICAgICAgb3BlbkRlbGltaXRlciA9IFtwcmVmaXgsIC4uLm9wZW5EZWxpbWl0ZXJdO1xuICAgICAgaWYgKG9wZW5EZWxpbWl0ZXIubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICByZXR1cm4gdG9rZW5zVG9TdHJpbmcob3BlbkRlbGltaXRlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQW4gZW5jbG9zdXJlIGlzIGFuIG9wZW5pbmcgbWF0Y2hmaXggb3BlcmF0b3IsIGFuIG9wdGlvbmFsIGV4cHJlc3Npb24sXG4gICAqIG9wdGlvbmFsbHkgZm9sbG93ZWQgbXVsdGlwbGUgdGltZXMgYnkgYSBzZXBhcmF0b3IgYW5kIGFub3RoZXIgZXhwcmVzc2lvbixcbiAgICogYW5kIGZpbmFsbHkgYSBjbG9zaW5nIG1hdGNoaW5nIG9wZXJhdG9yLlxuICAgKi9cbiAgcGFyc2VFbmNsb3N1cmUoKSB7XG4gICAgY29uc3QgZGVmcyA9IHRoaXMuZ2V0RGVmcyhcIm1hdGNoZml4XCIpO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICBmb3IgKGNvbnN0IGRlZiBvZiBkZWZzKSB7XG4gICAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG4gICAgICBpZiAoIXRoaXMubWF0Y2hEZWxpbWl0ZXIoZGVmLm9wZW5EZWxpbWl0ZXIsIGRlZi5jbG9zZURlbGltaXRlcikpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY29uc3QgYm9keVN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgICBsZXQgYm9keSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICB0aGlzLnNraXBTcGFjZSgpO1xuICAgICAgaWYgKCF0aGlzLm1hdGNoQm91bmRhcnkoKSkge1xuICAgICAgICBjb25zdCBib3VuZGFyeSA9IHRoaXMuX2JvdW5kYXJpZXNbdGhpcy5fYm91bmRhcmllcy5sZW5ndGggLSAxXS50b2tlbnM7XG4gICAgICAgIHRoaXMucmVtb3ZlQm91bmRhcnkoKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IGJvZHlTdGFydDtcbiAgICAgICAgdGhpcy5za2lwU3BhY2UoKTtcbiAgICAgICAgYm9keSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgICAgIGlmICghdGhpcy5tYXRjaEFsbChib3VuZGFyeSkpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGRlZi5wYXJzZSh0aGlzLCBib2R5ID8/IFtcIlNlcXVlbmNlXCJdKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IG51bGwpXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQSBnZW5lcmljIGV4cHJlc3Npb24gaXMgdXNlZCBmb3IgZGljdGlvbmFyeSBlbnRyaWVzIHRoYXQgdGFrZSBkb1xuICAgKiBzb21lIGNvbXBsZXggKG5vbi1zdGFuZGFyZCkgcGFyc2luZy4gVGhpcyBpbmNsdWRlcyB0cmlnIGZ1bmN0aW9ucyAodG9cbiAgICogcGFyc2UgaW1wbGljaXQgYXJndW1lbnRzKSwgYW5kIGludGVncmFscyAodG8gcGFyc2UgdGhlIGludGVncmFuZCBhbmRcbiAgICogbGltaXRzIGFuZCB0aGUgXCJkeFwiIHRlcm1pbmF0b3IpLlxuICAgKi9cbiAgcGFyc2VHZW5lcmljRXhwcmVzc2lvbih1bnRpbCkge1xuICAgIGlmICh0aGlzLmF0VGVybWluYXRvcih1bnRpbCkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgbGV0IGV4cHIgPSBudWxsO1xuICAgIGNvbnN0IGZuRGVmcyA9IHRoaXMucGVla0RlZmluaXRpb25zKFwiZXhwcmVzc2lvblwiKSA/PyBbXTtcbiAgICBmb3IgKGNvbnN0IFtkZWYsIHRva2VuQ291bnRdIG9mIGZuRGVmcykge1xuICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0ICsgdG9rZW5Db3VudDtcbiAgICAgIGlmICh0eXBlb2YgZGVmLnBhcnNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZXhwciA9IGRlZi5wYXJzZSh0aGlzLCB1bnRpbCk7XG4gICAgICAgIGlmIChleHByICE9PSBudWxsKVxuICAgICAgICAgIHJldHVybiBleHByO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZi5uYW1lO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gaXMgYW4gaWRlbnRpZmllciBmb2xsb3dlZCBieSBwb3N0Zml4IG9wZXJhdG9yc1xuICAgKiAoYFxccHJpbWVgLi4uKSBhbmQgc29tZSBhcmd1bWVudHMuXG4gICAqL1xuICBwYXJzZUZ1bmN0aW9uKHVudGlsKSB7XG4gICAgaWYgKHRoaXMuYXRUZXJtaW5hdG9yKHVudGlsKSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICBsZXQgZm4gPSBudWxsO1xuICAgIGZvciAoY29uc3QgW2RlZiwgdG9rZW5Db3VudF0gb2YgdGhpcy5wZWVrRGVmaW5pdGlvbnMoXCJmdW5jdGlvblwiKSkge1xuICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0ICsgdG9rZW5Db3VudDtcbiAgICAgIGlmICh0eXBlb2YgZGVmLnBhcnNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZm4gPSBkZWYucGFyc2UodGhpcywgdW50aWwpO1xuICAgICAgICBpZiAoZm4gIT09IG51bGwpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbiA9IGRlZi5uYW1lO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZuID09PSBudWxsKSB7XG4gICAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG4gICAgICBmbiA9IHBhcnNlSWRlbnRpZmllcih0aGlzKTtcbiAgICAgIGlmICghdGhpcy5pc0Z1bmN0aW9uSGVhZChmbikpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgZG8ge1xuICAgICAgY29uc3QgcGYgPSB0aGlzLnBhcnNlUG9zdGZpeE9wZXJhdG9yKGZuKTtcbiAgICAgIGlmIChwZiA9PT0gbnVsbClcbiAgICAgICAgYnJlYWs7XG4gICAgICBmbiA9IHBmO1xuICAgIH0gd2hpbGUgKHRydWUpO1xuICAgIGNvbnN0IHNlcSA9IHRoaXMuaXNGdW5jdGlvbkhlYWQoZm4pID8gdGhpcy5wYXJzZUFyZ3VtZW50cygpIDogbnVsbDtcbiAgICByZXR1cm4gc2VxID8gW2ZuLCAuLi5zZXFdIDogZm47XG4gIH1cbiAgcGFyc2VTeW1ib2wodW50aWwpIHtcbiAgICBpZiAodGhpcy5hdFRlcm1pbmF0b3IodW50aWwpKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIGZvciAoY29uc3QgW2RlZiwgdG9rZW5Db3VudF0gb2YgdGhpcy5wZWVrRGVmaW5pdGlvbnMoXCJzeW1ib2xcIikpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBzdGFydCArIHRva2VuQ291bnQ7XG4gICAgICBpZiAodHlwZW9mIGRlZi5wYXJzZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGRlZi5wYXJzZSh0aGlzLCB1bnRpbCk7XG4gICAgICAgIGlmIChyZXN1bHQpXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gZWxzZVxuICAgICAgICByZXR1cm4gZGVmLm5hbWU7XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICBjb25zdCBpZCA9IHBhcnNlSWRlbnRpZmllcih0aGlzKTtcbiAgICBpZiAoaWQgPT09IG51bGwpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpZiAodGhpcy5vcHRpb25zLnBhcnNlVW5rbm93bklkZW50aWZpZXI/LihpZCwgdGhpcykgPT09IFwic3ltYm9sXCIpXG4gICAgICByZXR1cm4gaWQ7XG4gICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZSBhIHNlcXVlbmNlIHN1cGVyZml4L3N1YmZpeCBvcGVyYXRvciwgZS5nLiBgXnsqfWBcbiAgICpcbiAgICogU3VwZXJmaXggYW5kIHN1YmZpeCBuZWVkIHNwZWNpYWwgaGFuZGxpbmc6XG4gICAqXG4gICAqIC0gdGhleSBhY3QgbW9zdGx5IGxpa2UgYW4gaW5maXggb3BlcmF0b3IsIGJ1dCB0aGV5IGFyZSBjb21tdXRhdGl2ZSwgaS5lLlxuICAgKiBgeF9hXmJgIHNob3VsZCBiZSBwYXJzZWQgaWRlbnRpY2FsbHkgdG8gYHheYl9hYC5cbiAgICpcbiAgICogLSBmdXJ0aGVybW9yZSwgaW4gTGFUZVggYHheYV5iYCBwYXJzZXMgdGhlIHNhbWUgYXMgYHheYXt9XmJgLlxuICAgKlxuICAgKi9cbiAgcGFyc2VTdXBzdWIobGhzKSB7XG4gICAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KGxocyAhPT0gbnVsbCk7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgY29uc3Qgc3VwZXJzY3JpcHRzID0gW107XG4gICAgY29uc3Qgc3Vic2NyaXB0cyA9IFtdO1xuICAgIGxldCBzdWJJbmRleCA9IGluZGV4O1xuICAgIHdoaWxlICh0aGlzLnBlZWsgPT09IFwiX1wiIHx8IHRoaXMucGVlayA9PT0gXCJeXCIpIHtcbiAgICAgIGlmICh0aGlzLm1hdGNoKFwiX1wiKSkge1xuICAgICAgICBzdWJJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoKFwiX1wiKSB8fCB0aGlzLm1hdGNoKFwiXlwiKSlcbiAgICAgICAgICBzdWJzY3JpcHRzLnB1c2godGhpcy5lcnJvcihcInN5bnRheC1lcnJvclwiLCBzdWJJbmRleCkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzdWIyID0gdGhpcy5wYXJzZUdyb3VwKCkgPz8gdGhpcy5wYXJzZVRva2VuKCkgPz8gdGhpcy5wYXJzZVN0cmluZ0dyb3VwKCk7XG4gICAgICAgICAgaWYgKHN1YjIgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihcIm1pc3NpbmdcIiwgaW5kZXgpO1xuICAgICAgICAgIHN1YnNjcmlwdHMucHVzaChzdWIyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLm1hdGNoKFwiXlwiKSkge1xuICAgICAgICBzdWJJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoKFwiX1wiKSB8fCB0aGlzLm1hdGNoKFwiXlwiKSlcbiAgICAgICAgICBzdXBlcnNjcmlwdHMucHVzaCh0aGlzLmVycm9yKFwic3ludGF4LWVycm9yXCIsIHN1YkluZGV4KSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHN1cCA9IHRoaXMucGFyc2VHcm91cCgpID8/IHRoaXMucGFyc2VUb2tlbigpO1xuICAgICAgICAgIGlmIChzdXAgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihcIm1pc3NpbmdcIiwgaW5kZXgpO1xuICAgICAgICAgIHN1cGVyc2NyaXB0cy5wdXNoKHN1cCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN1YkluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgfVxuICAgIGlmIChzdXBlcnNjcmlwdHMubGVuZ3RoID09PSAwICYmIHN1YnNjcmlwdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICByZXR1cm4gbGhzO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gbGhzO1xuICAgIGlmIChzdWJzY3JpcHRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGRlZnMgPSBbLi4udGhpcy5nZXREZWZzKFwiaW5maXhcIildLmZpbHRlcihcbiAgICAgICAgKHgpID0+IHgubGF0ZXhUcmlnZ2VyID09PSBcIl9cIlxuICAgICAgKTtcbiAgICAgIGlmIChkZWZzKSB7XG4gICAgICAgIGNvbnN0IGFyZyA9IFtcbiAgICAgICAgICBcIlN1YnNjcmlwdFwiLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBzdWJzY3JpcHRzLmxlbmd0aCA9PT0gMSA/IHN1YnNjcmlwdHNbMF0gOiBbXCJMaXN0XCIsIC4uLnN1YnNjcmlwdHNdXG4gICAgICAgIF07XG4gICAgICAgIGZvciAoY29uc3QgZGVmIG9mIGRlZnMpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRlZi5wYXJzZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgcmVzdWx0ID0gZGVmLnBhcnNlKHRoaXMsIGFyZywgeyBtaW5QcmVjOiAwIH0pO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc3VsdCA9IGFyZztcbiAgICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN1cGVyc2NyaXB0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBkZWZzID0gWy4uLnRoaXMuZ2V0RGVmcyhcImluZml4XCIpXS5maWx0ZXIoXG4gICAgICAgICh4KSA9PiB4LmxhdGV4VHJpZ2dlciA9PT0gXCJeXCJcbiAgICAgICk7XG4gICAgICBpZiAoZGVmcykge1xuICAgICAgICBjb25zdCBhcmcgPSBbXG4gICAgICAgICAgXCJTdXBlcnNjcmlwdFwiLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBzdXBlcnNjcmlwdHMubGVuZ3RoID09PSAxID8gc3VwZXJzY3JpcHRzWzBdIDogW1wiTGlzdFwiLCAuLi5zdXBlcnNjcmlwdHNdXG4gICAgICAgIF07XG4gICAgICAgIGZvciAoY29uc3QgZGVmIG9mIGRlZnMpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRlZi5wYXJzZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgcmVzdWx0ID0gZGVmLnBhcnNlKHRoaXMsIGFyZywgeyBtaW5QcmVjOiAwIH0pO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc3VsdCA9IGFyZztcbiAgICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlc3VsdCA9PT0gbnVsbClcbiAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHBhcnNlUG9zdGZpeE9wZXJhdG9yKGxocywgdW50aWwpIHtcbiAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQobGhzICE9PSBudWxsKTtcbiAgICBpZiAobGhzID09PSBudWxsKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIGZvciAoY29uc3QgW2RlZiwgbl0gb2YgdGhpcy5wZWVrRGVmaW5pdGlvbnMoXCJwb3N0Zml4XCIpKSB7XG4gICAgICB0aGlzLmluZGV4ID0gc3RhcnQgKyBuO1xuICAgICAgY29uc3QgcmVzdWx0ID0gZGVmLnBhcnNlKHRoaXMsIGxocywgdW50aWwpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKiBNYXRjaCBhIHN0cmluZyB1c2VkIGFzIGEgTGFUZVggaWRlbnRpZmllciwgZm9yIGV4YW1wbGUgYW4gZW52aXJvbm1lbnRcbiAgICogbmFtZS5cbiAgICogTm90IHN1aXRhYmxlIGZvciBnZW5lcmFsIHB1cnBvc2UgdGV4dCwgZS5nLiBhcmd1bWVudCBvZiBhIGBcXHRleHR7fVxuICAgKiBjb21tYW5kLiBTZWUgYG1hdGNoQ2hhcigpYCBpbnN0ZWFkLlxuICAgKi9cbiAgcGFyc2VTdHJpbmdHcm91cENvbnRlbnQoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGxldCBsZXZlbCA9IDA7XG4gICAgd2hpbGUgKCF0aGlzLmF0Qm91bmRhcnkgfHwgbGV2ZWwgPiAwKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XG4gICAgICBpZiAodG9rZW4gPT09IFwiPCQ+XCIgfHwgdG9rZW4gPT09IFwiPCQkPlwiKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG4gICAgICBpZiAodG9rZW4gPT09IFwiPHs+XCIpIHtcbiAgICAgICAgbGV2ZWwgKz0gMTtcbiAgICAgICAgcmVzdWx0ICs9IFwiXFxcXHtcIjtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFwiPH0+XCIpIHtcbiAgICAgICAgbGV2ZWwgLT0gMTtcbiAgICAgICAgcmVzdWx0ICs9IFwiXFxcXH1cIjtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFwiPHNwYWNlPlwiKSB7XG4gICAgICAgIHJlc3VsdCArPSBcIiBcIjtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW5bMF0gPT09IFwiXFxcXFwiKSB7XG4gICAgICAgIHJlc3VsdCArPSB0b2tlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSB0b2tlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvKipcbiAgICogQXBwbHkgYW4gaW52aXNpYmxlIG9wZXJhdG9yIGJldHdlZW4gdHdvIGV4cHJlc3Npb25zLlxuICAgKlxuICAgKiBJZiB0aGUgYGxoc2AgaXMgYW4gbGl0ZXJhbCBpbnRlZ2VyIGFuZCB0aGUgYHJoc2AgaXMgYSBsaXRlcmFsIHJhdGlvbmFsXG4gICAqIC0+ICdpbnZpc2libGUgcGx1cydcbiAgICpcbiAgICogVGhhdCBpcyAnMiAzLzQnIC0+IFsnQWRkJywgMiwgWydSYXRpb25hbCcsIDMsIDRdXVxuICAgKlxuICAgKiBJZiBgbGhzYCBpcyBhIG51bWJlciBhbmQgYHJoc2AgaXMgYSBudW1iZXIgYnV0IG5vdCBhIGxpdGVyYWwgLT4gJ2ludmlzaWJsZSBtdWx0aXBseScuXG4gICAqIC0gMnhcbiAgICogLSAyKHgrMSlcbiAgICogLSB4KHgrMSlcbiAgICogLSBmKHgpZyh5KVxuICAgKiAtIDIgc2luKHgpXG4gICAqIC0gMiBmKHgpXG4gICAqIC0geCBmKHgpXG4gICAqIC0gKHgtMSkoeCsxKVxuICAgKiAtICh4KzEpMiAtPiBub1xuICAgKiAtIHgyIC0+IG5vXG4gICAqID0+IGxocyBpcyBhIG51bWJlciwgcmhzIGlzIGEgbnVtYmVyLCBidXQgbm90IGEgbGl0ZXJhbFxuICAgKi9cbiAgYXBwbHlJbnZpc2libGVPcGVyYXRvcih1bnRpbCwgbGhzKSB7XG4gICAgaWYgKGxocyA9PT0gbnVsbCB8fCB0aGlzLm9wdGlvbnMuYXBwbHlJbnZpc2libGVPcGVyYXRvciA9PT0gbnVsbCB8fCBoZWFkKGxocykgPT09IFwiRXJyb3JcIiB8fCBzeW1ib2wobGhzKSA9PT0gXCJOb3RoaW5nXCIgfHwgaXNFbXB0eVNlcXVlbmNlKGxocykgfHwgdGhpcy5hdFRlcm1pbmF0b3IodW50aWwpKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKHRoaXMucGVla0RlZmluaXRpb25zKFwib3BlcmF0b3JcIikubGVuZ3RoID4gMClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGlmICh0aGlzLmlzRnVuY3Rpb25IZWFkKGxocykpIHtcbiAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLnBhcnNlQXJndW1lbnRzKFwiZW5jbG9zdXJlXCIsIHsgLi4udW50aWwsIG1pblByZWM6IDAgfSk7XG4gICAgICBpZiAoYXJncyA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gW2xocywgLi4uYXJnc107XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICBjb25zdCByaHMgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbih7IC4uLnVudGlsLCBtaW5QcmVjOiAzOTAgfSk7XG4gICAgaWYgKHJocyA9PT0gbnVsbCB8fCBzeW1ib2wocmhzKSA9PT0gXCJOb3RoaW5nXCIgfHwgaXNFbXB0eVNlcXVlbmNlKHJocykpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaGVhZChyaHMpID09PSBcIkVycm9yXCIpXG4gICAgICByZXR1cm4gYXBwbHlBc3NvY2lhdGl2ZU9wZXJhdG9yKFwiU2VxdWVuY2VcIiwgbGhzLCByaHMpO1xuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmFwcGx5SW52aXNpYmxlT3BlcmF0b3IgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBwbHlJbnZpc2libGVPcGVyYXRvcih0aGlzLCBsaHMsIHJocyk7XG4gICAgaWYgKHRoaXMuaXNGdW5jdGlvbkhlYWQobGhzKSkge1xuICAgICAgY29uc3Qgc2VxID0gZ2V0U2VxdWVuY2UocmhzKTtcbiAgICAgIHJldHVybiBzZXEgPyBbbGhzLCAuLi5zZXFdIDogbGhzO1xuICAgIH1cbiAgICBjb25zdCBsaHNOdW1iZXIgPSBtYWNoaW5lVmFsdWUobGhzKTtcbiAgICBpZiAobGhzTnVtYmVyICE9PSBudWxsICYmIE51bWJlci5pc0ludGVnZXIobGhzTnVtYmVyKSkge1xuICAgICAgY29uc3QgcmhzSGVhZCA9IGhlYWQocmhzKTtcbiAgICAgIGlmIChyaHNIZWFkID09PSBcIkRpdmlkZVwiIHx8IHJoc0hlYWQgPT09IFwiUmF0aW9uYWxcIikge1xuICAgICAgICBjb25zdCBbbiwgZF0gPSBbbWFjaGluZVZhbHVlKG9wKHJocywgMSkpLCBtYWNoaW5lVmFsdWUob3AocmhzLCAyKSldO1xuICAgICAgICBpZiAobiAhPT0gbnVsbCAmJiBkICE9PSBudWxsICYmIG4gPiAwICYmIG4gPD0gMWUzICYmIGQgPiAxICYmIGQgPD0gMWUzICYmIE51bWJlci5pc0ludGVnZXIobikgJiYgTnVtYmVyLmlzSW50ZWdlcihkKSlcbiAgICAgICAgICByZXR1cm4gW1wiQWRkXCIsIGxocywgcmhzXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGhlYWQocmhzKSA9PT0gXCJEZWxpbWl0ZXJcIikge1xuICAgICAgaWYgKGhlYWQob3AocmhzLCAxKSkgPT09IFwiU2VxdWVuY2VcIilcbiAgICAgICAgcmV0dXJuIFtsaHMsIC4uLm9wcyhvcChyaHMsIDEpKSA/PyBbXV07XG4gICAgICBpZiAoIW9wKHJocywgMSkgfHwgc3ltYm9sKG9wKHJocywgMSkpID09PSBcIk5vdGhpbmdcIilcbiAgICAgICAgcmV0dXJuIGFwcGx5QXNzb2NpYXRpdmVPcGVyYXRvcihcbiAgICAgICAgICBcIlNlcXVlbmNlXCIsXG4gICAgICAgICAgbGhzLFxuICAgICAgICAgIHRoaXMuZXJyb3IoXCJleHBlY3RlZC1leHByZXNzaW9uXCIsIHN0YXJ0KVxuICAgICAgICApO1xuICAgIH1cbiAgICBpZiAoaGVhZChyaHMpID09PSBcIlNlcXVlbmNlXCIgfHwgaGVhZChsaHMpID09PSBcIlNlcXVlbmNlXCIgfHwgc3RyaW5nVmFsdWUobGhzKSAhPT0gbnVsbCB8fCBzdHJpbmdWYWx1ZShyaHMpICE9PSBudWxsIHx8IGRpY3Rpb25hcnkobGhzKSAhPT0gbnVsbCB8fCBkaWN0aW9uYXJ5KHJocykgIT09IG51bGwpXG4gICAgICByZXR1cm4gYXBwbHlBc3NvY2lhdGl2ZU9wZXJhdG9yKFwiU2VxdWVuY2VcIiwgbGhzLCByaHMpO1xuICAgIHJldHVybiBhcHBseUFzc29jaWF0aXZlT3BlcmF0b3IoXCJNdWx0aXBseVwiLCBsaHMsIHJocyk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgaXMgYW4gZXJyb3IgaGFuZGxpbmcgbWV0aG9kLiBXZSd2ZSBlbmNvdW50ZXJlZCBhIExhVGVYIGNvbW1hbmRcbiAgICogYnV0IHdlcmUgbm90IGFibGUgdG8gbWF0Y2ggaXQgdG8gYW55IGVudHJ5IGluIHRoZSBMYVRlWCBkaWN0aW9uYXJ5LFxuICAgKiBvciByYW4gaW50byBpdCBpbiBhbiB1bmV4cGVjdGVkIGNvbnRleHQgKHBvc3RmaXggb3BlcmF0b3IgbGFja2luZyBhblxuICAgKiBhcmd1bWVudCwgZm9yIGV4YW1wbGUpXG4gICAqL1xuICBwYXJzZVVuZXhwZWN0ZWRMYXRleENvbW1hbmQoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIGxldCBvcERlZnMgPSB0aGlzLnBlZWtEZWZpbml0aW9ucyhcIm9wZXJhdG9yXCIpO1xuICAgIGlmIChvcERlZnMubGVuZ3RoID4gMCkge1xuICAgICAgb3BEZWZzID0gdGhpcy5wZWVrRGVmaW5pdGlvbnMoXCJwb3N0Zml4XCIpO1xuICAgICAgaWYgKG9wRGVmcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IFtkZWYsIG5dID0gb3BEZWZzWzBdO1xuICAgICAgICB0aGlzLmluZGV4ICs9IG47XG4gICAgICAgIGlmICh0eXBlb2YgZGVmLnBhcnNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBkZWYucGFyc2UodGhpcywgdGhpcy5lcnJvcihcIm1pc3NpbmdcIiwgc3RhcnQpKTtcbiAgICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmLm5hbWUpXG4gICAgICAgICAgcmV0dXJuIFtkZWYubmFtZSwgdGhpcy5lcnJvcihcIm1pc3NpbmdcIiwgc3RhcnQpXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoXCJ1bmV4cGVjdGVkLW9wZXJhdG9yXCIsIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIG9wRGVmcyA9IHRoaXMucGVla0RlZmluaXRpb25zKFwicHJlZml4XCIpO1xuICAgICAgaWYgKG9wRGVmcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IFtkZWYsIG5dID0gb3BEZWZzWzBdO1xuICAgICAgICB0aGlzLmluZGV4ICs9IG47XG4gICAgICAgIGlmICh0eXBlb2YgZGVmLnBhcnNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBkZWYucGFyc2UodGhpcywgeyBtaW5QcmVjOiAwIH0pO1xuICAgICAgICAgIGlmIChyZXN1bHQpXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubmFtZSlcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZGVmLm5hbWUsXG4gICAgICAgICAgICAvLyBAdG9kbzogcGFzcyBhIHByZWNlZGVuY2U/XG4gICAgICAgICAgICB0aGlzLnBhcnNlRXhwcmVzc2lvbigpID8/IHRoaXMuZXJyb3IoXCJtaXNzaW5nXCIsIHN0YXJ0KVxuICAgICAgICAgIF07XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKFwidW5leHBlY3RlZC1vcGVyYXRvclwiLCBzdGFydCk7XG4gICAgICB9XG4gICAgICBvcERlZnMgPSB0aGlzLnBlZWtEZWZpbml0aW9ucyhcImluZml4XCIpO1xuICAgICAgaWYgKG9wRGVmcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IFtkZWYsIG5dID0gb3BEZWZzWzBdO1xuICAgICAgICB0aGlzLmluZGV4ICs9IG47XG4gICAgICAgIGlmICh0eXBlb2YgZGVmLnBhcnNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBkZWYucGFyc2UodGhpcywgdGhpcy5lcnJvcihcIm1pc3NpbmdcIiwgc3RhcnQpLCB7XG4gICAgICAgICAgICBtaW5QcmVjOiAwXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHJlc3VsdClcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZi5uYW1lKVxuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBkZWYubmFtZSxcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoXCJtaXNzaW5nXCIsIHN0YXJ0KSxcbiAgICAgICAgICAgIHRoaXMucGFyc2VFeHByZXNzaW9uKCkgPz8gdGhpcy5lcnJvcihcIm1pc3NpbmdcIiwgc3RhcnQpXG4gICAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoXCJ1bmV4cGVjdGVkLW9wZXJhdG9yXCIsIHN0YXJ0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY29tbWFuZCA9IHRoaXMucGVlaztcbiAgICBpZiAoIWNvbW1hbmQgfHwgY29tbWFuZFswXSAhPT0gXCJcXFxcXCIpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgIHRoaXMuc2tpcFNwYWNlVG9rZW5zKCk7XG4gICAgaWYgKGNvbW1hbmQgPT09IFwiXFxcXGVuZFwiKSB7XG4gICAgICBjb25zdCBuYW1lID0gdGhpcy5wYXJzZVN0cmluZ0dyb3VwKCk7XG4gICAgICBpZiAobmFtZSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoXCJleHBlY3RlZC1lbnZpcm9ubWVudC1uYW1lXCIsIHN0YXJ0KTtcbiAgICAgIHJldHVybiB0aGlzLmVycm9yKFtcInVuYmFsYW5jZWQtZW52aXJvbm1lbnRcIiwgeyBzdHI6IG5hbWUgfV0sIHN0YXJ0KTtcbiAgICB9XG4gICAgd2hpbGUgKHRoaXMubWF0Y2goXCJbXCIpKSB7XG4gICAgICBsZXQgbGV2ZWwgPSAwO1xuICAgICAgd2hpbGUgKCF0aGlzLmF0RW5kICYmIGxldmVsID09PSAwICYmIHRoaXMucGVlayAhPT0gXCJdXCIpIHtcbiAgICAgICAgaWYgKHRoaXMucGVlayA9PT0gXCJbXCIpXG4gICAgICAgICAgbGV2ZWwgKz0gMTtcbiAgICAgICAgaWYgKHRoaXMucGVlayA9PT0gXCJdXCIpXG4gICAgICAgICAgbGV2ZWwgLT0gMTtcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWF0Y2goXCJdXCIpO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuICAgIGNvbnN0IGNsb3NlRGVsaW1pdGVyID0gdGhpcy5tYXRjaEVuY2xvc3VyZU9wZW4oKTtcbiAgICBpZiAoY2xvc2VEZWxpbWl0ZXIpXG4gICAgICByZXR1cm4gdGhpcy5lcnJvcihcbiAgICAgICAgW1wiZXhwZWN0ZWQtY2xvc2UtZGVsaW1pdGVyXCIsIHsgc3RyOiBjbG9zZURlbGltaXRlciB9XSxcbiAgICAgICAgaW5kZXhcbiAgICAgICk7XG4gICAgY29uc3Qgb3BlbkRlbGltaXRlciA9IHRoaXMubWF0Y2hFbmNsb3N1cmVDbG9zZSgpO1xuICAgIGlmIChvcGVuRGVsaW1pdGVyKVxuICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoXG4gICAgICAgIFtcImV4cGVjdGVkLW9wZW4tZGVsaW1pdGVyXCIsIHsgc3RyOiBvcGVuRGVsaW1pdGVyIH1dLFxuICAgICAgICBzdGFydFxuICAgICAgKTtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgd2hpbGUgKHRoaXMubWF0Y2goXCI8ez5cIikpIHtcbiAgICAgIGxldCBsZXZlbCA9IDA7XG4gICAgICB3aGlsZSAoIXRoaXMuYXRFbmQgJiYgbGV2ZWwgPT09IDAgJiYgdGhpcy5wZWVrICE9PSBcIjx9PlwiKSB7XG4gICAgICAgIGlmICh0aGlzLnBlZWsgPT09IFwiPHs+XCIpXG4gICAgICAgICAgbGV2ZWwgKz0gMTtcbiAgICAgICAgaWYgKHRoaXMucGVlayA9PT0gXCI8fT5cIilcbiAgICAgICAgICBsZXZlbCAtPSAxO1xuICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5tYXRjaChcIjx9PlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoW1widW5leHBlY3RlZC1jb21tYW5kXCIsIHsgc3RyOiBjb21tYW5kIH1dLCBzdGFydCk7XG4gIH1cbiAgLyoqXG4gICAqIDxwcmltYXJ5PiA6PVxuICAgKiAgKDxudW1iZXI+IHwgPHN5bWJvbD4gfCA8ZW52aXJvbm1lbnQ+IHwgPG1hdGNoZml4LWV4cHI+KVxuICAgKiAgICA8c3Vic3VwPiogPHBvc3RmaXgtb3BlcmF0b3I+KlxuICAgKlxuICAgKiA8c3ltYm9sPiA6Oj1cbiAgICogICg8c3ltYm9sLWlkPiB8ICg8bGF0ZXgtY29tbWFuZD48bGF0ZXgtYXJndW1lbnRzPikpIDxhcmd1bWVudHM+XG4gICAqXG4gICAqIDxtYXRjaGZpeC1leHByPiA6PVxuICAgKiAgPG1hdGNoZml4LW9wLW9wZW4+XG4gICAqICA8ZXhwcmVzc2lvbj5cbiAgICogICg8bWF0Y2hmaXgtb3Atc2VwYXJhdG9yPiA8ZXhwcmVzc2lvbj4pKlxuICAgKiAgPG1hdGNoZml4LW9wLWNsb3NlPlxuICAgKlxuICAgKi9cbiAgcGFyc2VQcmltYXJ5KHVudGlsKSB7XG4gICAgaWYgKHRoaXMuYXRCb3VuZGFyeSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGlmICh0aGlzLmF0VGVybWluYXRvcih1bnRpbCkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgaWYgKHRoaXMubWF0Y2goXCI8fT5cIikpXG4gICAgICByZXR1cm4gdGhpcy5lcnJvcihcInVuZXhwZWN0ZWQtY2xvc2luZy1kZWxpbWl0ZXJcIiwgc3RhcnQpO1xuICAgIGlmICh0aGlzLm1hdGNoKFwiPHs+XCIpKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbih7XG4gICAgICAgIG1pblByZWM6IDAsXG4gICAgICAgIGNvbmRpdGlvbjogKHApID0+IHAucGVlayA9PT0gXCI8fT5cIlxuICAgICAgfSk7XG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihcImV4cGVjdGVkLWV4cHJlc3Npb25cIiwgc3RhcnQpO1xuICAgICAgaWYgKCF0aGlzLm1hdGNoKFwiPH0+XCIpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlY29yYXRlKFxuICAgICAgICAgIFtcIlNlcXVlbmNlXCIsIHJlc3VsdCwgdGhpcy5lcnJvcihcImV4cGVjdGVkLWNsb3NpbmctZGVsaW1pdGVyXCIsIHN0YXJ0KV0sXG4gICAgICAgICAgc3RhcnRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgbnVtID0gdGhpcy5wYXJzZU51bWJlcigpO1xuICAgICAgaWYgKG51bSAhPT0gbnVsbClcbiAgICAgICAgcmVzdWx0ID0geyBudW0gfTtcbiAgICB9XG4gICAgcmVzdWx0ID8/IChyZXN1bHQgPSB0aGlzLnBhcnNlRW5jbG9zdXJlKCkpO1xuICAgIHJlc3VsdCA/PyAocmVzdWx0ID0gdGhpcy5wYXJzZUVudmlyb25tZW50KHVudGlsKSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gbnVsbCAmJiB0aGlzLm1hdGNoQWxsKHRoaXMuX3Bvc2l0aXZlSW5maW5pdHlUb2tlbnMpKVxuICAgICAgcmVzdWx0ID0geyBudW06IFwiK0luZmluaXR5XCIgfTtcbiAgICBpZiAocmVzdWx0ID09PSBudWxsICYmIHRoaXMubWF0Y2hBbGwodGhpcy5fbmVnYXRpdmVJbmZpbml0eVRva2VucykpXG4gICAgICByZXN1bHQgPSB7IG51bTogXCItSW5maW5pdHlcIiB9O1xuICAgIGlmIChyZXN1bHQgPT09IG51bGwgJiYgdGhpcy5tYXRjaEFsbCh0aGlzLl9ub3RBTnVtYmVyVG9rZW5zKSlcbiAgICAgIHJlc3VsdCA9IHsgbnVtOiBcIk5hTlwiIH07XG4gICAgcmVzdWx0ID8/IChyZXN1bHQgPSB0aGlzLnBhcnNlR2VuZXJpY0V4cHJlc3Npb24odW50aWwpID8/IHRoaXMucGFyc2VGdW5jdGlvbih1bnRpbCkgPz8gdGhpcy5wYXJzZVN5bWJvbCh1bnRpbCkgPz8gcGFyc2VJbnZhbGlkSWRlbnRpZmllcih0aGlzKSk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5kZWNvcmF0ZShyZXN1bHQsIHN0YXJ0KTtcbiAgICAgIGxldCBwb3N0Zml4ID0gbnVsbDtcbiAgICAgIGxldCBpbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICBkbyB7XG4gICAgICAgIHBvc3RmaXggPSB0aGlzLnBhcnNlUG9zdGZpeE9wZXJhdG9yKHJlc3VsdCwgdW50aWwpO1xuICAgICAgICByZXN1bHQgPSBwb3N0Zml4ID8/IHJlc3VsdDtcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IGluZGV4ICYmIHBvc3RmaXggIT09IG51bGwpIHtcbiAgICAgICAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQodGhpcy5pbmRleCAhPT0gaW5kZXgsIFwiTm8gdG9rZW4gY29uc3VtZWRcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgfSB3aGlsZSAocG9zdGZpeCAhPT0gbnVsbCk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgIT09IG51bGwpXG4gICAgICByZXN1bHQgPSB0aGlzLnBhcnNlU3Vwc3ViKHJlc3VsdCk7XG4gICAgcmV0dXJuIHRoaXMuZGVjb3JhdGUocmVzdWx0LCBzdGFydCk7XG4gIH1cbiAgLyoqXG4gICAqICBQYXJzZSBhbiBleHByZXNzaW9uOlxuICAgKlxuICAgKiA8ZXhwcmVzc2lvbj4gOjo9XG4gICAqICB8IDxwcmltYXJ5PlxuICAgKiAgfCA8cHJlZml4LW9wPiA8cHJpbWFyeT5cbiAgICogIHwgPHByaW1hcnk+IDxpbmZpeC1vcD4gPGV4cHJlc3Npb24+XG4gICAqXG4gICAqIFN0b3Agd2hlbiBhbiBvcGVyYXRvciBvZiBwcmVjZWRlbmNlIGxlc3MgdGhhbiBgdW50aWwubWluUHJlY2BcbiAgICogaXMgZW5jb3VudGVyZWRcbiAgICovXG4gIHBhcnNlRXhwcmVzc2lvbih1bnRpbCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB0aGlzLnNraXBTcGFjZSgpO1xuICAgIGlmICh0aGlzLmF0Qm91bmRhcnkpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBzdGFydDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB1bnRpbCA/PyAodW50aWwgPSB7IG1pblByZWM6IDAgfSk7XG4gICAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KHVudGlsLm1pblByZWMgIT09IHZvaWQgMCk7XG4gICAgaWYgKHVudGlsLm1pblByZWMgPT09IHZvaWQgMClcbiAgICAgIHVudGlsID0geyAuLi51bnRpbCwgbWluUHJlYzogMCB9O1xuICAgIGxldCBsaHMgPSB0aGlzLnBhcnNlUHJlZml4T3BlcmF0b3IoeyAuLi51bnRpbCwgbWluUHJlYzogMCB9KTtcbiAgICBpZiAobGhzID09PSBudWxsKSB7XG4gICAgICBsaHMgPSB0aGlzLnBhcnNlUHJpbWFyeSh1bnRpbCk7XG4gICAgICBpZiAoaGVhZChsaHMpID09PSBcIlNlcXVlbmNlXCIgJiYgbm9wcyhsaHMpID09PSAwKVxuICAgICAgICBsaHMgPSBudWxsO1xuICAgIH1cbiAgICBpZiAobGhzKSB7XG4gICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgd2hpbGUgKCFkb25lICYmICF0aGlzLmF0VGVybWluYXRvcih1bnRpbCkpIHtcbiAgICAgICAgdGhpcy5za2lwU3BhY2UoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucGFyc2VJbmZpeE9wZXJhdG9yKGxocywgdW50aWwpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdGhpcy5hcHBseUludmlzaWJsZU9wZXJhdG9yKHVudGlsLCBsaHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgIT09IG51bGwpIHtcbiAgICAgICAgICBsaHMgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbGhzID8/IChsaHMgPSB0aGlzLnBhcnNlVW5leHBlY3RlZExhdGV4Q29tbWFuZCgpKTtcbiAgICByZXR1cm4gdGhpcy5kZWNvcmF0ZShsaHMsIHN0YXJ0KTtcbiAgfVxuICAvKipcbiAgICogQWRkIExhVGVYIG9yIG90aGVyIHJlcXVlc3RlZCBtZXRhZGF0YSB0byB0aGUgZXhwcmVzc2lvblxuICAgKi9cbiAgZGVjb3JhdGUoZXhwciwgc3RhcnQpIHtcbiAgICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnByZXNlcnZlTGF0ZXgpXG4gICAgICByZXR1cm4gZXhwcjtcbiAgICBjb25zdCBsYXRleCA9IHRoaXMubGF0ZXgoc3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV4cHIpKSB7XG4gICAgICBleHByID0geyBsYXRleCwgZm46IGV4cHIgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHByID09PSBcIm51bWJlclwiKSB7XG4gICAgICBleHByID0geyBsYXRleCwgbnVtOiBOdW1iZXIoZXhwcikudG9TdHJpbmcoKSB9O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cHIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGV4cHIgPSB7IGxhdGV4LCBzeW06IGV4cHIgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHByID09PSBcIm9iamVjdFwiICYmIGV4cHIgIT09IG51bGwpIHtcbiAgICAgIGV4cHIubGF0ZXggPSBsYXRleDtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cbiAgZXJyb3IoY29kZSwgZnJvbVRva2VuKSB7XG4gICAgbGV0IG1zZztcbiAgICBpZiAodHlwZW9mIGNvZGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydCghY29kZS5zdGFydHNXaXRoKFwiJ1wiKSk7XG4gICAgICBtc2cgPSB7IHN0cjogY29kZSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoIWNvZGVbMF0uc3RhcnRzV2l0aChcIidcIikpO1xuICAgICAgbXNnID0gW1wiRXJyb3JDb2RlXCIsIHsgc3RyOiBjb2RlWzBdIH0sIC4uLmNvZGUuc2xpY2UoMSldO1xuICAgIH1cbiAgICBjb25zdCBsYXRleCA9IHRoaXMubGF0ZXgoZnJvbVRva2VuLCB0aGlzLmluZGV4KTtcbiAgICByZXR1cm4gbGF0ZXggPyBbXCJFcnJvclwiLCBtc2csIFtcIkxhdGV4XCIsIHsgc3RyOiBsYXRleCB9XV0gOiBbXCJFcnJvclwiLCBtc2ddO1xuICB9XG4gIGlzRnVuY3Rpb25IZWFkKGV4cHIpIHtcbiAgICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBzID0gc3ltYm9sKGV4cHIpO1xuICAgIGlmICghcylcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVFbmdpbmUuYm94KGV4cHIpLmRvbWFpbi5pc0Z1bmN0aW9uO1xuICAgIGlmICh0aGlzLmNvbXB1dGVFbmdpbmUgJiYgdGhpcy5jb21wdXRlRW5naW5lLmxvb2t1cEZ1bmN0aW9uKHMpICE9PSB2b2lkIDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnBhcnNlVW5rbm93bklkZW50aWZpZXI/LihzLCB0aGlzKSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKiBSZXR1cm4gYWxsIGRlZnMgb2YgdGhlIHNwZWNpZmllZCBraW5kICovXG4gICpnZXREZWZzKGtpbmQpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJvcGVyYXRvclwiKSB7XG4gICAgICBmb3IgKGNvbnN0IGRlZiBvZiB0aGlzLl9kaWN0aW9uYXJ5LmRlZnMpXG4gICAgICAgIGlmICgvXnByZWZpeHxpbmZpeHxwb3N0Zml4Ly50ZXN0KGRlZi5raW5kKSlcbiAgICAgICAgICB5aWVsZCBkZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3QgZGVmIG9mIHRoaXMuX2RpY3Rpb25hcnkuZGVmcylcbiAgICAgICAgaWYgKGRlZi5raW5kID09PSBraW5kKVxuICAgICAgICAgIHlpZWxkIGRlZjtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBwYXJzZUNvbXBsZXhJZChwYXJzZXIsIGlkKSB7XG4gIGNvbnN0IHN0YXJ0ID0gcGFyc2VyLmluZGV4O1xuICBjb25zdCBjYW5kaWRhdGUgPSBwYXJzZUlkZW50aWZpZXIocGFyc2VyKT8udHJpbSgpO1xuICBpZiAoY2FuZGlkYXRlID09PSBudWxsKVxuICAgIHJldHVybiAwO1xuICBjb25zdCByZXN1bHQgPSBjYW5kaWRhdGUgIT09IGlkID8gMCA6IHBhcnNlci5pbmRleCAtIHN0YXJ0O1xuICBwYXJzZXIuaW5kZXggPSBzdGFydDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xhdGV4LXN5bnRheC9zZXJpYWxpemUtbnVtYmVyLnRzXG5mdW5jdGlvbiBmb3JtYXRGcmFjdGlvbmFsUGFydChtLCBvcHRpb25zKSB7XG4gIGNvbnN0IG9yaWdpbmFsTGVuZ3RoID0gbS5sZW5ndGg7XG4gIGNvbnN0IG9yaWdpbmFsTSA9IG07XG4gIGlmIChvcHRpb25zLmJlZ2luUmVwZWF0aW5nRGlnaXRzICYmIG9wdGlvbnMuZW5kUmVwZWF0aW5nRGlnaXRzKSB7XG4gICAgbSA9IG0uc2xpY2UoMCwgLTEpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbS5sZW5ndGggLSAxNjsgaSsrKSB7XG4gICAgICBjb25zdCBvZmZzZXQgPSBtLnN1YnN0cmluZygwLCBpKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTc7IGorKykge1xuICAgICAgICBjb25zdCBjeWNsZSA9IG0uc3Vic3RyaW5nKGksIGkgKyBqICsgMSk7XG4gICAgICAgIGNvbnN0IHRpbWVzID0gTWF0aC5mbG9vcigobS5sZW5ndGggLSBvZmZzZXQubGVuZ3RoKSAvIGN5Y2xlLmxlbmd0aCk7XG4gICAgICAgIGlmICh0aW1lcyA8PSAzKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBpZiAoKG9mZnNldCArIGN5Y2xlLnJlcGVhdCh0aW1lcyArIDEpKS5zdGFydHNXaXRoKG0pKSB7XG4gICAgICAgICAgaWYgKGN5Y2xlID09PSBcIjBcIikge1xuICAgICAgICAgICAgcmV0dXJuIG9mZnNldC5yZXBsYWNlKC8oXFxkezN9KS9nLCBcIiQxXCIgKyBvcHRpb25zLmdyb3VwU2VwYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG9mZnNldC5yZXBsYWNlKC8oXFxkezN9KS9nLCBcIiQxXCIgKyBvcHRpb25zLmdyb3VwU2VwYXJhdG9yKSArIG9wdGlvbnMuYmVnaW5SZXBlYXRpbmdEaWdpdHMgKyBjeWNsZSArIG9wdGlvbnMuZW5kUmVwZWF0aW5nRGlnaXRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IGV4dHJhRGlnaXRzID0gb3JpZ2luYWxMZW5ndGggPiBvcHRpb25zLnByZWNpc2lvbiAtIDE7XG4gIG0gPSBvcmlnaW5hbE07XG4gIGlmIChleHRyYURpZ2l0cylcbiAgICBtID0gbS5zdWJzdHJpbmcoMCwgb3B0aW9ucy5wcmVjaXNpb24gLSAxKTtcbiAgaWYgKG9wdGlvbnMuZ3JvdXBTZXBhcmF0b3IpIHtcbiAgICBtID0gbS5yZXBsYWNlKC8oXFxkezN9KS9nLCBcIiQxXCIgKyBvcHRpb25zLmdyb3VwU2VwYXJhdG9yKTtcbiAgICBpZiAobS5lbmRzV2l0aChvcHRpb25zLmdyb3VwU2VwYXJhdG9yKSkge1xuICAgICAgbSA9IG0uc2xpY2UoMCwgLW9wdGlvbnMuZ3JvdXBTZXBhcmF0b3IubGVuZ3RoKTtcbiAgICB9XG4gIH1cbiAgaWYgKGV4dHJhRGlnaXRzKVxuICAgIHJldHVybiBtICsgb3B0aW9ucy50cnVuY2F0aW9uTWFya2VyO1xuICByZXR1cm4gbTtcbn1cbmZ1bmN0aW9uIGZvcm1hdEV4cG9uZW50KGV4cDIsIG9wdGlvbnMpIHtcbiAgaWYgKCFleHAyKVxuICAgIHJldHVybiBcIlwiO1xuICBpZiAob3B0aW9ucy5iZWdpbkV4cG9uZW50TWFya2VyKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuYmVnaW5FeHBvbmVudE1hcmtlciArIGV4cDIgKyAob3B0aW9ucy5lbmRFeHBvbmVudE1hcmtlciA/PyBcIlwiKTtcbiAgfVxuICByZXR1cm4gXCIxMF57XCIgKyBleHAyICsgXCJ9XCI7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVOdW1iZXIoZXhwciwgb3B0aW9ucykge1xuICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICByZXR1cm4gXCJcIjtcbiAgbGV0IG51bTtcbiAgaWYgKHR5cGVvZiBleHByID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiBleHByID09PSBcInN0cmluZ1wiKSB7XG4gICAgbnVtID0gZXhwcjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwciA9PT0gXCJvYmplY3RcIiAmJiBcIm51bVwiIGluIGV4cHIpIHtcbiAgICBudW0gPSBleHByLm51bTtcbiAgfSBlbHNlXG4gICAgcmV0dXJuIFwiXCI7XG4gIGlmICh0eXBlb2YgbnVtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKG51bSA9PT0gSW5maW5pdHkpXG4gICAgICByZXR1cm4gb3B0aW9ucy5wb3NpdGl2ZUluZmluaXR5O1xuICAgIGVsc2UgaWYgKG51bSA9PT0gLUluZmluaXR5KVxuICAgICAgcmV0dXJuIG9wdGlvbnMubmVnYXRpdmVJbmZpbml0eTtcbiAgICBlbHNlIGlmIChOdW1iZXIuaXNOYU4obnVtKSlcbiAgICAgIHJldHVybiBvcHRpb25zLm5vdEFOdW1iZXI7XG4gICAgbGV0IHJlc3VsdDIgPSB2b2lkIDA7XG4gICAgaWYgKG9wdGlvbnMubm90YXRpb24gPT09IFwiZW5naW5lZXJpbmdcIilcbiAgICAgIHJlc3VsdDIgPSBzZXJpYWxpemVTY2llbnRpZmljTm90YXRpb25OdW1iZXIoXG4gICAgICAgIG51bS50b0V4cG9uZW50aWFsKCksXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIDNcbiAgICAgICk7XG4gICAgZWxzZSBpZiAob3B0aW9ucy5ub3RhdGlvbiA9PT0gXCJzY2llbnRpZmljXCIpXG4gICAgICByZXN1bHQyID0gc2VyaWFsaXplU2NpZW50aWZpY05vdGF0aW9uTnVtYmVyKG51bS50b0V4cG9uZW50aWFsKCksIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHQyID8/IHNlcmlhbGl6ZUF1dG9Ob3RhdGlvbk51bWJlcihudW0udG9TdHJpbmcoKSwgb3B0aW9ucyk7XG4gIH1cbiAgbnVtID0gbnVtLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW1xcdTAwMDktXFx1MDAwZFxcdTAwMjBcXHUwMGEwXS9nLCBcIlwiKTtcbiAgaWYgKG51bSA9PT0gXCJpbmZpbml0eVwiIHx8IG51bSA9PT0gXCIraW5maW5pdHlcIilcbiAgICByZXR1cm4gb3B0aW9ucy5wb3NpdGl2ZUluZmluaXR5O1xuICBlbHNlIGlmIChudW0gPT09IFwiLWluZmluaXR5XCIpXG4gICAgcmV0dXJuIG9wdGlvbnMubmVnYXRpdmVJbmZpbml0eTtcbiAgZWxzZSBpZiAobnVtID09PSBcIm5hblwiKVxuICAgIHJldHVybiBvcHRpb25zLm5vdEFOdW1iZXI7XG4gIGlmICghL15bLStcXC5dP1swLTldLy50ZXN0KG51bSkpXG4gICAgcmV0dXJuIFwiXCI7XG4gIG51bSA9IG51bS5yZXBsYWNlKC9bbmRdJC8sIFwiXCIpO1xuICBpZiAoL1xcKFswLTldK1xcKS8udGVzdChudW0pKSB7XG4gICAgY29uc3QgW18sIGJvZHksIHJlcGVhdCwgdHJhaWxdID0gbnVtLm1hdGNoKC8oLispXFwoKFswLTldKylcXCkoLiopJC8pID8/IFtdO1xuICAgIG51bSA9IGJvZHkgKyByZXBlYXQucmVwZWF0KE1hdGguY2VpbChvcHRpb25zLnByZWNpc2lvbiAvIHJlcGVhdC5sZW5ndGgpKSArIHRyYWlsO1xuICB9XG4gIGxldCBzaWduMiA9IFwiXCI7XG4gIGlmIChudW1bMF0gPT09IFwiLVwiKSB7XG4gICAgc2lnbjIgPSBcIi1cIjtcbiAgICBudW0gPSBudW0uc3Vic3RyaW5nKDEpO1xuICB9IGVsc2UgaWYgKG51bVswXSA9PT0gXCIrXCIpIHtcbiAgICBudW0gPSBudW0uc3Vic3RyaW5nKDEpO1xuICB9XG4gIHdoaWxlIChudW1bMF0gPT09IFwiMFwiKVxuICAgIG51bSA9IG51bS5zdWJzdHJpbmcoMSk7XG4gIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgIG51bSA9IFwiMFwiO1xuICBlbHNlIGlmIChudW1bMF0gPT09IFwiLlwiKVxuICAgIG51bSA9IFwiMFwiICsgbnVtO1xuICBsZXQgcmVzdWx0ID0gdm9pZCAwO1xuICBpZiAob3B0aW9ucy5ub3RhdGlvbiA9PT0gXCJlbmdpbmVlcmluZ1wiKVxuICAgIHJlc3VsdCA9IHNlcmlhbGl6ZVNjaWVudGlmaWNOb3RhdGlvbk51bWJlcihudW0sIG9wdGlvbnMsIDMpO1xuICBlbHNlIGlmIChvcHRpb25zLm5vdGF0aW9uID09PSBcInNjaWVudGlmaWNcIilcbiAgICByZXN1bHQgPSBzZXJpYWxpemVTY2llbnRpZmljTm90YXRpb25OdW1iZXIobnVtLCBvcHRpb25zKTtcbiAgcmV0dXJuIHNpZ24yICsgKHJlc3VsdCA/PyBzZXJpYWxpemVBdXRvTm90YXRpb25OdW1iZXIobnVtLCBvcHRpb25zKSk7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVTY2llbnRpZmljTm90YXRpb25OdW1iZXIodmFsU3RyaW5nLCBvcHRpb25zLCBleHBNdWx0aXBsZSA9IDEpIHtcbiAgbGV0IG0gPSB2YWxTdHJpbmcubWF0Y2goL14oLiopW2V8RV0oWy0rXT9bMC05XSspJC8pO1xuICBpZiAoIW0pIHtcbiAgICBsZXQgc2lnbjIgPSBcIlwiO1xuICAgIGlmICh2YWxTdHJpbmdbMF0gPT09IFwiLVwiKSB7XG4gICAgICBzaWduMiA9IFwiLVwiO1xuICAgICAgdmFsU3RyaW5nID0gdmFsU3RyaW5nLnN1YnN0cmluZygxKTtcbiAgICB9IGVsc2UgaWYgKHZhbFN0cmluZ1swXSA9PT0gXCIrXCIpIHtcbiAgICAgIHZhbFN0cmluZyA9IHZhbFN0cmluZy5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIGlmICh2YWxTdHJpbmcuaW5kZXhPZihcIi5cIikgPCAwKSB7XG4gICAgICBpZiAodmFsU3RyaW5nLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YWxTdHJpbmcgPSBzaWduMiArIHZhbFN0cmluZyArIFwiZSswXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxTdHJpbmcgPSBzaWduMiArIHZhbFN0cmluZ1swXSArIFwiLlwiICsgdmFsU3RyaW5nLnNsaWNlKDEpICsgXCJlK1wiICsgKHZhbFN0cmluZy5sZW5ndGggLSAxKS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgW18sIHdob2xlLCBmcmFjdGlvbl0gPSB2YWxTdHJpbmcubWF0Y2goL14oLiopXFwuKC4qKSQvKTtcbiAgICAgIGlmICghZnJhY3Rpb24pXG4gICAgICAgIGZyYWN0aW9uID0gXCJcIjtcbiAgICAgIHdoaWxlICh3aG9sZS5zdGFydHNXaXRoKFwiMFwiKSlcbiAgICAgICAgd2hvbGUgPSB3aG9sZS5zdWJzdHJpbmcoMSk7XG4gICAgICBpZiAoIXdob2xlKSB7XG4gICAgICAgIHZhbFN0cmluZyA9IHNpZ24yICsgXCIwLlwiICsgZnJhY3Rpb24gKyBcImUrMFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsU3RyaW5nID0gc2lnbjIgKyB3aG9sZVswXSArIFwiLlwiICsgd2hvbGUuc2xpY2UoMSkgKyBmcmFjdGlvbiArIFwiZStcIiArICh3aG9sZS5sZW5ndGggLSAxKS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH1cbiAgICBtID0gdmFsU3RyaW5nLm1hdGNoKC9eKC4qKVtlfEVdKFstK10/WzAtOV0rKSQvKTtcbiAgfVxuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQobSk7XG4gIGlmICghbSlcbiAgICByZXR1cm4gc2VyaWFsaXplQXV0b05vdGF0aW9uTnVtYmVyKHZhbFN0cmluZywgb3B0aW9ucyk7XG4gIGxldCBleHBvbmVudCA9IHBhcnNlSW50KG1bMl0pO1xuICBsZXQgbWFudGlzc2EgPSBtWzFdO1xuICBpZiAoTWF0aC5hYnMoZXhwb25lbnQpICUgZXhwTXVsdGlwbGUgIT09IDApIHtcbiAgICBjb25zdCBhZGp1c3QgPSBleHBvbmVudCA+IDAgPyBleHBvbmVudCAlIGV4cE11bHRpcGxlIDogLSgoZXhwTXVsdGlwbGUgKyBleHBvbmVudCkgJSBleHBNdWx0aXBsZSk7XG4gICAgZXhwb25lbnQgPSBleHBvbmVudCA+PSAwID8gZXhwb25lbnQgLSBhZGp1c3QgOiBleHBvbmVudCArIGFkanVzdDtcbiAgICBsZXQgW18sIHdob2xlLCBmcmFjdGlvbl0gPSBtYW50aXNzYS5tYXRjaCgvXiguKilcXC4oLiopJC8pID8/IFtcbiAgICAgIFwiXCIsXG4gICAgICBtYW50aXNzYSxcbiAgICAgIFwiXCJcbiAgICBdO1xuICAgIG1hbnRpc3NhID0gd2hvbGUgKyAoZnJhY3Rpb24gKyBcIjAwMDAwMDAwMDAwMDAwMDAwXCIpLnNsaWNlKDAsIE1hdGguYWJzKGFkanVzdCkpICsgXCIuXCIgKyBmcmFjdGlvbi5zbGljZShNYXRoLmFicyhhZGp1c3QpKTtcbiAgfVxuICBjb25zdCBhdm9pZCA9IG9wdGlvbnMuYXZvaWRFeHBvbmVudHNJblJhbmdlO1xuICBpZiAoYXZvaWQgJiYgZXhwb25lbnQgPj0gYXZvaWRbMF0gJiYgZXhwb25lbnQgPD0gYXZvaWRbMV0pXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgbGV0IGZyYWN0aW9uYWxQYXJ0ID0gXCJcIjtcbiAgbGV0IHdob2xlUGFydCA9IG1hbnRpc3NhO1xuICBtID0gd2hvbGVQYXJ0Lm1hdGNoKC9eKC4qKVxcLiguKikkLyk7XG4gIGlmIChtKSB7XG4gICAgd2hvbGVQYXJ0ID0gbVsxXTtcbiAgICBmcmFjdGlvbmFsUGFydCA9IG1bMl07XG4gIH1cbiAgY29uc3QgZXhwU3RyaW5nID0gZXhwb25lbnQgIT09IDAgPyBmb3JtYXRFeHBvbmVudChOdW1iZXIoZXhwb25lbnQpLnRvU3RyaW5nKCksIG9wdGlvbnMpIDogXCJcIjtcbiAgaWYgKG9wdGlvbnMuZ3JvdXBTZXBhcmF0b3IpIHtcbiAgICB3aG9sZVBhcnQgPSB3aG9sZVBhcnQucmVwbGFjZShcbiAgICAgIC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLFxuICAgICAgb3B0aW9ucy5ncm91cFNlcGFyYXRvclxuICAgICk7XG4gICAgZnJhY3Rpb25hbFBhcnQgPSBmb3JtYXRGcmFjdGlvbmFsUGFydChmcmFjdGlvbmFsUGFydCwgb3B0aW9ucyk7XG4gIH1cbiAgaWYgKGZyYWN0aW9uYWxQYXJ0KVxuICAgIGZyYWN0aW9uYWxQYXJ0ID0gb3B0aW9ucy5kZWNpbWFsTWFya2VyICsgZnJhY3Rpb25hbFBhcnQ7XG4gIGlmICghZXhwU3RyaW5nKVxuICAgIHJldHVybiB3aG9sZVBhcnQgKyBmcmFjdGlvbmFsUGFydDtcbiAgaWYgKHdob2xlUGFydCA9PT0gXCIxXCIgJiYgIWZyYWN0aW9uYWxQYXJ0KVxuICAgIHJldHVybiBleHBTdHJpbmc7XG4gIHJldHVybiB3aG9sZVBhcnQgKyBmcmFjdGlvbmFsUGFydCArIG9wdGlvbnMuZXhwb25lbnRQcm9kdWN0ICsgZXhwU3RyaW5nO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplQXV0b05vdGF0aW9uTnVtYmVyKHZhbFN0cmluZywgb3B0aW9ucykge1xuICBsZXQgbSA9IHZhbFN0cmluZy5tYXRjaCgvXiguKilbZXxFXShbLStdP1swLTldKykkL2kpO1xuICBsZXQgZXhwb25lbnQgPSB2b2lkIDA7XG4gIGlmIChtPy5bMV0gJiYgbVsyXSkge1xuICAgIGV4cG9uZW50ID0gZm9ybWF0RXhwb25lbnQobVsyXSwgb3B0aW9ucyk7XG4gIH1cbiAgbGV0IHdob2xlUGFydCA9IG0/LlsxXSA/PyB2YWxTdHJpbmc7XG4gIGxldCBmcmFjdGlvbmFsUGFydCA9IFwiXCI7XG4gIG0gPSAoZXhwb25lbnQgPyBtWzFdIDogdmFsU3RyaW5nKS5tYXRjaCgvXiguKilcXC4oLiopJC8pO1xuICBpZiAobT8uWzFdICYmIG1bMl0pIHtcbiAgICB3aG9sZVBhcnQgPSBtWzFdO1xuICAgIGZyYWN0aW9uYWxQYXJ0ID0gbVsyXTtcbiAgfVxuICBpZiAob3B0aW9ucy5ncm91cFNlcGFyYXRvcikge1xuICAgIHdob2xlUGFydCA9IHdob2xlUGFydC5yZXBsYWNlKFxuICAgICAgL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csXG4gICAgICBvcHRpb25zLmdyb3VwU2VwYXJhdG9yXG4gICAgKTtcbiAgICBmcmFjdGlvbmFsUGFydCA9IGZvcm1hdEZyYWN0aW9uYWxQYXJ0KGZyYWN0aW9uYWxQYXJ0LCBvcHRpb25zKTtcbiAgfVxuICBpZiAoZnJhY3Rpb25hbFBhcnQpXG4gICAgZnJhY3Rpb25hbFBhcnQgPSBvcHRpb25zLmRlY2ltYWxNYXJrZXIgKyBmcmFjdGlvbmFsUGFydDtcbiAgaWYgKCFleHBvbmVudClcbiAgICByZXR1cm4gd2hvbGVQYXJ0ICsgZnJhY3Rpb25hbFBhcnQ7XG4gIGlmICh3aG9sZVBhcnQgPT09IFwiMVwiICYmICFmcmFjdGlvbmFsUGFydClcbiAgICByZXR1cm4gZXhwb25lbnQ7XG4gIHJldHVybiB3aG9sZVBhcnQgKyBmcmFjdGlvbmFsUGFydCArIG9wdGlvbnMuZXhwb25lbnRQcm9kdWN0ICsgZXhwb25lbnQ7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9sYXRleC1zeW50YXgvc2VyaWFsaXplci50c1xudmFyIEFDQ0VOVF9NT0RJRklFUlMgPSB7XG4gIGRlZzogKHMpID0+IGAke3N9XFxcXGRlZ3JlZWAsXG4gIHByaW1lOiAocykgPT4gYCR7c31ee1xcXFxwcmltZX1gLFxuICBkcHJpbWU6IChzKSA9PiBgJHtzfV57XFxcXGRvdWJsZXByaW1lfWAsXG4gIHJpbmc6IChzKSA9PiBgXFxcXG1hdGhyaW5neyR7c319YCxcbiAgaGF0OiAocykgPT4gYFxcXFxoYXR7JHtzfX1gLFxuICB0aWxkZTogKHMpID0+IGBcXFxcdGlsZGV7JHtzfX1gLFxuICB2ZWM6IChzKSA9PiBgXFxcXHZlY3ske3N9fWAsXG4gIGJhcjogKHMpID0+IGBcXFxcb3ZlcmxpbmV7JHtzfX1gLFxuICB1bmRlcmJhcjogKHMpID0+IGBcXFxcdW5kZXJsaW5leyR7c319YCxcbiAgZG90OiAocykgPT4gYFxcXFxkb3R7JHtzfX1gLFxuICBkZG90OiAocykgPT4gYFxcXFxkZG90eyR7c319YCxcbiAgdGRvdDogKHMpID0+IGBcXFxcZGRkb3R7JHtzfX1gLFxuICBxZG90OiAocykgPT4gYFxcXFxkZGRkb3R7JHtzfX1gLFxuICAvLyBTdXBwbGVtZW50YWxcbiAgYWN1dGU6IChzKSA9PiBgXFxcXGFjdXRleyR7c319YCxcbiAgZ3JhdmU6IChzKSA9PiBgXFxcXGdyYXZleyR7c319YCxcbiAgYnJldmU6IChzKSA9PiBgXFxcXGJyZXZleyR7c319YCxcbiAgY2hlY2s6IChzKSA9PiBgXFxcXGNoZWNreyR7c319YFxufTtcbnZhciBTVFlMRV9NT0RJRklFUlMgPSB7XG4gIHVwcmlnaHQ6IChzKSA9PiBgXFxcXG1hdGhybXske3N9fWAsXG4gIGl0YWxpYzogKHMpID0+IGBcXFxcbWF0aGl0eyR7c319YCxcbiAgYm9sZDogKHMpID0+IGBcXFxcbWF0aGJmeyR7c319YCxcbiAgc2NyaXB0OiAocykgPT4gYFxcXFxtYXRoc2NyeyR7c319YCxcbiAgZnJha3R1cjogKHMpID0+IGBcXFxcbWF0aGZyYWt7JHtzfX1gLFxuICAvLyBOb3RlIFVuaWNvZGUgdXNlcyAnZnJha3R1cicgZm9yICdnb3RoaWMnXG4gIGRvdWJsZXN0cnVjazogKHMpID0+IGBcXFxcbWF0aGJieyR7c319YCxcbiAgLy8gVW5pY29kZSB1c2VzICdkb3VibGUtc3RydWNrJyBmb3IgJ2JsYWNrYm9hcmQnXG4gIC8vIFN1cHBsZW1lbnRhbFxuICBibGFja2JvYXJkOiAocykgPT4gYFxcXFxtYXRoYmJ7JHtzfX1gLFxuICBjYWxsaWdyYXBoaWM6IChzKSA9PiBgXFxcXG1hdGhjYWx7JHtzfX1gLFxuICBnb3RoaWM6IChzKSA9PiBgXFxcXG1hdGhmcmFreyR7c319YCxcbiAgc2Fuc3NlcmlmOiAocykgPT4gYFxcXFxtYXRoc2Z7JHtzfX1gLFxuICBtb25vc3BhY2U6IChzKSA9PiBgXFxcXG1hdGh0dHske3N9fWBcbn07XG52YXIgU2VyaWFsaXplciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucywgZGljdGlvbmFyeTIsIG9uRXJyb3IpIHtcbiAgICB0aGlzLmxldmVsID0gLTE7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAob3B0aW9ucy5pbnZpc2libGVNdWx0aXBseSkge1xuICAgICAgaWYgKCEvIzEvLnRlc3Qob3B0aW9ucy5pbnZpc2libGVNdWx0aXBseSkgfHwgIS8jMi8udGVzdChvcHRpb25zLmludmlzaWJsZU11bHRpcGx5KSkge1xuICAgICAgICBvbkVycm9yKFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZXZlcml0eTogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBbXCJleHBlY3RlZC1hcmd1bWVudFwiLCBcImludmlzaWJsZU11bHRpcGx5XCJdXG4gICAgICAgICAgfVxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5vbkVycm9yID0gb25FcnJvcjtcbiAgICB0aGlzLmRpY3Rpb25hcnkgPSBkaWN0aW9uYXJ5MjtcbiAgICB0aGlzLmNhbm9uaWNhbCA9IHZvaWQgMDtcbiAgfVxuICB1cGRhdGVPcHRpb25zKG9wdCkge1xuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMpKVxuICAgICAgaWYgKGsgaW4gb3B0KVxuICAgICAgICB0aGlzLm9wdGlvbnNba10gPSBvcHRba107XG4gIH1cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZSB0aGUgZXhwcmVzc2lvbiwgYW5kIGlmIHRoZSBleHByZXNzaW9uIGlzIGFuIG9wZXJhdG9yXG4gICAqIG9mIHByZWNlZGVuY2UgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHByZWMsIHdyYXAgaXQgaW4gc29tZSBwYXJlbi5cbiAgICogQHRvZG86IGRvbid0IHdyYXAgQWJzLCBGbG9vciwgQ2VpbCwgRGVsaW1pdGVyXG4gICAqL1xuICB3cmFwKGV4cHIsIHByZWMpIHtcbiAgICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIGlmIChwcmVjID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiB0aGlzLndyYXBTdHJpbmcoXG4gICAgICAgIHRoaXMuc2VyaWFsaXplKGV4cHIpLFxuICAgICAgICB0aGlzLm9wdGlvbnMuZ3JvdXBTdHlsZShleHByLCB0aGlzLmxldmVsICsgMSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZXhwciA9PT0gXCJudW1iZXJcIiB8fCBpc051bWJlck9iamVjdChleHByKSB8fCB0eXBlb2YgZXhwciA9PT0gXCJzdHJpbmdcIiB8fCBpc1N5bWJvbE9iamVjdChleHByKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VyaWFsaXplKGV4cHIpO1xuICAgIH1cbiAgICBjb25zdCBuYW1lID0gaGVhZChleHByKTtcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgJiYgbmFtZSAhPT0gXCJEZWxpbWl0ZXJcIiAmJiBuYW1lICE9PSBcIlN1YnNjcmlwdFwiKSB7XG4gICAgICBjb25zdCBkZWYgPSB0aGlzLmRpY3Rpb25hcnkuaWRzLmdldChuYW1lKTtcbiAgICAgIGlmIChkZWYgJiYgKGRlZi5raW5kID09PSBcInN5bWJvbFwiIHx8IGRlZi5raW5kID09PSBcInByZWZpeFwiIHx8IGRlZi5raW5kID09PSBcImluZml4XCIgfHwgZGVmLmtpbmQgPT09IFwicG9zdGZpeFwiKSAmJiBkZWYucHJlY2VkZW5jZSA8IHByZWMpXG4gICAgICAgIHJldHVybiB0aGlzLndyYXBTdHJpbmcoXG4gICAgICAgICAgdGhpcy5zZXJpYWxpemUoZXhwciksXG4gICAgICAgICAgdGhpcy5vcHRpb25zLmFwcGx5RnVuY3Rpb25TdHlsZShleHByLCB0aGlzLmxldmVsKVxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zZXJpYWxpemUoZXhwcik7XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoaXMgaXMgYSBcInNob3J0XCIgZXhwcmVzc2lvbiwgd3JhcCBpdC5cbiAgICogRG8gbm90IHdyYXAgaWRlbnRpZmllcnMsIHBvc2l0aXZlIG51bWJlcnMgb3IgZnVuY3Rpb25zLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCBieSB0aGUgc2VyaWFsaXplciBmb3IgcG93ZXIgYW5kIGRpdmlzaW9uIChpLmUuIFwiKGErMSkvYlwiKVxuICAgKlxuICAgKi9cbiAgd3JhcFNob3J0KGV4cHIpIHtcbiAgICBpZiAoZXhwciA9PT0gbnVsbClcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIGNvbnN0IGV4cHJTdHIgPSB0aGlzLnNlcmlhbGl6ZShleHByKTtcbiAgICBpZiAoc3ltYm9sKGV4cHIpICE9PSBudWxsKVxuICAgICAgcmV0dXJuIGV4cHJTdHI7XG4gICAgaWYgKGhlYWQoZXhwcikgPT09IFwiRGVsaW1pdGVyXCIgJiYgbm9wcyhleHByKSA9PT0gMSlcbiAgICAgIHJldHVybiBleHByU3RyO1xuICAgIGNvbnN0IGlzTnVtID0gaXNOdW1iZXJFeHByZXNzaW9uKGV4cHIpO1xuICAgIGlmIChpc051bSAmJiAhL14oLXxcXC4pLy50ZXN0KGV4cHJTdHIpKVxuICAgICAgcmV0dXJuIGV4cHJTdHI7XG4gICAgY29uc3QgaCA9IGhlYWQoZXhwcik7XG4gICAgaWYgKGggIT09IFwiQWRkXCIgJiYgaCAhPT0gXCJOZWdhdGVcIiAmJiBoICE9PSBcIlN1YnRyYWN0XCIgJiYgaCAhPT0gXCJQbHVzTWludXNcIiAmJiBoICE9PSBcIk11bHRpcGx5XCIpXG4gICAgICByZXR1cm4gZXhwclN0cjtcbiAgICByZXR1cm4gdGhpcy53cmFwU3RyaW5nKFxuICAgICAgZXhwclN0cixcbiAgICAgIHRoaXMub3B0aW9ucy5ncm91cFN0eWxlKGV4cHIsIHRoaXMubGV2ZWwgKyAxKVxuICAgICk7XG4gIH1cbiAgd3JhcFN0cmluZyhzLCBzdHlsZSwgZmVuY2UpIHtcbiAgICBpZiAoc3R5bGUgPT09IFwibm9uZVwiKVxuICAgICAgcmV0dXJuIHM7XG4gICAgaWYgKGZlbmNlID09PSB2b2lkIDApXG4gICAgICBmZW5jZSA9IFwiKClcIjtcbiAgICBjb25zdCBvcGVuRmVuY2UgPSBmZW5jZT8uWzBdID8/IFwiLlwiO1xuICAgIGNvbnN0IGNsb3NlRmVuY2UgPSBmZW5jZT8uWzFdID8/IFwiLlwiO1xuICAgIGlmICgob3BlbkZlbmNlID09PSBcIi5cIiB8fCBjbG9zZUZlbmNlID09PSBcIi5cIikgJiYgc3R5bGUgPT09IFwicGFyZW5cIilcbiAgICAgIHN0eWxlID0gXCJsZWZ0cmlnaHRcIjtcbiAgICBpZiAoc3R5bGUgPT09IFwibGVmdHJpZ2h0XCIpXG4gICAgICByZXR1cm4gYFxcXFxsZWZ0JHtvcGVuRmVuY2V9JHtzfVxcXFxyaWdodCR7Y2xvc2VGZW5jZX19YDtcbiAgICBpZiAoc3R5bGUgPT09IFwiYmlnXCIpXG4gICAgICByZXR1cm4gYCR7b3BlbkZlbmNlID09PSBcIi5cIiA/IFwiXCIgOiBgXFxcXEJpZ2wke29wZW5GZW5jZX1gfSR7c30ke2Nsb3NlRmVuY2UgPT09IFwiLlwiID8gXCJcIiA6IGBcXFxcQmlnciR7Y2xvc2VGZW5jZX1gfSlgO1xuICAgIHJldHVybiBvcGVuRmVuY2UgKyBzICsgY2xvc2VGZW5jZTtcbiAgfVxuICB3cmFwQXJndW1lbnRzKGV4cHIpIHtcbiAgICByZXR1cm4gdGhpcy53cmFwU3RyaW5nKFxuICAgICAgKG9wcyhleHByKSA/PyBbXSkubWFwKCh4KSA9PiB0aGlzLnNlcmlhbGl6ZSh4KSkuam9pbihcIiwgXCIpLFxuICAgICAgdGhpcy5vcHRpb25zLmFwcGx5RnVuY3Rpb25TdHlsZShleHByLCB0aGlzLmxldmVsKVxuICAgICk7XG4gIH1cbiAgc2VyaWFsaXplU3ltYm9sKGV4cHIsIGRlZikge1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydCh0eXBlb2YgZXhwciA9PT0gXCJzdHJpbmdcIiB8fCBpc1N5bWJvbE9iamVjdChleHByKSk7XG4gICAgaWYgKGRlZj8ua2luZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplSWRlbnRpZmllcihzeW1ib2woZXhwcikgPz8gXCJcIikgPz8gXCJcIjtcbiAgICB9XG4gICAgcmV0dXJuIGRlZj8uc2VyaWFsaXplPy4odGhpcywgZXhwcikgPz8gc2VyaWFsaXplSWRlbnRpZmllcihzeW1ib2woZXhwcikpID8/IFwiXCI7XG4gIH1cbiAgc2VyaWFsaXplRnVuY3Rpb24oZXhwciwgZGVmKSB7XG4gICAgaWYgKGRlZj8uc2VyaWFsaXplKVxuICAgICAgcmV0dXJuIGRlZi5zZXJpYWxpemUodGhpcywgZXhwcik7XG4gICAgY29uc3QgaCA9IGhlYWQoZXhwcik7XG4gICAgaWYgKHR5cGVvZiBoID09PSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUlkZW50aWZpZXIoaCwgXCJhdXRvXCIpICsgdGhpcy53cmFwQXJndW1lbnRzKGV4cHIpO1xuICAgIGNvbnN0IGFyZ3MgPSBvcHMoZXhwcikgPz8gW107XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gam9pbkxhdGV4KFtcbiAgICAgICAgdGhpcy5zZXJpYWxpemUoYXJnc1swXSksXG4gICAgICAgIFwiXFxcXHJoZFwiLFxuICAgICAgICB0aGlzLndyYXBTdHJpbmcoXG4gICAgICAgICAgdGhpcy5zZXJpYWxpemUoaCksXG4gICAgICAgICAgdGhpcy5vcHRpb25zLmFwcGx5RnVuY3Rpb25TdHlsZShleHByLCB0aGlzLmxldmVsKVxuICAgICAgICApXG4gICAgICBdKTtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLm9wdGlvbnMuYXBwbHlGdW5jdGlvblN0eWxlKGV4cHIsIHRoaXMubGV2ZWwpO1xuICAgIHJldHVybiBqb2luTGF0ZXgoW1xuICAgICAgXCJcXFxcb3BlcmF0b3JuYW1le2FwcGx5fVwiLFxuICAgICAgdGhpcy53cmFwU3RyaW5nKFxuICAgICAgICB0aGlzLnNlcmlhbGl6ZShoKSArIFwiLCBcIiArIHRoaXMuc2VyaWFsaXplKFtcIkxpc3RcIiwgLi4uYXJnc10pLFxuICAgICAgICBzdHlsZVxuICAgICAgKVxuICAgIF0pO1xuICB9XG4gIHNlcmlhbGl6ZURpY3Rpb25hcnkoZGljdCkge1xuICAgIHJldHVybiBgXFxcXGxlZnRcXFxcbGJyYWNrXFxcXGJlZ2lue2FycmF5fXtsbGx9JHtPYmplY3Qua2V5cyhkaWN0KS5tYXAoKHgpID0+IHtcbiAgICAgIHJldHVybiBgXFxcXHRleHRiZnske3h9fSAmIFxcXFxyaWdodGFycm93ICYgJHt0aGlzLnNlcmlhbGl6ZShkaWN0W3hdKX1gO1xuICAgIH0pLmpvaW4oXCJcXFxcXFxcXFwiKX1cXFxcZW5ke2FycmF5fVxcXFxyaWdodFxcXFxyYnJhY2tgO1xuICB9XG4gIHNlcmlhbGl6ZShleHByLCBvcHRpb25zKSB7XG4gICAgaWYgKGV4cHIgPT09IG51bGwgfHwgZXhwciA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgb3B0aW9ucyA/PyAob3B0aW9ucyA9IHt9KTtcbiAgICBvcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgaWYgKCEoXCJjYW5vbmljYWxcIiBpbiBvcHRpb25zKSlcbiAgICAgIG9wdGlvbnMuY2Fub25pY2FsID0gdHJ1ZTtcbiAgICBjb25zdCBzYXZlZENhbm9uaWNhbCA9IHRoaXMuY2Fub25pY2FsO1xuICAgIGlmICh0aGlzLmNhbm9uaWNhbCA9PT0gdm9pZCAwKVxuICAgICAgdGhpcy5jYW5vbmljYWwgPSBvcHRpb25zLmNhbm9uaWNhbDtcbiAgICB0aGlzLmxldmVsICs9IDE7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG51bWVyaWNWYWx1ZSA9IHNlcmlhbGl6ZU51bWJlcihleHByLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICBpZiAobnVtZXJpY1ZhbHVlKVxuICAgICAgICAgIHJldHVybiBudW1lcmljVmFsdWU7XG4gICAgICAgIGNvbnN0IHMgPSBzdHJpbmdWYWx1ZShleHByKTtcbiAgICAgICAgaWYgKHMgIT09IG51bGwpXG4gICAgICAgICAgcmV0dXJuIGBcXFxcdGV4dHske3N9fWA7XG4gICAgICAgIGNvbnN0IGRpY3QgPSBkaWN0aW9uYXJ5KGV4cHIpO1xuICAgICAgICBpZiAoZGljdCAhPT0gbnVsbClcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVEaWN0aW9uYXJ5KGRpY3QpO1xuICAgICAgICBjb25zdCBzeW1ib2xOYW1lID0gc3ltYm9sKGV4cHIpO1xuICAgICAgICBpZiAoc3ltYm9sTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNlcmlhbGl6ZVN5bWJvbChcbiAgICAgICAgICAgIGV4cHIsXG4gICAgICAgICAgICB0aGlzLmRpY3Rpb25hcnkuaWRzLmdldChzeW1ib2xOYW1lKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm5OYW1lID0gaGVhZE5hbWUoZXhwcik7XG4gICAgICAgIGlmIChmbk5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVGdW5jdGlvbihleHByLCB0aGlzLmRpY3Rpb25hcnkuaWRzLmdldChmbk5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVhZChleHByKSAhPT0gbnVsbClcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVGdW5jdGlvbihleHByKTtcbiAgICAgICAgdGhpcy5vbkVycm9yKFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzZXZlcml0eTogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBbXG4gICAgICAgICAgICAgIFwic3ludGF4LWVycm9yXCIsXG4gICAgICAgICAgICAgIGV4cHIgPyBKU09OLnN0cmluZ2lmeShleHByKSA6IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIF0pO1xuICAgICAgfSkoKTtcbiAgICAgIHRoaXMubGV2ZWwgLT0gMTtcbiAgICAgIHRoaXMuY2Fub25pY2FsID0gc2F2ZWRDYW5vbmljYWw7XG4gICAgICByZXR1cm4gcmVzdWx0ID8/IFwiXCI7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgIH1cbiAgICB0aGlzLmxldmVsIC09IDE7XG4gICAgdGhpcy5jYW5vbmljYWwgPSBzYXZlZENhbm9uaWNhbDtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBhcHBseUZ1bmN0aW9uU3R5bGUoZXhwciwgbGV2ZWwpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwcGx5RnVuY3Rpb25TdHlsZShleHByLCBsZXZlbCk7XG4gIH1cbiAgZ3JvdXBTdHlsZShleHByLCBsZXZlbCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ3JvdXBTdHlsZShleHByLCBsZXZlbCk7XG4gIH1cbiAgcm9vdFN0eWxlKGV4cHIsIGxldmVsKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yb290U3R5bGUoZXhwciwgbGV2ZWwpO1xuICB9XG4gIGZyYWN0aW9uU3R5bGUoZXhwciwgbGV2ZWwpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmZyYWN0aW9uU3R5bGUoZXhwciwgbGV2ZWwpO1xuICB9XG4gIGxvZ2ljU3R5bGUoZXhwciwgbGV2ZWwpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxvZ2ljU3R5bGUoZXhwciwgbGV2ZWwpO1xuICB9XG4gIHBvd2VyU3R5bGUoZXhwciwgbGV2ZWwpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnBvd2VyU3R5bGUoZXhwciwgbGV2ZWwpO1xuICB9XG4gIG51bWVyaWNTZXRTdHlsZShleHByLCBsZXZlbCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMubnVtZXJpY1NldFN0eWxlKGV4cHIsIGxldmVsKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHNwZWNpYWxOYW1lKHMpIHtcbiAgY29uc3QgcHJlZml4ID0gcy5tYXRjaCgvXihbXl9dKykvKT8uWzFdID8/IFwiXCI7XG4gIGxldCBpID0gU1lNQk9MUy5maW5kSW5kZXgoKHgpID0+IHByZWZpeCA9PT0geFswXSk7XG4gIGlmIChpID49IDApXG4gICAgcmV0dXJuIFtTWU1CT0xTW2ldWzFdLCBzLnN1YnN0cmluZyhTWU1CT0xTW2ldWzBdLmxlbmd0aCldO1xuICBjb25zdCBESUdJVFMgPSB7XG4gICAgemVybzogXCIwXCIsXG4gICAgb25lOiBcIjFcIixcbiAgICB0d286IFwiMlwiLFxuICAgIHRocmVlOiBcIjNcIixcbiAgICBmb3VyOiBcIjRcIixcbiAgICBmaXZlOiBcIjVcIixcbiAgICBzaXg6IFwiNlwiLFxuICAgIHNldmVuOiBcIjdcIixcbiAgICBlaWdodDogXCI4XCIsXG4gICAgbmluZTogXCI5XCIsXG4gICAgdGVuOiBcIjEwXCJcbiAgfTtcbiAgaSA9IE9iamVjdC5rZXlzKERJR0lUUykuZmluZEluZGV4KCh4KSA9PiBzLnN0YXJ0c1dpdGgoeCkpO1xuICBpZiAoaSA+PSAwKSB7XG4gICAgY29uc3Qga2V5ID0gT2JqZWN0LmtleXMoRElHSVRTKVtpXTtcbiAgICByZXR1cm4gW0RJR0lUU1trZXldLCBzLnN1YnN0cmluZyhrZXkubGVuZ3RoKV07XG4gIH1cbiAgY29uc3QgY29kZSA9IHMuY29kZVBvaW50QXQoMCk7XG4gIGkgPSBTWU1CT0xTLmZpbmRJbmRleCgoeCkgPT4geFsyXSA9PT0gY29kZSk7XG4gIGlmIChpID49IDApXG4gICAgcmV0dXJuIFtTWU1CT0xTW2ldWzFdLCBzLnN1YnN0cmluZygxKV07XG4gIGNvbnN0IEVYVFJBX1NZTUJPTFMgPSB7XG4gICAgcGx1czogXCIrXCIsXG4gICAgbWludXM6IFwiLVwiLFxuICAgIHBtOiBcIlxcXFxwbVwiLFxuICAgIGFzdDogXCJcXFxcYXN0XCIsXG4gICAgZGFnOiBcIlxcXFxkYWdcIixcbiAgICBkZGFnOiBcIlxcXFxkZGFnXCIsXG4gICAgaGFzaDogXCJcXFxcI1wiLFxuICAgIGJvdHRvbTogXCJcXFxcYm90XCIsXG4gICAgdG9wOiBcIlxcXFx0b3BcIixcbiAgICBidWxsZXQ6IFwiXFxcXGJ1bGxldFwiLFxuICAgIGNpcmNsZTogXCJcXFxcY2lyY1wiLFxuICAgIGRpYW1vbmQ6IFwiXFxcXGRpYW1vbmRcIixcbiAgICB0aW1lczogXCJcXFxcdGltZXNcIixcbiAgICBzcXVhcmU6IFwiXFxcXHNxdWFyZVwiLFxuICAgIHN0YXI6IFwiXFxcXHN0YXJcIlxuICB9O1xuICBpID0gT2JqZWN0LmtleXMoRVhUUkFfU1lNQk9MUykuZmluZEluZGV4KCh4KSA9PiBwcmVmaXggPT09IHgpO1xuICBpZiAoaSA+PSAwKSB7XG4gICAgY29uc3Qga2V5ID0gT2JqZWN0LmtleXMoRVhUUkFfU1lNQk9MUylbaV07XG4gICAgcmV0dXJuIFtFWFRSQV9TWU1CT0xTW2tleV0sIHMuc3Vic3RyaW5nKGtleS5sZW5ndGgpXTtcbiAgfVxuICByZXR1cm4gW3ByZWZpeCwgcy5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCldO1xufVxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnMocykge1xuICBsZXQgW2JvZHksIHJlc3RdID0gc3BlY2lhbE5hbWUocyk7XG4gIGNvbnN0IGFjY2VudCA9IFtdO1xuICB3aGlsZSAocmVzdC5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgbSA9IHJlc3QubWF0Y2goL15fKFthLXpBLVpdKykoLiopLyk7XG4gICAgaWYgKCFtKVxuICAgICAgYnJlYWs7XG4gICAgaWYgKCFBQ0NFTlRfTU9ESUZJRVJTW21bMV1dKVxuICAgICAgYnJlYWs7XG4gICAgYWNjZW50LnB1c2gobVsxXSk7XG4gICAgcmVzdCA9IG1bMl07XG4gIH1cbiAgY29uc3Qgc3R5bGVzID0gW107XG4gIHdoaWxlIChyZXN0Lmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBtID0gcmVzdC5tYXRjaCgvXl8oW2EtekEtWl0rKSguKikvKTtcbiAgICBpZiAoIW0pXG4gICAgICBicmVhaztcbiAgICBpZiAoIVNUWUxFX01PRElGSUVSU1ttWzFdXSlcbiAgICAgIGJyZWFrO1xuICAgIHN0eWxlcy5wdXNoKG1bMV0pO1xuICAgIHJlc3QgPSBtWzJdO1xuICB9XG4gIHJldHVybiBbYm9keSwgYWNjZW50LCBzdHlsZXMsIHJlc3RdO1xufVxuZnVuY3Rpb24gcGFyc2VJZGVudGlmaWVyQm9keTIocywgdG9wTGV2ZWwgPSB0cnVlLCBzdHlsZSA9IFwiYXV0b1wiKSB7XG4gIGxldCBbYm9keSwgYWNjZW50cywgc3R5bGVzLCByZXN0XSA9IHBhcnNlTW9kaWZpZXJzKHMpO1xuICBmb3IgKGNvbnN0IGFjY2VudCBvZiBhY2NlbnRzKSB7XG4gICAgaWYgKEFDQ0VOVF9NT0RJRklFUlNbYWNjZW50XSlcbiAgICAgIGJvZHkgPSBBQ0NFTlRfTU9ESUZJRVJTW2FjY2VudF0oYm9keSk7XG4gIH1cbiAgaWYgKHRvcExldmVsKSB7XG4gICAgY29uc3Qgc3VwcyA9IFtdO1xuICAgIGNvbnN0IHN1YnMyID0gW107XG4gICAgY29uc3QgbSA9IGJvZHkubWF0Y2goL14oW15cXGRdLio/KShcXGQrKSQvKTtcbiAgICBpZiAobSkge1xuICAgICAgc3ViczIucHVzaChtWzJdKTtcbiAgICAgIGJvZHkgPSBtWzFdO1xuICAgIH1cbiAgICB3aGlsZSAocmVzdC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAocmVzdC5zdGFydHNXaXRoKFwiX19cIikpIHtcbiAgICAgICAgY29uc3QgW3N1cCwgcmVzdDJdID0gcGFyc2VJZGVudGlmaWVyQm9keTIoXG4gICAgICAgICAgcmVzdC5zdWJzdHJpbmcoMiksXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJub25lXCJcbiAgICAgICAgKTtcbiAgICAgICAgc3Vwcy5wdXNoKHN1cCk7XG4gICAgICAgIHJlc3QgPSByZXN0MjtcbiAgICAgIH0gZWxzZSBpZiAocmVzdC5zdGFydHNXaXRoKFwiX1wiKSkge1xuICAgICAgICBjb25zdCBbc3ViMiwgcmVzdDJdID0gcGFyc2VJZGVudGlmaWVyQm9keTIoXG4gICAgICAgICAgcmVzdC5zdWJzdHJpbmcoMSksXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJub25lXCJcbiAgICAgICAgKTtcbiAgICAgICAgc3ViczIucHVzaChzdWIyKTtcbiAgICAgICAgcmVzdCA9IHJlc3QyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdXBzLmxlbmd0aCA+IDApXG4gICAgICBib2R5ID0gYCR7Ym9keX1eeyR7c3Vwcy5qb2luKFwiLFwiKX19YDtcbiAgICBpZiAoc3ViczIubGVuZ3RoID4gMClcbiAgICAgIGJvZHkgPSBgJHtib2R5fV97JHtzdWJzMi5qb2luKFwiLFwiKX19YDtcbiAgfVxuICBmb3IgKGNvbnN0IHN0eWxlMiBvZiBzdHlsZXMpIHtcbiAgICBpZiAoU1RZTEVfTU9ESUZJRVJTW3N0eWxlMl0pXG4gICAgICBib2R5ID0gU1RZTEVfTU9ESUZJRVJTW3N0eWxlMl0oYm9keSk7XG4gIH1cbiAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDAgJiYgc3R5bGUgIT09IFwibm9uZVwiKSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSBcImF1dG9cIjpcbiAgICAgICAgaWYgKGNvdW50VG9rZW5zKGJvZHkpID4gMSlcbiAgICAgICAgICBib2R5ID0gYFxcXFxtYXRocm17JHtib2R5fX1gO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJvcGVyYXRvclwiOlxuICAgICAgICBib2R5ID0gYFxcXFxvcGVyYXRvcm5hbWV7JHtib2R5fX1gO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJpdGFsaWNcIjpcbiAgICAgICAgYm9keSA9IGBcXFxcbWF0aGl0eyR7Ym9keX19YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidXByaWdodFwiOlxuICAgICAgICBib2R5ID0gYFxcXFxtYXRocm17JHtib2R5fX1gO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtib2R5LCByZXN0XTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUlkZW50aWZpZXIocywgc3R5bGUgPSBcImF1dG9cIikge1xuICBpZiAocyA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKE9OTFlfRU1PSklTLnRlc3QocykpXG4gICAgcmV0dXJuIHM7XG4gIGNvbnN0IG0gPSBzLm1hdGNoKC9eKF8rKSguKikvKTtcbiAgaWYgKG0pIHtcbiAgICBjb25zdCBbYm9keTIsIHJlc3QyXSA9IHBhcnNlSWRlbnRpZmllckJvZHkyKG1bMl0sIHRydWUsIFwibm9uZVwiKTtcbiAgICByZXR1cm4gYFxcXFxvcGVyYXRvcm5hbWV7JHtcIlxcXFxfXCIucmVwZWF0KG1bMV0ubGVuZ3RoKSArIGJvZHkyICsgcmVzdDJ9fWA7XG4gIH1cbiAgY29uc3QgW2JvZHksIHJlc3RdID0gcGFyc2VJZGVudGlmaWVyQm9keTIocywgdHJ1ZSwgc3R5bGUpO1xuICBpZiAocmVzdC5sZW5ndGggPiAwKVxuICAgIHJldHVybiBgXFxcXG9wZXJhdG9ybmFtZXske3N9fWA7XG4gIHJldHVybiBib2R5O1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGF0ZXgtc3ludGF4L2xhdGV4LXN5bnRheC50c1xudmFyIERFRkFVTFRfU0VSSUFMSVpFX0xBVEVYX09QVElPTlMgPSB7XG4gIGludmlzaWJsZU11bHRpcGx5OiBcIlwiLFxuICAvLyAnXFxcXGNkb3QnLFxuICBpbnZpc2libGVQbHVzOiBcIlwiLFxuICAvLyAnKycsXG4gIC8vIGludmlzaWJsZUFwcGx5OiAnJyxcbiAgbXVsdGlwbHk6IFwiXFxcXHRpbWVzXCIsXG4gIG1pc3NpbmdTeW1ib2w6IFwiXFxcXGJsYWNrc3F1YXJlXCIsXG4gIC8vIG9wZW5Hcm91cDogJygnLFxuICAvLyBjbG9zZUdyb3VwOiAnKScsXG4gIC8vIGRpdmlkZTogJ1xcXFxmcmFjeyMxfXsjMn0nLFxuICAvLyBzdWJ0cmFjdDogJyMxLSMyJyxcbiAgLy8gYWRkOiAnIzErIzInLFxuICAvLyBuZWdhdGU6ICctIzEnLFxuICAvLyBzcXVhcmVSb290OiAnXFxcXHNxcnR7IzF9JyxcbiAgLy8gbnRoUm9vdDogJ1xcXFxzcXJ0WyMyXXsjMX0nLFxuICBhcHBseUZ1bmN0aW9uU3R5bGU6IGdldEFwcGx5RnVuY3Rpb25TdHlsZSxcbiAgZ3JvdXBTdHlsZTogZ2V0R3JvdXBTdHlsZSxcbiAgcm9vdFN0eWxlOiBnZXRSb290U3R5bGUsXG4gIGZyYWN0aW9uU3R5bGU6IGdldEZyYWN0aW9uU3R5bGUsXG4gIGxvZ2ljU3R5bGU6IGdldExvZ2ljU3R5bGUsXG4gIHBvd2VyU3R5bGU6IGdldFBvd2VyU3R5bGUsXG4gIG51bWVyaWNTZXRTdHlsZTogZ2V0TnVtZXJpY1NldFN0eWxlXG59O1xudmFyIExhdGV4U3ludGF4ID0gY2xhc3MgX0xhdGV4U3ludGF4IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGNvbnN0IG9uRXJyb3IgPSAod2FybmluZ3MpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qgd2FybmluZyBvZiB3YXJuaW5ncylcbiAgICAgICAgICBjb25zb2xlLndhcm4od2FybmluZy5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9O1xuICAgIHRoaXMub25FcnJvciA9IG9wdGlvbnMub25FcnJvciA/PyBvbkVycm9yO1xuICAgIHRoaXMuY29tcHV0ZUVuZ2luZSA9IG9wdGlvbnMuY29tcHV0ZUVuZ2luZTtcbiAgICBjb25zdCBvcHRzID0geyAuLi5vcHRpb25zIH07XG4gICAgZGVsZXRlIG9wdHMuZGljdGlvbmFyeTtcbiAgICBkZWxldGUgb3B0cy5vbkVycm9yO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIC4uLkRFRkFVTFRfTEFURVhfTlVNQkVSX09QVElPTlMsXG4gICAgICAuLi5ERUZBVUxUX1BBUlNFX0xBVEVYX09QVElPTlMsXG4gICAgICAuLi5ERUZBVUxUX1NFUklBTElaRV9MQVRFWF9PUFRJT05TLFxuICAgICAgLi4ub3B0c1xuICAgIH07XG4gICAgdGhpcy5fZGljdGlvbmFyeUlucHV0ID0gb3B0aW9ucy5kaWN0aW9uYXJ5ID8/IF9MYXRleFN5bnRheC5nZXREaWN0aW9uYXJ5KCk7XG4gICAgdGhpcy5fZGljdGlvbmFyeSA9IGluZGV4TGF0ZXhEaWN0aW9uYXJ5KFxuICAgICAgdGhpcy5fZGljdGlvbmFyeUlucHV0LFxuICAgICAgKHNpZykgPT4gdGhpcy5vbkVycm9yKFtzaWddKVxuICAgICk7XG4gIH1cbiAgZ2V0IGRpY3Rpb25hcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RpY3Rpb25hcnlJbnB1dDtcbiAgfVxuICBzZXQgZGljdGlvbmFyeSh2YWwpIHtcbiAgICB0aGlzLl9kaWN0aW9uYXJ5SW5wdXQgPSB2YWw7XG4gICAgdGhpcy5fZGljdGlvbmFyeSA9IGluZGV4TGF0ZXhEaWN0aW9uYXJ5KHZhbCwgKHNpZykgPT4gdGhpcy5vbkVycm9yKFtzaWddKSk7XG4gIH1cbiAgdXBkYXRlT3B0aW9ucyhvcHQpIHtcbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModGhpcy5vcHRpb25zKSlcbiAgICAgIGlmIChrIGluIG9wdClcbiAgICAgICAgdGhpcy5vcHRpb25zW2tdID0gb3B0W2tdO1xuICAgIHRoaXMuc2VyaWFsaXplci51cGRhdGVPcHRpb25zKG9wdCk7XG4gIH1cbiAgc3RhdGljIGdldERpY3Rpb25hcnkoY2F0ZWdvcnkgPSBcImFsbFwiKSB7XG4gICAgaWYgKGNhdGVnb3J5ID09PSBcImFsbFwiKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgZG9tYWluIG9mIE9iamVjdC5rZXlzKERFRkFVTFRfTEFURVhfRElDVElPTkFSWSkpXG4gICAgICAgIGlmIChERUZBVUxUX0xBVEVYX0RJQ1RJT05BUllbZG9tYWluXSlcbiAgICAgICAgICByZXN1bHQucHVzaCguLi5ERUZBVUxUX0xBVEVYX0RJQ1RJT05BUllbZG9tYWluXSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpZiAoIURFRkFVTFRfTEFURVhfRElDVElPTkFSWVtjYXRlZ29yeV0pXG4gICAgICByZXR1cm4gW107XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoWy4uLkRFRkFVTFRfTEFURVhfRElDVElPTkFSWVtjYXRlZ29yeV1dKTtcbiAgfVxuICBwYXJzZShsYXRleCkge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBfUGFyc2VyKFxuICAgICAgdG9rZW5pemUobGF0ZXgsIFtdKSxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIHRoaXMuX2RpY3Rpb25hcnksXG4gICAgICB0aGlzLmNvbXB1dGVFbmdpbmVcbiAgICApO1xuICAgIGxldCBleHByID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgIGlmICghcGFyc2VyLmF0RW5kKSB7XG4gICAgICBjb25zdCBvcERlZnMgPSBwYXJzZXIucGVla0RlZmluaXRpb25zKFwiaW5maXhcIik7XG4gICAgICBpZiAob3BEZWZzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBwYXJzZXIuaW5kZXg7XG4gICAgICAgIGNvbnN0IFtkZWYsIG5dID0gb3BEZWZzWzBdO1xuICAgICAgICBwYXJzZXIuaW5kZXggKz0gbjtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZGVmLnBhcnNlKFxuICAgICAgICAgIHBhcnNlcixcbiAgICAgICAgICBleHByID8/IHBhcnNlci5lcnJvcihcIm1pc3NpbmdcIiwgc3RhcnQpLFxuICAgICAgICAgIHsgbWluUHJlYzogMCB9XG4gICAgICAgICk7XG4gICAgICAgIGlmIChyZXN1bHQpXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgaWYgKGRlZi5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGRlZi5uYW1lLFxuICAgICAgICAgICAgZXhwciA/PyBwYXJzZXIuZXJyb3IoXCJtaXNzaW5nXCIsIHN0YXJ0KSxcbiAgICAgICAgICAgIHBhcnNlci5lcnJvcihcIm1pc3NpbmdcIiwgc3RhcnQpXG4gICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZXIuaW5kZXggPSBzdGFydDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VyLmluZGV4O1xuICAgICAgY29uc3QgaWQgPSBwYXJzZUlkZW50aWZpZXIocGFyc2VyKTtcbiAgICAgIGlmIChpZCkge1xuICAgICAgICBjb25zdCBpZEVycm9yID0gcGFyc2VyLmVycm9yKFtcInVuZXhwZWN0ZWQtaWRlbnRpZmllclwiLCBpZF0sIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGV4cHIgPyBbXCJTZXF1ZW5jZVwiLCBleHByLCBpZEVycm9yXSA6IGlkRXJyb3I7XG4gICAgICB9XG4gICAgICBsZXQgb3BlbkRlbGltaXRlciA9IHBhcnNlci5wZWVrO1xuICAgICAgY29uc3QgY2xvc2VEZWxpbWl0ZXIgPSBwYXJzZXIubWF0Y2hFbmNsb3N1cmVPcGVuKCk7XG4gICAgICBpZiAoY2xvc2VEZWxpbWl0ZXIpIHtcbiAgICAgICAgcGFyc2VyLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgICBwYXJzZXIubWF0Y2goY2xvc2VEZWxpbWl0ZXIpO1xuICAgICAgICBjb25zdCBlbmNsb3N1cmVFcnJvciA9IHBhcnNlci5lcnJvcihcbiAgICAgICAgICBbXCJ1bmV4cGVjdGVkLW9wZW4tZGVsaW1pdGVyXCIsIHsgc3RyOiBvcGVuRGVsaW1pdGVyIH1dLFxuICAgICAgICAgIGluZGV4XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBleHByID8gW1wiU2VxdWVuY2VcIiwgZXhwciwgZW5jbG9zdXJlRXJyb3JdIDogZW5jbG9zdXJlRXJyb3I7XG4gICAgICB9XG4gICAgICBvcGVuRGVsaW1pdGVyID0gcGFyc2VyLm1hdGNoRW5jbG9zdXJlQ2xvc2UoKTtcbiAgICAgIGlmIChvcGVuRGVsaW1pdGVyKSB7XG4gICAgICAgIGNvbnN0IGVuY2xvc3VyZUVycm9yID0gcGFyc2VyLmVycm9yKFxuICAgICAgICAgIFtcImV4cGVjdGVkLW9wZW4tZGVsaW1pdGVyXCIsIHsgc3RyOiBvcGVuRGVsaW1pdGVyIH1dLFxuICAgICAgICAgIGluZGV4XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBleHByID8gW1wiU2VxdWVuY2VcIiwgZXhwciwgZW5jbG9zdXJlRXJyb3JdIDogZW5jbG9zdXJlRXJyb3I7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN0ID0gcGFyc2VyLmluZGV4O1xuICAgICAgY29uc3QgdG9rZW4gPSBwYXJzZXIubmV4dFRva2VuKCk7XG4gICAgICB3aGlsZSAoIXBhcnNlci5hdEVuZClcbiAgICAgICAgcGFyc2VyLm5leHRUb2tlbigpO1xuICAgICAgaWYgKCF0b2tlbilcbiAgICAgICAgcmV0dXJuIHBhcnNlci5lcnJvcihcInN5bnRheC1lcnJvclwiLCByZXN0KTtcbiAgICAgIGNvbnN0IGVycm9yID0gcGFyc2VyLmVycm9yKFxuICAgICAgICBbXG4gICAgICAgICAgdG9rZW4ubGVuZ3RoID4gMSAmJiB0b2tlbi5zdGFydHNXaXRoKFwiXFxcXFwiKSA/IFwidW5leHBlY3RlZC1jb21tYW5kXCIgOiBcInVuZXhwZWN0ZWQtdG9rZW5cIixcbiAgICAgICAgICB7IHN0cjogdG9rZW5zVG9TdHJpbmcoW3Rva2VuXSkgfVxuICAgICAgICBdLFxuICAgICAgICByZXN0XG4gICAgICApO1xuICAgICAgZXhwciA9IGV4cHIgPyBbXCJTZXF1ZW5jZVwiLCBleHByLCBlcnJvcl0gOiBlcnJvcjtcbiAgICB9XG4gICAgZXhwciA/PyAoZXhwciA9IFtcIlNlcXVlbmNlXCJdKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnByZXNlcnZlTGF0ZXgpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGV4cHIpKVxuICAgICAgICBleHByID0geyBsYXRleCwgZm46IGV4cHIgfTtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBleHByID09PSBcIm51bWJlclwiKVxuICAgICAgICBleHByID0geyBsYXRleCwgbnVtOiBOdW1iZXIoZXhwcikudG9TdHJpbmcoKSB9O1xuICAgICAgZWxzZSBpZiAodHlwZW9mIGV4cHIgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIGV4cHIgPSB7IGxhdGV4LCBzeW06IGV4cHIgfTtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBleHByID09PSBcIm9iamVjdFwiICYmIGV4cHIgIT09IG51bGwpXG4gICAgICAgIGV4cHIubGF0ZXggPSBsYXRleDtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHIgPz8gW1wiU2VxdWVuY2VcIl07XG4gIH1cbiAgc2VyaWFsaXplKGV4cHIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVyLnNlcmlhbGl6ZShleHByLCBvcHRpb25zKTtcbiAgfVxuICBnZXQgc2VyaWFsaXplcigpIHtcbiAgICBpZiAodGhpcy5fc2VyaWFsaXplcilcbiAgICAgIHJldHVybiB0aGlzLl9zZXJpYWxpemVyO1xuICAgIHRoaXMuX3NlcmlhbGl6ZXIgPSBuZXcgU2VyaWFsaXplcihcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIHRoaXMuX2RpY3Rpb25hcnksXG4gICAgICB0aGlzLm9uRXJyb3JcbiAgICApO1xuICAgIHJldHVybiB0aGlzLl9zZXJpYWxpemVyO1xuICB9XG59O1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvYm94ZWQtZXhwcmVzc2lvbi91dGlscy50c1xudmFyIGltcG9ydF9jb21wbGV4MiA9IF9fdG9FU00ocmVxdWlyZV9jb21wbGV4KCkpO1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbnVtZXJpY3MvbnVtZXJpYy50c1xudmFyIGltcG9ydF9jb21wbGV4ID0gX190b0VTTShyZXF1aXJlX2NvbXBsZXgoKSk7XG52YXIgTUFDSElORV9QUkVDSVNJT05fQklUUyA9IDUzO1xudmFyIE1BQ0hJTkVfUFJFQ0lTSU9OID0gTWF0aC5sb2cxMChcbiAgTWF0aC5wb3coMiwgTUFDSElORV9QUkVDSVNJT05fQklUUylcbik7XG52YXIgTUFDSElORV9UT0xFUkFOQ0VfQklUUyA9IDc7XG52YXIgTUFDSElORV9UT0xFUkFOQ0UgPSBNYXRoLnBvdyhcbiAgMixcbiAgLShNQUNISU5FX1BSRUNJU0lPTl9CSVRTIC0gTUFDSElORV9UT0xFUkFOQ0VfQklUUylcbik7XG52YXIgTlVNRVJJQ19UT0xFUkFOQ0UgPSBNYXRoLnBvdygxMCwgLTEwKTtcbnZhciBTTUFMTF9JTlRFR0VSID0gMWU2O1xudmFyIE1BWF9JVEVSQVRJT04gPSAxZTY7XG52YXIgTUFYX1NZTUJPTElDX1RFUk1TID0gMjAwO1xudmFyIFNNQUxMX1BSSU1FUyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgMixcbiAgMyxcbiAgNSxcbiAgNyxcbiAgMTEsXG4gIDEzLFxuICAxNyxcbiAgMTksXG4gIDIzLFxuICAyOSxcbiAgMzEsXG4gIDM3LFxuICA0MSxcbiAgNDMsXG4gIDQ3LFxuICA1MyxcbiAgNTksXG4gIDYxLFxuICA2NyxcbiAgNzEsXG4gIDczLFxuICA3OSxcbiAgODMsXG4gIDg5LFxuICA5NyxcbiAgMTAxLFxuICAxMDMsXG4gIDEwNyxcbiAgMTA5LFxuICAxMTMsXG4gIDEyNyxcbiAgMTMxLFxuICAxMzcsXG4gIDEzOSxcbiAgMTQ5LFxuICAxNTEsXG4gIDE1NyxcbiAgMTYzLFxuICAxNjcsXG4gIDE3MyxcbiAgMTc5LFxuICAxODEsXG4gIDE5MSxcbiAgMTkzLFxuICAxOTcsXG4gIDE5OSxcbiAgMjExLFxuICAyMjMsXG4gIDIyNyxcbiAgMjI5LFxuICAyMzMsXG4gIDIzOSxcbiAgMjQxLFxuICAyNTEsXG4gIDI1NyxcbiAgMjYzLFxuICAyNjksXG4gIDI3MSxcbiAgMjc3LFxuICAyODEsXG4gIDI4MyxcbiAgMjkzLFxuICAzMDcsXG4gIDMxMSxcbiAgMzEzLFxuICAzMTcsXG4gIDMzMSxcbiAgMzM3LFxuICAzNDcsXG4gIDM0OSxcbiAgMzUzLFxuICAzNTksXG4gIDM2NyxcbiAgMzczLFxuICAzNzksXG4gIDM4MyxcbiAgMzg5LFxuICAzOTcsXG4gIDQwMSxcbiAgNDA5LFxuICA0MTksXG4gIDQyMSxcbiAgNDMxLFxuICA0MzMsXG4gIDQzOSxcbiAgNDQzLFxuICA0NDksXG4gIDQ1NyxcbiAgNDYxLFxuICA0NjMsXG4gIDQ2NyxcbiAgNDc5LFxuICA0ODcsXG4gIDQ5MSxcbiAgNDk5LFxuICA1MDMsXG4gIDUwOSxcbiAgNTIxLFxuICA1MjMsXG4gIDU0MSxcbiAgNTQ3LFxuICA1NTcsXG4gIDU2MyxcbiAgNTY5LFxuICA1NzEsXG4gIDU3NyxcbiAgNTg3LFxuICA1OTMsXG4gIDU5OSxcbiAgNjAxLFxuICA2MDcsXG4gIDYxMyxcbiAgNjE3LFxuICA2MTksXG4gIDYzMSxcbiAgNjQxLFxuICA2NDMsXG4gIDY0NyxcbiAgNjUzLFxuICA2NTksXG4gIDY2MSxcbiAgNjczLFxuICA2NzcsXG4gIDY4MyxcbiAgNjkxLFxuICA3MDEsXG4gIDcwOSxcbiAgNzE5LFxuICA3MjcsXG4gIDczMyxcbiAgNzM5LFxuICA3NDMsXG4gIDc1MSxcbiAgNzU3LFxuICA3NjEsXG4gIDc2OSxcbiAgNzczLFxuICA3ODcsXG4gIDc5NyxcbiAgODA5LFxuICA4MTEsXG4gIDgyMSxcbiAgODIzLFxuICA4MjcsXG4gIDgyOSxcbiAgODM5LFxuICA4NTMsXG4gIDg1NyxcbiAgODU5LFxuICA4NjMsXG4gIDg3NyxcbiAgODgxLFxuICA4ODMsXG4gIDg4NyxcbiAgOTA3LFxuICA5MTEsXG4gIDkxOSxcbiAgOTI5LFxuICA5MzcsXG4gIDk0MSxcbiAgOTQ3LFxuICA5NTMsXG4gIDk2NyxcbiAgOTcxLFxuICA5NzcsXG4gIDk4MyxcbiAgOTkxLFxuICA5OTcsXG4gIDEwMDksXG4gIDEwMTMsXG4gIDEwMTksXG4gIDEwMjEsXG4gIDEwMzEsXG4gIDEwMzMsXG4gIDEwMzksXG4gIDEwNDksXG4gIDEwNTEsXG4gIDEwNjEsXG4gIDEwNjMsXG4gIDEwNjksXG4gIDEwODcsXG4gIDEwOTEsXG4gIDEwOTMsXG4gIDEwOTcsXG4gIDExMDMsXG4gIDExMDksXG4gIDExMTcsXG4gIDExMjMsXG4gIDExMjksXG4gIDExNTEsXG4gIDExNTMsXG4gIDExNjMsXG4gIDExNzEsXG4gIDExODEsXG4gIDExODcsXG4gIDExOTMsXG4gIDEyMDEsXG4gIDEyMTMsXG4gIDEyMTcsXG4gIDEyMjMsXG4gIDEyMjksXG4gIDEyMzEsXG4gIDEyMzcsXG4gIDEyNDksXG4gIDEyNTksXG4gIDEyNzcsXG4gIDEyNzksXG4gIDEyODMsXG4gIDEyODksXG4gIDEyOTEsXG4gIDEyOTcsXG4gIDEzMDEsXG4gIDEzMDMsXG4gIDEzMDcsXG4gIDEzMTksXG4gIDEzMjEsXG4gIDEzMjcsXG4gIDEzNjEsXG4gIDEzNjcsXG4gIDEzNzMsXG4gIDEzODEsXG4gIDEzOTksXG4gIDE0MDksXG4gIDE0MjMsXG4gIDE0MjcsXG4gIDE0MjksXG4gIDE0MzMsXG4gIDE0MzksXG4gIDE0NDcsXG4gIDE0NTEsXG4gIDE0NTMsXG4gIDE0NTksXG4gIDE0NzEsXG4gIDE0ODEsXG4gIDE0ODMsXG4gIDE0ODcsXG4gIDE0ODksXG4gIDE0OTMsXG4gIDE0OTksXG4gIDE1MTEsXG4gIDE1MjMsXG4gIDE1MzEsXG4gIDE1NDMsXG4gIDE1NDksXG4gIDE1NTMsXG4gIDE1NTksXG4gIDE1NjcsXG4gIDE1NzEsXG4gIDE1NzksXG4gIDE1ODMsXG4gIDE1OTcsXG4gIDE2MDEsXG4gIDE2MDcsXG4gIDE2MDksXG4gIDE2MTMsXG4gIDE2MTksXG4gIDE2MjEsXG4gIDE2MjcsXG4gIDE2MzcsXG4gIDE2NTcsXG4gIDE2NjMsXG4gIDE2NjcsXG4gIDE2NjksXG4gIDE2OTMsXG4gIDE2OTcsXG4gIDE2OTksXG4gIDE3MDksXG4gIDE3MjEsXG4gIDE3MjMsXG4gIDE3MzMsXG4gIDE3NDEsXG4gIDE3NDcsXG4gIDE3NTMsXG4gIDE3NTksXG4gIDE3NzcsXG4gIDE3ODMsXG4gIDE3ODcsXG4gIDE3ODksXG4gIDE4MDEsXG4gIDE4MTEsXG4gIDE4MjMsXG4gIDE4MzEsXG4gIDE4NDcsXG4gIDE4NjEsXG4gIDE4NjcsXG4gIDE4NzEsXG4gIDE4NzMsXG4gIDE4NzcsXG4gIDE4NzksXG4gIDE4ODksXG4gIDE5MDEsXG4gIDE5MDcsXG4gIDE5MTMsXG4gIDE5MzEsXG4gIDE5MzMsXG4gIDE5NDksXG4gIDE5NTEsXG4gIDE5NzMsXG4gIDE5NzksXG4gIDE5ODcsXG4gIDE5OTMsXG4gIDE5OTcsXG4gIDE5OTksXG4gIDIwMDMsXG4gIDIwMTEsXG4gIDIwMTcsXG4gIDIwMjcsXG4gIDIwMjksXG4gIDIwMzksXG4gIDIwNTMsXG4gIDIwNjMsXG4gIDIwNjksXG4gIDIwODEsXG4gIDIwODMsXG4gIDIwODcsXG4gIDIwODksXG4gIDIwOTksXG4gIDIxMTEsXG4gIDIxMTMsXG4gIDIxMjksXG4gIDIxMzEsXG4gIDIxMzcsXG4gIDIxNDEsXG4gIDIxNDMsXG4gIDIxNTMsXG4gIDIxNjEsXG4gIDIxNzksXG4gIDIyMDMsXG4gIDIyMDcsXG4gIDIyMTMsXG4gIDIyMjEsXG4gIDIyMzcsXG4gIDIyMzksXG4gIDIyNDMsXG4gIDIyNTEsXG4gIDIyNjcsXG4gIDIyNjksXG4gIDIyNzMsXG4gIDIyODEsXG4gIDIyODcsXG4gIDIyOTMsXG4gIDIyOTcsXG4gIDIzMDksXG4gIDIzMTEsXG4gIDIzMzMsXG4gIDIzMzksXG4gIDIzNDEsXG4gIDIzNDcsXG4gIDIzNTEsXG4gIDIzNTcsXG4gIDIzNzEsXG4gIDIzNzcsXG4gIDIzODEsXG4gIDIzODMsXG4gIDIzODksXG4gIDIzOTMsXG4gIDIzOTksXG4gIDI0MTEsXG4gIDI0MTcsXG4gIDI0MjMsXG4gIDI0MzcsXG4gIDI0NDEsXG4gIDI0NDcsXG4gIDI0NTksXG4gIDI0NjcsXG4gIDI0NzMsXG4gIDI0NzcsXG4gIDI1MDMsXG4gIDI1MjEsXG4gIDI1MzEsXG4gIDI1MzksXG4gIDI1NDMsXG4gIDI1NDksXG4gIDI1NTEsXG4gIDI1NTcsXG4gIDI1NzksXG4gIDI1OTEsXG4gIDI1OTMsXG4gIDI2MDksXG4gIDI2MTcsXG4gIDI2MjEsXG4gIDI2MzMsXG4gIDI2NDcsXG4gIDI2NTcsXG4gIDI2NTksXG4gIDI2NjMsXG4gIDI2NzEsXG4gIDI2NzcsXG4gIDI2ODMsXG4gIDI2ODcsXG4gIDI2ODksXG4gIDI2OTMsXG4gIDI2OTksXG4gIDI3MDcsXG4gIDI3MTEsXG4gIDI3MTMsXG4gIDI3MTksXG4gIDI3MjksXG4gIDI3MzEsXG4gIDI3NDEsXG4gIDI3NDksXG4gIDI3NTMsXG4gIDI3NjcsXG4gIDI3NzcsXG4gIDI3ODksXG4gIDI3OTEsXG4gIDI3OTcsXG4gIDI4MDEsXG4gIDI4MDMsXG4gIDI4MTksXG4gIDI4MzMsXG4gIDI4MzcsXG4gIDI4NDMsXG4gIDI4NTEsXG4gIDI4NTcsXG4gIDI4NjEsXG4gIDI4NzksXG4gIDI4ODcsXG4gIDI4OTcsXG4gIDI5MDMsXG4gIDI5MDksXG4gIDI5MTcsXG4gIDI5MjcsXG4gIDI5MzksXG4gIDI5NTMsXG4gIDI5NTcsXG4gIDI5NjMsXG4gIDI5NjksXG4gIDI5NzEsXG4gIDI5OTksXG4gIDMwMDEsXG4gIDMwMTEsXG4gIDMwMTksXG4gIDMwMjMsXG4gIDMwMzcsXG4gIDMwNDEsXG4gIDMwNDksXG4gIDMwNjEsXG4gIDMwNjcsXG4gIDMwNzksXG4gIDMwODMsXG4gIDMwODksXG4gIDMxMDksXG4gIDMxMTksXG4gIDMxMjEsXG4gIDMxMzcsXG4gIDMxNjMsXG4gIDMxNjcsXG4gIDMxNjksXG4gIDMxODEsXG4gIDMxODcsXG4gIDMxOTEsXG4gIDMyMDMsXG4gIDMyMDksXG4gIDMyMTcsXG4gIDMyMjEsXG4gIDMyMjksXG4gIDMyNTEsXG4gIDMyNTMsXG4gIDMyNTcsXG4gIDMyNTksXG4gIDMyNzEsXG4gIDMyOTksXG4gIDMzMDEsXG4gIDMzMDcsXG4gIDMzMTMsXG4gIDMzMTksXG4gIDMzMjMsXG4gIDMzMjksXG4gIDMzMzEsXG4gIDMzNDMsXG4gIDMzNDcsXG4gIDMzNTksXG4gIDMzNjEsXG4gIDMzNzEsXG4gIDMzNzMsXG4gIDMzODksXG4gIDMzOTEsXG4gIDM0MDcsXG4gIDM0MTMsXG4gIDM0MzMsXG4gIDM0NDksXG4gIDM0NTcsXG4gIDM0NjEsXG4gIDM0NjMsXG4gIDM0NjcsXG4gIDM0NjksXG4gIDM0OTEsXG4gIDM0OTksXG4gIDM1MTEsXG4gIDM1MTcsXG4gIDM1MjcsXG4gIDM1MjksXG4gIDM1MzMsXG4gIDM1MzksXG4gIDM1NDEsXG4gIDM1NDcsXG4gIDM1NTcsXG4gIDM1NTksXG4gIDM1NzEsXG4gIDM1ODEsXG4gIDM1ODMsXG4gIDM1OTMsXG4gIDM2MDcsXG4gIDM2MTMsXG4gIDM2MTcsXG4gIDM2MjMsXG4gIDM2MzEsXG4gIDM2MzcsXG4gIDM2NDMsXG4gIDM2NTksXG4gIDM2NzEsXG4gIDM2NzMsXG4gIDM2NzcsXG4gIDM2OTEsXG4gIDM2OTcsXG4gIDM3MDEsXG4gIDM3MDksXG4gIDM3MTksXG4gIDM3MjcsXG4gIDM3MzMsXG4gIDM3MzksXG4gIDM3NjEsXG4gIDM3NjcsXG4gIDM3NjksXG4gIDM3NzksXG4gIDM3OTMsXG4gIDM3OTcsXG4gIDM4MDMsXG4gIDM4MjEsXG4gIDM4MjMsXG4gIDM4MzMsXG4gIDM4NDcsXG4gIDM4NTEsXG4gIDM4NTMsXG4gIDM4NjMsXG4gIDM4NzcsXG4gIDM4ODEsXG4gIDM4ODksXG4gIDM5MDcsXG4gIDM5MTEsXG4gIDM5MTcsXG4gIDM5MTksXG4gIDM5MjMsXG4gIDM5MjksXG4gIDM5MzEsXG4gIDM5NDMsXG4gIDM5NDcsXG4gIDM5NjcsXG4gIDM5ODksXG4gIDQwMDEsXG4gIDQwMDMsXG4gIDQwMDcsXG4gIDQwMTMsXG4gIDQwMTksXG4gIDQwMjEsXG4gIDQwMjcsXG4gIDQwNDksXG4gIDQwNTEsXG4gIDQwNTcsXG4gIDQwNzMsXG4gIDQwNzksXG4gIDQwOTEsXG4gIDQwOTMsXG4gIDQwOTksXG4gIDQxMTEsXG4gIDQxMjcsXG4gIDQxMjksXG4gIDQxMzMsXG4gIDQxMzksXG4gIDQxNTMsXG4gIDQxNTcsXG4gIDQxNTksXG4gIDQxNzcsXG4gIDQyMDEsXG4gIDQyMTEsXG4gIDQyMTcsXG4gIDQyMTksXG4gIDQyMjksXG4gIDQyMzEsXG4gIDQyNDEsXG4gIDQyNDMsXG4gIDQyNTMsXG4gIDQyNTksXG4gIDQyNjEsXG4gIDQyNzEsXG4gIDQyNzMsXG4gIDQyODMsXG4gIDQyODksXG4gIDQyOTcsXG4gIDQzMjcsXG4gIDQzMzcsXG4gIDQzMzksXG4gIDQzNDksXG4gIDQzNTcsXG4gIDQzNjMsXG4gIDQzNzMsXG4gIDQzOTEsXG4gIDQzOTcsXG4gIDQ0MDksXG4gIDQ0MjEsXG4gIDQ0MjMsXG4gIDQ0NDEsXG4gIDQ0NDcsXG4gIDQ0NTEsXG4gIDQ0NTcsXG4gIDQ0NjMsXG4gIDQ0ODEsXG4gIDQ0ODMsXG4gIDQ0OTMsXG4gIDQ1MDcsXG4gIDQ1MTMsXG4gIDQ1MTcsXG4gIDQ1MTksXG4gIDQ1MjMsXG4gIDQ1NDcsXG4gIDQ1NDksXG4gIDQ1NjEsXG4gIDQ1NjcsXG4gIDQ1ODMsXG4gIDQ1OTEsXG4gIDQ1OTcsXG4gIDQ2MDMsXG4gIDQ2MjEsXG4gIDQ2MzcsXG4gIDQ2MzksXG4gIDQ2NDMsXG4gIDQ2NDksXG4gIDQ2NTEsXG4gIDQ2NTcsXG4gIDQ2NjMsXG4gIDQ2NzMsXG4gIDQ2NzksXG4gIDQ2OTEsXG4gIDQ3MDMsXG4gIDQ3MjEsXG4gIDQ3MjMsXG4gIDQ3MjksXG4gIDQ3MzMsXG4gIDQ3NTEsXG4gIDQ3NTksXG4gIDQ3ODMsXG4gIDQ3ODcsXG4gIDQ3ODksXG4gIDQ3OTMsXG4gIDQ3OTksXG4gIDQ4MDEsXG4gIDQ4MTMsXG4gIDQ4MTcsXG4gIDQ4MzEsXG4gIDQ4NjEsXG4gIDQ4NzEsXG4gIDQ4NzcsXG4gIDQ4ODksXG4gIDQ5MDMsXG4gIDQ5MDksXG4gIDQ5MTksXG4gIDQ5MzEsXG4gIDQ5MzMsXG4gIDQ5MzcsXG4gIDQ5NDMsXG4gIDQ5NTEsXG4gIDQ5NTcsXG4gIDQ5NjcsXG4gIDQ5NjksXG4gIDQ5NzMsXG4gIDQ5ODcsXG4gIDQ5OTMsXG4gIDQ5OTksXG4gIDUwMDMsXG4gIDUwMDksXG4gIDUwMTEsXG4gIDUwMjEsXG4gIDUwMjMsXG4gIDUwMzksXG4gIDUwNTEsXG4gIDUwNTksXG4gIDUwNzcsXG4gIDUwODEsXG4gIDUwODcsXG4gIDUwOTksXG4gIDUxMDEsXG4gIDUxMDcsXG4gIDUxMTMsXG4gIDUxMTksXG4gIDUxNDcsXG4gIDUxNTMsXG4gIDUxNjcsXG4gIDUxNzEsXG4gIDUxNzksXG4gIDUxODksXG4gIDUxOTcsXG4gIDUyMDksXG4gIDUyMjcsXG4gIDUyMzEsXG4gIDUyMzMsXG4gIDUyMzcsXG4gIDUyNjEsXG4gIDUyNzMsXG4gIDUyNzksXG4gIDUyODEsXG4gIDUyOTcsXG4gIDUzMDMsXG4gIDUzMDksXG4gIDUzMjMsXG4gIDUzMzMsXG4gIDUzNDcsXG4gIDUzNTEsXG4gIDUzODEsXG4gIDUzODcsXG4gIDUzOTMsXG4gIDUzOTksXG4gIDU0MDcsXG4gIDU0MTMsXG4gIDU0MTcsXG4gIDU0MTksXG4gIDU0MzEsXG4gIDU0MzcsXG4gIDU0NDEsXG4gIDU0NDMsXG4gIDU0NDksXG4gIDU0NzEsXG4gIDU0NzcsXG4gIDU0NzksXG4gIDU0ODMsXG4gIDU1MDEsXG4gIDU1MDMsXG4gIDU1MDcsXG4gIDU1MTksXG4gIDU1MjEsXG4gIDU1MjcsXG4gIDU1MzEsXG4gIDU1NTcsXG4gIDU1NjMsXG4gIDU1NjksXG4gIDU1NzMsXG4gIDU1ODEsXG4gIDU1OTEsXG4gIDU2MjMsXG4gIDU2MzksXG4gIDU2NDEsXG4gIDU2NDcsXG4gIDU2NTEsXG4gIDU2NTMsXG4gIDU2NTcsXG4gIDU2NTksXG4gIDU2NjksXG4gIDU2ODMsXG4gIDU2ODksXG4gIDU2OTMsXG4gIDU3MDEsXG4gIDU3MTEsXG4gIDU3MTcsXG4gIDU3MzcsXG4gIDU3NDEsXG4gIDU3NDMsXG4gIDU3NDksXG4gIDU3NzksXG4gIDU3ODMsXG4gIDU3OTEsXG4gIDU4MDEsXG4gIDU4MDcsXG4gIDU4MTMsXG4gIDU4MjEsXG4gIDU4MjcsXG4gIDU4MzksXG4gIDU4NDMsXG4gIDU4NDksXG4gIDU4NTEsXG4gIDU4NTcsXG4gIDU4NjEsXG4gIDU4NjcsXG4gIDU4NjksXG4gIDU4NzksXG4gIDU4ODEsXG4gIDU4OTcsXG4gIDU5MDMsXG4gIDU5MjMsXG4gIDU5MjcsXG4gIDU5MzksXG4gIDU5NTMsXG4gIDU5ODEsXG4gIDU5ODcsXG4gIDYwMDcsXG4gIDYwMTEsXG4gIDYwMjksXG4gIDYwMzcsXG4gIDYwNDMsXG4gIDYwNDcsXG4gIDYwNTMsXG4gIDYwNjcsXG4gIDYwNzMsXG4gIDYwNzksXG4gIDYwODksXG4gIDYwOTEsXG4gIDYxMDEsXG4gIDYxMTMsXG4gIDYxMjEsXG4gIDYxMzEsXG4gIDYxMzMsXG4gIDYxNDMsXG4gIDYxNTEsXG4gIDYxNjMsXG4gIDYxNzMsXG4gIDYxOTcsXG4gIDYxOTksXG4gIDYyMDMsXG4gIDYyMTEsXG4gIDYyMTcsXG4gIDYyMjEsXG4gIDYyMjksXG4gIDYyNDcsXG4gIDYyNTcsXG4gIDYyNjMsXG4gIDYyNjksXG4gIDYyNzEsXG4gIDYyNzcsXG4gIDYyODcsXG4gIDYyOTksXG4gIDYzMDEsXG4gIDYzMTEsXG4gIDYzMTcsXG4gIDYzMjMsXG4gIDYzMjksXG4gIDYzMzcsXG4gIDYzNDMsXG4gIDYzNTMsXG4gIDYzNTksXG4gIDYzNjEsXG4gIDYzNjcsXG4gIDYzNzMsXG4gIDYzNzksXG4gIDYzODksXG4gIDYzOTcsXG4gIDY0MjEsXG4gIDY0MjcsXG4gIDY0NDksXG4gIDY0NTEsXG4gIDY0NjksXG4gIDY0NzMsXG4gIDY0ODEsXG4gIDY0OTEsXG4gIDY1MjEsXG4gIDY1MjksXG4gIDY1NDcsXG4gIDY1NTEsXG4gIDY1NTMsXG4gIDY1NjMsXG4gIDY1NjksXG4gIDY1NzEsXG4gIDY1NzcsXG4gIDY1ODEsXG4gIDY1OTksXG4gIDY2MDcsXG4gIDY2MTksXG4gIDY2MzcsXG4gIDY2NTMsXG4gIDY2NTksXG4gIDY2NjEsXG4gIDY2NzMsXG4gIDY2NzksXG4gIDY2ODksXG4gIDY2OTEsXG4gIDY3MDEsXG4gIDY3MDMsXG4gIDY3MDksXG4gIDY3MTksXG4gIDY3MzMsXG4gIDY3MzcsXG4gIDY3NjEsXG4gIDY3NjMsXG4gIDY3NzksXG4gIDY3ODEsXG4gIDY3OTEsXG4gIDY3OTMsXG4gIDY4MDMsXG4gIDY4MjMsXG4gIDY4MjcsXG4gIDY4MjksXG4gIDY4MzMsXG4gIDY4NDEsXG4gIDY4NTcsXG4gIDY4NjMsXG4gIDY4NjksXG4gIDY4NzEsXG4gIDY4ODMsXG4gIDY4OTksXG4gIDY5MDcsXG4gIDY5MTEsXG4gIDY5MTcsXG4gIDY5NDcsXG4gIDY5NDksXG4gIDY5NTksXG4gIDY5NjEsXG4gIDY5NjcsXG4gIDY5NzEsXG4gIDY5NzcsXG4gIDY5ODMsXG4gIDY5OTEsXG4gIDY5OTcsXG4gIDcwMDEsXG4gIDcwMTMsXG4gIDcwMTksXG4gIDcwMjcsXG4gIDcwMzksXG4gIDcwNDMsXG4gIDcwNTcsXG4gIDcwNjksXG4gIDcwNzksXG4gIDcxMDMsXG4gIDcxMDksXG4gIDcxMjEsXG4gIDcxMjcsXG4gIDcxMjksXG4gIDcxNTEsXG4gIDcxNTksXG4gIDcxNzcsXG4gIDcxODcsXG4gIDcxOTMsXG4gIDcyMDcsXG4gIDcyMTEsXG4gIDcyMTMsXG4gIDcyMTksXG4gIDcyMjksXG4gIDcyMzcsXG4gIDcyNDMsXG4gIDcyNDcsXG4gIDcyNTMsXG4gIDcyODMsXG4gIDcyOTcsXG4gIDczMDcsXG4gIDczMDksXG4gIDczMjEsXG4gIDczMzEsXG4gIDczMzMsXG4gIDczNDksXG4gIDczNTEsXG4gIDczNjksXG4gIDczOTMsXG4gIDc0MTEsXG4gIDc0MTcsXG4gIDc0MzMsXG4gIDc0NTEsXG4gIDc0NTcsXG4gIDc0NTksXG4gIDc0NzcsXG4gIDc0ODEsXG4gIDc0ODcsXG4gIDc0ODksXG4gIDc0OTksXG4gIDc1MDcsXG4gIDc1MTcsXG4gIDc1MjMsXG4gIDc1MjksXG4gIDc1MzcsXG4gIDc1NDEsXG4gIDc1NDcsXG4gIDc1NDksXG4gIDc1NTksXG4gIDc1NjEsXG4gIDc1NzMsXG4gIDc1NzcsXG4gIDc1ODMsXG4gIDc1ODksXG4gIDc1OTEsXG4gIDc2MDMsXG4gIDc2MDcsXG4gIDc2MjEsXG4gIDc2MzksXG4gIDc2NDMsXG4gIDc2NDksXG4gIDc2NjksXG4gIDc2NzMsXG4gIDc2ODEsXG4gIDc2ODcsXG4gIDc2OTEsXG4gIDc2OTksXG4gIDc3MDMsXG4gIDc3MTcsXG4gIDc3MjMsXG4gIDc3MjcsXG4gIDc3NDEsXG4gIDc3NTMsXG4gIDc3NTcsXG4gIDc3NTksXG4gIDc3ODksXG4gIDc3OTMsXG4gIDc4MTcsXG4gIDc4MjMsXG4gIDc4MjksXG4gIDc4NDEsXG4gIDc4NTMsXG4gIDc4NjcsXG4gIDc4NzMsXG4gIDc4NzcsXG4gIDc4NzksXG4gIDc4ODMsXG4gIDc5MDEsXG4gIDc5MDcsXG4gIDc5MTlcbl0pO1xudmFyIExBUkdFU1RfU01BTExfUFJJTUUgPSA3OTE5O1xuZnVuY3Rpb24gcHJpbWVGYWN0b3JzKG4pIHtcbiAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KFxuICAgIE51bWJlci5pc0ludGVnZXIobikgJiYgbiA+PSAwICYmIG4gPCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICBuXG4gICk7XG4gIGlmIChuIDw9IDMpXG4gICAgcmV0dXJuIHsgW25dOiAxIH07XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBsZXQgY291bnQgPSAwO1xuICB3aGlsZSAobiAlIDIgPT09IDApIHtcbiAgICBjb3VudCArPSAxO1xuICAgIG4gLz0gMjtcbiAgfVxuICBpZiAoY291bnQgPiAwKVxuICAgIHJlc3VsdFsyXSA9IGNvdW50O1xuICBjb3VudCA9IDA7XG4gIHdoaWxlIChuICUgMyA9PT0gMCkge1xuICAgIGNvdW50ICs9IDE7XG4gICAgbiAvPSAzO1xuICB9XG4gIGlmIChjb3VudCA+IDApXG4gICAgcmVzdWx0WzNdID0gY291bnQ7XG4gIGxldCBkb25lID0gZmFsc2U7XG4gIHdoaWxlICghZG9uZSkge1xuICAgIGlmIChuID09PSAxKVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICBjb25zdCBzciA9IE1hdGguc3FydChuKTtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpID0gNjsgaSA8PSBzciArIDY7IGkgKz0gNikge1xuICAgICAgaWYgKG4gJSAoaSAtIDEpID09PSAwKSB7XG4gICAgICAgIHJlc3VsdFtpIC0gMV0gPSAocmVzdWx0W2kgLSAxXSA/PyAwKSArIDE7XG4gICAgICAgIG4gLz0gaSAtIDE7XG4gICAgICAgIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAobiAlIChpICsgMSkgPT09IDApIHtcbiAgICAgICAgcmVzdWx0W2kgKyAxXSA9IChyZXN1bHRbaSArIDFdID8/IDApICsgMTtcbiAgICAgICAgbiAvPSBpICsgMTtcbiAgICAgICAgZG9uZSA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHJlc3VsdFtuXSAhPT0gdm9pZCAwKVxuICAgIHJlc3VsdFtuXSArPSAxO1xuICBlbHNlXG4gICAgcmVzdWx0W25dID0gMTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZhY3RvclBvd2VyKG4sIGV4cG9uZW50KSB7XG4gIGlmIChuID49IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxuICAgIHJldHVybiBbMSwgbl07XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChOdW1iZXIuaXNJbnRlZ2VyKG4pICYmIG4gPiAwICYmIG4gPCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUik7XG4gIGNvbnN0IGZhY3RvcnMgPSBwcmltZUZhY3RvcnMobik7XG4gIGxldCBmID0gMTtcbiAgbGV0IHIgPSAxO1xuICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXMoZmFjdG9ycykpIHtcbiAgICBjb25zdCB2ID0gcGFyc2VJbnQoayk7XG4gICAgZiA9IGYgKiBNYXRoLnBvdyh2LCBNYXRoLmZsb29yKGZhY3RvcnNba10gLyBleHBvbmVudCkpO1xuICAgIHIgPSByICogTWF0aC5wb3codiwgZmFjdG9yc1trXSAlIGV4cG9uZW50KTtcbiAgfVxuICByZXR1cm4gW2YsIHJdO1xufVxuZnVuY3Rpb24gZ2NkKGEsIGIpIHtcbiAgaWYgKGEgPT09IDApXG4gICAgcmV0dXJuIGI7XG4gIGlmIChiID09PSAwKVxuICAgIHJldHVybiBhO1xuICBpZiAoYSA9PT0gYilcbiAgICByZXR1cm4gYTtcbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGEpIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKGIpKVxuICAgIHJldHVybiBOYU47XG4gIHdoaWxlIChiICE9PSAwKVxuICAgIFthLCBiXSA9IFtiLCBhICUgYl07XG4gIHJldHVybiBhIDwgMCA/IC1hIDogYTtcbn1cbmZ1bmN0aW9uIGxjbShhLCBiKSB7XG4gIHJldHVybiBhICogYiAvIGdjZChhLCBiKTtcbn1cbmZ1bmN0aW9uIGZhY3RvcmlhbChuKSB7XG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihuKSB8fCBuIDwgMClcbiAgICByZXR1cm4gTmFOO1xuICBsZXQgdmFsID0gMTtcbiAgZm9yIChsZXQgaSA9IDI7IGkgPD0gbjsgaSsrKVxuICAgIHZhbCA9IHZhbCAqIGk7XG4gIHJldHVybiB2YWw7XG59XG52YXIgZ2FtbWFHID0gNztcbnZhciBsYW5jem9zXzdfYyA9IFtcbiAgMC45OTk5OTk5OTk5OTk4MDk5LFxuICA2NzYuNTIwMzY4MTIxODg1MSxcbiAgLTEyNTkuMTM5MjE2NzIyNDAyOCxcbiAgNzcxLjMyMzQyODc3NzY1MzEsXG4gIC0xNzYuNjE1MDI5MTYyMTQwNixcbiAgMTIuNTA3MzQzMjc4Njg2OTA1LFxuICAtMC4xMzg1NzEwOTUyNjU3MjAxMixcbiAgOTk4NDM2OTU3ODAxOTU3MmUtMjEsXG4gIDE1MDU2MzI3MzUxNDkzMTE2ZS0yM1xuXTtcbnZhciBnYW1tYUdMbiA9IDYwNyAvIDEyODtcbnZhciBnYW1tYVBMbiA9IFtcbiAgMC45OTk5OTk5OTk5OTk5OTcsXG4gIDU3LjE1NjIzNTY2NTg2MjkyLFxuICAtNTkuNTk3OTYwMzU1NDc1NDksXG4gIDE0LjEzNjA5Nzk3NDc0MTc0LFxuICAtMC40OTE5MTM4MTYwOTc2MjAyLFxuICAzMzk5NDY0OTk4NDgxMTg4ZS0yMCxcbiAgNDY1MjM2Mjg5MjcwNDg1N2UtMjAsXG4gIC05ODM3NDQ3NTMwNDg3OTU2ZS0yMCxcbiAgMTU4MDg4NzAzMjI0OTEyNWUtMTksXG4gIC0yMTAyNjQ0NDE3MjQxMDQ4OGUtMjAsXG4gIDIxNzQzOTYxODExNTIxMjZlLTE5LFxuICAtMTY0MzE4MTA2NTM2NzYzOWUtMTksXG4gIDg0NDE4MjIzOTgzODUyNzRlLTIwLFxuICAtMjYxOTA4Mzg0MDE1ODE0ZS0xOSxcbiAgMzY4OTkxODI2NTk1MzE2MmUtMjFcbl07XG5mdW5jdGlvbiBsbmdhbW1hKHopIHtcbiAgaWYgKHogPCAwKVxuICAgIHJldHVybiBOYU47XG4gIGxldCB4ID0gZ2FtbWFQTG5bMF07XG4gIGZvciAobGV0IGkgPSBnYW1tYVBMbi5sZW5ndGggLSAxOyBpID4gMDsgLS1pKVxuICAgIHggKz0gZ2FtbWFQTG5baV0gLyAoeiArIGkpO1xuICBjb25zdCB0ID0geiArIGdhbW1hR0xuICsgMC41O1xuICByZXR1cm4gMC41ICogTWF0aC5sb2coMiAqIE1hdGguUEkpICsgKHogKyAwLjUpICogTWF0aC5sb2codCkgLSB0ICsgTWF0aC5sb2coeCkgLSBNYXRoLmxvZyh6KTtcbn1cbmZ1bmN0aW9uIGdhbW1hKHopIHtcbiAgaWYgKHogPCAwLjUpXG4gICAgcmV0dXJuIE1hdGguUEkgLyAoTWF0aC5zaW4oTWF0aC5QSSAqIHopICogZ2FtbWEoMSAtIHopKTtcbiAgaWYgKHogPiAxMDApXG4gICAgcmV0dXJuIE1hdGguZXhwKGxuZ2FtbWEoeikpO1xuICB6IC09IDE7XG4gIGxldCB4ID0gbGFuY3pvc183X2NbMF07XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgZ2FtbWFHICsgMjsgaSsrKVxuICAgIHggKz0gbGFuY3pvc183X2NbaV0gLyAoeiArIGkpO1xuICBjb25zdCB0ID0geiArIGdhbW1hRyArIDAuNTtcbiAgcmV0dXJuIE1hdGguc3FydCgyICogTWF0aC5QSSkgKiBNYXRoLnBvdyh0LCB6ICsgMC41KSAqIE1hdGguZXhwKC10KSAqIHg7XG59XG5mdW5jdGlvbiBmcm9tRGlnaXRzKHMsIGJhc2UgPSAxMCkge1xuICBsZXQgdmFsdWUgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrID0ge1xuICAgICAgXCIgXCI6IC0xLFxuICAgICAgXCJcXHhBMFwiOiAtMSxcbiAgICAgIC8vIE5CU1xuICAgICAgXCJcXHUyMDAwXCI6IC0xLFxuICAgICAgLy8gRU4gUVVBRFxuICAgICAgXCJcXHUyMDAxXCI6IC0xLFxuICAgICAgLy8gRU0gUVVBRFxuICAgICAgXCJcXHUyMDAyXCI6IC0xLFxuICAgICAgLy8gRU4gU1BBQ0VcbiAgICAgIFwiXFx1MjAwM1wiOiAtMSxcbiAgICAgIC8vIEVNIFNQQUNFXG4gICAgICBcIlxcdTIwMDRcIjogLTEsXG4gICAgICAvLyBUSFJFRS1QRVItRU0gU1BBQ0VcbiAgICAgIFwiXFx1MjAwNVwiOiAtMSxcbiAgICAgIC8vIEZPVVItUEVSLUVNIFNQQUNFXG4gICAgICBcIlxcdTIwMDZcIjogLTEsXG4gICAgICAvLyBTSVgtUEVSLUVNIFNQQUNFXG4gICAgICBcIlxcdTIwMDdcIjogLTEsXG4gICAgICAvLyBGSUdVUkUgU1BBQ0VcbiAgICAgIFwiXFx1MjAwOFwiOiAtMSxcbiAgICAgIC8vIFBVTkNUVUFUSU9OIFNQQUNFXG4gICAgICBcIlxcdTIwMDlcIjogLTEsXG4gICAgICAvLyBUSElOIFNQQUNFXG4gICAgICBcIlxcdTIwMEFcIjogLTEsXG4gICAgICAvLyBIQUlSIFNQQUNFXG4gICAgICBcIlxcdTIwMEJcIjogLTEsXG4gICAgICAvLyBaV1NcbiAgICAgIFwiXFx1MjAyRlwiOiAtMSxcbiAgICAgIC8vIE5BUlJPVyBOQlNcbiAgICAgIFwiXFx1MjA1RlwiOiAtMSxcbiAgICAgIC8vIE1FRElVTSBNQVRIRU1BVElDQUwgU1BBQ0VcbiAgICAgIFwiX1wiOiAtMSxcbiAgICAgIFwiLFwiOiAtMSxcbiAgICAgIFwiMFwiOiAwLFxuICAgICAgXCIxXCI6IDEsXG4gICAgICBcIjJcIjogMixcbiAgICAgIFwiM1wiOiAzLFxuICAgICAgXCI0XCI6IDQsXG4gICAgICBcIjVcIjogNSxcbiAgICAgIFwiNlwiOiA2LFxuICAgICAgXCI3XCI6IDcsXG4gICAgICBcIjhcIjogOCxcbiAgICAgIFwiOVwiOiA5LFxuICAgICAgXCJhXCI6IDEwLFxuICAgICAgXCJiXCI6IDExLFxuICAgICAgXCJjXCI6IDEyLFxuICAgICAgXCJkXCI6IDEzLFxuICAgICAgXCJlXCI6IDE0LFxuICAgICAgXCJmXCI6IDE1LFxuICAgICAgXCJnXCI6IDE2LFxuICAgICAgXCJoXCI6IDE3LFxuICAgICAgXCJpXCI6IDE4LFxuICAgICAgXCJqXCI6IDE5LFxuICAgICAgXCJrXCI6IDIwLFxuICAgICAgXCJsXCI6IDIxLFxuICAgICAgXCJtXCI6IDIyLFxuICAgICAgXCJuXCI6IDIzLFxuICAgICAgXCJvXCI6IDI0LFxuICAgICAgXCJwXCI6IDI1LFxuICAgICAgXCJxXCI6IDI2LFxuICAgICAgXCJyXCI6IDI3LFxuICAgICAgXCJzXCI6IDI4LFxuICAgICAgXCJ0XCI6IDI5LFxuICAgICAgXCJ1XCI6IDMwLFxuICAgICAgXCJ2XCI6IDMxLFxuICAgICAgXCJ3XCI6IDMyLFxuICAgICAgXCJ4XCI6IDMzLFxuICAgICAgXCJ5XCI6IDM0LFxuICAgICAgXCJ6XCI6IDM1XG4gICAgfVtzW2ldXTtcbiAgICBpZiAoayAhPT0gLTEpIHtcbiAgICAgIGlmIChrID09PSB2b2lkIDApXG4gICAgICAgIHJldHVybiBbdmFsdWUsIHMuc3Vic3RyaW5nKGkpXTtcbiAgICAgIGlmIChrID49IGJhc2UpXG4gICAgICAgIHJldHVybiBbdmFsdWUsIHMuc3Vic3RyaW5nKGkpXTtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiBiYXNlICsgaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFt2YWx1ZSwgXCJcIl07XG59XG5mdW5jdGlvbiBhc0Zsb2F0KGV4cHIpIHtcbiAgY29uc3QgbnVtID0gZXhwci5udW1lcmljVmFsdWU7XG4gIGlmIChudW0gPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0eXBlb2YgbnVtID09PSBcIm51bWJlclwiKVxuICAgIHJldHVybiBudW07XG4gIGlmIChudW0gaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpXG4gICAgcmV0dXJuIG51bS50b051bWJlcigpO1xuICBpZiAoQXJyYXkuaXNBcnJheShudW0pKSB7XG4gICAgY29uc3QgW24sIGRdID0gbnVtO1xuICAgIGlmICh0eXBlb2YgbiA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZCA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiBuIC8gZDtcbiAgICByZXR1cm4gTnVtYmVyKG4pIC8gTnVtYmVyKGQpO1xuICB9XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydCghKG51bSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4LmRlZmF1bHQpIHx8IG51bS5pbSAhPT0gMCk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gYXNCaWdudW0oZXhwcikge1xuICBjb25zdCBudW0gPSBleHByLm51bWVyaWNWYWx1ZTtcbiAgaWYgKG51bSA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKG51bSBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdClcbiAgICByZXR1cm4gbnVtO1xuICBpZiAodHlwZW9mIG51bSA9PT0gXCJudW1iZXJcIilcbiAgICByZXR1cm4gZXhwci5lbmdpbmUuYmlnbnVtKG51bSk7XG4gIGlmIChBcnJheS5pc0FycmF5KG51bSkpIHtcbiAgICBjb25zdCBbbiwgZF0gPSBudW07XG4gICAgaWYgKHR5cGVvZiBuID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBkID09PSBcIm51bWJlclwiKVxuICAgICAgcmV0dXJuIGV4cHIuZW5naW5lLmJpZ251bShuIC8gZCk7XG4gICAgcmV0dXJuIGV4cHIuZW5naW5lLmJpZ251bShuKS5kaXYoZC50b1N0cmluZygpKTtcbiAgfVxuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoIShudW0gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleC5kZWZhdWx0KSB8fCBudW0uaW0gIT09IDApO1xuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGFzU21hbGxJbnRlZ2VyKGV4cHIpIHtcbiAgY29uc3QgbnVtID0gZXhwci5udW1lcmljVmFsdWU7XG4gIGlmIChudW0gPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0eXBlb2YgbnVtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIobnVtKSAmJiBudW0gPj0gLVNNQUxMX0lOVEVHRVIgJiYgbnVtIDw9IFNNQUxMX0lOVEVHRVIpXG4gICAgICByZXR1cm4gbnVtO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChudW0gaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpIHtcbiAgICBpZiAobnVtLmlzSW50ZWdlcigpKSB7XG4gICAgICBjb25zdCBuID0gbnVtLnRvTnVtYmVyKCk7XG4gICAgICBpZiAobiA+PSAtU01BTExfSU5URUdFUiAmJiBuIDw9IFNNQUxMX0lOVEVHRVIpXG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoZXhwci5pc0Nhbm9uaWNhbClcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgciA9IG51bTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocikpIHtcbiAgICBjb25zdCBbbiwgZF0gPSByO1xuICAgIGxldCB2O1xuICAgIGlmICh0eXBlb2YgbiA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZCA9PT0gXCJudW1iZXJcIilcbiAgICAgIHYgPSBuIC8gZDtcbiAgICBlbHNlXG4gICAgICB2ID0gTnVtYmVyKG4pIC8gTnVtYmVyKGQpO1xuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHYpICYmIHYgPj0gLVNNQUxMX0lOVEVHRVIgJiYgdiA8PSBTTUFMTF9JTlRFR0VSKVxuICAgICAgcmV0dXJuIHY7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjaG9wKG4sIHRvbGVyYW5jZSkge1xuICBpZiAodHlwZW9mIG4gPT09IFwibnVtYmVyXCIgJiYgTWF0aC5hYnMobikgPD0gdG9sZXJhbmNlKVxuICAgIHJldHVybiAwO1xuICBpZiAobiBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdCAmJiBuLmFicygpLmx0ZSh0b2xlcmFuY2UpKVxuICAgIHJldHVybiAwO1xuICBpZiAobiBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4LmRlZmF1bHQgJiYgTWF0aC5hYnMobi5yZSkgPD0gdG9sZXJhbmNlICYmIE1hdGguYWJzKG4uaW0pIDw9IHRvbGVyYW5jZSlcbiAgICByZXR1cm4gMDtcbiAgcmV0dXJuIG47XG59XG5mdW5jdGlvbiBlcmYoeCkge1xuICBjb25zdCBhMSA9IDAuMjU0ODI5NTkyO1xuICBjb25zdCBhMiA9IC0wLjI4NDQ5NjczNjtcbiAgY29uc3QgYTMgPSAxLjQyMTQxMzc0MTtcbiAgY29uc3QgYTQgPSAtMS40NTMxNTIwMjc7XG4gIGNvbnN0IGE1ID0gMS4wNjE0MDU0Mjk7XG4gIGNvbnN0IHAgPSAwLjMyNzU5MTE7XG4gIGNvbnN0IHNpZ24yID0geCA8IDAgPyAtMSA6IDE7XG4gIHggPSBNYXRoLmFicyh4KTtcbiAgY29uc3QgdCA9IDEgLyAoMSArIHAgKiB4KTtcbiAgY29uc3QgeSA9ICgoKChhNSAqIHQgKyBhNCkgKiB0ICsgYTMpICogdCArIGEyKSAqIHQgKyBhMSkgKiB0O1xuICByZXR1cm4gc2lnbjIgKiAoMSAtIHkgKiBNYXRoLmV4cCgteCAqIHgpKTtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL251bWVyaWNzL251bWVyaWMtYmlnaW50LnRzXG5mdW5jdGlvbiBiaWdpbnQoYSkge1xuICBpZiAodHlwZW9mIGEgPT09IFwiYmlnaW50XCIpXG4gICAgcmV0dXJuIGE7XG4gIGlmIChhIGluc3RhbmNlb2YgZGVjaW1hbF9kZWZhdWx0KVxuICAgIHJldHVybiBiaWdpbnQoYS50b1N0cmluZygpKTtcbiAgbGV0IHMgPSBhLnRvU3RyaW5nKCk7XG4gIGNvbnN0IG0gPSBzLm1hdGNoKC8oW15cXC5dKykoPzpcXC4oWzAtOV0rKSk/ZSguKykkLyk7XG4gIGlmIChtKSB7XG4gICAgcyA9IG1bMV0gKyAobVsyXSA/PyBcIlwiKSArIFwiMFwiLnJlcGVhdChwYXJzZUludChtWzNdKSAtIChtWzJdID8gbVsyXS5sZW5ndGggOiAwKSk7XG4gIH1cbiAgcmV0dXJuIEJpZ0ludChzKTtcbn1cbmZ1bmN0aW9uIGdjZDIoYSwgYikge1xuICB3aGlsZSAoYiAhPT0gQmlnSW50KDApKVxuICAgIFthLCBiXSA9IFtiLCBhICUgYl07XG4gIHJldHVybiBhIDwgMCA/IC1hIDogYTtcbn1cbnZhciBQUklNRV9XSEVFTF9JTkMgPSBbXG4gIEJpZ0ludCg0KSxcbiAgQmlnSW50KDIpLFxuICBCaWdJbnQoNCksXG4gIEJpZ0ludCgyKSxcbiAgQmlnSW50KDQpLFxuICBCaWdJbnQoNiksXG4gIEJpZ0ludCgyKSxcbiAgQmlnSW50KDYpXG5dO1xuZnVuY3Rpb24gcHJpbWVGYWN0b3JzMihkKSB7XG4gIGlmIChkIDwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICBjb25zdCBmYWN0b3JzID0gcHJpbWVGYWN0b3JzKE51bWJlcihkKSk7XG4gICAgY29uc3QgcmVzdWx0MiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBmIG9mIE9iamVjdC5rZXlzKGZhY3RvcnMpKVxuICAgICAgcmVzdWx0Mi5zZXQoYmlnaW50KGYpLCBmYWN0b3JzW2ZdKTtcbiAgICByZXR1cm4gcmVzdWx0MjtcbiAgfVxuICBsZXQgbiA9IGQ7XG4gIGNvbnN0IHJlc3VsdCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGxldCBjb3VudDIgPSAwO1xuICBsZXQgY291bnQzID0gMDtcbiAgbGV0IGNvdW50NSA9IDA7XG4gIGxldCBrID0gQmlnSW50KDEwKTtcbiAgd2hpbGUgKG4gJSBrID09PSBCaWdJbnQoMCkpIHtcbiAgICBjb3VudDIgKz0gMTtcbiAgICBjb3VudDUgKz0gMTtcbiAgICBuID0gbiAvIGs7XG4gIH1cbiAgayA9IEJpZ0ludCg1KTtcbiAgd2hpbGUgKG4gJSBrID09PSBCaWdJbnQoMCkpIHtcbiAgICBjb3VudDUgKz0gMTtcbiAgICBuID0gbiAvIGs7XG4gIH1cbiAgayA9IEJpZ0ludCgzKTtcbiAgd2hpbGUgKG4gJSBrID09PSBCaWdJbnQoMCkpIHtcbiAgICBjb3VudDMgKz0gMTtcbiAgICBuID0gbiAvIGs7XG4gIH1cbiAgayA9IEJpZ0ludCgyKTtcbiAgd2hpbGUgKG4gJSBrID09PSBCaWdJbnQoMCkpIHtcbiAgICBjb3VudDIgKz0gMTtcbiAgICBuID0gbiAvIGs7XG4gIH1cbiAgaWYgKGNvdW50MiA+IDApXG4gICAgcmVzdWx0LnNldChcIjJcIiwgY291bnQyKTtcbiAgaWYgKGNvdW50MyA+IDApXG4gICAgcmVzdWx0LnNldChcIjNcIiwgY291bnQzKTtcbiAgaWYgKGNvdW50NSA+IDApXG4gICAgcmVzdWx0LnNldChcIjVcIiwgY291bnQ1KTtcbiAgayA9IEJpZ0ludCg3KTtcbiAgbGV0IGtJbmRleCA9IFwiXCI7XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKGsgKiBrIDwgbikge1xuICAgIGlmIChuICUgayA9PT0gQmlnSW50KDApKSB7XG4gICAgICBpZiAoIWtJbmRleClcbiAgICAgICAga0luZGV4ID0gay50b1N0cmluZygpO1xuICAgICAgcmVzdWx0LnNldChrSW5kZXgsIChyZXN1bHQuZ2V0KGtJbmRleCkgPz8gMCkgKyAxKTtcbiAgICAgIG4gPSBuIC8gaztcbiAgICB9IGVsc2Uge1xuICAgICAgayA9IGsgKyBQUklNRV9XSEVFTF9JTkNbaV07XG4gICAgICBrSW5kZXggPSBcIlwiO1xuICAgICAgaSA9IGkgPCA3ID8gaSArIDEgOiAwO1xuICAgIH1cbiAgfVxuICBpZiAobiAhPT0gQmlnSW50KDEpKVxuICAgIHJlc3VsdC5zZXQobi50b1N0cmluZygpLCAocmVzdWx0LmdldChuLnRvU3RyaW5nKCkpID8/IDApICsgMSk7XG4gIGNvbnN0IHIgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IFtrMiwgdl0gb2YgcmVzdWx0KVxuICAgIHIuc2V0KGJpZ2ludChrMiksIHYpO1xuICByZXR1cm4gcjtcbn1cbmZ1bmN0aW9uIGZhY3RvclBvd2VyMihuLCBleHBvbmVudCkge1xuICBjb25zdCBmYWN0b3JzID0gcHJpbWVGYWN0b3JzMihuKTtcbiAgbGV0IGYgPSBCaWdJbnQoMSk7XG4gIGxldCByID0gQmlnSW50KDEpO1xuICBjb25zdCBleHAyID0gYmlnaW50KGV4cG9uZW50KTtcbiAgZm9yIChjb25zdCBbaywgdl0gb2YgZmFjdG9ycykge1xuICAgIGNvbnN0IHYyID0gYmlnaW50KHYpO1xuICAgIGYgPSBmICogayAqKiAodjIgLyBleHAyKTtcbiAgICByID0gciAqIGsgKiogKHYyICUgZXhwMik7XG4gIH1cbiAgcmV0dXJuIFtmLCByXTtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2JveGVkLWV4cHJlc3Npb24vdXRpbHMudHNcbmZ1bmN0aW9uIGlzTGF0ZXhTdHJpbmcocykge1xuICBpZiAodHlwZW9mIHMgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIHMuc3RhcnRzV2l0aChcIiRcIikgJiYgcy5lbmRzV2l0aChcIiRcIik7XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGxhdGV4U3RyaW5nKHMpIHtcbiAgaWYgKHR5cGVvZiBzID09PSBcInN0cmluZ1wiICYmIHMuc3RhcnRzV2l0aChcIiRcIikgJiYgcy5lbmRzV2l0aChcIiRcIikpXG4gICAgcmV0dXJuIHMuc2xpY2UoMSwgLTEpO1xuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEltYWdpbmFyeUNvZWYoZXhwcikge1xuICBpZiAoZXhwci5zeW1ib2wgPT09IFwiSW1hZ2luYXJ5VW5pdFwiKVxuICAgIHJldHVybiAxO1xuICBjb25zdCB6ID0gZXhwci5udW1lcmljVmFsdWU7XG4gIGlmICh6ICE9PSBudWxsICYmIHogaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDIuZGVmYXVsdCAmJiB6LnJlID09PSAwKVxuICAgIHJldHVybiB6LmltO1xuICBpZiAoZXhwci5oZWFkID09PSBcIk5lZ2F0ZVwiKSB7XG4gICAgY29uc3QgdiA9IGdldEltYWdpbmFyeUNvZWYoZXhwci5vcDEpO1xuICAgIGlmICh2ID09PSBudWxsKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIC12O1xuICB9XG4gIGlmIChleHByLmhlYWQgPT09IFwiTXVsdGlwbHlcIiAmJiBleHByLm5vcHMgPT09IDIpIHtcbiAgICBpZiAoZXhwci5vcDEuc3ltYm9sID09PSBcIkltYWdpbmFyeVVuaXRcIilcbiAgICAgIHJldHVybiBhc0Zsb2F0KGV4cHIub3AyKTtcbiAgICBpZiAoZXhwci5vcDIuc3ltYm9sID09PSBcIkltYWdpbmFyeVVuaXRcIilcbiAgICAgIHJldHVybiBhc0Zsb2F0KGV4cHIub3AxKTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGdldEZyZWVWYXJzKGV4cHIsIHNldCkge1xuICBpZiAoZXhwci5zeW1ib2wpIHtcbiAgICBjb25zdCBkZWYgPSBleHByLmVuZ2luZS5sb29rdXBTeW1ib2woZXhwci5zeW1ib2wpO1xuICAgIGlmIChkZWY/LnZhbHVlID09PSB2b2lkIDApXG4gICAgICBzZXQuYWRkKGV4cHIuc3ltYm9sKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFleHByLm9wcyAmJiAhZXhwci5rZXlzKVxuICAgIHJldHVybjtcbiAgaWYgKGV4cHIub3BzKVxuICAgIGZvciAoY29uc3Qgb3AzIG9mIGV4cHIub3BzKVxuICAgICAgZ2V0RnJlZVZhcnMob3AzLCBzZXQpO1xuICBpZiAoZXhwci5rZXlzKVxuICAgIGZvciAoY29uc3Qga2V5IG9mIGV4cHIua2V5cylcbiAgICAgIGdldEZyZWVWYXJzKGV4cHIuZ2V0S2V5KGtleSksIHNldCk7XG4gIHJldHVybjtcbn1cbmZ1bmN0aW9uIGdldFN5bWJvbHMoZXhwciwgc2V0KSB7XG4gIGlmIChleHByLnN5bWJvbCkge1xuICAgIHNldC5hZGQoZXhwci5zeW1ib2wpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWV4cHIub3BzICYmICFleHByLmtleXMpXG4gICAgcmV0dXJuO1xuICBpZiAoZXhwci5vcHMpXG4gICAgZm9yIChjb25zdCBvcDMgb2YgZXhwci5vcHMpXG4gICAgICBnZXRTeW1ib2xzKG9wMywgc2V0KTtcbiAgaWYgKGV4cHIua2V5cylcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBleHByLmtleXMpXG4gICAgICBnZXRTeW1ib2xzKGV4cHIuZ2V0S2V5KGtleSksIHNldCk7XG4gIHJldHVybjtcbn1cbmZ1bmN0aW9uIGdldFN1YmV4cHJlc3Npb25zKGV4cHIsIGhlYWQyKSB7XG4gIGNvbnN0IHJlc3VsdCA9ICFoZWFkMiB8fCBleHByLmhlYWQgPT09IGhlYWQyID8gW2V4cHJdIDogW107XG4gIGlmIChleHByLm9wcykge1xuICAgIGZvciAoY29uc3Qgb3AzIG9mIGV4cHIub3BzKVxuICAgICAgcmVzdWx0LnB1c2goLi4uZ2V0U3ViZXhwcmVzc2lvbnMob3AzLCBoZWFkMikpO1xuICB9IGVsc2UgaWYgKGV4cHIua2V5cykge1xuICAgIGZvciAoY29uc3Qgb3AzIG9mIGV4cHIua2V5cylcbiAgICAgIHJlc3VsdC5wdXNoKC4uLmdldFN1YmV4cHJlc3Npb25zKGV4cHIuZ2V0S2V5KG9wMyksIGhlYWQyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGJpZ251bVByZWZlcnJlZChjZSkge1xuICByZXR1cm4gY2UubnVtZXJpY01vZGUgPT09IFwiYmlnbnVtXCIgfHwgY2UubnVtZXJpY01vZGUgPT09IFwiYXV0b1wiO1xufVxuZnVuY3Rpb24gY29tcGxleEFsbG93ZWQoY2UpIHtcbiAgcmV0dXJuIGNlLm51bWVyaWNNb2RlID09PSBcImF1dG9cIiB8fCBjZS5udW1lcmljTW9kZSA9PT0gXCJjb21wbGV4XCI7XG59XG5mdW5jdGlvbiBoYXNoQ29kZShzKSB7XG4gIGxldCBoYXNoMiA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKylcbiAgICBoYXNoMiA9IE1hdGguaW11bCgzMSwgaGFzaDIpICsgcy5jaGFyQ29kZUF0KGkpIHwgMDtcbiAgcmV0dXJuIE1hdGguYWJzKGhhc2gyKTtcbn1cbmZ1bmN0aW9uIGJpZ2ludFZhbHVlKGNlLCBleHByKSB7XG4gIGlmIChleHByID09PSBudWxsIHx8IGV4cHIgPT09IHZvaWQgMClcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKHR5cGVvZiBleHByID09PSBcIm51bWJlclwiKVxuICAgIHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKGV4cHIpID8gYmlnaW50KGV4cHIpIDogbnVsbDtcbiAgaWYgKGlzTnVtYmVyRXhwcmVzc2lvbihleHByKSkge1xuICAgIGNvbnN0IG51bSA9IGlzTnVtYmVyT2JqZWN0KGV4cHIpID8gZXhwci5udW0udG9TdHJpbmcoKSA6IGV4cHI7XG4gICAgbGV0IHMgPSBudW0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bbmRdJC9nLCBcIlwiKS5yZXBsYWNlKC9bXFx1MDAwOS1cXHUwMDBkXFx1MDAyMFxcdTAwYTBdL2csIFwiXCIpO1xuICAgIGlmICgvXFwoWzAtOV0rXFwpLy50ZXN0KHMpKSB7XG4gICAgICBjb25zdCBbXywgYm9keSwgcmVwZWF0LCB0cmFpbF0gPSBzLm1hdGNoKC8oLispXFwoKFswLTldKylcXCkoLiopJC8pID8/IFtdO1xuICAgICAgcyA9IGJvZHkgKyByZXBlYXQucmVwZWF0KE1hdGguY2VpbChjZS5wcmVjaXNpb24gLyByZXBlYXQubGVuZ3RoKSkgKyAodHJhaWwgPz8gXCJcIik7XG4gICAgfVxuICAgIGlmIChzID09PSBcIm5hblwiKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKHMgPT09IFwiaW5maW5pdHlcIiB8fCBzID09PSBcIitpbmZpbml0eVwiKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKHMgPT09IFwiLWluZmluaXR5XCIpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpZiAocy5pbmNsdWRlcyhcIi5cIikpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gYmlnaW50KHMpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gYXNCaWdpbnQoZXhwcikge1xuICBjb25zdCBudW0gPSBleHByLm51bWVyaWNWYWx1ZTtcbiAgaWYgKG51bSA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKHR5cGVvZiBudW0gPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzSW50ZWdlcihudW0pKVxuICAgIHJldHVybiBiaWdpbnQobnVtKTtcbiAgaWYgKG51bSBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdCAmJiBudW0uaXNJbnRlZ2VyKCkpXG4gICAgcmV0dXJuIGJpZ2ludChudW0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL3J1bGVzLnRzXG5mdW5jdGlvbiBtYXRjaFJ1bGVzKGV4cHIsIHJ1bGVzLCBzdWIyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGNvbnN0IHJ1bGUgb2YgcnVsZXMpIHtcbiAgICBjb25zdCByID0gYXBwbHlSdWxlKHJ1bGUsIGV4cHIsIHN1YjIpO1xuICAgIGlmIChyICE9PSBudWxsKVxuICAgICAgcmVzdWx0LnB1c2gocik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGJveFJ1bGVzKGNlLCBycykge1xuICBjb25zdCByZXN1bHQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBmb3IgKGNvbnN0IFtyYXdMaHMsIHJhd1Jocywgb3B0aW9uc10gb2YgcnMpIHtcbiAgICBsZXQgY29uZDtcbiAgICBjb25zdCBsYXRleCA9IGxhdGV4U3RyaW5nKG9wdGlvbnM/LmNvbmRpdGlvbik7XG4gICAgaWYgKGxhdGV4KSB7XG4gICAgICBjb25zdCBjb25kUGF0dGVybiA9IGNlLnBhdHRlcm4obGF0ZXgpO1xuICAgICAgY29uZCA9ICh4KSA9PiBjb25kUGF0dGVybi5zdWJzKHgpLnZhbHVlPy5zeW1ib2wgPT09IFwiVHJ1ZVwiO1xuICAgIH0gZWxzZVxuICAgICAgY29uZCA9IG9wdGlvbnM/LmNvbmRpdGlvbjtcbiAgICByZXN1bHQuYWRkKFtcbiAgICAgIGNlLnBhdHRlcm4ocmF3TGhzKSxcbiAgICAgIGNlLnBhdHRlcm4ocmF3UmhzKSxcbiAgICAgIG9wdGlvbnM/LnByaW9yaXR5ID8/IDAsXG4gICAgICBjb25kXG4gICAgXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGFwcGx5UnVsZShbbGhzLCByaHMsIF9wcmlvcml0eSwgY29uZGl0aW9uXSwgZXhwciwgc3Vic3RpdHV0aW9uLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN1YjIgPSBsaHMubWF0Y2goZXhwciwgeyBzdWJzdGl0dXRpb24sIC4uLm9wdGlvbnMgfSk7XG4gIGlmIChzdWIyID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAodHlwZW9mIGNvbmRpdGlvbiA9PT0gXCJmdW5jdGlvblwiICYmICFjb25kaXRpb24oc3ViMikpXG4gICAgcmV0dXJuIG51bGw7XG4gIHJldHVybiByaHMuc3VicyhzdWIyLCB7IGNhbm9uaWNhbDogdHJ1ZSB9KTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2UoZXhwciwgcnVsZVNldCwgb3B0aW9ucykge1xuICBjb25zdCBpdGVyYXRpb25MaW1pdCA9IG9wdGlvbnM/Lml0ZXJhdGlvbkxpbWl0ID8/IDE7XG4gIGxldCBpdGVyYXRpb25Db3VudCA9IDA7XG4gIGNvbnN0IG9uY2UgPSBvcHRpb25zPy5vbmNlID8/IGZhbHNlO1xuICBsZXQgZG9uZSA9IGZhbHNlO1xuICBsZXQgYXRMZWFzdE9uZVJ1bGUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB3aGlsZSAoIWRvbmUgJiYgaXRlcmF0aW9uQ291bnQgPCBpdGVyYXRpb25MaW1pdCkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgcnVsZVNldCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhcHBseVJ1bGUocnVsZSwgZXhwciwge30sIG9wdGlvbnMpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSBudWxsICYmIHJlc3VsdCAhPT0gZXhwcikge1xuICAgICAgICAgIGlmIChvbmNlKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICBkb25lID0gZmFsc2U7XG4gICAgICAgICAgYXRMZWFzdE9uZVJ1bGUgPSB0cnVlO1xuICAgICAgICAgIGV4cHIgPSByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGl0ZXJhdGlvbkNvdW50ICs9IDE7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKTtcbiAgfVxuICByZXR1cm4gYXRMZWFzdE9uZVJ1bGUgPyBleHByIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFdpbGRjYXJkTmFtZShzKSB7XG4gIGNvbnN0IG0gPSBzLm1hdGNoKC9eKF9fP18/W2EtekEtWjAtOV0rKS8pO1xuICBpZiAobSA9PT0gbnVsbClcbiAgICByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIG1bMV07XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL29yZGVyLnRzXG52YXIgaW1wb3J0X2NvbXBsZXgzID0gX190b0VTTShyZXF1aXJlX2NvbXBsZXgoKSk7XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9zeW1ib2xpYy9wb2x5bm9taWFscy50c1xuZnVuY3Rpb24gdG90YWxEZWdyZWUoZXhwcikge1xuICBpZiAoZXhwci5oZWFkID09PSBcIlBvd2VyXCIgJiYgZXhwci5vcDIubnVtZXJpY1ZhbHVlICE9PSBudWxsKSB7XG4gICAgY29uc3QgZGVnID0gYXNTbWFsbEludGVnZXIoZXhwci5vcDIpO1xuICAgIGlmIChkZWcgIT09IG51bGwgJiYgZGVnID4gMClcbiAgICAgIHJldHVybiBkZWc7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgaWYgKGV4cHIuaGVhZCA9PT0gXCJNdWx0aXBseVwiKSB7XG4gICAgbGV0IGRlZyA9IDE7XG4gICAgZm9yIChjb25zdCBhcmcgb2YgZXhwci5vcHMpIHtcbiAgICAgIGNvbnN0IHQgPSB0b3RhbERlZ3JlZShhcmcpO1xuICAgICAgaWYgKHQgPiAxKVxuICAgICAgICBkZWcgPSBkZWcgKyB0O1xuICAgIH1cbiAgICByZXR1cm4gZGVnO1xuICB9XG4gIHJldHVybiAxO1xufVxuZnVuY3Rpb24gbWF4RGVncmVlKGV4cHIpIHtcbiAgaWYgKGV4cHIuaGVhZCA9PT0gXCJQb3dlclwiICYmIGV4cHIub3AyLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGRlZyA9IGFzU21hbGxJbnRlZ2VyKGV4cHIub3AyKTtcbiAgICBpZiAoZGVnICE9PSBudWxsICYmIGRlZyA+IDApXG4gICAgICByZXR1cm4gZGVnO1xuICAgIHJldHVybiAxO1xuICB9XG4gIGlmIChleHByLmhlYWQgPT09IFwiTXVsdGlwbHlcIikge1xuICAgIGxldCBkZWcgPSAxO1xuICAgIGZvciAoY29uc3QgYXJnIG9mIGV4cHIub3BzKVxuICAgICAgZGVnID0gTWF0aC5tYXgoZGVnLCB0b3RhbERlZ3JlZShhcmcpKTtcbiAgICByZXR1cm4gZGVnO1xuICB9XG4gIHJldHVybiAxO1xufVxuZnVuY3Rpb24gbGV4KGV4cHIpIHtcbiAgaWYgKGV4cHIuc3ltYm9sKVxuICAgIHJldHVybiBleHByLnN5bWJvbDtcbiAgaWYgKGV4cHIub3BzKSB7XG4gICAgY29uc3QgaCA9IHR5cGVvZiBleHByLmhlYWQgPT09IFwic3RyaW5nXCIgPyBleHByLmhlYWQgOiBsZXgoZXhwci5oZWFkKTtcbiAgICByZXR1cm4gaCArICdcIicgKyBleHByLm9wcy5tYXAoKHgpID0+IGxleCh4KSkuZmlsdGVyKCh4KSA9PiB4Lmxlbmd0aCA+IDApLmpvaW4oJ1wiJyk7XG4gIH1cbiAgcmV0dXJuIFwiXCI7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL29yZGVyLnRzXG52YXIgREVGQVVMVF9DT01QTEVYSVRZID0gMWU1O1xuZnVuY3Rpb24gc29ydEFkZChjZSwgb3BzMikge1xuICByZXR1cm4gb3BzMi5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgYUxleCA9IGxleChhKTtcbiAgICBjb25zdCBiTGV4ID0gbGV4KGIpO1xuICAgIGlmICghYUxleCAmJiAhYkxleClcbiAgICAgIHJldHVybiBvcmRlcihhLCBiKTtcbiAgICBpZiAoIWFMZXgpXG4gICAgICByZXR1cm4gMTtcbiAgICBpZiAoIWJMZXgpXG4gICAgICByZXR1cm4gLTE7XG4gICAgaWYgKGFMZXggPCBiTGV4KVxuICAgICAgcmV0dXJuIC0xO1xuICAgIGlmIChhTGV4ID4gYkxleClcbiAgICAgIHJldHVybiAxO1xuICAgIGNvbnN0IGFUb3RhbERlZyA9IHRvdGFsRGVncmVlKGEpO1xuICAgIGNvbnN0IGJUb3RhbERlZyA9IHRvdGFsRGVncmVlKGIpO1xuICAgIGlmIChhVG90YWxEZWcgIT09IGJUb3RhbERlZylcbiAgICAgIHJldHVybiBiVG90YWxEZWcgLSBhVG90YWxEZWc7XG4gICAgY29uc3QgYU1heERlZyA9IG1heERlZ3JlZShhKTtcbiAgICBjb25zdCBiTWF4RGVnID0gbWF4RGVncmVlKGIpO1xuICAgIGlmIChhTWF4RGVnICE9PSBiTWF4RGVnKVxuICAgICAgcmV0dXJuIGFNYXhEZWcgLSBiTWF4RGVnO1xuICAgIHJldHVybiBvcmRlcihhLCBiKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBvcmRlcihhLCBiKSB7XG4gIGlmIChhID09PSBiKVxuICAgIHJldHVybiAwO1xuICBpZiAoYS5udW1lcmljVmFsdWUgIT09IG51bGwgJiYgYS5udW1lcmljVmFsdWUgPT09IGIubnVtZXJpY1ZhbHVlKVxuICAgIHJldHVybiAwO1xuICBjb25zdCBhZiA9IGFzRmxvYXQoYSk7XG4gIGlmIChhZiAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGJmID0gYXNGbG9hdChiKTtcbiAgICBpZiAoYmYgIT09IG51bGwpXG4gICAgICByZXR1cm4gYWYgLSBiZjtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKGEubnVtZXJpY1ZhbHVlIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgzLmRlZmF1bHQpIHtcbiAgICBpZiAoYi5udW1lcmljVmFsdWUgaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDMuZGVmYXVsdCkge1xuICAgICAgaWYgKGEubnVtZXJpY1ZhbHVlLnJlID09PSBiLm51bWVyaWNWYWx1ZS5yZSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMoYS5udW1lcmljVmFsdWUuaW0pID09PSBNYXRoLmFicyhiLm51bWVyaWNWYWx1ZS5pbSkpIHtcbiAgICAgICAgICByZXR1cm4gYS5udW1lcmljVmFsdWUuaW0gLSBiLm51bWVyaWNWYWx1ZS5pbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoYS5udW1lcmljVmFsdWUuaW0pIC0gTWF0aC5hYnMoYi5udW1lcmljVmFsdWUuaW0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGEubnVtZXJpY1ZhbHVlLnJlIC0gYi5udW1lcmljVmFsdWUucmU7XG4gICAgfVxuICAgIGlmIChiLm51bWVyaWNWYWx1ZSAhPT0gbnVsbClcbiAgICAgIHJldHVybiAxO1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoYS5udW1lcmljVmFsdWUpIHtcbiAgICBpZiAoYi5udW1lcmljVmFsdWUpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKGEuaGVhZCA9PT0gXCJTcXJ0XCIgJiYgYS5vcDEubnVtZXJpY1ZhbHVlKSB7XG4gICAgaWYgKGIuaGVhZCA9PT0gXCJTcXJ0XCIgJiYgYi5vcDEubnVtZXJpY1ZhbHVlKVxuICAgICAgcmV0dXJuIG9yZGVyKGEub3AxLCBiLm9wMSk7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGlmIChhLnN5bWJvbCkge1xuICAgIGlmIChiLnN5bWJvbCkge1xuICAgICAgaWYgKGEuc3ltYm9sID09PSBiLnN5bWJvbClcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gYS5zeW1ib2wgPiBiLnN5bWJvbCA/IDEgOiAtMTtcbiAgICB9XG4gICAgaWYgKGIubnVtZXJpY1ZhbHVlICE9PSBudWxsKVxuICAgICAgcmV0dXJuIDE7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGlmIChhLm9wcykge1xuICAgIGlmIChiLm9wcykge1xuICAgICAgY29uc3QgYUNvbXBsZXhpdHkgPSBhLmZ1bmN0aW9uRGVmaW5pdGlvbj8uY29tcGxleGl0eSA/PyBERUZBVUxUX0NPTVBMRVhJVFk7XG4gICAgICBjb25zdCBiQ29tcGxleGl0eSA9IGIuZnVuY3Rpb25EZWZpbml0aW9uPy5jb21wbGV4aXR5ID8/IERFRkFVTFRfQ09NUExFWElUWTtcbiAgICAgIGlmIChhQ29tcGxleGl0eSA9PT0gYkNvbXBsZXhpdHkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhLmhlYWQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGIuaGVhZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGlmIChhLmhlYWQgPT09IGIuaGVhZCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldExlYWZDb3VudChhKSAtIGdldExlYWZDb3VudChiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGEuaGVhZCA8IGIuaGVhZClcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0TGVhZkNvdW50KGEpIC0gZ2V0TGVhZkNvdW50KGIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFDb21wbGV4aXR5IC0gYkNvbXBsZXhpdHk7XG4gICAgfVxuICAgIGlmIChiLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCB8fCBiLnN5bWJvbClcbiAgICAgIHJldHVybiAxO1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoYS5zdHJpbmcpIHtcbiAgICBpZiAoYi5zdHJpbmcpIHtcbiAgICAgIGlmIChhLnN0cmluZy5sZW5ndGggIT09IGIuc3RyaW5nLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGIuc3RyaW5nLmxlbmd0aCAtIGEuc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChiLnN0cmluZyA8IGEuc3RyaW5nKVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgICBpZiAoYS5zdHJpbmcgPiBiLnN0cmluZylcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGIua2V5cylcbiAgICAgIHJldHVybiAtMTtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBpZiAoYS5rZXlzICYmIGIua2V5cykge1xuICAgIGlmIChhLmtleXNDb3VudCAhPT0gYi5rZXlzQ291bnQpXG4gICAgICByZXR1cm4gYi5rZXlzQ291bnQgLSBhLmtleXNDb3VudDtcbiAgICBsZXQgYkNvbXBsZXhpdHkgPSAwO1xuICAgIGxldCBhQ29tcGxleGl0eSA9IDA7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgYi5rZXlzKVxuICAgICAgYkNvbXBsZXhpdHkgKz0gYi5nZXRLZXkoa2V5KS5jb21wbGV4aXR5ID8/IERFRkFVTFRfQ09NUExFWElUWTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBhLmtleXMpXG4gICAgICBhQ29tcGxleGl0eSArPSBhLmdldEtleShrZXkpLmNvbXBsZXhpdHkgPz8gREVGQVVMVF9DT01QTEVYSVRZO1xuICAgIHJldHVybiBhQ29tcGxleGl0eSAtIGJDb21wbGV4aXR5O1xuICB9XG4gIHJldHVybiAoYS5jb21wbGV4aXR5ID8/IERFRkFVTFRfQ09NUExFWElUWSkgLSAoYi5jb21wbGV4aXR5ID8/IERFRkFVTFRfQ09NUExFWElUWSk7XG59XG5mdW5jdGlvbiBnZXRMZWFmQ291bnQoZXhwcikge1xuICBpZiAoZXhwci5rZXlzICE9PSBudWxsKVxuICAgIHJldHVybiAxICsgZXhwci5rZXlzQ291bnQ7XG4gIGlmICghZXhwci5vcHMpXG4gICAgcmV0dXJuIDE7XG4gIHJldHVybiAodHlwZW9mIGV4cHIuaGVhZCA9PT0gXCJzdHJpbmdcIiA/IDEgOiBnZXRMZWFmQ291bnQoZXhwci5oZWFkKSkgKyBbLi4uZXhwci5vcHNdLnJlZHVjZSgoYWNjLCB4KSA9PiBhY2MgKyBnZXRMZWFmQ291bnQoeCksIDApO1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvc3ltYm9saWMvZmxhdHRlbi50c1xuZnVuY3Rpb24gZmxhdHRlbk9wcyhvcHMyLCBoZWFkMikge1xuICBpZiAoIWhlYWQyKVxuICAgIHJldHVybiBvcHMyO1xuICBpZiAob3BzMi5ldmVyeSgoeCkgPT4gIXgub3BzIHx8IHguaGVhZCAhPT0gaGVhZDIpKVxuICAgIHJldHVybiBvcHMyO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBhcmcgb2Ygb3BzMikge1xuICAgIGlmICghYXJnLm9wcyB8fCBhcmcuaGVhZCAhPT0gaGVhZDIpXG4gICAgICByZXN1bHQucHVzaChhcmcpO1xuICAgIGVsc2Uge1xuICAgICAgcmVzdWx0LnB1c2goLi4uZmxhdHRlbk9wcyhhcmcub3BzLCBoZWFkMikpO1xuICAgIH1cbiAgfVxuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQocmVzdWx0Lmxlbmd0aCAhPT0gb3BzMi5sZW5ndGgpO1xuICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gb3BzMi5sZW5ndGgpXG4gICAgcmV0dXJuIG9wczI7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmbGF0dGVuU2VxdWVuY2UoeHMpIHtcbiAgaWYgKHhzLmV2ZXJ5KCh4KSA9PiB4LmhlYWQgIT09IFwiU2VxdWVuY2VcIikpXG4gICAgcmV0dXJuIHhzO1xuICBjb25zdCB5cyA9IFtdO1xuICBmb3IgKGNvbnN0IHggb2YgeHMpIHtcbiAgICBpZiAoeC5pc1ZhbGlkICYmIHguaGVhZCA9PT0gXCJTZXF1ZW5jZVwiKSB7XG4gICAgICBpZiAoeC5vcHMpXG4gICAgICAgIHlzLnB1c2goLi4ueC5vcHMpO1xuICAgIH0gZWxzZVxuICAgICAgeXMucHVzaCh4KTtcbiAgfVxuICByZXR1cm4geXM7XG59XG5mdW5jdGlvbiBjYW5vbmljYWwoeHMpIHtcbiAgcmV0dXJuIHhzLmV2ZXJ5KCh4KSA9PiB4LmlzQ2Fub25pY2FsKSA/IHhzIDogeHMubWFwKCh4KSA9PiB4LmNhbm9uaWNhbCk7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9udW1lcmljcy9yYXRpb25hbHMudHNcbnZhciBpbXBvcnRfY29tcGxleDQgPSBfX3RvRVNNKHJlcXVpcmVfY29tcGxleCgpKTtcbmZ1bmN0aW9uIGlzUmF0aW9uYWwoeCkge1xuICByZXR1cm4geCAhPT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KHgpO1xufVxuZnVuY3Rpb24gaXNNYWNoaW5lUmF0aW9uYWwoeCkge1xuICByZXR1cm4geCAhPT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KHgpICYmIHR5cGVvZiB4WzBdID09PSBcIm51bWJlclwiO1xufVxuZnVuY3Rpb24gaXNCaWdSYXRpb25hbCh4KSB7XG4gIHJldHVybiB4ICE9PSBudWxsICYmIEFycmF5LmlzQXJyYXkoeCkgJiYgdHlwZW9mIHhbMF0gPT09IFwiYmlnaW50XCI7XG59XG5mdW5jdGlvbiBpc1JhdGlvbmFsWmVybyh4KSB7XG4gIHJldHVybiB4WzBdID09IDA7XG59XG5mdW5jdGlvbiBpc1JhdGlvbmFsT25lKHgpIHtcbiAgcmV0dXJuIHhbMF0gPT09IHhbMV07XG59XG5mdW5jdGlvbiBpc1JhdGlvbmFsTmVnYXRpdmVPbmUoeCkge1xuICByZXR1cm4geFswXSA9PT0gLXhbMV07XG59XG5mdW5jdGlvbiBtYWNoaW5lTnVtZXJhdG9yKHgpIHtcbiAgcmV0dXJuIE51bWJlcih4WzBdKTtcbn1cbmZ1bmN0aW9uIG1hY2hpbmVEZW5vbWluYXRvcih4KSB7XG4gIHJldHVybiBOdW1iZXIoeFsxXSk7XG59XG5mdW5jdGlvbiBpc05lZyh4KSB7XG4gIHJldHVybiB4WzBdIDwgMDtcbn1cbmZ1bmN0aW9uIG5lZyh4KSB7XG4gIHJldHVybiBbLXhbMF0sIHhbMV1dO1xufVxuZnVuY3Rpb24gaW52ZXJzZSh4KSB7XG4gIHJldHVybiB4WzBdIDwgMCA/IFsteFsxXSwgLXhbMF1dIDogW3hbMV0sIHhbMF1dO1xufVxuZnVuY3Rpb24gYXNSYXRpb25hbChleHByKSB7XG4gIGNvbnN0IG51bSA9IGV4cHIubnVtZXJpY1ZhbHVlO1xuICBpZiAobnVtID09PSBudWxsKVxuICAgIHJldHVybiB2b2lkIDA7XG4gIGlmIChBcnJheS5pc0FycmF5KG51bSkpXG4gICAgcmV0dXJuIG51bTtcbiAgaWYgKHR5cGVvZiBudW0gPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzSW50ZWdlcihudW0pKVxuICAgIHJldHVybiBbbnVtLCAxXTtcbiAgaWYgKG51bSBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdCAmJiBudW0uaXNJbnRlZ2VyKCkpXG4gICAgcmV0dXJuIFtiaWdpbnQobnVtKSwgQmlnSW50KDEpXTtcbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGFzTWFjaGluZVJhdGlvbmFsKHIpIHtcbiAgcmV0dXJuIFtOdW1iZXIoclswXSksIE51bWJlcihyWzFdKV07XG59XG5mdW5jdGlvbiBhZGQyKGxocywgcmhzKSB7XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChcbiAgICBBcnJheS5pc0FycmF5KHJocykgfHwgcmhzLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCAmJiAhKHJocyBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4NC5kZWZhdWx0KVxuICApO1xuICBpZiAodHlwZW9mIGxoc1swXSA9PT0gXCJudW1iZXJcIiAmJiAhTnVtYmVyLmlzRmluaXRlKGxoc1swXSkpXG4gICAgcmV0dXJuIGxocztcbiAgY29uc3QgcmhzTnVtID0gQXJyYXkuaXNBcnJheShyaHMpID8gcmhzIDogcmhzLm51bWVyaWNWYWx1ZTtcbiAgaWYgKHJoc051bSA9PT0gbnVsbClcbiAgICByZXR1cm4gbGhzO1xuICBpZiAoQXJyYXkuaXNBcnJheShyaHNOdW0pKSB7XG4gICAgaWYgKGlzQmlnUmF0aW9uYWwocmhzTnVtKSkge1xuICAgICAgbGhzID0gW2JpZ2ludChsaHNbMF0pLCBiaWdpbnQobGhzWzFdKV07XG4gICAgICByZXR1cm4gW3Joc051bVsxXSAqIGxoc1swXSArIHJoc051bVswXSAqIGxoc1sxXSwgcmhzTnVtWzFdICogbGhzWzFdXTtcbiAgICB9XG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUocmhzTnVtWzBdKSlcbiAgICAgIHJldHVybiByaHNOdW07XG4gICAgaWYgKGlzQmlnUmF0aW9uYWwobGhzKSkge1xuICAgICAgY29uc3QgYmlnUmhzID0gW2JpZ2ludChyaHNOdW1bMF0pLCBiaWdpbnQocmhzTnVtWzFdKV07XG4gICAgICByZXR1cm4gW2JpZ1Joc1sxXSAqIGxoc1swXSArIGJpZ1Joc1swXSAqIGxoc1sxXSwgYmlnUmhzWzFdICogbGhzWzFdXTtcbiAgICB9XG4gICAgcmV0dXJuIFtyaHNOdW1bMV0gKiBsaHNbMF0gKyByaHNOdW1bMF0gKiBsaHNbMV0sIHJoc051bVsxXSAqIGxoc1sxXV07XG4gIH1cbiAgaWYgKHJoc051bSBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdCkge1xuICAgIGlmIChyaHNOdW0uaXNOYU4oKSlcbiAgICAgIHJldHVybiBbTnVtYmVyLk5hTiwgMV07XG4gICAgaWYgKCFyaHNOdW0uaXNGaW5pdGUoKSlcbiAgICAgIHJldHVybiBbcmhzTnVtLmlzTmVnYXRpdmUoKSA/IC1JbmZpbml0eSA6IEluZmluaXR5LCAxXTtcbiAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQocmhzTnVtLmlzSW50ZWdlcigpKTtcbiAgICBpZiAoaXNNYWNoaW5lUmF0aW9uYWwobGhzKSlcbiAgICAgIGxocyA9IFtiaWdpbnQobGhzWzBdKSwgYmlnaW50KGxoc1sxXSldO1xuICAgIHJldHVybiBbbGhzWzBdICsgbGhzWzFdICogYmlnaW50KHJoc051bS50b1N0cmluZygpKSwgbGhzWzFdXTtcbiAgfVxuICBpZiAocmhzTnVtIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXg0LmRlZmF1bHQpXG4gICAgcmV0dXJuIFtOdW1iZXIuTmFOLCAxXTtcbiAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KCFOdW1iZXIuaXNGaW5pdGUocmhzTnVtKSB8fCBOdW1iZXIuaXNJbnRlZ2VyKHJoc051bSkpO1xuICBpZiAoIU51bWJlci5pc0Zpbml0ZShyaHNOdW0pKVxuICAgIHJldHVybiBbcmhzTnVtLCAxXTtcbiAgaWYgKGlzTWFjaGluZVJhdGlvbmFsKGxocykpXG4gICAgcmV0dXJuIFtsaHNbMF0gKyBsaHNbMV0gKiByaHNOdW0sIGxoc1sxXV07XG4gIHJldHVybiBbbGhzWzBdICsgbGhzWzFdICogYmlnaW50KHJoc051bSksIGxoc1sxXV07XG59XG5mdW5jdGlvbiBtdWwyKGxocywgcmhzKSB7XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChcbiAgICBBcnJheS5pc0FycmF5KHJocykgfHwgcmhzLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCAmJiAhKHJocyBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4NC5kZWZhdWx0KVxuICApO1xuICBpZiAoQXJyYXkuaXNBcnJheShyaHMpKSB7XG4gICAgaWYgKGlzTWFjaGluZVJhdGlvbmFsKGxocykgJiYgaXNNYWNoaW5lUmF0aW9uYWwocmhzKSlcbiAgICAgIHJldHVybiBbbGhzWzBdICogcmhzWzBdLCBsaHNbMV0gKiByaHNbMV1dO1xuICAgIGlmIChpc01hY2hpbmVSYXRpb25hbChsaHMpKVxuICAgICAgbGhzID0gW2JpZ2ludChsaHNbMF0pLCBiaWdpbnQobGhzWzFdKV07XG4gICAgaWYgKGlzTWFjaGluZVJhdGlvbmFsKHJocykpXG4gICAgICByaHMgPSBbYmlnaW50KHJoc1swXSksIGJpZ2ludChyaHNbMV0pXTtcbiAgICByZXR1cm4gW2xoc1swXSAqIHJoc1swXSwgbGhzWzFdICogcmhzWzFdXTtcbiAgfVxuICBjb25zdCByaHNOdW0gPSByaHMubnVtZXJpY1ZhbHVlO1xuICBpZiAocmhzTnVtICE9PSBudWxsICYmIHR5cGVvZiByaHNOdW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoTnVtYmVyLmlzSW50ZWdlcihyaHNOdW0pKTtcbiAgICBpZiAoaXNNYWNoaW5lUmF0aW9uYWwobGhzKSlcbiAgICAgIHJldHVybiBbbGhzWzBdICogcmhzTnVtLCBsaHNbMV1dO1xuICAgIHJldHVybiBbbGhzWzBdICogYmlnaW50KHJoc051bSksIGxoc1sxXV07XG4gIH1cbiAgaWYgKHJoc051bSBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdCkge1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChyaHNOdW0uaXNJbnRlZ2VyKCkpO1xuICAgIGlmIChpc01hY2hpbmVSYXRpb25hbChsaHMpKVxuICAgICAgcmV0dXJuIFtiaWdpbnQocmhzTnVtLnRvU3RyaW5nKCkpICogYmlnaW50KGxoc1swXSksIGJpZ2ludChsaHNbMV0pXTtcbiAgICByZXR1cm4gW2JpZ2ludChyaHNOdW0udG9TdHJpbmcoKSkgKiBsaHNbMF0sIGxoc1sxXV07XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkocmhzTnVtKSkge1xuICAgIGlmIChpc0JpZ1JhdGlvbmFsKHJoc051bSkpXG4gICAgICByZXR1cm4gW3Joc051bVswXSAqIGJpZ2ludChsaHNbMF0pLCByaHNOdW1bMV0gKiBiaWdpbnQobGhzWzFdKV07XG4gICAgZWxzZSBpZiAoaXNNYWNoaW5lUmF0aW9uYWwobGhzKSlcbiAgICAgIHJldHVybiBbbGhzWzBdICogcmhzTnVtWzBdLCBsaHNbMV0gKiByaHNOdW1bMV1dO1xuICAgIHJldHVybiBbbGhzWzBdICogYmlnaW50KHJoc051bVswXSksIGxoc1sxXSAqIGJpZ2ludChyaHNOdW1bMV0pXTtcbiAgfVxuICByZXR1cm4gbGhzO1xufVxuZnVuY3Rpb24gcG93MihyLCBleHAyKSB7XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChOdW1iZXIuaXNJbnRlZ2VyKGV4cDIpKTtcbiAgaWYgKGV4cDIgPT09IDApXG4gICAgcmV0dXJuIFsxLCAxXTtcbiAgaWYgKGV4cDIgPCAwKSB7XG4gICAgciA9IGludmVyc2Uocik7XG4gICAgZXhwMiA9IC1leHAyO1xuICB9XG4gIGlmIChleHAyID09PSAxKVxuICAgIHJldHVybiByO1xuICBpZiAoaXNNYWNoaW5lUmF0aW9uYWwocikpXG4gICAgcmV0dXJuIFtNYXRoLnBvdyhyWzBdLCBleHAyKSwgTWF0aC5wb3coclsxXSwgZXhwMildO1xuICBjb25zdCBiaWdleHAgPSBiaWdpbnQoZXhwMik7XG4gIHJldHVybiBbclswXSAqKiBiaWdleHAsIHJbMV0gKiogYmlnZXhwXTtcbn1cbmZ1bmN0aW9uIHJlZHVjZWRSYXRpb25hbChyKSB7XG4gIGlmIChpc01hY2hpbmVSYXRpb25hbChyKSkge1xuICAgIGlmIChyWzBdID09PSAxIHx8IHJbMV0gPT09IDEpXG4gICAgICByZXR1cm4gcjtcbiAgICBpZiAoclsxXSA8IDApXG4gICAgICByID0gWy1yWzBdLCAtclsxXV07XG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoclsxXSkpXG4gICAgICByZXR1cm4gWzAsIDFdO1xuICAgIGNvbnN0IGcyID0gZ2NkKHJbMF0sIHJbMV0pO1xuICAgIHJldHVybiBnMiA8PSAxID8gciA6IFtyWzBdIC8gZzIsIHJbMV0gLyBnMl07XG4gIH1cbiAgaWYgKHJbMF0gPT09IEJpZ0ludCgxKSB8fCByWzFdID09PSBCaWdJbnQoMSkpXG4gICAgcmV0dXJuIHI7XG4gIGlmIChyWzFdIDwgMClcbiAgICByID0gWy1yWzBdLCAtclsxXV07XG4gIGNvbnN0IGcgPSBnY2QyKHJbMF0sIHJbMV0pO1xuICBpZiAoZyA8PSAxKVxuICAgIHJldHVybiByO1xuICByZXR1cm4gW3JbMF0gLyBnLCByWzFdIC8gZ107XG59XG5mdW5jdGlvbiByYXRpb25hbGl6ZSh4KSB7XG4gIGlmICghTnVtYmVyLmlzRmluaXRlKHgpKVxuICAgIHJldHVybiB4O1xuICBjb25zdCBmcmFjdGlvbmFsID0geCAlIDE7XG4gIGlmIChmcmFjdGlvbmFsID09PSAwKVxuICAgIHJldHVybiB4O1xuICBjb25zdCBlcHMgPSAxZS0xNTtcbiAgbGV0IGEgPSBNYXRoLmZsb29yKHgpO1xuICBsZXQgaDEgPSAxO1xuICBsZXQgazEgPSAwO1xuICBsZXQgaCA9IGE7XG4gIGxldCBrID0gMTtcbiAgd2hpbGUgKHggLSBhID4gZXBzICogayAqIGspIHtcbiAgICB4ID0gMSAvICh4IC0gYSk7XG4gICAgYSA9IE1hdGguZmxvb3IoeCk7XG4gICAgY29uc3QgaDIgPSBoMTtcbiAgICBoMSA9IGg7XG4gICAgY29uc3QgazIgPSBrMTtcbiAgICBrMSA9IGs7XG4gICAgaCA9IGgyICsgYSAqIGgxO1xuICAgIGsgPSBrMiArIGEgKiBrMTtcbiAgfVxuICByZXR1cm4gW2gsIGtdO1xufVxuZnVuY3Rpb24gYXNDb2VmZmljaWVudChleHByKSB7XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChleHByLmlzQ2Fub25pY2FsKTtcbiAgY29uc3QgY2UgPSBleHByLmVuZ2luZTtcbiAgaWYgKGV4cHIuaGVhZCA9PT0gXCJNdWx0aXBseVwiKSB7XG4gICAgY29uc3QgcmVzdCA9IFtdO1xuICAgIGxldCBjb2VmID0gWzEsIDFdO1xuICAgIGZvciAoY29uc3QgYXJnIG9mIGV4cHIub3BzKSB7XG4gICAgICBjb25zdCBuMiA9IGFyZy5udW1lcmljVmFsdWU7XG4gICAgICBpZiAobjIgIT09IG51bGwgJiYgKHR5cGVvZiBuMiA9PT0gXCJudW1iZXJcIiAmJiBOdW1iZXIuaXNJbnRlZ2VyKG4yKSB8fCBuMiBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdCAmJiBuMi5pc0ludGVnZXIoKSB8fCBpc1JhdGlvbmFsKG4yKSkpXG4gICAgICAgIGNvZWYgPSBtdWwyKGNvZWYsIGFyZyk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlc3QucHVzaChhcmcpO1xuICAgIH1cbiAgICBjb2VmID0gcmVkdWNlZFJhdGlvbmFsKGNvZWYpO1xuICAgIGlmIChpc1JhdGlvbmFsT25lKGNvZWYpKVxuICAgICAgcmV0dXJuIFtbMSwgMV0sIGV4cHJdO1xuICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiBbY29lZiwgY2UuX09ORV07XG4gICAgaWYgKHJlc3QubGVuZ3RoID09PSAxKVxuICAgICAgcmV0dXJuIFtjb2VmLCByZXN0WzBdXTtcbiAgICByZXR1cm4gW2NvZWYsIGNlLm11bChyZXN0KV07XG4gIH1cbiAgaWYgKGV4cHIuaGVhZCA9PT0gXCJEaXZpZGVcIikge1xuICAgIGxldCBbY29lZjEsIG51bWVyXSA9IGFzQ29lZmZpY2llbnQoZXhwci5vcDEpO1xuICAgIGNvbnN0IFtjb2VmMiwgZGVub21dID0gYXNDb2VmZmljaWVudChleHByLm9wMik7XG4gICAgY29uc3QgY29lZiA9IHJlZHVjZWRSYXRpb25hbChtdWwyKGNvZWYxLCBpbnZlcnNlKGNvZWYyKSkpO1xuICAgIGlmIChkZW5vbS5pc09uZSlcbiAgICAgIHJldHVybiBbY29lZiwgbnVtZXJdO1xuICAgIHJldHVybiBbY29lZiwgY2UuZGl2KG51bWVyLCBkZW5vbSldO1xuICB9XG4gIGlmIChleHByLmhlYWQgPT09IFwiUG93ZXJcIikge1xuICAgIGlmIChleHByLm9wMi5udW1lcmljVmFsdWUgPT09IG51bGwpXG4gICAgICByZXR1cm4gW1sxLCAxXSwgZXhwcl07XG4gICAgbGV0IFtjb2VmLCBiYXNlXSA9IGFzQ29lZmZpY2llbnQoZXhwci5vcDEpO1xuICAgIGlmIChpc1JhdGlvbmFsT25lKGNvZWYpKVxuICAgICAgcmV0dXJuIFtbMSwgMV0sIGV4cHJdO1xuICAgIGNvbnN0IGV4cG9uZW50ID0gZXhwci5vcDI7XG4gICAgY29uc3QgZSA9IGFzU21hbGxJbnRlZ2VyKGV4cG9uZW50KTtcbiAgICBpZiAoZSA9PT0gLTEpXG4gICAgICByZXR1cm4gW2ludmVyc2UoY29lZiksIGNlLmludihiYXNlKV07XG4gICAgaWYgKGUgIT09IG51bGwpXG4gICAgICByZXR1cm4gW3BvdzIoY29lZiwgZSksIGNlLnBvdyhiYXNlLCBleHBvbmVudCldO1xuICAgIGlmIChleHBvbmVudC5udW1lcmljVmFsdWUgIT09IG51bGwgJiYgQXJyYXkuaXNBcnJheShleHBvbmVudC5udW1lcmljVmFsdWUpKSB7XG4gICAgICBjb25zdCBbZW4sIGVkXSA9IGFzTWFjaGluZVJhdGlvbmFsKGV4cG9uZW50Lm51bWVyaWNWYWx1ZSk7XG4gICAgICBjb25zdCBbbnVtZXIsIGRlbm9tXSA9IGFzTWFjaGluZVJhdGlvbmFsKGNvZWYpO1xuICAgICAgaWYgKG51bWVyID4gMCAmJiBNYXRoLmFicyhlbikgPT09IDEpIHtcbiAgICAgICAgY29uc3QgW25Db2VmLCBuUmVzdF0gPSBmYWN0b3JQb3dlcihudW1lciwgZWQpO1xuICAgICAgICBjb25zdCBbZENvZWYsIGRSZXN0XSA9IGZhY3RvclBvd2VyKGRlbm9tLCBlZCk7XG4gICAgICAgIGlmIChuQ29lZiA9PT0gMSAmJiBkQ29lZiA9PT0gMSlcbiAgICAgICAgICByZXR1cm4gW1sxLCAxXSwgZXhwcl07XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgZW4gPT09IDEgPyBbbkNvZWYsIGRDb2VmXSA6IFtkQ29lZiwgbkNvZWZdLFxuICAgICAgICAgIGNlLnBvdyhjZS5tdWwoW2NlLm51bWJlcihbblJlc3QsIGRSZXN0XSksIGJhc2VdKSwgZXhwb25lbnQpXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbWzEsIDFdLCBleHByXTtcbiAgfVxuICBpZiAoZXhwci5oZWFkID09PSBcIkFkZFwiKSB7XG4gIH1cbiAgaWYgKGV4cHIuaGVhZCA9PT0gXCJOZWdhdGVcIikge1xuICAgIGNvbnN0IFtjb2VmLCByZXN0XSA9IGFzQ29lZmZpY2llbnQoZXhwci5vcDEpO1xuICAgIHJldHVybiBbbmVnKGNvZWYpLCByZXN0XTtcbiAgfVxuICBjb25zdCBuID0gZXhwci5udW1lcmljVmFsdWU7XG4gIGlmIChuICE9PSBudWxsKSB7XG4gICAgaWYgKG4gaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpIHtcbiAgICAgIGlmIChuLmlzSW50ZWdlcigpKVxuICAgICAgICByZXR1cm4gW1tiaWdpbnQobi50b1N0cmluZygpKSwgQmlnSW50KDEpXSwgY2UuX09ORV07XG4gICAgICBpZiAobi5pc05lZ2F0aXZlKCkpXG4gICAgICAgIHJldHVybiBbWy0xLCAxXSwgY2UubnVtYmVyKG4ubmVnKCkpXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihuKSlcbiAgICAgICAgcmV0dXJuIFtbbiwgMV0sIGNlLl9PTkVdO1xuICAgICAgaWYgKG4gPCAwKVxuICAgICAgICByZXR1cm4gW1stMSwgMV0sIGNlLm51bWJlcigtbildO1xuICAgIH1cbiAgICBpZiAoaXNSYXRpb25hbChuKSlcbiAgICAgIHJldHVybiBbbiwgY2UuX09ORV07XG4gICAgaWYgKG4gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDQuZGVmYXVsdCAmJiBuLnJlIDwgMClcbiAgICAgIHJldHVybiBbWy0xLCAxXSwgY2UubnVtYmVyKGNlLmNvbXBsZXgoLW4ucmUsIC1uLmltKSldO1xuICB9XG4gIHJldHVybiBbWzEsIDFdLCBleHByXTtcbn1cbmZ1bmN0aW9uIHNpZ25EaWZmKGxocywgcmhzLCB0b2xlcmFuY2UpIHtcbiAgaWYgKGxocyA9PT0gcmhzKVxuICAgIHJldHVybiAwO1xuICBjb25zdCBsaHNOID0gbGhzLk4oKTtcbiAgY29uc3QgcmhzTiA9IHJocy5OKCk7XG4gIGNvbnN0IGxoc051bSA9IGxoc04ubnVtZXJpY1ZhbHVlO1xuICBjb25zdCByaHNOdW0gPSByaHNOLm51bWVyaWNWYWx1ZTtcbiAgaWYgKGxoc051bSA9PT0gbnVsbCB8fCByaHNOdW0gPT09IG51bGwpIHtcbiAgICBjb25zdCBsaHNTID0gbGhzLnNnbjtcbiAgICBjb25zdCByaHNTID0gcmhzLnNnbjtcbiAgICBpZiAodHlwZW9mIGxoc1MgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHJoc1MgIT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIGlmIChsaHNTID09PSAwICYmIHJoc1MgPT09IDApXG4gICAgICByZXR1cm4gMDtcbiAgICBpZiAobGhzUyA8IDAgJiYgcmhzUyA+IDApXG4gICAgICByZXR1cm4gLTE7XG4gICAgaWYgKGxoc1MgPiAwICYmIHJoc1MgPCAwKVxuICAgICAgcmV0dXJuIDE7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICB0b2xlcmFuY2UgPz8gKHRvbGVyYW5jZSA9IGxocy5lbmdpbmUudG9sZXJhbmNlKTtcbiAgaWYgKGxoc051bSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4NC5kZWZhdWx0ICYmIHJoc051bSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4NC5kZWZhdWx0KVxuICAgIHJldHVybiBjaG9wKGxoc051bS5yZSAtIHJoc051bS5yZSwgdG9sZXJhbmNlKSA9PT0gMCAmJiBjaG9wKGxoc051bS5pbSAtIHJoc051bS5pbSwgdG9sZXJhbmNlKSA9PT0gMCA/IDAgOiB2b2lkIDA7XG4gIGlmIChsaHNOdW0gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDQuZGVmYXVsdCB8fCByaHNOdW0gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDQuZGVmYXVsdClcbiAgICByZXR1cm4gdm9pZCAwO1xuICBpZiAoaXNSYXRpb25hbChsaHNOdW0pIHx8IGlzUmF0aW9uYWwocmhzTnVtKSlcbiAgICByZXR1cm4gdm9pZCAwO1xuICBpZiAodHlwZW9mIGxoc051bSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgcmhzTnVtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKGNob3AocmhzTnVtIC0gbGhzTnVtLCB0b2xlcmFuY2UpID09PSAwKVxuICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIGxoc051bSA8IHJoc051bSA/IC0xIDogMTtcbiAgfVxuICBjb25zdCBjZSA9IGxocy5lbmdpbmU7XG4gIGNvbnN0IGRlbHRhID0gY2UuYmlnbnVtKHJoc051bSkuc3ViKGNlLmJpZ251bShsaHNOdW0pKTtcbiAgaWYgKGNob3AoZGVsdGEsIHRvbGVyYW5jZSkgPT09IDApXG4gICAgcmV0dXJuIDA7XG4gIHJldHVybiBkZWx0YS5pc1BvcygpID8gMSA6IC0xO1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvc3ltYm9saWMvc3VtLnRzXG52YXIgaW1wb3J0X2NvbXBsZXg1ID0gX190b0VTTShyZXF1aXJlX2NvbXBsZXgoKSk7XG52YXIgU3VtID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjZSwgeHMsIG9wdGlvbnMpIHtcbiAgICAvLyBJZiBgZmFsc2VgLCB0aGUgcnVubmluZyBzdW1zIGFyZSBub3QgY2FsY3VsYXRlZFxuICAgIHRoaXMuX2lzQ2Fub25pY2FsID0gdHJ1ZTtcbiAgICB0aGlzLl9pbWFnaW5hcnkgPSAwO1xuICAgIHRoaXMuX3Bvc0luZmluaXR5Q291bnQgPSAwO1xuICAgIHRoaXMuX25lZ0luZmluaXR5Q291bnQgPSAwO1xuICAgIHRoaXMuX25hTkNvdW50ID0gMDtcbiAgICAvLyBFYWNoIHRlcm0gaXMgZmFjdG9yZWQgYXMgdGhlIHByb2R1Y3Qgb2YgYSByYXRpb25hbCBhbmQgYW4gZXhwcmVzc2lvblxuICAgIC8vIEZvciBub3csIG9ubHkgcmF0aW9uYWxzIGFyZSBmYWN0b3JlZCwgc28gYDEuMnggKyAyLjV4YCBhcmUgbm90IGNvbWJpbmVkLlxuICAgIHRoaXMuX3Rlcm1zID0gW107XG4gICAgb3B0aW9ucyA/PyAob3B0aW9ucyA9IHt9KTtcbiAgICBpZiAoIShcImNhbm9uaWNhbFwiIGluIG9wdGlvbnMpKVxuICAgICAgdGhpcy5faXNDYW5vbmljYWwgPSB0cnVlO1xuICAgIGVsc2VcbiAgICAgIHRoaXMuX2lzQ2Fub25pY2FsID0gb3B0aW9ucy5jYW5vbmljYWw7XG4gICAgdGhpcy5lbmdpbmUgPSBjZTtcbiAgICB0aGlzLl9yYXRpb25hbCA9IGJpZ251bVByZWZlcnJlZChjZSkgPyBbQmlnSW50KDApLCBCaWdJbnQoMSldIDogWzAsIDFdO1xuICAgIHRoaXMuX2JpZ251bSA9IGNlLl9CSUdOVU1fWkVSTztcbiAgICB0aGlzLl9udW1iZXIgPSAwO1xuICAgIGlmICh4cylcbiAgICAgIGZvciAoY29uc3QgeCBvZiB4cylcbiAgICAgICAgdGhpcy5hZGRUZXJtKHgpO1xuICB9XG4gIGdldCBpc0VtcHR5KCkge1xuICAgIGlmICghdGhpcy5faXNDYW5vbmljYWwpXG4gICAgICByZXR1cm4gdGhpcy5fdGVybXMubGVuZ3RoID09PSAwO1xuICAgIHJldHVybiB0aGlzLl90ZXJtcy5sZW5ndGggPT09IDAgJiYgaXNSYXRpb25hbFplcm8odGhpcy5fcmF0aW9uYWwpICYmIHRoaXMuX2ltYWdpbmFyeSA9PT0gMCAmJiB0aGlzLl9udW1iZXIgPT09IDAgJiYgdGhpcy5fYmlnbnVtLmlzWmVybygpICYmIHRoaXMuX25lZ0luZmluaXR5Q291bnQgPT09IDAgJiYgdGhpcy5fcG9zSW5maW5pdHlDb3VudCA9PT0gMCAmJiB0aGlzLl9uYU5Db3VudCA9PT0gMDtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgdGVybSB0byB0aGUgc3VtLlxuICAgKlxuICAgKiBBIHRlcm0gaXMgYSByYXRpb25hbCBjb2VmZmljaWVudCBhbmQgYW4gZXhwcmVzc2lvbi5cbiAgICogT3B0aW9uYWxseSwgdGhlIHRlcm0gaXMgbXVsdGlwbGllZCBieSB0aGUgY29uc3RhbnQgYGNgIGJlZm9yZSBiZWluZyBhZGRlZC5cbiAgICpcbiAgICogSWYgdGhlIHN1bSBhbHJlYWR5IGhhcyB0aGlzIHRlcm0sIHRoZSBjb2VmZmljaWVudCBpcyBhZGRlZFxuICAgKiB0byB0aGUgcHJldmlvdXMgb25lLiBPdGhlcndpc2UsIGEgbmV3IGVudHJ5IGlzIGFkZGVkLlxuICAgKlxuICAgKiBFLmcuIFwiMnggKyB4ICsgMS81IHlcIlxuICAgKiAgLT4gW1sneCcsIFszLCAxXV0sIFsneScsIFsxLCA1XV1dXG4gICAqL1xuICBhZGRUZXJtKHRlcm0sIGMpIHtcbiAgICBpZiAodGVybS5pc05vdGhpbmcpXG4gICAgICByZXR1cm47XG4gICAgaWYgKHRlcm0uaXNOYU4gfHwgdGVybS5pc0ltYWdpbmFyeSAmJiAhY29tcGxleEFsbG93ZWQodGhpcy5lbmdpbmUpKSB7XG4gICAgICB0aGlzLl9uYU5Db3VudCArPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5faXNDYW5vbmljYWwpIHtcbiAgICAgIGlmICh0ZXJtLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAodGVybS5pc0luZmluaXR5KSB7XG4gICAgICAgICAgaWYgKHRlcm0uaXNQb3NpdGl2ZSlcbiAgICAgICAgICAgIHRoaXMuX3Bvc0luZmluaXR5Q291bnQgKz0gMTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl9uZWdJbmZpbml0eUNvdW50ICs9IDE7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSBhc1JhdGlvbmFsKHRlcm0pO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIHRoaXMuX3JhdGlvbmFsID0gYWRkMih0aGlzLl9yYXRpb25hbCwgYyA9PT0gdm9pZCAwID8gciA6IG11bDIociwgYykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW0gPSB0ZXJtLm51bWVyaWNWYWx1ZTtcbiAgICAgICAgaWYgKG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KCFOdW1iZXIuaXNJbnRlZ2VyKG51bSkpO1xuICAgICAgICAgIGlmIChiaWdudW1QcmVmZXJyZWQodGhpcy5lbmdpbmUpKVxuICAgICAgICAgICAgdGhpcy5fYmlnbnVtID0gdGhpcy5fYmlnbnVtLmFkZChudW0pO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuX251bWJlciArPSBudW07XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW0gIT09IG51bGwgJiYgbnVtIGluc3RhbmNlb2YgZGVjaW1hbF9kZWZhdWx0KSB7XG4gICAgICAgICAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KCFudW0uaXNJbnRlZ2VyKCkpO1xuICAgICAgICAgIHRoaXMuX2JpZ251bSA9IHRoaXMuX2JpZ251bS5hZGQobnVtKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bSAhPT0gbnVsbCAmJiBudW0gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDUuZGVmYXVsdCkge1xuICAgICAgICAgIGxldCByZSA9IG51bS5yZTtcbiAgICAgICAgICBsZXQgaW0gPSBudW0uaW07XG4gICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIocmUpKSB7XG4gICAgICAgICAgICB0aGlzLl9yYXRpb25hbCA9IGFkZDIodGhpcy5fcmF0aW9uYWwsIG11bDIoW3JlLCAxXSwgYyA/PyBbMSwgMV0pKTtcbiAgICAgICAgICAgIHJlID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGJpZ251bVByZWZlcnJlZCh0aGlzLmVuZ2luZSkpXG4gICAgICAgICAgICAgIHRoaXMuX2JpZ251bSA9IHRoaXMuX2JpZ251bS5hZGQocmUpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB0aGlzLl9udW1iZXIgKz0gcmU7XG4gICAgICAgICAgICByZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGltKSkge1xuICAgICAgICAgICAgaWYgKGMgPT09IHZvaWQgMClcbiAgICAgICAgICAgICAgdGhpcy5faW1hZ2luYXJ5ICs9IGltO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNNYWNoaW5lUmF0aW9uYWwoYykpXG4gICAgICAgICAgICAgIHRoaXMuX2ltYWdpbmFyeSArPSBpbSAqIGNbMF0gLyBjWzFdO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB0aGlzLl9pbWFnaW5hcnkgKz0gdGhpcy5lbmdpbmUuYmlnbnVtKGNbMF0pLm11bChpbSkuZGl2KHRoaXMuZW5naW5lLmJpZ251bShjWzFdKSkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIGltID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlID09PSAwICYmIGltID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIHRlcm0gPSB0aGlzLmVuZ2luZS5udW1iZXIodGhpcy5lbmdpbmUuY29tcGxleChyZSwgaW0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgY29lZjtcbiAgICBbY29lZiwgdGVybV0gPSBhc0NvZWZmaWNpZW50KHRlcm0pO1xuICAgIGlmIChpc1JhdGlvbmFsWmVybyhjb2VmKSlcbiAgICAgIHJldHVybjtcbiAgICBpZiAoYyAhPT0gdm9pZCAwKVxuICAgICAgY29lZiA9IG11bDIoY29lZiwgYyk7XG4gICAgaWYgKHRlcm0uaGVhZCA9PT0gXCJOZWdhdGVcIikge1xuICAgICAgdGhpcy5hZGRUZXJtKHRlcm0ub3AxLCBuZWcoY29lZikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGVybS5oZWFkID09PSBcIkFkZFwiKSB7XG4gICAgICBmb3IgKGNvbnN0IHggb2YgdGVybS5vcHMpXG4gICAgICAgIHRoaXMuYWRkVGVybSh4LCBjb2VmKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGhhc1Rlcm0gPSBmYWxzZTtcbiAgICBpZiAodGVybS5udW1lcmljVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIGlmICh0aGlzLl90ZXJtcy5sZW5ndGggPiA1MDApIHtcbiAgICAgICAgY29uc3QgaCA9IHRlcm0uaGFzaDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXJtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0aGlzLl90ZXJtc1tpXS50ZXJtLm51bWVyaWNWYWx1ZSA9PT0gbnVsbCAmJiBoID09PSB0aGlzLl90ZXJtc1tpXS50ZXJtLmhhc2ggJiYgdGVybS5pc1NhbWUodGhpcy5fdGVybXNbaV0udGVybSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1zW2ldLmNvZWYgPSBhZGQyKHRoaXMuX3Rlcm1zW2ldLmNvZWYsIGNvZWYpO1xuICAgICAgICAgICAgaGFzVGVybSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGVybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5fdGVybXNbaV0udGVybS5udW1lcmljVmFsdWUgPT09IG51bGwgJiYgdGVybS5pc1NhbWUodGhpcy5fdGVybXNbaV0udGVybSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1zW2ldLmNvZWYgPSBhZGQyKHRoaXMuX3Rlcm1zW2ldLmNvZWYsIGNvZWYpO1xuICAgICAgICAgICAgaGFzVGVybSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFoYXNUZXJtKVxuICAgICAgdGhpcy5fdGVybXMucHVzaCh7IHRlcm0sIGNvZWYgfSk7XG4gIH1cbiAgLy8gRm9yIGRlYnVnZ2luZ1xuICB0b1N0cmluZygpIHtcbiAgICBjb25zdCB4cyA9IHRoaXMudGVybXMoXCJleHByZXNzaW9uXCIpO1xuICAgIGlmICh4cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gXCIwXCI7XG4gICAgcmV0dXJuIHhzLm1hcCgoeCkgPT4geC50b1N0cmluZygpKS5qb2luKFwiXFxcXG5cIik7XG4gIH1cbiAgdGVybXMobW9kZSkge1xuICAgIGNvbnN0IGNlID0gdGhpcy5lbmdpbmU7XG4gICAgaWYgKHRoaXMuX25hTkNvdW50ID4gMClcbiAgICAgIHJldHVybiBbY2UuX05BTl07XG4gICAgaWYgKHRoaXMuX2ltYWdpbmFyeSAhPT0gMCAmJiAhY29tcGxleEFsbG93ZWQoY2UpKVxuICAgICAgcmV0dXJuIFtjZS5fTkFOXTtcbiAgICBpZiAodGhpcy5fcG9zSW5maW5pdHlDb3VudCA+IDAgJiYgdGhpcy5fbmVnSW5maW5pdHlDb3VudCA+IDApXG4gICAgICByZXR1cm4gW2NlLl9OQU5dO1xuICAgIGlmICh0aGlzLl9wb3NJbmZpbml0eUNvdW50ID4gMClcbiAgICAgIHJldHVybiBbY2UuX1BPU0lUSVZFX0lORklOSVRZXTtcbiAgICBpZiAodGhpcy5fbmVnSW5maW5pdHlDb3VudCA+IDApXG4gICAgICByZXR1cm4gW2NlLl9ORUdBVElWRV9JTkZJTklUWV07XG4gICAgY29uc3QgeHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHsgY29lZiwgdGVybSB9IG9mIHRoaXMuX3Rlcm1zKSB7XG4gICAgICBpZiAoIWlzUmF0aW9uYWxaZXJvKGNvZWYpKSB7XG4gICAgICAgIGlmIChpc1JhdGlvbmFsT25lKGNvZWYpKVxuICAgICAgICAgIHhzLnB1c2godGVybSk7XG4gICAgICAgIGVsc2UgaWYgKGlzUmF0aW9uYWxOZWdhdGl2ZU9uZShjb2VmKSlcbiAgICAgICAgICB4cy5wdXNoKGNlLm5lZyh0ZXJtKSk7XG4gICAgICAgIGVsc2UgaWYgKG1hY2hpbmVEZW5vbWluYXRvcihjb2VmKSA9PT0gMSlcbiAgICAgICAgICB4cy5wdXNoKGNlLm11bChbY2UubnVtYmVyKGNvZWZbMF0pLCB0ZXJtXSkpO1xuICAgICAgICBlbHNlIGlmIChtYWNoaW5lTnVtZXJhdG9yKGNvZWYpID09PSAxKVxuICAgICAgICAgIHhzLnB1c2goY2UuZGl2KHRlcm0sIGNlLm51bWJlcihjb2VmWzFdKSkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgeHMucHVzaChjZS5tdWwoW2NlLm51bWJlcihjb2VmKSwgdGVybV0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1vZGUgPT09IFwibnVtZXJpY1wiKSB7XG4gICAgICBpZiAoYmlnbnVtUHJlZmVycmVkKHRoaXMuZW5naW5lKSkge1xuICAgICAgICBsZXQgc3VtMiA9IHRoaXMuX2JpZ251bS5hZGQodGhpcy5fbnVtYmVyKTtcbiAgICAgICAgaWYgKCFpc1JhdGlvbmFsWmVybyh0aGlzLl9yYXRpb25hbCkpXG4gICAgICAgICAgc3VtMiA9IHN1bTIuYWRkKFxuICAgICAgICAgICAgY2UuYmlnbnVtKHRoaXMuX3JhdGlvbmFsWzBdKS5kaXYoY2UuYmlnbnVtKHRoaXMuX3JhdGlvbmFsWzFdKSlcbiAgICAgICAgICApO1xuICAgICAgICBpZiAodGhpcy5faW1hZ2luYXJ5ICE9PSAwKVxuICAgICAgICAgIHhzLnB1c2goY2UubnVtYmVyKGNlLmNvbXBsZXgoc3VtMi50b051bWJlcigpLCB0aGlzLl9pbWFnaW5hcnkpKSk7XG4gICAgICAgIGVsc2UgaWYgKCFzdW0yLmlzWmVybygpKVxuICAgICAgICAgIHhzLnB1c2goY2UubnVtYmVyKHN1bTIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzdW0yID0gdGhpcy5fYmlnbnVtLnRvTnVtYmVyKCkgKyB0aGlzLl9udW1iZXI7XG4gICAgICAgIGlmICghaXNSYXRpb25hbFplcm8odGhpcy5fcmF0aW9uYWwpKVxuICAgICAgICAgIHN1bTIgKz0gbWFjaGluZU51bWVyYXRvcih0aGlzLl9yYXRpb25hbCkgLyBtYWNoaW5lRGVub21pbmF0b3IodGhpcy5fcmF0aW9uYWwpO1xuICAgICAgICBpZiAodGhpcy5faW1hZ2luYXJ5ICE9PSAwKVxuICAgICAgICAgIHhzLnB1c2goY2UubnVtYmVyKGNlLmNvbXBsZXgoc3VtMiwgdGhpcy5faW1hZ2luYXJ5KSkpO1xuICAgICAgICBlbHNlIGlmIChzdW0yICE9PSAwKVxuICAgICAgICAgIHhzLnB1c2goY2UubnVtYmVyKHN1bTIpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpc1JhdGlvbmFsWmVybyh0aGlzLl9yYXRpb25hbCkpXG4gICAgICAgIHhzLnB1c2goY2UubnVtYmVyKHRoaXMuX3JhdGlvbmFsKSk7XG4gICAgICBpZiAodGhpcy5faW1hZ2luYXJ5ICE9PSAwKSB7XG4gICAgICAgIGlmICghY29tcGxleEFsbG93ZWQoY2UpKVxuICAgICAgICAgIHJldHVybiBbY2UuX05BTl07XG4gICAgICAgIHhzLnB1c2goY2UubnVtYmVyKGNlLmNvbXBsZXgoMCwgdGhpcy5faW1hZ2luYXJ5KSkpO1xuICAgICAgfVxuICAgICAgaWYgKGJpZ251bVByZWZlcnJlZCh0aGlzLmVuZ2luZSkpIHtcbiAgICAgICAgY29uc3Qgc3VtMiA9IHRoaXMuX2JpZ251bS5hZGQodGhpcy5fbnVtYmVyKTtcbiAgICAgICAgaWYgKCFzdW0yLmlzWmVybygpKVxuICAgICAgICAgIHhzLnB1c2goY2UubnVtYmVyKHN1bTIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5fYmlnbnVtLmlzWmVybygpKVxuICAgICAgICAgIHhzLnB1c2goY2UubnVtYmVyKHRoaXMuX2JpZ251bSkpO1xuICAgICAgICBpZiAodGhpcy5fbnVtYmVyICE9PSAwKVxuICAgICAgICAgIHhzLnB1c2goY2UubnVtYmVyKHRoaXMuX251bWJlcikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmxhdHRlbk9wcyh4cywgXCJBZGRcIik7XG4gIH1cbiAgYXNFeHByZXNzaW9uKG1vZGUpIHtcbiAgICBjb25zdCBjZSA9IHRoaXMuZW5naW5lO1xuICAgIGNvbnN0IHhzID0gdGhpcy50ZXJtcyhtb2RlKTtcbiAgICBpZiAoeHMubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIGNlLl9aRVJPO1xuICAgIGlmICh4cy5sZW5ndGggPT09IDEpXG4gICAgICByZXR1cm4geHNbMF07XG4gICAgcmV0dXJuIGNlLl9mbihcIkFkZFwiLCBzb3J0QWRkKGNlLCB4cykpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGlicmFyeS9kb21haW5zLnRzXG52YXIgRE9NQUlOX0NPTlNUUlVDVE9SUyA9IFtcbiAgXCJJbnZhbGlkRG9tYWluXCIsXG4gIFwiRGljdGlvbmFyeVwiLFxuICBcIkZ1bmN0aW9uXCIsXG4gIFwiTGlzdFwiLFxuICBcIlR1cGxlXCIsXG4gIFwiSW50ZXJzZWN0aW9uXCIsXG4gIFwiVW5pb25cIixcbiAgXCJNYXliZVwiLFxuICBcIlNlcXVlbmNlXCIsXG4gIFwiSW50ZXJ2YWxcIixcbiAgXCJSYW5nZVwiLFxuICBcIkhlYWRcIixcbiAgXCJTeW1ib2xcIixcbiAgXCJWYWx1ZVwiXG5dO1xudmFyIERPTUFJTl9BTElBUyA9IHtcbiAgLy8gRnVuY3Rpb246IFsnRnVuY3Rpb24nLCBbJ1NlcXVlbmNlJywgJ0FueXRoaW5nJ10sICdBbnl0aGluZyddLFxuICBOdW1lcmljRnVuY3Rpb246IFtcIkZ1bmN0aW9uXCIsIFtcIlNlcXVlbmNlXCIsIFwiTnVtYmVyXCJdLCBcIk51bWJlclwiXSxcbiAgUmVhbEZ1bmN0aW9uOiBbXG4gICAgXCJGdW5jdGlvblwiLFxuICAgIFtcIlNlcXVlbmNlXCIsIFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCJdLFxuICAgIFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCJcbiAgXSxcbiAgVHJpZ29ub21ldHJpY0Z1bmN0aW9uOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgLy8gSHlwZXJib2xpY0Z1bmN0aW9uOiBbJ0Z1bmN0aW9uJywgJ051bWJlcicsICdOdW1iZXInXSxcbiAgTG9naWNPcGVyYXRvcjogW1xuICAgIFwiRnVuY3Rpb25cIixcbiAgICBcIk1heWJlQm9vbGVhblwiLFxuICAgIFtcIk1heWJlXCIsIFwiTWF5YmVCb29sZWFuXCJdLFxuICAgIFwiTWF5YmVCb29sZWFuXCJcbiAgXSxcbiAgUHJlZGljYXRlOiBbXCJGdW5jdGlvblwiLCBbXCJTZXF1ZW5jZVwiLCBcIkFueXRoaW5nXCJdLCBcIk1heWJlQm9vbGVhblwiXSxcbiAgUmVsYXRpb25hbE9wZXJhdG9yOiBbXCJGdW5jdGlvblwiLCBcIkFueXRoaW5nXCIsIFwiQW55dGhpbmdcIiwgXCJNYXliZUJvb2xlYW5cIl1cbiAgLy8gUG9zaXRpdmVJbnRlZ2VyOiBbJ1JhbmdlJywgMSwgK0luZmluaXR5XSxcbiAgLy8gTm9uTmVnYXRpdmVJbnRlZ2VyOiBbJ1JhbmdlJywgMCwgK0luZmluaXR5XSxcbiAgLy8gTmVnYXRpdmVJbnRlZ2VyOiBbJ1JhbmdlJywgLUluZmluaXR5LCAtMV0sXG4gIC8vIE5vblBvc2l0aXZlSW50ZWdlcjogWydSYW5nZScsIC1JbmZpbml0eSwgMF0sXG4gIC8vIFBvc2l0aXZlTnVtYmVyOiBbJ0ludGVydmFsJywgWydPcGVuJywgMF0sICtJbmZpbml0eV0sXG4gIC8vIE5vbk5lZ2F0aXZlTnVtYmVyOiBbJ0ludGVydmFsJywgMCwgK0luZmluaXR5XSxcbiAgLy8gTmVnYXRpdmVOdW1iZXI6IFsnSW50ZXJ2YWwnLCAtSW5maW5pdHksIFsnT3BlbicsIDBdXSxcbiAgLy8gTm9uUG9zaXRpdmVOdW1iZXI6IFsnSW50ZXJ2YWwnLCAtSW5maW5pdHksIDBdLFxufTtcbnZhciBET01BSU5fTElURVJBTCA9IHtcbiAgQW55dGhpbmc6IFtdLFxuICBWYWx1ZTogXCJBbnl0aGluZ1wiLFxuICBEb21haW46IFwiQW55dGhpbmdcIixcbiAgRG9tYWluRXhwcmVzc2lvbjogXCJEb21haW5cIixcbiAgVm9pZDogXCJOb3RoaW5nXCIsXG4gIE5vdGhpbmc6IFtcbiAgICBcIkRvbWFpbkV4cHJlc3Npb25cIixcbiAgICBcIkJvb2xlYW5cIixcbiAgICBcIlN0cmluZ1wiLFxuICAgIFwiU3ltYm9sXCIsXG4gICAgXCJUdXBsZVwiLFxuICAgIFwiTGlzdFwiLFxuICAgIFwiRGljdGlvbmFyeVwiLFxuICAgIFwiSW5maW5pdGVTZXRcIixcbiAgICBcIkZpbml0ZVNldFwiLFxuICAgIFwiSW1hZ2luYXJ5TnVtYmVyXCIsXG4gICAgXCJUcmFuc2NlbmRlbnRhbE51bWJlclwiLFxuICAgIFwiUG9zaXRpdmVJbnRlZ2VyXCIsXG4gICAgXCJOZWdhdGl2ZUludGVnZXJcIixcbiAgICBcIk5vblBvc2l0aXZlSW50ZWdlclwiLFxuICAgIFwiTm9uTmVnYXRpdmVJbnRlZ2VyXCIsXG4gICAgXCJQb3NpdGl2ZU51bWJlclwiLFxuICAgIFwiTmVnYXRpdmVOdW1iZXJcIixcbiAgICBcIk5vblBvc2l0aXZlTnVtYmVyXCIsXG4gICAgXCJOb25OZWdhdGl2ZU51bWJlclwiLFxuICAgIFwiU2NhbGFyXCIsXG4gICAgXCJUcmlnb25vbWV0cmljRnVuY3Rpb25cIixcbiAgICBcIkxvZ2ljT3BlcmF0b3JcIixcbiAgICBcIlJlbGF0aW9uYWxPcGVyYXRvclwiXG4gIF0sXG4gIE1heWJlQm9vbGVhbjogXCJWYWx1ZVwiLFxuICBCb29sZWFuOiBcIk1heWJlQm9vbGVhblwiLFxuICBTdHJpbmc6IFwiQm9vbGVhblwiLFxuICBTeW1ib2w6IFwiQm9vbGVhblwiLFxuICBDb2xsZWN0aW9uOiBcIlZhbHVlXCIsXG4gIExpc3Q6IFwiQ29sbGVjdGlvblwiLFxuICBEaWN0aW9uYXJ5OiBcIkNvbGxlY3Rpb25cIixcbiAgU2VxdWVuY2U6IFwiQ29sbGVjdGlvblwiLFxuICBUdXBsZTogXCJTZXF1ZW5jZVwiLFxuICBTZXQ6IFwiQ29sbGVjdGlvblwiLFxuICBJbmZpbml0ZVNldDogXCJTZXRcIixcbiAgRmluaXRlU2V0OiBcIlNldFwiLFxuICAvL1xuICAvLyBGdW5jdGlvbmFsIERvbWFpbnNcbiAgLy9cbiAgRnVuY3Rpb246IFwiQW55dGhpbmdcIixcbiAgUHJlZGljYXRlOiBcIkZ1bmN0aW9uXCIsXG4gIExvZ2ljT3BlcmF0b3I6IFwiUHJlZGljYXRlXCIsXG4gIFJlbGF0aW9uYWxPcGVyYXRvcjogXCJQcmVkaWNhdGVcIixcbiAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9tYXRoZW1hdGljYWxfZnVuY3Rpb25zXG4gIE51bWVyaWNGdW5jdGlvbjogXCJGdW5jdGlvblwiLFxuICBSZWFsRnVuY3Rpb246IFwiTnVtZXJpY0Z1bmN0aW9uXCIsXG4gIFRyaWdvbm9tZXRyaWNGdW5jdGlvbjogXCJSZWFsRnVuY3Rpb25cIixcbiAgLy9cbiAgLy8gTnVtZXJpYyBEb21haW5zXG4gIC8vXG4gIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhdGVnb3J5X29mX3NldHNcbiAgTnVtYmVyOiBcIlZhbHVlXCIsXG4gIEV4dGVuZGVkQ29tcGxleE51bWJlcjogXCJOdW1iZXJcIixcbiAgQ29tcGxleE51bWJlcjogXCJFeHRlbmRlZENvbXBsZXhOdW1iZXJcIixcbiAgSW1hZ2luYXJ5TnVtYmVyOiBcIkNvbXBsZXhOdW1iZXJcIixcbiAgRXh0ZW5kZWRSZWFsTnVtYmVyOiBcIkV4dGVuZGVkQ29tcGxleE51bWJlclwiLFxuICBSZWFsTnVtYmVyOiBbXCJDb21wbGV4TnVtYmVyXCIsIFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCJdLFxuICBQb3NpdGl2ZU51bWJlcjogXCJOb25OZWdhdGl2ZU51bWJlclwiLFxuICBOb25OZWdhdGl2ZU51bWJlcjogXCJSZWFsTnVtYmVyXCIsXG4gIE5vblBvc2l0aXZlTnVtYmVyOiBcIk5lZ2F0aXZlTnVtYmVyXCIsXG4gIE5lZ2F0aXZlTnVtYmVyOiBcIlJlYWxOdW1iZXJcIixcbiAgVHJhbnNjZW5kZW50YWxOdW1iZXI6IFwiUmVhbE51bWJlclwiLFxuICBBbGdlYnJhaWNOdW1iZXI6IFwiUmVhbE51bWJlclwiLFxuICBSYXRpb25hbE51bWJlcjogXCJBbGdlYnJhaWNOdW1iZXJcIixcbiAgLy8gTmF0dXJhbE51bWJlcjogJ0ludGVnZXInLFxuICBJbnRlZ2VyOiBcIlJhdGlvbmFsTnVtYmVyXCIsXG4gIFBvc2l0aXZlSW50ZWdlcjogXCJOb25OZWdhdGl2ZUludGVnZXJcIixcbiAgTm9uTmVnYXRpdmVJbnRlZ2VyOiBcIkludGVnZXJcIixcbiAgTm9uUG9zaXRpdmVJbnRlZ2VyOiBcIk5lZ2F0aXZlSW50ZWdlclwiLFxuICBOZWdhdGl2ZUludGVnZXI6IFwiSW50ZWdlclwiLFxuICAvL1xuICAvLyBUZW5zb3JpYWwgRG9tYWluc1xuICAvL1xuICBUZW5zb3I6IFwiVmFsdWVcIixcbiAgTWF0cml4OiBcIlRlbnNvclwiLFxuICBTY2FsYXI6IFtcIlJvd1wiLCBcIkNvbHVtblwiXSxcbiAgUm93OiBcIlZlY3RvclwiLFxuICBDb2x1bW46IFwiVmVjdG9yXCIsXG4gIFZlY3RvcjogXCJNYXRyaXhcIlxuICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX25hbWVkX21hdHJpY2VzXG4gIC8vIENvbXBsZXhUZW5zb3I6ICdUZW5zb3InLFxuICAvLyBSZWFsVGVuc29yOiAnQ29tcGxleFRlbnNvcicsXG4gIC8vIEludGVnZXJUZW5zb3I6ICdSZWFsVGVuc29yJyxcbiAgLy8gTG9naWNhbFRlbnNvcjogJ0ludGVnZXJUZW5zb3InLFxuICAvLyBTcXVhcmVNYXRyaXg6ICdNYXRyaXgnLFxuICAvLyBNb25vbWlhbE1hdHJpeDogJ1NxdWFyZU1hdHJpeCcsXG4gIC8vIFRyaWFuZ3VsYXJNYXRyaXg6ICdTcXVhcmVNYXRyaXgnLFxuICAvLyBVcHBlclRyaWFuZ3VsYXJNYXRyaXg6ICdUcmlhbmd1bGFyTWF0cml4JyxcbiAgLy8gTG93ZXJUcmlhbmd1bGFyTWF0cml4OiAnVHJpYW5ndWxhck1hdHJpeCcsXG4gIC8vIFBlcm11dGF0aW9uTWF0cml4OiBbJ01vbm9taWFsTWF0cml4JywgJ0xvZ2ljYWxUZW5zb3InLCAnT3J0aG9nb25hbE1hdHJpeCddLFxuICAvLyBPcnRob2dvbmFsTWF0cml4OiBbJ1NxdWFyZU1hdHJpeCcsICdSZWFsVGVuc29yJ10sXG4gIC8vIERpYWdvbmFsTWF0cml4OiBbJ1VwcGVyVHJpYW5ndWxhck1hdHJpeCcsICdMb3dlclRyaWFuZ3VsYXJNYXRyaXgnXSxcbiAgLy8gSWRlbnRpdHlNYXRyaXg6IFsnRGlhZ29uYWxNYXRyaXgnLCAnU3ltbWV0cmljTWF0cml4JywgJ1Blcm11dGF0aW9uTWF0cml4J10sXG4gIC8vIFplcm9NYXRyaXg6IFsnRGlhZ29uYWxNYXRyaXgnLCAnU3ltbWV0cmljTWF0cml4JywgJ1Blcm11dGF0aW9uTWF0cml4J10sXG4gIC8vIFN5bW1ldHJpY01hdHJpeDogWydIZXJtaXRpYW5NYXRyaXgnLCAnU3F1YXJlTWF0cml4JywgJ1JlYWxUZW5zb3InXSxcbiAgLy8gSGVybWl0aWFuTWF0cml4OiAnQ29tcGxleFRlbnNvcicsXG4gIC8vIFF1YXRlcm5pb246IFsnU3F1YXJlTWF0cml4JywgJ0NvbXBsZXhUZW5zb3InXSxcbn07XG52YXIgZ0RvbWFpbkxpdGVyYWxzO1xuZnVuY3Rpb24gaXNEb21haW5MaXRlcmFsKHMpIHtcbiAgaWYgKCFzKVxuICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIERPTUFJTl9MSVRFUkFMW3NdICE9PSB2b2lkIDA7XG59XG5mdW5jdGlvbiBhbmNlc3RvcnMoZG9tKSB7XG4gIGlmICghZ0RvbWFpbkxpdGVyYWxzKSB7XG4gICAgZ0RvbWFpbkxpdGVyYWxzID0ge307XG4gICAgYW5jZXN0b3JzKFwiVm9pZFwiKTtcbiAgfVxuICBpZiAoZ0RvbWFpbkxpdGVyYWxzW2RvbV0pXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZ0RvbWFpbkxpdGVyYWxzW2RvbV0pO1xuICBsZXQgcmVzdWx0ID0gW107XG4gIGlmICh0eXBlb2YgZG9tICE9PSBcInN0cmluZ1wiIHx8ICFET01BSU5fTElURVJBTFtkb21dKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRvbSkpXG4gICAgICB0aHJvdyBFcnJvcihgVW5rbm93biBkb21haW4gbGl0ZXJhbCAke2RvbX1gKTtcbiAgICBpZiAoIURPTUFJTl9DT05TVFJVQ1RPUlMuaW5jbHVkZXMoZG9tWzBdKSlcbiAgICAgIHRocm93IEVycm9yKGBVbmtub3duIGRvbWFpbiBjb25zdHJ1Y3RvciAke2RvbVswXX1gKTtcbiAgICBpZiAoZG9tWzBdID09PSBcIkZ1bmN0aW9uXCIgfHwgZG9tWzBdID09PSBcIkhlYWRcIilcbiAgICAgIHJldHVybiBhbmNlc3RvcnMoXCJGdW5jdGlvblwiKTtcbiAgICBpZiAoZG9tWzBdID09PSBcIlN5bWJvbFwiKVxuICAgICAgcmV0dXJuIGFuY2VzdG9ycyhcIlN5bWJvbFwiKTtcbiAgICBpZiAoZG9tWzBdID09PSBcIlR1cGxlXCIpXG4gICAgICByZXR1cm4gYW5jZXN0b3JzKFwiVHVwbGVcIik7XG4gICAgaWYgKGRvbVswXSA9PT0gXCJMaXN0XCIpXG4gICAgICByZXR1cm4gYW5jZXN0b3JzKFwiTGlzdFwiKTtcbiAgICBpZiAoZG9tWzBdID09PSBcIkRpY3Rpb25hcnlcIilcbiAgICAgIHJldHVybiBhbmNlc3RvcnMoXCJEaWN0aW9uYXJ5XCIpO1xuICAgIGlmIChkb21bMF0gPT09IFwiUmFuZ2VcIilcbiAgICAgIHJldHVybiBhbmNlc3RvcnMoXCJJbnRlZ2VyXCIpO1xuICAgIGlmIChkb21bMF0gPT09IFwiSW50ZXJ2YWxcIilcbiAgICAgIHJldHVybiBhbmNlc3RvcnMoXCJSZWFsTnVtYmVyRXh0ZW5kZWRcIik7XG4gICAgaWYgKGRvbVswXSA9PT0gXCJNYXliZVwiIHx8IGRvbVswXSA9PT0gXCJTZXF1ZW5jZVwiKVxuICAgICAgcmV0dXJuIGFuY2VzdG9ycyhkb21bMV0pO1xuICAgIGlmIChkb21bMF0gPT09IFwiTGl0ZXJhbFwiKVxuICAgICAgcmV0dXJuIFtcIkFueXRoaW5nXCJdO1xuICAgIGlmIChkb21bMF0gPT09IFwiVW5pb25cIilcbiAgICAgIHJldHVybiBbXCJBbnl0aGluZ1wiXTtcbiAgICBpZiAoZG9tWzBdID09PSBcIkludGVyc2VjdGlvblwiKVxuICAgICAgcmV0dXJuIFtcIkFueXRoaW5nXCJdO1xuICAgIHJldHVybiBbXCJBbnl0aGluZ1wiXTtcbiAgfVxuICBpZiAodHlwZW9mIERPTUFJTl9MSVRFUkFMW2RvbV0gPT09IFwic3RyaW5nXCIpXG4gICAgcmVzdWx0ID0gW0RPTUFJTl9MSVRFUkFMW2RvbV0sIC4uLmFuY2VzdG9ycyhET01BSU5fTElURVJBTFtkb21dKV07XG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoRE9NQUlOX0xJVEVSQUxbZG9tXSkpXG4gICAgZm9yIChjb25zdCBwYXJlbnQgb2YgRE9NQUlOX0xJVEVSQUxbZG9tXSkge1xuICAgICAgcmVzdWx0LnB1c2gocGFyZW50KTtcbiAgICAgIHJlc3VsdC5wdXNoKC4uLmFuY2VzdG9ycyhwYXJlbnQpKTtcbiAgICB9XG4gIGdEb21haW5MaXRlcmFsc1tkb21dID0gbmV3IFNldChyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZG9tYWluU2V0c0xpYnJhcnkoKSB7XG4gIGNvbnN0IHRhYmxlID0ge307XG4gIGZvciAoY29uc3QgZG9tIG9mIE9iamVjdC5rZXlzKERPTUFJTl9MSVRFUkFMKSkge1xuICAgIGlmIChkb20gIT09IFwiRG9tYWluXCIgJiYgZG9tICE9PSBcIk5vdGhpbmdcIiAmJiBkb20gIT09IFwiU3RyaW5nXCIgJiYgZG9tICE9PSBcIlN5bWJvbFwiICYmIGRvbSAhPT0gXCJMaXN0XCIgJiYgZG9tICE9PSBcIlR1cGxlXCIgJiYgZG9tICE9PSBcIlNlcXVlbmNlXCIpXG4gICAgICB0YWJsZVtkb21dID0geyBkb21haW46IFwiU2V0XCIgfTtcbiAgfVxuICByZXR1cm4gdGFibGU7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL2Fic3RyYWN0LWJveGVkLWV4cHJlc3Npb24udHNcbnZhciBpbXBvcnRfY29tcGxleDYgPSBfX3RvRVNNKHJlcXVpcmVfY29tcGxleCgpKTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xpYnJhcnkvdXRpbHMudHNcbmZ1bmN0aW9uIGlzU3ltYm9sRGVmaW5pdGlvbihkZWYpIHtcbiAgcmV0dXJuICEhZGVmICYmIHR5cGVvZiBkZWYgPT09IFwib2JqZWN0XCIgJiYgKFwiZG9tYWluXCIgaW4gZGVmIHx8IFwidmFsdWVcIiBpbiBkZWYgfHwgXCJjb25zdGFudFwiIGluIGRlZik7XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uRGVmaW5pdGlvbihkZWYpIHtcbiAgaWYgKGRlZiA9PT0gdm9pZCAwIHx8IGRlZiA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgZGVmICE9PSBcIm9iamVjdFwiKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKFwiY29tcGxleGl0eVwiIGluIGRlZiB8fCBcIm51bWVyaWNcIiBpbiBkZWYgfHwgXCJzaWduYXR1cmVcIiBpbiBkZWYpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmICghKFwiZG9tYWluXCIgaW4gZGVmKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChkZWYuZG9tYWluID09PSB2b2lkIDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIGRlZi5kb21haW4gPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGRlZi5kb21haW4gPT09IFwiRnVuY3Rpb25cIjtcbiAgcmV0dXJuIGRlZi5kb21haW4uaXNGdW5jdGlvbjtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxpbWl0cyhyYW5nZSkge1xuICBsZXQgbG93ZXIgPSAxO1xuICBsZXQgdXBwZXIgPSBsb3dlciArIE1BWF9JVEVSQVRJT047XG4gIGxldCBpbmRleCA9IFwiTm90aGluZ1wiO1xuICBsZXQgaXNGaW5pdGUyID0gdHJ1ZTtcbiAgaWYgKHJhbmdlLmhlYWQgPT09IFwiVHVwbGVcIiB8fCByYW5nZS5oZWFkID09PSBcIlRyaXBsZVwiIHx8IHJhbmdlLmhlYWQgPT09IFwiUGFpclwiIHx8IHJhbmdlLmhlYWQgPT09IFwiU2luZ2xlXCIpIHtcbiAgICBpbmRleCA9IChyYW5nZS5vcDEuaGVhZCA9PT0gXCJIb2xkXCIgPyByYW5nZS5vcDEub3AxLnN5bWJvbCA6IHJhbmdlLm9wMS5zeW1ib2wpID8/IFwiTm90aGluZ1wiO1xuICAgIGxvd2VyID0gYXNTbWFsbEludGVnZXIocmFuZ2Uub3AyKSA/PyAxO1xuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGxvd2VyKSlcbiAgICAgIGlzRmluaXRlMiA9IGZhbHNlO1xuICAgIGlmIChyYW5nZS5vcDMuaXNOb3RoaW5nIHx8IHJhbmdlLm9wMy5pc0luZmluaXR5KSB7XG4gICAgICBpc0Zpbml0ZTIgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdSA9IGFzU21hbGxJbnRlZ2VyKHJhbmdlLm9wMyk7XG4gICAgICBpZiAodSA9PT0gbnVsbClcbiAgICAgICAgaXNGaW5pdGUyID0gZmFsc2U7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdXBwZXIgPSB1O1xuICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZSh1cHBlcikpXG4gICAgICAgICAgaXNGaW5pdGUyID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghaXNGaW5pdGUyICYmIE51bWJlci5pc0Zpbml0ZShsb3dlcikpXG4gICAgICB1cHBlciA9IGxvd2VyICsgTUFYX0lURVJBVElPTjtcbiAgfVxuICByZXR1cm4gW2luZGV4LCBsb3dlciwgdXBwZXIsIGlzRmluaXRlMl07XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9jb21waWxlLnRzXG52YXIgQ29tcHV0ZUVuZ2luZUZ1bmN0aW9uID0gY2xhc3MgZXh0ZW5kcyBGdW5jdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGJvZHkpIHtcbiAgICBzdXBlcihcIl9TWVNcIiwgXCJfXCIsIGByZXR1cm4gJHtib2R5fWApO1xuICAgIHRoaXMuc3lzID0ge1xuICAgICAgZmFjdG9yaWFsLFxuICAgICAgZ2FtbWEsXG4gICAgICBsbmdhbW1hLFxuICAgICAgZ2NkLFxuICAgICAgbGNtLFxuICAgICAgY2hvcFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG4gICAgICBhcHBseTogKHRhcmdldCwgdGhpc0FyZywgYXJndW1lbnRzTGlzdCkgPT4gc3VwZXIuYXBwbHkodGhpc0FyZywgW3RoaXMuc3lzLCAuLi5hcmd1bWVudHNMaXN0XSksXG4gICAgICBnZXQ6ICh0YXJnZXQsIHByb3ApID0+IHtcbiAgICAgICAgaWYgKHByb3AgPT09IFwidG9TdHJpbmdcIilcbiAgICAgICAgICByZXR1cm4gKCkgPT4gYm9keTtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNvbXBpbGVUb0phdmFzY3JpcHQoZXhwcikge1xuICBjb25zdCBqcyA9IGNvbXBpbGUoZXhwciwgZXhwci5mcmVlVmFycyk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBDb21wdXRlRW5naW5lRnVuY3Rpb24oanMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihgJHtlfVxuJHtleHByLmxhdGV4fVxuJHtqc31gKTtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gY29tcGlsZShleHByLCBmcmVlVmFycyA9IFtdLCBwcmVjID0gMCkge1xuICBjb25zdCBmID0gYXNGbG9hdChleHByKTtcbiAgaWYgKGYgIT09IG51bGwpXG4gICAgcmV0dXJuIGYudG9TdHJpbmcoKTtcbiAgY29uc3QgcyA9IGV4cHIuc3ltYm9sO1xuICBpZiAocyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIFRydWU6IFwidHJ1ZVwiLFxuICAgICAgRmFsc2U6IFwiZmFsc2VcIixcbiAgICAgIFBpOiBcIk1hdGguUElcIixcbiAgICAgIEV4cG9uZW50aWFsRTogXCJNYXRoLkVcIixcbiAgICAgIEk6IFwiTWF0aC5JXCIsXG4gICAgICBOYU46IFwiTnVtYmVyLk5hTlwiLFxuICAgICAgSW1hZ2luYXJ5VW5pdDogXCJOYU5cIixcbiAgICAgIEhhbGY6IFwiMC41XCIsXG4gICAgICBNYWNoaW5lRXBzaWxvbjogXCJOdW1iZXIuRVBTSUxPTlwiLFxuICAgICAgR29sZGVuUmF0aW86IFwiKCgxICsgTWF0aC5zcXJ0KDUpKSAvIDIpXCIsXG4gICAgICBDYXRhbGFuQ29uc3RhbnQ6IFwiMC45MTU5NjU1OTQxNzcyMTkwMVwiLFxuICAgICAgRXVsZXJHYW1tYTogXCIwLjU3NzIxNTY2NDkwMTUzMjg2XCJcbiAgICB9W3NdO1xuICAgIGlmIChyZXN1bHQgIT09IHZvaWQgMClcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgaWYgKGZyZWVWYXJzLmluY2x1ZGVzKHMpKVxuICAgICAgcmV0dXJuIGBfLiR7c31gO1xuICAgIHJldHVybiBzO1xuICB9XG4gIGNvbnN0IHN0ciA9IGV4cHIuc3RyaW5nO1xuICBpZiAoc3RyICE9PSBudWxsKVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpO1xuICBjb25zdCBrZXlzID0gZXhwci5rZXlzO1xuICBpZiAoa2V5cyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZXhwci5nZXRLZXkoa2V5KTtcbiAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgcmVzdWx0LnB1c2goYCR7a2V5fTogJHtjb21waWxlKHZhbHVlLCBmcmVlVmFycywgMCl9YCk7XG4gICAgfVxuICAgIHJldHVybiBgeyR7cmVzdWx0LmpvaW4oXCIsIFwiKX19YDtcbiAgfVxuICBjb25zdCBoID0gZXhwci5oZWFkO1xuICBpZiAodHlwZW9mIGggPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoaCA9PT0gXCJOZWdhdGVcIikge1xuICAgICAgY29uc3QgYXJnID0gZXhwci5vcDE7XG4gICAgICBpZiAoYXJnID09PSBudWxsKVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIHJldHVybiBgLSR7Y29tcGlsZShhcmcsIGZyZWVWYXJzLCAzKX1gO1xuICAgIH1cbiAgICBpZiAoaCA9PT0gXCJFcnJvclwiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3JcIik7XG4gICAgaWYgKGggPT09IFwiU3VtXCIpXG4gICAgICByZXR1cm4gY29tcGlsZUxvb3AoZXhwciwgXCIrXCIpO1xuICAgIGlmIChoID09PSBcIlByb2R1Y3RcIilcbiAgICAgIHJldHVybiBjb21waWxlTG9vcChleHByLCBcIipcIik7XG4gICAgaWYgKGggPT09IFwiUm9vdFwiKSB7XG4gICAgICBjb25zdCBhcmcgPSBleHByLm9wMTtcbiAgICAgIGlmIChhcmcgPT09IG51bGwpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJvb3Q6IG5vIGFyZ3VtZW50XCIpO1xuICAgICAgY29uc3QgZXhwMiA9IGV4cHIub3AyO1xuICAgICAgaWYgKGV4cDIgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBgTWF0aC5zcXJ0KCR7Y29tcGlsZShhcmcsIGZyZWVWYXJzLCAwKX0pYDtcbiAgICAgIHJldHVybiBgTWF0aC5wb3coJHtjb21waWxlKGFyZywgZnJlZVZhcnMpfSwgMS8ke2NvbXBpbGUoZXhwMiwgZnJlZVZhcnMpfWA7XG4gICAgfVxuICAgIGlmIChoID09PSBcIkZhY3RvcmlhbFwiKSB7XG4gICAgICBjb25zdCBhcmcgPSBleHByLm9wMTtcbiAgICAgIGlmIChhcmcgPT09IG51bGwpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhY3RvcmlhbDogbm8gYXJndW1lbnRcIik7XG4gICAgICByZXR1cm4gYF9TWVMuZmFjdG9yaWFsKCR7Y29tcGlsZShhcmcsIGZyZWVWYXJzKX0pYDtcbiAgICB9XG4gICAgaWYgKGggPT09IFwiUG93ZXJcIikge1xuICAgICAgY29uc3QgYXJnID0gZXhwci5vcDE7XG4gICAgICBpZiAoYXJnID09PSBudWxsKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQb3dlcjogbm8gYXJndW1lbnRcIik7XG4gICAgICBjb25zdCBleHAyID0gYXNGbG9hdChleHByLm9wMik7XG4gICAgICBpZiAoZXhwMiA9PT0gMC41KVxuICAgICAgICByZXR1cm4gYE1hdGguc3FydCgke2NvbXBpbGUoYXJnLCBmcmVlVmFycyl9KWA7XG4gICAgICBpZiAoZXhwMiA9PT0gMSAvIDMpXG4gICAgICAgIHJldHVybiBgTWF0aC5jYnJ0KCR7Y29tcGlsZShhcmcsIGZyZWVWYXJzKX0pYDtcbiAgICAgIGlmIChleHAyID09PSAxKVxuICAgICAgICByZXR1cm4gY29tcGlsZShhcmcsIGZyZWVWYXJzKTtcbiAgICAgIGlmIChleHAyID09PSAtMSlcbiAgICAgICAgcmV0dXJuIGAxIC8gJHtjb21waWxlKGFyZywgZnJlZVZhcnMpfWA7XG4gICAgICBpZiAoZXhwMiA9PT0gLTAuNSlcbiAgICAgICAgcmV0dXJuIGAxIC8gTWF0aC5zcXJ0KCR7Y29tcGlsZShhcmcsIGZyZWVWYXJzKX0pYDtcbiAgICB9XG4gICAgaWYgKGggPT09IFwiU3F1YXJlXCIpIHtcbiAgICAgIGNvbnN0IGFyZyA9IGV4cHIub3AxO1xuICAgICAgaWYgKGFyZyA9PT0gbnVsbClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3F1YXJlOiBubyBhcmd1bWVudFwiKTtcbiAgICAgIHJldHVybiBgTWF0aC5wb3coJHtjb21waWxlKGFyZywgZnJlZVZhcnMpfSwgMilgO1xuICAgIH1cbiAgICBjb25zdCBPUFMgPSB7XG4gICAgICBBZGQ6IFtcIitcIiwgMTFdLFxuICAgICAgTmVnYXRlOiBbXCItXCIsIDE0XSxcbiAgICAgIC8vIFVuYXJ5IG9wZXJhdG9yXG4gICAgICBTdWJ0cmFjdDogW1wiLVwiLCAxMV0sXG4gICAgICBNdWx0aXBseTogW1wiKlwiLCAxMl0sXG4gICAgICBEaXZpZGU6IFtcIi9cIiwgMTNdLFxuICAgICAgRXF1YWw6IFtcIj09PVwiLCA4XSxcbiAgICAgIE5vdEVxdWFsOiBbXCIhPT1cIiwgOF0sXG4gICAgICBMZXNzRXF1YWw6IFtcIjw9XCIsIDldLFxuICAgICAgR3JlYXRlckVxdWFsOiBbXCI+PVwiLCA5XSxcbiAgICAgIExlc3M6IFtcIjxcIiwgOV0sXG4gICAgICBHcmVhdGVyOiBbXCI+XCIsIDldLFxuICAgICAgQW5kOiBbXCImJlwiLCA0XSxcbiAgICAgIE9yOiBbXCJ8fFwiLCAzXSxcbiAgICAgIE5vdDogW1wiIVwiLCAxNF1cbiAgICAgIC8vIFVuYXJ5IG9wZXJhdG9yXG4gICAgICAvLyBYb3I6IFsnXicsIDZdLCAvLyBUaGF0J3MgYml0d2lzZSBYT1IsIG5vdCBsb2dpY2FsIFhPUlxuICAgICAgLy8gUG9zc2libGUgc29sdXRpb24gaXMgdG8gdXNlIGBhID8gIWIgOiBiYCBpbnN0ZWFkIG9mIGBhIF4gYmBcbiAgICB9O1xuICAgIGNvbnN0IG9wMyA9IE9QU1toXTtcbiAgICBpZiAob3AzICE9PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IGFyZ3MyID0gZXhwci5vcHM7XG4gICAgICBpZiAoYXJnczIgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgbGV0IHJlc3VsdFN0cjtcbiAgICAgIGlmIChhcmdzMi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVzdWx0U3RyID0gYCR7b3AzWzBdfSR7Y29tcGlsZShhcmdzMlswXSwgZnJlZVZhcnMsIG9wM1sxXSl9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFN0ciA9IGFyZ3MyLm1hcCgoYXJnKSA9PiBjb21waWxlKGFyZywgZnJlZVZhcnMsIG9wM1sxXSkpLmpvaW4oYCAke29wM1swXX0gYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3AzWzFdIDwgcHJlYyA/IGAoJHtyZXN1bHRTdHJ9KWAgOiByZXN1bHRTdHI7XG4gICAgfVxuICAgIGNvbnN0IGZuID0ge1xuICAgICAgQWJzOiBcIk1hdGguYWJzXCIsXG4gICAgICBBcmNjb3M6IFwiTWF0aC5hY29zXCIsXG4gICAgICBBcmNvc2g6IFwiTWF0aC5hY29zaFwiLFxuICAgICAgQXJzaW46IFwiTWF0aC5hc2luXCIsXG4gICAgICBBcnNpbmg6IFwiTWF0aC5hc2luaFwiLFxuICAgICAgQXJjdGFuOiBcIk1hdGguYXRhblwiLFxuICAgICAgQXJ0YW5oOiBcIk1hdGguYXRhbmhcIixcbiAgICAgIC8vIE1hdGguY2JydFxuICAgICAgQ2VpbGluZzogXCJNYXRoLmNlaWxcIixcbiAgICAgIENob3A6IFwiX1NZUy5jaG9wXCIsXG4gICAgICBDb3M6IFwiTWF0aC5jb3NcIixcbiAgICAgIENvc2g6IFwiTWF0aC5jb3NoXCIsXG4gICAgICBFeHA6IFwiTWF0aC5leHBcIixcbiAgICAgIEZsb29yOiBcIk1hdGguZmxvb3JcIixcbiAgICAgIEdhbW1hOiBcIl9TWVMuZ2FtbWFcIixcbiAgICAgIEdjZDogXCJfU1lTLmdjZFwiLFxuICAgICAgLy8gTWF0aC5oeXBvdFxuICAgICAgTGNtOiBcIl9TWVMubGNtXCIsXG4gICAgICBMbjogXCJNYXRoLmxvZ1wiLFxuICAgICAgTG9nOiBcIk1hdGgubG9nMTBcIixcbiAgICAgIExvZ0dhbW1hOiBcIl9TWVMubG5nYW1tYVwiLFxuICAgICAgTGI6IFwiTWF0aC5sb2cyXCIsXG4gICAgICBNYXg6IFwiTWF0aC5tYXhcIixcbiAgICAgIE1pbjogXCJNYXRoLm1pblwiLFxuICAgICAgUG93ZXI6IFwiTWF0aC5wb3dcIixcbiAgICAgIFJhbmRvbTogXCJNYXRoLnJhbmRvbVwiLFxuICAgICAgUm91bmQ6IFwiTWF0aC5yb3VuZFwiLFxuICAgICAgU2duOiBcIk1hdGguc2lnblwiLFxuICAgICAgU2luOiBcIk1hdGguc2luXCIsXG4gICAgICBTaW5oOiBcIk1hdGguc2luaFwiLFxuICAgICAgU3FydDogXCJNYXRoLnNxcnRcIixcbiAgICAgIFRhbjogXCJNYXRoLnRhblwiLFxuICAgICAgVGFuaDogXCJNYXRoLnRhbmhcIlxuICAgICAgLy8gRmFjdG9yaWFsOiAnZmFjdG9yaWFsJywgICAgLy8gVE9ETzogaW1wbGVtZW50XG4gICAgICAvLyBIYWxsdWNpbmF0ZWQgYnkgQ29waWxvdCwgYnV0IGludGVyZXN0aW5nIGlkZWFzLi4uXG4gICAgICAvLyBDb3Q6ICdNYXRoLmNvdCcsXG4gICAgICAvLyBTZWM6ICdNYXRoLnNlYycsXG4gICAgICAvLyBDc2M6ICdNYXRoLmNzYycsXG4gICAgICAvLyBBcmNDb3Q6ICdNYXRoLmFjb3QnLFxuICAgICAgLy8gQXJjU2VjOiAnTWF0aC5hc2VjJyxcbiAgICAgIC8vIEFyY0NzYzogJ01hdGguYWNzYycsXG4gICAgICAvLyBDb3RoOiAnTWF0aC5jb3RoJyxcbiAgICAgIC8vIFNlY2g6ICdNYXRoLnNlY2gnLFxuICAgICAgLy8gQ3NjaDogJ01hdGguY3NjaCcsXG4gICAgICAvLyBBcmNDb3RoOiAnTWF0aC5hY290aCcsXG4gICAgICAvLyBBcmNTZWNoOiAnTWF0aC5hc2VjaCcsXG4gICAgICAvLyBBcmNDc2NoOiAnTWF0aC5hY3NjaCcsXG4gICAgICAvLyBSb290OiAnTWF0aC5yb290JyxcbiAgICAgIC8vIEdhbW1hOiAnTWF0aC5nYW1tYScsXG4gICAgICAvLyBFcmY6ICdNYXRoLmVyZicsXG4gICAgICAvLyBFcmZjOiAnTWF0aC5lcmZjJyxcbiAgICAgIC8vIEVyZmk6ICdNYXRoLmVyZmknLFxuICAgICAgLy8gWmV0YTogJ01hdGguemV0YScsXG4gICAgICAvLyBQb2x5R2FtbWE6ICdNYXRoLnBvbHlnYW1tYScsXG4gICAgICAvLyBIdXJ3aXR6WmV0YTogJ01hdGguaHVyd2l0elpldGEnLCAkJFxcemV0YSAocyxhKT1cXHN1bSBfe249MH1ee1xcaW5mdHkgfXtcXGZyYWMgezF9eyhuK2EpXntzfX19JCRcbiAgICAgIC8vIERpcmljaGxldEV0YTogJ01hdGguZGlyaWNobGV0RXRhJyxcbiAgICAgIC8vIEJldGE6ICdNYXRoLmJldGEnLFxuICAgICAgLy8gQmlub21pYWw6ICdNYXRoLmJpbm9taWFsJyxcbiAgICAgIC8vIE1vZDogJ01hdGgubW9kJyxcbiAgICAgIC8vIFF1b3RpZW50OiAnTWF0aC5xdW90aWVudCcsXG4gICAgICAvLyBHQ0Q6ICdNYXRoLmdjZCcsXG4gICAgICAvLyBMQ006ICdNYXRoLmxjbScsXG4gICAgICAvLyBEaXZpc29yczogJ01hdGguZGl2aXNvcnMnLFxuICAgICAgLy8gUHJpbWVROiAnTWF0aC5pc1ByaW1lJyxcbiAgICAgIC8vIFByaW1lUGk6ICdNYXRoLnByaW1lUGknLFxuICAgICAgLy8gUHJpbWU6ICdNYXRoLnByaW1lJyxcbiAgICAgIC8vIE5leHRQcmltZTogJ01hdGgubmV4dFByaW1lJyxcbiAgICAgIC8vIFByZXZpb3VzUHJpbWU6ICdNYXRoLnByZXZQcmltZScsXG4gICAgICAvLyBQcmltZVBvd2VyUTogJ01hdGguaXNQcmltZVBvd2VyJyxcbiAgICAgIC8vIFByaW1lUG93ZXJQaTogJ01hdGgucHJpbWVQb3dlclBpJyxcbiAgICAgIC8vIFByaW1lUG93ZXI6ICdNYXRoLnByaW1lUG93ZXInLFxuICAgICAgLy8gTmV4dFByaW1lUG93ZXI6ICdNYXRoLm5leHRQcmltZVBvd2VyJyxcbiAgICAgIC8vIFByZXZpb3VzUHJpbWVQb3dlcjogJ01hdGgucHJldlByaW1lUG93ZXInLFxuICAgICAgLy8gUHJpbWVGYWN0b3JzOiAnTWF0aC5wcmltZUZhY3RvcnMnLFxuICAgICAgLy8gRGl2aXNvclNpZ21hOiAnTWF0aC5kaXZpc29yU2lnbWEnLFxuICAgICAgLy8gRGl2aXNvclNpZ21hMDogJ01hdGguZGl2aXNvclNpZ21hMCcsXG4gICAgICAvLyBEaXZpc29yU2lnbWExOiAnTWF0aC5kaXZpc29yU2lnbWExJyxcbiAgICAgIC8vIERpdmlzb3JTaWdtYTI6ICdNYXRoLmRpdmlzb3JTaWdtYTInLFxuICAgICAgLy8gRGl2aXNvclNpZ21hMzogJ01hdGguZGl2aXNvclNpZ21hMycsXG4gICAgICAvLyBEaXZpc29yU2lnbWE0OiAnTWF0aC5kaXZpc29yU2lnbWE0JyxcbiAgICAgIC8vIERpdmlzb3JDb3VudDogJ01hdGguZGl2aXNvckNvdW50JyxcbiAgICAgIC8vIERpdmlzb3JTdW06ICdNYXRoLmRpdmlzb3JTdW0nLFxuICAgICAgLy8gTW9lYml1c011OiAnTWF0aC5tb2ViaXVzTXUnLFxuICAgICAgLy8gTGlvdXZpbGxlTGFtYmRhOiAnTWF0aC5saW91dmlsbGVMYW1iZGEnLFxuICAgICAgLy8gQ2FybWljaGFlbExhbWJkYTogJ01hdGguY2FybWljaGFlbExhbWJkYScsXG4gICAgICAvLyBFdWxlclBoaTogJ01hdGguZXVsZXJQaGknLFxuICAgICAgLy8gRXVsZXJQc2k6ICdNYXRoLmV1bGVyUHNpJyxcbiAgICAgIC8vIEV1bGVyR2FtbWE6ICdNYXRoLmV1bGVyR2FtbWEnLFxuICAgICAgLy8gSGFybW9uaWNOdW1iZXI6ICdNYXRoLmhhcm1vbmljTnVtYmVyJyxcbiAgICAgIC8vIEJlcm5vdWxsaUI6ICdNYXRoLmJlcm5vdWxsaUInLFxuICAgICAgLy8gU3RpcmxpbmdTMTogJ01hdGguc3RpcmxpbmdTMScsXG4gICAgICAvLyBTdGlybGluZ1MyOiAnTWF0aC5zdGlybGluZ1MyJyxcbiAgICAgIC8vIEJlbGxCOiAnTWF0aC5iZWxsQicsXG4gICAgICAvLyBCZWxsTnVtYmVyOiAnTWF0aC5iZWxsTnVtYmVyJyxcbiAgICAgIC8vIExhaFM6ICdNYXRoLmxhaFMnLFxuICAgICAgLy8gTGFoTDogJ01hdGgubGFoTCcsXG4gICAgICAvLyBSaWVtYW5uUjogJ01hdGgucmllbWFublInLFxuICAgICAgLy8gUmllbWFublpldGE6ICdNYXRoLnJpZW1hbm5aZXRhJyxcbiAgICAgIC8vIFJpZW1hbm5YaTogJ01hdGgucmllbWFublhpJyxcbiAgICAgIC8vIFJpZW1hbm5IOiAnTWF0aC5yaWVtYW5uSCcsXG4gICAgICAvLyBSaWVtYW5uWjogJ01hdGgucmllbWFublonLFxuICAgICAgLy8gUmllbWFublM6ICdNYXRoLnJpZW1hbm5TJyxcbiAgICAgIC8vIFJpZW1hbm5YaVplcm86ICdNYXRoLnJpZW1hbm5YaVplcm8nLFxuICAgICAgLy8gUmllbWFublpldGFaZXJvOiAnTWF0aC5yaWVtYW5uWmV0YVplcm8nLFxuICAgICAgLy8gUmllbWFubkhaZXJvOiAnTWF0aC5yaWVtYW5uSFplcm8nLFxuICAgICAgLy8gUmllbWFublNaZXJvOiAnTWF0aC5yaWVtYW5uU1plcm8nLFxuICAgICAgLy8gUmllbWFublByaW1lQ291bnQ6ICdNYXRoLnJpZW1hbm5QcmltZUNvdW50JyxcbiAgICAgIC8vIFJpZW1hbm5STG9nOiAnTWF0aC5yaWVtYW5uUkxvZycsXG4gICAgICAvLyBSaWVtYW5uUkxvZ0Rlcml2YXRpdmU6ICdNYXRoLnJpZW1hbm5STG9nRGVyaXZhdGl2ZScsXG4gICAgICAvLyBSaWVtYW5uUkxvZ1plcm86ICdNYXRoLnJpZW1hbm5STG9nWmVybycsXG4gICAgICAvLyBSaWVtYW5uUkxvZ1plcm9EZXJpdmF0aXZlOiAnTWF0aC5yaWVtYW5uUkxvZ1plcm9EZXJpdmF0aXZlJyxcbiAgICAgIC8vIFJpZW1hbm5SWmVybzogJ01hdGgucmllbWFublJaZXJvJyxcbiAgICAgIC8vIFJpZW1hbm5SRGVyaXZhdGl2ZTogJ01hdGgucmllbWFublJEZXJpdmF0aXZlJyxcbiAgICAgIC8vIFJpZW1hbm5YaVplcm9EZXJpdmF0aXZlOiAnTWF0aC5yaWVtYW5uWGlaZXJvRGVyaXZhdGl2ZScsXG4gICAgICAvLyBSaWVtYW5uWmV0YVplcm9EZXJpdmF0aXZlOiAnTWF0aC5yaWVtYW5uWmV0YVplcm9EZXJpdmF0aXZlJyxcbiAgICAgIC8vIFJpZW1hbm5IWmVyb0Rlcml2YXRpdmU6ICdNYXRoLnJpZW1hbm5IWmVyb0Rlcml2YXRpdmUnLFxuICAgICAgLy8gUmllbWFublNaZXJvRGVyaXZhdGl2ZTogJ01hdGgucmllbWFublNaZXJvRGVyaXZhdGl2ZScsXG4gICAgICAvLyBSaWVtYW5uU1plcm9EZXJpdmF0aXZlMjogJ01hdGgucmllbWFublNaZXJvRGVyaXZhdGl2ZTInLFxuICAgICAgLy8gUmllbWFublNaZXJvRGVyaXZhdGl2ZTM6ICdNYXRoLnJpZW1hbm5TWmVyb0Rlcml2YXRpdmUzJyxcbiAgICAgIC8vIFJpZW1hbm5TWmVyb0Rlcml2YXRpdmU0OiAnTWF0aC5yaWVtYW5uU1plcm9EZXJpdmF0aXZlNCcsXG4gICAgICAvLyBSaWVtYW5uU1plcm9EZXJpdmF0aXZlNTogJ01hdGgucmllbWFublNaZXJvRGVyaXZhdGl2ZTUnLFxuICAgICAgLy8gUmllbWFublNaZXJvRGVyaXZhdGl2ZTY6ICdNYXRoLnJpZW1hbm5TWmVyb0Rlcml2YXRpdmU2JyxcbiAgICB9W2hdID8/IGg7XG4gICAgY29uc3QgYXJncyA9IGV4cHIub3BzO1xuICAgIGlmIChhcmdzICE9PSBudWxsKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpXG4gICAgICAgIHJlc3VsdC5wdXNoKGNvbXBpbGUoYXJnLCBmcmVlVmFycykpO1xuICAgICAgcmV0dXJuIGAke2ZufSgke3Jlc3VsdC5qb2luKFwiLCBcIil9KWA7XG4gICAgfVxuICB9XG4gIHJldHVybiBcIlwiO1xufVxuZnVuY3Rpb24gY29tcGlsZUxvb3AoZXhwciwgb3AzKSB7XG4gIGNvbnN0IGFyZ3MgPSBleHByLm9wcztcbiAgaWYgKGFyZ3MgPT09IG51bGwpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3VtOiBubyBhcmd1bWVudHNcIik7XG4gIGlmICghZXhwci5vcDEgfHwgIWV4cHIub3AyKVxuICAgIHRocm93IG5ldyBFcnJvcihcIlN1bTogbm8gbGltaXRzXCIpO1xuICBjb25zdCBbaW5kZXgsIGxvd2VyLCB1cHBlciwgaXNGaW5pdGUyXSA9IG5vcm1hbGl6ZUxpbWl0cyhleHByLm9wMik7XG4gIGNvbnN0IGZuID0gY29tcGlsZShleHByLm9wMSwgWy4uLmV4cHIub3AxLmZyZWVWYXJzLCBpbmRleF0sIDApO1xuICByZXR1cm4gYCgoKSA9PiB7XG4gIGxldCBhY2MgPSAke29wMyA9PT0gXCIrXCIgPyBcIjBcIiA6IFwiMVwifTtcbiAgY29uc3QgZm4gPSAoXykgPT4gJHtmbn07XG4gIGZvciAobGV0IGkgPSAke2xvd2VyfTsgaSA8PSAke3VwcGVyfTsgaSsrKVxuICAgIGFjYyAke29wM309IGZuKHsgLi4uXywgJHtpbmRleH06IGkgfSk7XG4gIHJldHVybiBhY2M7XG59KSgpYDtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2JveGVkLWV4cHJlc3Npb24vYWJzdHJhY3QtYm94ZWQtZXhwcmVzc2lvbi50c1xudmFyIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjZSwgbWV0YWRhdGEpIHtcbiAgICB0aGlzLmVuZ2luZSA9IGNlO1xuICAgIGlmIChtZXRhZGF0YT8ubGF0ZXggIT09IHZvaWQgMClcbiAgICAgIHRoaXMuX2xhdGV4ID0gbWV0YWRhdGEubGF0ZXg7XG4gICAgaWYgKG1ldGFkYXRhPy53aWtpZGF0YSAhPT0gdm9pZCAwKVxuICAgICAgdGhpcy5fd2lraWRhdGEgPSBtZXRhZGF0YS53aWtpZGF0YTtcbiAgfVxuICAvKiogYE9iamVjdC52YWx1ZU9mKClgOiByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgZm9yIHRoZSBvYmplY3RcbiAgICpcbiAgICovXG4gIHZhbHVlT2YoKSB7XG4gICAgaWYgKHRoaXMuc3ltYm9sID09PSBcIlRydWVcIilcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICh0aGlzLnN5bWJvbCA9PT0gXCJGYWxzZVwiKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBhc0Zsb2F0KHRoaXMpID8/IHRoaXMuc3RyaW5nID8/IHRoaXMuc3ltYm9sID8/IEpTT04uc3RyaW5naWZ5KHRoaXMuanNvbik7XG4gIH1cbiAgLyoqIE9iamVjdC50b1N0cmluZygpICovXG4gIHRvU3RyaW5nKCkge1xuICAgIGlmICh0aGlzLnN5bWJvbClcbiAgICAgIHJldHVybiB0aGlzLnN5bWJvbDtcbiAgICBpZiAodGhpcy5zdHJpbmcpXG4gICAgICByZXR1cm4gdGhpcy5zdHJpbmc7XG4gICAgY29uc3QgbnVtID0gdGhpcy5udW1lcmljVmFsdWU7XG4gICAgaWYgKG51bSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBudW0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBudW0udG9TdHJpbmcoKTtcbiAgICAgIGlmIChpc01hY2hpbmVSYXRpb25hbChudW0pKVxuICAgICAgICByZXR1cm4gYCR7bnVtWzBdLnRvU3RyaW5nKCl9LyR7bnVtWzFdLnRvU3RyaW5nKCl9YDtcbiAgICAgIGlmIChpc0JpZ1JhdGlvbmFsKG51bSkpXG4gICAgICAgIHJldHVybiBgJHtudW1bMF0udG9TdHJpbmcoKX0vJHtudW1bMV0udG9TdHJpbmcoKX1gO1xuICAgICAgaWYgKG51bSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4Ni5Db21wbGV4KSB7XG4gICAgICAgIGNvbnN0IGltID0gbnVtLmltID09PSAxID8gXCJcIiA6IG51bS5pbSA9PT0gLTEgPyBcIi1cIiA6IG51bS5pbS50b1N0cmluZygpO1xuICAgICAgICBpZiAobnVtLnJlID09PSAwKVxuICAgICAgICAgIHJldHVybiBpbSArIFwiaVwiO1xuICAgICAgICBpZiAobnVtLmltIDwgMClcbiAgICAgICAgICByZXR1cm4gYCR7bnVtLnJlLnRvU3RyaW5nKCl9JHtpbX1pYDtcbiAgICAgICAgcmV0dXJuIGAke251bS5yZS50b1N0cmluZygpfSske2ltfWlgO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5qc29uKTtcbiAgfVxuICBbU3ltYm9sLnRvUHJpbWl0aXZlXShoaW50KSB7XG4gICAgaWYgKGhpbnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbHVlT2YoKTtcbiAgICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJudW1iZXJcIiA/IHYgOiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG4gIC8qKiBDYWxsZWQgYnkgYEpTT04uc3RyaW5naWZ5KClgIHdoZW4gc2VyaWFsaXppbmcgdG8ganNvbiAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuanNvbjtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGdldCByYXdKc29uKCkge1xuICAgIHJldHVybiB0aGlzLmpzb247XG4gIH1cbiAgZ2V0IHNjb3BlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKiBPYmplY3QuaXMoKSAqL1xuICBpcyhyaHMpIHtcbiAgICBpZiAocmhzID09PSBudWxsIHx8IHJocyA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmlzU2FtZSh0aGlzLmVuZ2luZS5ib3gocmhzKSk7XG4gIH1cbiAgZ2V0IGxhdGV4KCkge1xuICAgIHJldHVybiB0aGlzLl9sYXRleCA/PyB0aGlzLmVuZ2luZS5zZXJpYWxpemUodGhpcyk7XG4gIH1cbiAgc2V0IGxhdGV4KHZhbCkge1xuICAgIHRoaXMuX2xhdGV4ID0gdmFsO1xuICB9XG4gIGdldCBzeW1ib2woKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZ2V0IGlzTm90aGluZygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0IHN0cmluZygpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBnZXRTdWJleHByZXNzaW9ucyhoZWFkMikge1xuICAgIHJldHVybiBnZXRTdWJleHByZXNzaW9ucyh0aGlzLCBoZWFkMik7XG4gIH1cbiAgZ2V0IHN1YmV4cHJlc3Npb25zKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN1YmV4cHJlc3Npb25zKFwiXCIpO1xuICB9XG4gIGdldCBzeW1ib2xzKCkge1xuICAgIGNvbnN0IHNldCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgZ2V0U3ltYm9scyh0aGlzLCBzZXQpO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG4gIH1cbiAgZ2V0IGZyZWVWYXJzKCkge1xuICAgIGNvbnN0IHNldCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgZ2V0RnJlZVZhcnModGhpcywgc2V0KTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShzZXQpO1xuICB9XG4gIGdldCBlcnJvcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3ViZXhwcmVzc2lvbnMoXCJFcnJvclwiKTtcbiAgfVxuICAvLyBPbmx5IHJldHVybiBub24tbnVsbCBmb3IgZnVuY3Rpb25zXG4gIGdldCBvcHMoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZ2V0IG5vcHMoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgZ2V0IG9wMSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbmdpbmUuc3ltYm9sKFwiTm90aGluZ1wiKTtcbiAgfVxuICBnZXQgb3AyKCkge1xuICAgIHJldHVybiB0aGlzLmVuZ2luZS5zeW1ib2woXCJOb3RoaW5nXCIpO1xuICB9XG4gIGdldCBvcDMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lLnN5bWJvbChcIk5vdGhpbmdcIik7XG4gIH1cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZ2V0IGlzUHVyZSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0IGlzRXhhY3QoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqIEZvciBhIHN5bWJvbCwgdHJ1ZSBpZiB0aGUgc3ltYm9sIGlzIGEgZnJlZSB2YXJpYWJsZSAobm8gdmFsdWUpICovXG4gIGdldCBpc0ZyZWUoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKiBGb3IgYSBzeW1ib2wsIHRydWUgaWYgdGhlIHN5bWJvbCBpcyBhIGNvbnN0YW50ICh1bmNoYW5nZWFibGUgdmFsdWUpICovXG4gIGdldCBpc0NvbnN0YW50KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBnZXQgY2Fub25pY2FsKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGFwcGx5KF9mbiwgX2hlYWQpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzdWJzKF9zdWIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucz8uY2Fub25pY2FsKVxuICAgICAgcmV0dXJuIHRoaXMuY2Fub25pY2FsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNvbHZlKF92YXJzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmVwbGFjZShfcnVsZXMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBoYXMoX3YpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0IGlzTmFOKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgZ2V0IGlzWmVybygpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc05vdFplcm8oKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBnZXQgaXNPbmUoKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBnZXQgaXNOZWdhdGl2ZU9uZSgpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc0luZmluaXR5KCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgLy8gTm90ICstIEluZmluaXR5LCBub3QgTmFOXG4gIGdldCBpc0Zpbml0ZSgpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc0V2ZW4oKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBnZXQgaXNPZGQoKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBnZXQgaXNQcmltZSgpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc0NvbXBvc2l0ZSgpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBudW1lcmljVmFsdWUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZ2V0IHNnbigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpc0xlc3MoX3Jocykge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaXNMZXNzRXF1YWwoX3Jocykge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaXNHcmVhdGVyKF9yaHMpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlzR3JlYXRlckVxdWFsKF9yaHMpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIC8vIHggPiAwXG4gIGdldCBpc1Bvc2l0aXZlKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgLy8geCA+PSAwXG4gIGdldCBpc05vbk5lZ2F0aXZlKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgLy8geCA8IDBcbiAgZ2V0IGlzTmVnYXRpdmUoKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICAvLyB4IDw9IDBcbiAgZ2V0IGlzTm9uUG9zaXRpdmUoKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICBpc0NvbXBhdGlibGUoX2RvbSwgX2tpbmQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgZ2V0IHVybCgpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCB3aWtpZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2lraWRhdGE7XG4gIH1cbiAgc2V0IHdpa2lkYXRhKHZhbCkge1xuICAgIHRoaXMuX3dpa2lkYXRhID0gdmFsO1xuICB9XG4gIGdldCBjb21wbGV4aXR5KCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgZ2V0IGJhc2VkRGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBzeW1ib2xEZWZpbml0aW9uKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgZ2V0IGZ1bmN0aW9uRGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGJpbmQoX3Njb3BlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHVuYmluZCgpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZ2V0IGtleXMoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZ2V0IGtleXNDb3VudCgpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBnZXRLZXkoX2tleSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaGFzS2V5KF9rZXkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgc2V0IHZhbHVlKF92YWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgY2hhbmdlIHRoZSB2YWx1ZSBvZiBcXFxcKCR7dGhpcy5sYXRleH1cXFxcKWApO1xuICB9XG4gIGdldCBkb21haW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lLmRvbWFpbihcIlZvaWRcIik7XG4gIH1cbiAgc2V0IGRvbWFpbihfZG9tYWluKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjaGFuZ2UgdGhlIGRvbWFpbiBvZiBcXFxcKCR7dGhpcy5sYXRleH1cXFxcKWApO1xuICB9XG4gIGdldCBleHBsaWNpdERvbWFpbigpIHtcbiAgICByZXR1cm4gdGhpcy5kb21haW47XG4gIH1cbiAgZ2V0IGlzTnVtYmVyKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgZ2V0IGlzSW50ZWdlcigpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc1JhdGlvbmFsKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgZ2V0IGlzQWxnZWJyYWljKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBnZXQgaXNSZWFsKCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgLy8gUmVhbCBvciArLUluZmluaXR5XG4gIGdldCBpc0V4dGVuZGVkUmVhbCgpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc0NvbXBsZXgoKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBnZXQgaXNJbWFnaW5hcnkoKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBnZXQgaXNFeHRlbmRlZENvbXBsZXgoKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBzaW1wbGlmeShfb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGV2YWx1YXRlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5zaW1wbGlmeShvcHRpb25zKTtcbiAgfVxuICBOKF9vcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZXZhbHVhdGUoKTtcbiAgfVxuICBjb21waWxlKHRvID0gXCJqYXZhc2NyaXB0XCIsIG9wdGlvbnMpIHtcbiAgICBpZiAodG8gIT09IFwiamF2YXNjcmlwdFwiKVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICBvcHRpb25zID8/IChvcHRpb25zID0geyBvcHRpbWl6ZTogW1wic2ltcGxpZnlcIiwgXCJldmFsdWF0ZVwiXSB9KTtcbiAgICBsZXQgZXhwciA9IHRoaXM7XG4gICAgaWYgKG9wdGlvbnMub3B0aW1pemUuaW5jbHVkZXMoXCJzaW1wbGlmeVwiKSlcbiAgICAgIGV4cHIgPSBleHByLnNpbXBsaWZ5KCk7XG4gICAgaWYgKG9wdGlvbnMub3B0aW1pemUuaW5jbHVkZXMoXCJldmFsdWF0ZVwiKSlcbiAgICAgIGV4cHIgPSBleHByLmV2YWx1YXRlKCk7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb21waWxlVG9KYXZhc2NyaXB0KGV4cHIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2JveGVkLWV4cHJlc3Npb24vc2VyaWFsaXplLnRzXG52YXIgaW1wb3J0X2NvbXBsZXg4ID0gX190b0VTTShyZXF1aXJlX2NvbXBsZXgoKSk7XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9udW1lcmljcy9udW1lcmljLWJpZ251bS50c1xuZnVuY3Rpb24gZmFjdG9yaWFsMihjZSwgbikge1xuICBpZiAoIW4uaXNJbnRlZ2VyKCkgfHwgbi5pc05lZ2F0aXZlKCkpXG4gICAgcmV0dXJuIGNlLl9CSUdOVU1fTkFOO1xuICBpZiAobi5sZXNzVGhhbigxMCkpXG4gICAgcmV0dXJuIGNlLmJpZ251bShcbiAgICAgIFsxLCAxLCAyLCA2LCAyNCwgMTIwLCA3MjAsIDUwNDAsIDQwMzIwLCAzNjI4ODAsIDM2Mjg4MDBdW24udG9OdW1iZXIoKV1cbiAgICApO1xuICBpZiAobi5ndChOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikpIHtcbiAgICBsZXQgdmFsMiA9IGNlLl9CSUdOVU1fT05FO1xuICAgIGxldCBpID0gY2UuX0JJR05VTV9UV087XG4gICAgd2hpbGUgKGkubGVzc1RoYW4obikpIHtcbiAgICAgIHZhbDIgPSB2YWwyLm11bChpKTtcbiAgICAgIGkgPSBpLmFkZCgxKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDI7XG4gIH1cbiAgaWYgKG4ubW9kdWxvKDIpLmVxKDEpKSB7XG4gICAgcmV0dXJuIG4udGltZXMoZmFjdG9yaWFsMihjZSwgbi5taW51cygxKSkpO1xuICB9XG4gIGxldCBsb29wID0gbi50b051bWJlcigpO1xuICBsZXQgc3VtMiA9IG47XG4gIGxldCB2YWwgPSBuO1xuICB3aGlsZSAobG9vcCA+IDIpIHtcbiAgICBsb29wIC09IDI7XG4gICAgc3VtMiA9IHN1bTIuYWRkKGxvb3ApO1xuICAgIHZhbCA9IHZhbC5tdWwoc3VtMik7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn1cbnZhciBnYW1tYUcyID0gNztcbmZ1bmN0aW9uIGxuZ2FtbWEyKGNlLCB6KSB7XG4gIGlmICh6LmlzTmVnYXRpdmUoKSlcbiAgICByZXR1cm4gY2UuX0JJR05VTV9OQU47XG4gIGNvbnN0IEdBTU1BX1BfTE4gPSBjZS5jYWNoZShcImdhbW1hLXAtbG5cIiwgKCkgPT4ge1xuICAgIHJldHVybiBbXG4gICAgICBcIjAuOTk5OTk5OTk5OTk5OTk3MDkxODJcIixcbiAgICAgIFwiNTcuMTU2MjM1NjY1ODYyOTIzNTE3XCIsXG4gICAgICBcIi01OS41OTc5NjAzNTU0NzU0OTEyNDhcIixcbiAgICAgIFwiMTQuMTM2MDk3OTc0NzQxNzQ3MTc0XCIsXG4gICAgICBcIi0wLjQ5MTkxMzgxNjA5NzYyMDE5OTc4XCIsXG4gICAgICBcIjAuMzM5OTQ2NDk5ODQ4MTE4ODg2OTllLTRcIixcbiAgICAgIFwiMC40NjUyMzYyODkyNzA0ODU3NTY2NWUtNFwiLFxuICAgICAgXCItMC45ODM3NDQ3NTMwNDg3OTU2NDY3N2UtNFwiLFxuICAgICAgXCIwLjE1ODA4ODcwMzIyNDkxMjQ4ODg0ZS0zXCIsXG4gICAgICBcIi0wLjIxMDI2NDQ0MTcyNDEwNDg4MzE5ZS0zXCIsXG4gICAgICBcIjAuMjE3NDM5NjE4MTE1MjEyNjQzMmUtM1wiLFxuICAgICAgXCItMC4xNjQzMTgxMDY1MzY3NjM4OTAyMmUtM1wiLFxuICAgICAgXCIwLjg0NDE4MjIzOTgzODUyNzQzMjkzZS00XCIsXG4gICAgICBcIi0wLjI2MTkwODM4NDAxNTgxNDA4NjdlLTRcIixcbiAgICAgIFwiMC4zNjg5OTE4MjY1OTUzMTYyMjcwNGUtNVwiXG4gICAgXS5tYXAoKHgyKSA9PiBjZS5iaWdudW0oeDIpKTtcbiAgfSk7XG4gIGxldCB4ID0gR0FNTUFfUF9MTlswXTtcbiAgZm9yIChsZXQgaSA9IEdBTU1BX1BfTE4ubGVuZ3RoIC0gMTsgaSA+IDA7IC0taSkge1xuICAgIHggPSB4LmFkZChHQU1NQV9QX0xOW2ldLmRpdih6LmFkZChpKSkpO1xuICB9XG4gIGNvbnN0IEdBTU1BX0dfTE4gPSBjZS5jYWNoZShcImdhbW1hLWctbG5cIiwgKCkgPT4gY2UuYmlnbnVtKDYwNykuZGl2KDEyOCkpO1xuICBjb25zdCB0ID0gei5hZGQoR0FNTUFfR19MTikuYWRkKGNlLl9CSUdOVU1fSEFMRik7XG4gIHJldHVybiBjZS5fQklHTlVNX05FR0FUSVZFX09ORS5hY29zKCkubXVsKGNlLl9CSUdOVU1fVFdPKS5sb2coKS5tdWwoY2UuX0JJR05VTV9IQUxGKS5hZGQoXG4gICAgdC5sb2coKS5tdWwoei5hZGQoY2UuX0JJR05VTV9IQUxGKSkubWludXModCkuYWRkKHgubG9nKCkpLm1pbnVzKHoubG9nKCkpXG4gICk7XG59XG5mdW5jdGlvbiBnYW1tYTIoY2UsIHopIHtcbiAgaWYgKHoubGVzc1RoYW4oY2UuX0JJR05VTV9IQUxGKSkge1xuICAgIGNvbnN0IHBpID0gY2UuX0JJR05VTV9ORUdBVElWRV9PTkUuYWNvcygpO1xuICAgIHJldHVybiBwaS5kaXYoXG4gICAgICBwaS5tdWwoeikuc2luKCkubXVsKGdhbW1hMihjZSwgY2UuX0JJR05VTV9PTkUuc3ViKHopKSlcbiAgICApO1xuICB9XG4gIGlmICh6LmdyZWF0ZXJUaGFuKDEwMCkpXG4gICAgcmV0dXJuIGxuZ2FtbWEyKGNlLCB6KS5leHAoKTtcbiAgeiA9IHouc3ViKDEpO1xuICBjb25zdCBMQU5DWk9TXzdfQyA9IGNlLmNhY2hlKFwibGFuY3pvcy03LWNcIiwgKCkgPT4ge1xuICAgIHJldHVybiBbXG4gICAgICBcIjAuOTk5OTk5OTk5OTk5ODA5OTMyMjc2ODQ3MDA0NzM0NzhcIixcbiAgICAgIFwiNjc2LjUyMDM2ODEyMTg4NTA5ODU2NzAwOTE5MDQ0NDAxOVwiLFxuICAgICAgXCItMTI1OS4xMzkyMTY3MjI0MDI4NzA0NzE1NjA3ODc1NTI4M1wiLFxuICAgICAgXCI3NzEuMzIzNDI4Nzc3NjUzMDc4ODQ4NjUyODI1ODg5NFwiLFxuICAgICAgXCItMTc2LjYxNTAyOTE2MjE0MDU5OTA2NTg0NTUxMzU0XCIsXG4gICAgICBcIjEyLjUwNzM0MzI3ODY4NjkwNDgxNDQ1ODkzNjg1M1wiLFxuICAgICAgXCItMC4xMzg1NzEwOTUyNjU3MjAxMTY4OTU1NDcwN1wiLFxuICAgICAgXCI5Ljk4NDM2OTU3ODAxOTU3MDg1OTU2M2UtNlwiLFxuICAgICAgXCIxLjUwNTYzMjczNTE0OTMxMTU1ODM0ZS03XCJcbiAgICBdLm1hcCgoeDIpID0+IGNlLmJpZ251bSh4MikpO1xuICB9KTtcbiAgbGV0IHggPSBMQU5DWk9TXzdfQ1swXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBnYW1tYUcyICsgMjsgaSsrKVxuICAgIHggPSB4LmFkZChMQU5DWk9TXzdfQ1tpXS5kaXYoei5hZGQoaSkpKTtcbiAgY29uc3QgdCA9IHouYWRkKGdhbW1hRzIpLmFkZChjZS5fQklHTlVNX0hBTEYpO1xuICByZXR1cm4gY2UuX0JJR05VTV9ORUdBVElWRV9PTkUuYWNvcygpLnRpbWVzKGNlLl9CSUdOVU1fVFdPKS5zcXJ0KCkubXVsKHgubXVsKHQubmVnKCkuZXhwKCkpLm11bCh0LnBvdyh6LmFkZChjZS5fQklHTlVNX0hBTEYpKSkpO1xufVxuZnVuY3Rpb24gaXNJbk1hY2hpbmVSYW5nZShkKSB7XG4gIGlmICghZC5pc0Zpbml0ZSgpKVxuICAgIHJldHVybiB0cnVlO1xuICBpZiAoZC5kLmxlbmd0aCA+IDMgfHwgZC5kLmxlbmd0aCA9PT0gMyAmJiBkLmRbMF0gPj0gOTApXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoZC5wcmVjaXNpb24oKSA8PSAxNik7XG4gIHJldHVybiBkLmUgPCAzMDggJiYgZC5lID4gLTMwNjtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL3N5bWJvbGljL3Byb2R1Y3QudHNcbnZhciBpbXBvcnRfY29tcGxleDcgPSBfX3RvRVNNKHJlcXVpcmVfY29tcGxleCgpKTtcbnZhciBQcm9kdWN0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjZSwgeHMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIE90aGVyIHRlcm1zIG9mIHRoZSBwcm9kdWN0LCBgdGVybWAgaXMgdGhlIGtleVxuICAgIHRoaXMuX3Rlcm1zID0gW107XG4gICAgdGhpcy5faGFzSW5maW5pdHkgPSBmYWxzZTtcbiAgICB0aGlzLl9oYXNaZXJvID0gZmFsc2U7XG4gICAgLy8gSWYgYGZhbHNlYCwgdGhlIHJ1bm5pbmcgcHJvZHVjdHMgYXJlIG5vdCBjYWxjdWxhdGVkXG4gICAgdGhpcy5faXNDYW5vbmljYWwgPSB0cnVlO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zID8geyAuLi5vcHRpb25zIH0gOiB7fTtcbiAgICBpZiAoIShcImNhbm9uaWNhbFwiIGluIG9wdGlvbnMpKVxuICAgICAgb3B0aW9ucy5jYW5vbmljYWwgPSB0cnVlO1xuICAgIHRoaXMuX2lzQ2Fub25pY2FsID0gb3B0aW9ucy5jYW5vbmljYWw7XG4gICAgdGhpcy5lbmdpbmUgPSBjZTtcbiAgICB0aGlzLl9zaWduID0gMTtcbiAgICB0aGlzLl9yYXRpb25hbCA9IGJpZ251bVByZWZlcnJlZChjZSkgPyBbQmlnSW50KDEpLCBCaWdJbnQoMSldIDogWzEsIDFdO1xuICAgIHRoaXMuX2NvbXBsZXggPSBpbXBvcnRfY29tcGxleDcuZGVmYXVsdC5PTkU7XG4gICAgdGhpcy5fYmlnbnVtID0gY2UuX0JJR05VTV9PTkU7XG4gICAgdGhpcy5fbnVtYmVyID0gMTtcbiAgICBpZiAoeHMpXG4gICAgICBmb3IgKGNvbnN0IHggb2YgeHMpXG4gICAgICAgIHRoaXMuYWRkVGVybSh4KTtcbiAgfVxuICBnZXQgaXNFbXB0eSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzQ2Fub25pY2FsKVxuICAgICAgcmV0dXJuIHRoaXMuX3Rlcm1zLmxlbmd0aCA9PT0gMDtcbiAgICByZXR1cm4gdGhpcy5fdGVybXMubGVuZ3RoID09PSAwICYmIHRoaXMuX2hhc0luZmluaXR5ID09PSBmYWxzZSAmJiB0aGlzLl9oYXNaZXJvID09PSBmYWxzZSAmJiB0aGlzLl9zaWduID09PSAxICYmIGlzUmF0aW9uYWxPbmUodGhpcy5fcmF0aW9uYWwpICYmIC8vIGlzUmF0aW9uYWxPbmUodGhpcy5fc3F1YXJlUm9vdFJhdGlvbmFsKSAmJlxuICAgIHRoaXMuX2NvbXBsZXgucmUgPT09IDEgJiYgdGhpcy5fY29tcGxleC5pbSA9PT0gMCAmJiB0aGlzLl9iaWdudW0uZXEodGhpcy5lbmdpbmUuX0JJR05VTV9PTkUpICYmIHRoaXMuX251bWJlciA9PT0gMTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgdGVybSB0byB0aGUgcHJvZHVjdC5cbiAgICpcbiAgICogSWYgYHRoaXMuX2lzQ2Fub25pY2FsYCBhIHJ1bm5pbmcgcHJvZHVjdCBvZiBleGFjdCB0ZXJtcyBpcyBrZXB0LlxuICAgKiBPdGhlcndpc2UsIHRlcm1zIGFuZCB0aGVpciBleHBvbmVudCBhcmUgdGFsbGllZC5cbiAgICovXG4gIGFkZFRlcm0odGVybSkge1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydCh0ZXJtLmlzQ2Fub25pY2FsKTtcbiAgICBpZiAodGVybS5oZWFkID09PSBcIk11bHRpcGx5XCIpIHtcbiAgICAgIGZvciAoY29uc3QgdCBvZiB0ZXJtLm9wcylcbiAgICAgICAgdGhpcy5hZGRUZXJtKHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5faXNDYW5vbmljYWwpIHtcbiAgICAgIGlmICh0ZXJtLmlzTm90aGluZylcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHRlcm0ubnVtZXJpY1ZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIGlmICh0ZXJtLmlzT25lKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRlcm0uaXNaZXJvKSB7XG4gICAgICAgICAgdGhpcy5faGFzWmVybyA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXJtLmlzTmVnYXRpdmVPbmUpIHtcbiAgICAgICAgICB0aGlzLl9zaWduICo9IC0xO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGVybS5pc0luZmluaXR5KSB7XG4gICAgICAgICAgdGhpcy5faGFzSW5maW5pdHkgPSB0cnVlO1xuICAgICAgICAgIGlmICh0ZXJtLmlzTmVnYXRpdmUpXG4gICAgICAgICAgICB0aGlzLl9zaWduICo9IC0xO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbnVtID0gdGVybS5udW1lcmljVmFsdWU7XG4gICAgICAgIGlmICh0eXBlb2YgbnVtID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgaWYgKG51bSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3NpZ24gKj0gLTE7XG4gICAgICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihudW0pKVxuICAgICAgICAgICAgdGhpcy5fcmF0aW9uYWwgPSBtdWwyKHRoaXMuX3JhdGlvbmFsLCBbbnVtLCAxXSk7XG4gICAgICAgICAgZWxzZSBpZiAoYmlnbnVtUHJlZmVycmVkKHRoaXMuZW5naW5lKSlcbiAgICAgICAgICAgIHRoaXMuX2JpZ251bSA9IHRoaXMuX2JpZ251bS5tdWwobnVtKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl9udW1iZXIgKj0gbnVtO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtIGluc3RhbmNlb2YgZGVjaW1hbF9kZWZhdWx0KSB7XG4gICAgICAgICAgaWYgKG51bS5pc05lZ2F0aXZlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NpZ24gKj0gLTE7XG4gICAgICAgICAgICBudW0gPSBudW0ubmVnKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChudW0uaXNJbnRlZ2VyKCkpXG4gICAgICAgICAgICB0aGlzLl9yYXRpb25hbCA9IG11bDIodGhpcy5fcmF0aW9uYWwsIFtiaWdpbnQobnVtKSwgQmlnSW50KDEpXSk7XG4gICAgICAgICAgZWxzZSBpZiAoYmlnbnVtUHJlZmVycmVkKHRoaXMuZW5naW5lKSlcbiAgICAgICAgICAgIHRoaXMuX2JpZ251bSA9IHRoaXMuX2JpZ251bS5tdWwobnVtKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl9udW1iZXIgKj0gbnVtLnRvTnVtYmVyKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW0gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDcuZGVmYXVsdCkge1xuICAgICAgICAgIHRoaXMuX2NvbXBsZXggPSB0aGlzLl9jb21wbGV4Lm11bChudW0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSYXRpb25hbChudW0pKSB7XG4gICAgICAgICAgdGhpcy5fcmF0aW9uYWwgPSBtdWwyKHRoaXMuX3JhdGlvbmFsLCBudW0pO1xuICAgICAgICAgIGlmIChpc05lZyh0aGlzLl9yYXRpb25hbCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NpZ24gKj0gLTE7XG4gICAgICAgICAgICB0aGlzLl9yYXRpb25hbCA9IG5lZyh0aGlzLl9yYXRpb25hbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgcmVzdCA9IHRlcm07XG4gICAgaWYgKHRoaXMuX2lzQ2Fub25pY2FsKSB7XG4gICAgICBsZXQgY29lZjtcbiAgICAgIFtjb2VmLCByZXN0XSA9IGFzQ29lZmZpY2llbnQodGVybSk7XG4gICAgICB0aGlzLl9yYXRpb25hbCA9IG11bDIodGhpcy5fcmF0aW9uYWwsIGNvZWYpO1xuICAgICAgaWYgKGlzTmVnKHRoaXMuX3JhdGlvbmFsKSkge1xuICAgICAgICB0aGlzLl9zaWduICo9IC0xO1xuICAgICAgICB0aGlzLl9yYXRpb25hbCA9IG5lZyh0aGlzLl9yYXRpb25hbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZXN0Lm51bWVyaWNWYWx1ZSAhPT0gbnVsbCAmJiByZXN0LmlzT25lKVxuICAgICAgcmV0dXJuO1xuICAgIGxldCBleHBvbmVudCA9IFsxLCAxXTtcbiAgICBpZiAocmVzdC5oZWFkID09PSBcIlBvd2VyXCIpIHtcbiAgICAgIGNvbnN0IHIgPSBhc1JhdGlvbmFsKHJlc3Qub3AyKTtcbiAgICAgIGlmIChyKSB7XG4gICAgICAgIGV4cG9uZW50ID0gcjtcbiAgICAgICAgcmVzdCA9IHJlc3Qub3AxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocmVzdC5oZWFkID09PSBcIkRpdmlkZVwiKSB7XG4gICAgICB0aGlzLmFkZFRlcm0ocmVzdC5vcDEpO1xuICAgICAgZXhwb25lbnQgPSBbLTEsIDFdO1xuICAgICAgcmVzdCA9IHJlc3Qub3AyO1xuICAgIH1cbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IHggb2YgdGhpcy5fdGVybXMpIHtcbiAgICAgIGlmICh4LnRlcm0uaXNTYW1lKHJlc3QpKSB7XG4gICAgICAgIHguZXhwb25lbnQgPSBhZGQyKHguZXhwb25lbnQsIGV4cG9uZW50KTtcbiAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmb3VuZClcbiAgICAgIHRoaXMuX3Rlcm1zLnB1c2goeyB0ZXJtOiByZXN0LCBleHBvbmVudCB9KTtcbiAgfVxuICB1bml0VGVybXMobW9kZSkge1xuICAgIGNvbnN0IGNlID0gdGhpcy5lbmdpbmU7XG4gICAgaWYgKG1vZGUgPT09IFwibnVtZXJpY1wiKSB7XG4gICAgICBpZiAoIWNvbXBsZXhBbGxvd2VkKGNlKSAmJiB0aGlzLl9jb21wbGV4LmltICE9PSAwKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChiaWdudW1QcmVmZXJyZWQoY2UpKSB7XG4gICAgICAgIGxldCBiMiA9IGNlLl9CSUdOVU1fT05FO1xuICAgICAgICBpZiAoIWlzUmF0aW9uYWxPbmUodGhpcy5fcmF0aW9uYWwpKSB7XG4gICAgICAgICAgaWYgKGlzQmlnUmF0aW9uYWwodGhpcy5fcmF0aW9uYWwpKVxuICAgICAgICAgICAgYjIgPSBjZS5iaWdudW0odGhpcy5fcmF0aW9uYWxbMF0udG9TdHJpbmcoKSkuZGl2KGNlLmJpZ251bSh0aGlzLl9yYXRpb25hbFsxXS50b1N0cmluZygpKSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgYjIgPSBjZS5iaWdudW0odGhpcy5fcmF0aW9uYWxbMF0pLmRpdih0aGlzLl9yYXRpb25hbFsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgYjIgPSBiMi5tdWwodGhpcy5fYmlnbnVtKS5tdWwodGhpcy5fc2lnbiAqIHRoaXMuX251bWJlcik7XG4gICAgICAgIGlmICh0aGlzLl9jb21wbGV4LmltICE9PSAwKSB7XG4gICAgICAgICAgY29uc3QgeiA9IHRoaXMuX2NvbXBsZXgubXVsKGIyLnRvTnVtYmVyKCkpO1xuICAgICAgICAgIGlmICh6LmVxdWFscygxKSlcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICByZXR1cm4gW3sgZXhwb25lbnQ6IFsxLCAxXSwgdGVybXM6IFtjZS5udW1iZXIoeildIH1dO1xuICAgICAgICB9XG4gICAgICAgIGIyID0gYjIubXVsKHRoaXMuX2NvbXBsZXgucmUpO1xuICAgICAgICBpZiAoYjIuZXF1YWxzKDEpKVxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgcmV0dXJuIFt7IGV4cG9uZW50OiBbMSwgMV0sIHRlcm1zOiBbY2UubnVtYmVyKGIyKV0gfV07XG4gICAgICB9XG4gICAgICBsZXQgbjIgPSAxO1xuICAgICAgaWYgKCFpc1JhdGlvbmFsT25lKHRoaXMuX3JhdGlvbmFsKSkge1xuICAgICAgICBpZiAoaXNCaWdSYXRpb25hbCh0aGlzLl9yYXRpb25hbCkpXG4gICAgICAgICAgbjIgPSBOdW1iZXIodGhpcy5fcmF0aW9uYWxbMF0pIC8gTnVtYmVyKHRoaXMuX3JhdGlvbmFsWzFdKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIG4yID0gdGhpcy5fcmF0aW9uYWxbMF0gLyB0aGlzLl9yYXRpb25hbFsxXTtcbiAgICAgIH1cbiAgICAgIG4yICo9IHRoaXMuX3NpZ24gKiB0aGlzLl9udW1iZXIgKiB0aGlzLl9iaWdudW0udG9OdW1iZXIoKTtcbiAgICAgIGlmICh0aGlzLl9jb21wbGV4LmltICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IHogPSB0aGlzLl9jb21wbGV4Lm11bChuMik7XG4gICAgICAgIGlmICh6LmVxdWFscygxKSlcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIHJldHVybiBbeyBleHBvbmVudDogWzEsIDFdLCB0ZXJtczogW2NlLm51bWJlcih6KV0gfV07XG4gICAgICB9XG4gICAgICBuMiAqPSB0aGlzLl9jb21wbGV4LnJlO1xuICAgICAgaWYgKG4yID09PSAxKVxuICAgICAgICByZXR1cm4gW107XG4gICAgICByZXR1cm4gW3sgZXhwb25lbnQ6IFsxLCAxXSwgdGVybXM6IFtjZS5udW1iZXIobjIpXSB9XTtcbiAgICB9XG4gICAgY29uc3QgeHMgPSBbXTtcbiAgICBjb25zdCB1bml0VGVybXMgPSBbXTtcbiAgICBpZiAodGhpcy5faGFzSW5maW5pdHkpXG4gICAgICB1bml0VGVybXMucHVzaChjZS5fUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIHRoaXMuX3JhdGlvbmFsID0gcmVkdWNlZFJhdGlvbmFsKHRoaXMuX3JhdGlvbmFsKTtcbiAgICBpZiAodGhpcy5fY29tcGxleC5yZSAhPT0gMSB8fCB0aGlzLl9jb21wbGV4LmltICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5fY29tcGxleC5pbSA9PT0gMClcbiAgICAgICAgdGhpcy5fbnVtYmVyICo9IE1hdGguYWJzKHRoaXMuX2NvbXBsZXgucmUpO1xuICAgICAgaWYgKHRoaXMuX2NvbXBsZXgucmUgPCAwKVxuICAgICAgICB0aGlzLl9yYXRpb25hbCA9IG5lZyh0aGlzLl9yYXRpb25hbCk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdW5pdFRlcm1zLnB1c2goY2UubnVtYmVyKHRoaXMuX2NvbXBsZXgpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IG4gPSB0aGlzLl9zaWduICogdGhpcy5fbnVtYmVyO1xuICAgIGxldCBiID0gdGhpcy5fYmlnbnVtO1xuICAgIGlmICghaXNSYXRpb25hbE9uZSh0aGlzLl9yYXRpb25hbCkpIHtcbiAgICAgIGlmIChtb2RlID09PSBcInJhdGlvbmFsXCIpIHtcbiAgICAgICAgaWYgKG1hY2hpbmVOdW1lcmF0b3IodGhpcy5fcmF0aW9uYWwpICE9PSAxKSB7XG4gICAgICAgICAgaWYgKGlzQmlnUmF0aW9uYWwodGhpcy5fcmF0aW9uYWwpKVxuICAgICAgICAgICAgYiA9IGIubXVsKGNlLmJpZ251bSh0aGlzLl9yYXRpb25hbFswXSkpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIG4gKj0gdGhpcy5fcmF0aW9uYWxbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hY2hpbmVEZW5vbWluYXRvcih0aGlzLl9yYXRpb25hbCkgIT09IDEpXG4gICAgICAgICAgeHMucHVzaCh7XG4gICAgICAgICAgICBleHBvbmVudDogWy0xLCAxXSxcbiAgICAgICAgICAgIHRlcm1zOiBbY2UubnVtYmVyKHRoaXMuX3JhdGlvbmFsWzFdKV1cbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID09PSAtMSkge1xuICAgICAgICAgIHVuaXRUZXJtcy5wdXNoKGNlLm51bWJlcihuZWcodGhpcy5fcmF0aW9uYWwpKSk7XG4gICAgICAgICAgbiA9IDE7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHVuaXRUZXJtcy5wdXNoKGNlLm51bWJlcih0aGlzLl9yYXRpb25hbCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWIuZXF1YWxzKGNlLl9CSUdOVU1fT05FKSlcbiAgICAgIHVuaXRUZXJtcy5wdXNoKGNlLm51bWJlcihiLm11bChuKSkpO1xuICAgIGVsc2UgaWYgKG4gIT09IDEpXG4gICAgICB1bml0VGVybXMucHVzaChjZS5udW1iZXIobikpO1xuICAgIGlmICh1bml0VGVybXMubGVuZ3RoID4gMClcbiAgICAgIHhzLnB1c2goeyBleHBvbmVudDogWzEsIDFdLCB0ZXJtczogdW5pdFRlcm1zIH0pO1xuICAgIHJldHVybiB4cztcbiAgfVxuICAvKiogVGhlIHRlcm1zIG9mIHRoZSBwcm9kdWN0LCBncm91cGVkIGJ5IGRlZ3JlZXMuXG4gICAqXG4gICAqIElmIGBtb2RlYCBpcyBgcmF0aW9uYWxgLCByYXRpb25hbHMgYXJlIHNwbGl0IGludG8gc2VwYXJhdGUgbnVtZXJhdG9yIGFuZFxuICAgKiBkZW5vbWluYXRvciwgc28gdGhhdCBhIHJhdGlvbmFsIGV4cHJlc3Npb24gY2FuIGJlIGNyZWF0ZWQgbGF0ZXJcbiAgICogSWYgYG1vZGVgIGlzIGBleHByZXNzaW9uYCwgYSByZWd1bGFyIGV4cHJlc3Npb24gaXMgcmV0dXJuZWQsIHdpdGhvdXRcbiAgICogc3BsaXR0aW5nIHJhdGlvbmFsc1xuICAgKiBJZiBgbW9kZWAgaXMgYG51bWVyaWNgLCB0aGUgbGl0ZXJhbHMgYXJlIGNvbWJpbmVkIGludG8gb25lIGV4cHJlc3Npb25cbiAgICpcbiAgICovXG4gIGdyb3VwZWRCeURlZ3JlZXMob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPz8gKG9wdGlvbnMgPSB7fSk7XG4gICAgaWYgKCEoXCJtb2RlXCIgaW4gb3B0aW9ucykpXG4gICAgICBvcHRpb25zLm1vZGUgPSBcImV4cHJlc3Npb25cIjtcbiAgICBjb25zdCBjZSA9IHRoaXMuZW5naW5lO1xuICAgIGlmIChvcHRpb25zLm1vZGUgPT09IFwibnVtZXJpY1wiKSB7XG4gICAgICBpZiAodGhpcy5fY29tcGxleC5pbSAhPT0gMCAmJiAhY29tcGxleEFsbG93ZWQoY2UpKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGlmICh0aGlzLl9oYXNJbmZpbml0eSlcbiAgICAgICAgcmV0dXJuIFt7IGV4cG9uZW50OiBbMSwgMV0sIHRlcm1zOiBbY2UuX1BPU0lUSVZFX0lORklOSVRZXSB9XTtcbiAgICB9XG4gICAgY29uc3QgeHMgPSB0aGlzLnVuaXRUZXJtcyhvcHRpb25zLm1vZGUgPz8gXCJleHByZXNzaW9uXCIpO1xuICAgIGlmICh4cyA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl90ZXJtcykge1xuICAgICAgY29uc3QgZXhwb25lbnQgPSByZWR1Y2VkUmF0aW9uYWwodC5leHBvbmVudCk7XG4gICAgICBpZiAoZXhwb25lbnRbMF0gPT09IDApXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IHggb2YgeHMpIHtcbiAgICAgICAgaWYgKGV4cG9uZW50WzBdID09PSB4LmV4cG9uZW50WzBdICYmIGV4cG9uZW50WzFdID09PSB4LmV4cG9uZW50WzFdKSB7XG4gICAgICAgICAgeC50ZXJtcy5wdXNoKHQudGVybSk7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWZvdW5kKVxuICAgICAgICB4cy5wdXNoKHsgZXhwb25lbnQsIHRlcm1zOiBbdC50ZXJtXSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHhzO1xuICB9XG4gIGFzRXhwcmVzc2lvbihtb2RlID0gXCJldmFsdWF0ZVwiKSB7XG4gICAgY29uc3QgY2UgPSB0aGlzLmVuZ2luZTtcbiAgICBpZiAodGhpcy5faGFzSW5maW5pdHkpIHtcbiAgICAgIGlmICh0aGlzLl9oYXNaZXJvKVxuICAgICAgICByZXR1cm4gY2UuX05BTjtcbiAgICAgIGlmICh0aGlzLl90ZXJtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKG1hY2hpbmVOdW1lcmF0b3IodGhpcy5fcmF0aW9uYWwpID4gMClcbiAgICAgICAgICByZXR1cm4gY2UuX1BPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICByZXR1cm4gY2UuX05FR0FUSVZFX0lORklOSVRZO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5faGFzWmVybylcbiAgICAgIHJldHVybiBjZS5fWkVSTztcbiAgICBjb25zdCBncm91cGVkVGVybXMgPSB0aGlzLmdyb3VwZWRCeURlZ3JlZXMoe1xuICAgICAgbW9kZTogbW9kZSA9PT0gXCJOXCIgPyBcIm51bWVyaWNcIiA6IFwiZXhwcmVzc2lvblwiXG4gICAgfSk7XG4gICAgaWYgKGdyb3VwZWRUZXJtcyA9PT0gbnVsbClcbiAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgIGNvbnN0IHRlcm1zID0gdGVybXNBc0V4cHJlc3Npb25zKGNlLCBncm91cGVkVGVybXMpO1xuICAgIGlmICh0ZXJtcy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gY2UuX09ORTtcbiAgICBpZiAodGVybXMubGVuZ3RoID09PSAxKVxuICAgICAgcmV0dXJuIHRlcm1zWzBdO1xuICAgIHJldHVybiB0aGlzLmVuZ2luZS5fZm4oXCJNdWx0aXBseVwiLCB0ZXJtcyk7XG4gIH1cbiAgLyoqIFRoZSBwcm9kdWN0LCBleHByZXNzZWQgYXMgYSBudW1lcmF0b3IgYW5kIGRlbm9taW5hdG9yICovXG4gIGFzTnVtZXJhdG9yRGVub21pbmF0b3IoKSB7XG4gICAgY29uc3QgeHMgPSB0aGlzLmdyb3VwZWRCeURlZ3JlZXMoeyBtb2RlOiBcInJhdGlvbmFsXCIgfSk7XG4gICAgaWYgKHhzID09PSBudWxsKVxuICAgICAgcmV0dXJuIFt0aGlzLmVuZ2luZS5fTkFOLCB0aGlzLmVuZ2luZS5fTkFOXTtcbiAgICBjb25zdCB4c051bWVyYXRvciA9IFtdO1xuICAgIGNvbnN0IHhzRGVub21pbmF0b3IgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHggb2YgeHMpXG4gICAgICBpZiAoeC5leHBvbmVudFswXSA+PSAwKVxuICAgICAgICB4c051bWVyYXRvci5wdXNoKHgpO1xuICAgICAgZWxzZVxuICAgICAgICB4c0Rlbm9taW5hdG9yLnB1c2goe1xuICAgICAgICAgIGV4cG9uZW50OiBuZWcoeC5leHBvbmVudCksXG4gICAgICAgICAgdGVybXM6IHgudGVybXNcbiAgICAgICAgfSk7XG4gICAgY29uc3QgY2UgPSB0aGlzLmVuZ2luZTtcbiAgICBjb25zdCBudW1lcmF0b3JUZXJtcyA9IHRlcm1zQXNFeHByZXNzaW9ucyhjZSwgeHNOdW1lcmF0b3IpO1xuICAgIGxldCBudW1lcmF0b3IgPSBjZS5fT05FO1xuICAgIGlmIChudW1lcmF0b3JUZXJtcy5sZW5ndGggPT09IDEpXG4gICAgICBudW1lcmF0b3IgPSBudW1lcmF0b3JUZXJtc1swXTtcbiAgICBlbHNlIGlmIChudW1lcmF0b3JUZXJtcy5sZW5ndGggPiAwKVxuICAgICAgbnVtZXJhdG9yID0gY2UuX2ZuKFwiTXVsdGlwbHlcIiwgbnVtZXJhdG9yVGVybXMpO1xuICAgIGNvbnN0IGRlbm9taW5hdG9yVGVybXMgPSB0ZXJtc0FzRXhwcmVzc2lvbnMoY2UsIHhzRGVub21pbmF0b3IpO1xuICAgIGxldCBkZW5vbWluYXRvciA9IGNlLl9PTkU7XG4gICAgaWYgKGRlbm9taW5hdG9yVGVybXMubGVuZ3RoID09PSAxKVxuICAgICAgZGVub21pbmF0b3IgPSBkZW5vbWluYXRvclRlcm1zWzBdO1xuICAgIGVsc2UgaWYgKGRlbm9taW5hdG9yVGVybXMubGVuZ3RoID4gMClcbiAgICAgIGRlbm9taW5hdG9yID0gY2UuX2ZuKFwiTXVsdGlwbHlcIiwgZGVub21pbmF0b3JUZXJtcyk7XG4gICAgcmV0dXJuIFtudW1lcmF0b3IsIGRlbm9taW5hdG9yXTtcbiAgfVxuICBhc1JhdGlvbmFsRXhwcmVzc2lvbigpIHtcbiAgICBjb25zdCBbbnVtZXJhdG9yLCBkZW5vbWluYXRvcl0gPSB0aGlzLmFzTnVtZXJhdG9yRGVub21pbmF0b3IoKTtcbiAgICBpZiAoZGVub21pbmF0b3IubnVtZXJpY1ZhbHVlICE9PSBudWxsKSB7XG4gICAgICBpZiAoZGVub21pbmF0b3IuaXNPbmUpXG4gICAgICAgIHJldHVybiBudW1lcmF0b3I7XG4gICAgICBpZiAoZGVub21pbmF0b3IuaXNOZWdhdGl2ZU9uZSlcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLm5lZyhudW1lcmF0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lbmdpbmUuX2ZuKFwiRGl2aWRlXCIsIFtudW1lcmF0b3IsIGRlbm9taW5hdG9yXSk7XG4gIH1cbn07XG5mdW5jdGlvbiBkZWdyZWVLZXkoZXhwb25lbnQpIHtcbiAgaWYgKGlzUmF0aW9uYWxPbmUoZXhwb25lbnQpKVxuICAgIHJldHVybiAwO1xuICBjb25zdCBbbiwgZF0gPSBbbWFjaGluZU51bWVyYXRvcihleHBvbmVudCksIG1hY2hpbmVEZW5vbWluYXRvcihleHBvbmVudCldO1xuICBpZiAobiA+IDAgJiYgTnVtYmVyLmlzSW50ZWdlcihuIC8gZCkpXG4gICAgcmV0dXJuIDE7XG4gIGlmIChuID4gMClcbiAgICByZXR1cm4gMjtcbiAgaWYgKE51bWJlci5pc0ludGVnZXIobiAvIGQpKVxuICAgIHJldHVybiAzO1xuICByZXR1cm4gNDtcbn1cbmZ1bmN0aW9uIGRlZ3JlZU9yZGVyKGEsIGIpIHtcbiAgY29uc3Qga2V5QSA9IGRlZ3JlZUtleShhLmV4cG9uZW50KTtcbiAgY29uc3Qga2V5QiA9IGRlZ3JlZUtleShiLmV4cG9uZW50KTtcbiAgaWYgKGtleUEgIT09IGtleUIpXG4gICAgcmV0dXJuIGtleUEgLSBrZXlCO1xuICBjb25zdCBbYV9uLCBhX2RdID0gW1xuICAgIG1hY2hpbmVOdW1lcmF0b3IoYS5leHBvbmVudCksXG4gICAgbWFjaGluZURlbm9taW5hdG9yKGEuZXhwb25lbnQpXG4gIF07XG4gIGNvbnN0IFtiX24sIGJfZF0gPSBbXG4gICAgbWFjaGluZU51bWVyYXRvcihiLmV4cG9uZW50KSxcbiAgICBtYWNoaW5lRGVub21pbmF0b3IoYi5leHBvbmVudClcbiAgXTtcbiAgcmV0dXJuIGFfbiAvIGFfZCAtIGJfbiAvIGJfZDtcbn1cbmZ1bmN0aW9uIHRlcm1zQXNFeHByZXNzaW9ucyhjZSwgdGVybXMpIHtcbiAgY29uc3QgcmVzdWx0ID0gdGVybXMuc29ydChkZWdyZWVPcmRlcikubWFwKCh4KSA9PiB7XG4gICAgY29uc3QgdCA9IGZsYXR0ZW5PcHMoeC50ZXJtcywgXCJNdWx0aXBseVwiKTtcbiAgICBjb25zdCBiYXNlID0gdC5sZW5ndGggPD0gMSA/IHRbMF0gOiBjZS5fZm4oXCJNdWx0aXBseVwiLCB0LnNvcnQob3JkZXIpKTtcbiAgICBpZiAoaXNSYXRpb25hbE9uZSh4LmV4cG9uZW50KSlcbiAgICAgIHJldHVybiBiYXNlO1xuICAgIHJldHVybiBjZS5wb3coYmFzZSwgeC5leHBvbmVudCk7XG4gIH0pO1xuICByZXR1cm4gZmxhdHRlbk9wcyhyZXN1bHQsIFwiTXVsdGlwbHlcIikgPz8gcmVzdWx0O1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvYm94ZWQtZXhwcmVzc2lvbi9zZXJpYWxpemUudHNcbmZ1bmN0aW9uIHN1YnRyYWN0KGNlLCBhLCBiLCBtZXRhZGF0YSkge1xuICBpZiAoYS5udW1lcmljVmFsdWUgIT09IG51bGwpIHtcbiAgICBpZiAoaXNSYXRpb25hbChhLm51bWVyaWNWYWx1ZSkpIHtcbiAgICAgIGlmIChtYWNoaW5lTnVtZXJhdG9yKGEubnVtZXJpY1ZhbHVlKSA8IDApIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihcbiAgICAgICAgICBjZSxcbiAgICAgICAgICBcIlN1YnRyYWN0XCIsXG4gICAgICAgICAgW2IsIGNlLm51bWJlcihuZWcoYS5udW1lcmljVmFsdWUpKV0sXG4gICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB0MCA9IGFzU21hbGxJbnRlZ2VyKGEpO1xuICAgIGlmICh0MCAhPT0gbnVsbCAmJiB0MCA8IDApXG4gICAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKFxuICAgICAgICBjZSxcbiAgICAgICAgXCJTdWJ0cmFjdFwiLFxuICAgICAgICBbYiwgY2UubnVtYmVyKC10MCldLFxuICAgICAgICBtZXRhZGF0YVxuICAgICAgKTtcbiAgfVxuICBpZiAoYS5oZWFkID09PSBcIk5lZ2F0ZVwiKVxuICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oY2UsIFwiU3VidHJhY3RcIiwgW2IsIGEub3AxXSwgbWV0YWRhdGEpO1xuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUpzb25DYW5vbmljYWxGdW5jdGlvbihjZSwgaGVhZDIsIGFyZ3MsIG1ldGFkYXRhKSB7XG4gIGNvbnN0IGV4Y2x1c2lvbnMgPSBjZS5qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMuZXhjbHVkZTtcbiAgaWYgKGhlYWQyID09PSBcIkFkZFwiICYmIGFyZ3MubGVuZ3RoID09PSAyICYmICFleGNsdXNpb25zLmluY2x1ZGVzKFwiU3VidHJhY3RcIikpIHtcbiAgICBjb25zdCBzdWIyID0gc3VidHJhY3QoY2UsIGFyZ3NbMF0sIGFyZ3NbMV0sIG1ldGFkYXRhKSA/PyBzdWJ0cmFjdChjZSwgYXJnc1sxXSwgYXJnc1swXSwgbWV0YWRhdGEpO1xuICAgIGlmIChzdWIyKVxuICAgICAgcmV0dXJuIHN1YjI7XG4gIH1cbiAgaWYgKGhlYWQyID09PSBcIkRpdmlkZVwiICYmIGFyZ3MubGVuZ3RoID09PSAyICYmIGV4Y2x1c2lvbnMuaW5jbHVkZXMoXCJEaXZpZGVcIikpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKFxuICAgICAgY2UsXG4gICAgICBcIk11bHRpcGx5XCIsXG4gICAgICBbYXJnc1swXSwgY2UuX2ZuKFwiUG93ZXJcIiwgW2FyZ3NbMV0sIGNlLl9ORUdBVElWRV9PTkVdKV0sXG4gICAgICBtZXRhZGF0YVxuICAgICk7XG4gIH1cbiAgaWYgKGhlYWQyID09PSBcIk11bHRpcGx5XCIgJiYgIWV4Y2x1c2lvbnMuaW5jbHVkZXMoXCJOZWdhdGVcIikpIHtcbiAgICBpZiAoYXNGbG9hdChhcmdzWzBdKSA9PT0gLTEpIHtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMilcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihjZSwgXCJOZWdhdGVcIiwgW2FyZ3NbMV1dKTtcbiAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oXG4gICAgICAgIGNlLFxuICAgICAgICBcIk5lZ2F0ZVwiLFxuICAgICAgICBbY2UuX2ZuKFwiTXVsdGlwbHlcIiwgYXJncy5zbGljZSgxKSldLFxuICAgICAgICBtZXRhZGF0YVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKGhlYWQyID09PSBcIk11bHRpcGx5XCIgJiYgIWV4Y2x1c2lvbnMuaW5jbHVkZXMoXCJEaXZpZGVcIikpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUHJvZHVjdChjZSwgYXJncywge1xuICAgICAgY2Fub25pY2FsOiBmYWxzZVxuICAgIH0pLmFzUmF0aW9uYWxFeHByZXNzaW9uKCk7XG4gICAgaWYgKHJlc3VsdC5oZWFkID09PSBcIkRpdmlkZVwiKVxuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihjZSwgcmVzdWx0LmhlYWQsIHJlc3VsdC5vcHMsIG1ldGFkYXRhKTtcbiAgfVxuICBpZiAoaGVhZDIgPT09IFwiUG93ZXJcIikge1xuICAgIGlmICghZXhjbHVzaW9ucy5pbmNsdWRlcyhcIkV4cFwiKSAmJiBhcmdzWzBdPy5zeW1ib2wgPT09IFwiRXhwb25lbnRpYWxFXCIpXG4gICAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKGNlLCBcIkV4cFwiLCBbYXJnc1sxXV0sIG1ldGFkYXRhKTtcbiAgICBpZiAoYXJnc1sxXT8ubnVtZXJpY1ZhbHVlICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBleHAyID0gYXNTbWFsbEludGVnZXIoYXJnc1sxXSk7XG4gICAgICBpZiAoZXhwMiA9PT0gMiAmJiAhZXhjbHVzaW9ucy5pbmNsdWRlcyhcIlNxdWFyZVwiKSlcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihjZSwgXCJTcXVhcmVcIiwgW2FyZ3NbMF1dLCBtZXRhZGF0YSk7XG4gICAgICBpZiAoZXhwMiAhPT0gbnVsbCAmJiBleHAyIDwgMCAmJiAhZXhjbHVzaW9ucy5pbmNsdWRlcyhcIkRpdmlkZVwiKSkge1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKFxuICAgICAgICAgIGNlLFxuICAgICAgICAgIFwiRGl2aWRlXCIsXG4gICAgICAgICAgW2NlLl9PTkUsIGV4cDIgPT09IC0xID8gYXJnc1swXSA6IGNlLnBvdyhhcmdzWzBdLCAtZXhwMildLFxuICAgICAgICAgIG1ldGFkYXRhXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCByID0gYXJnc1sxXS5udW1lcmljVmFsdWU7XG4gICAgICBpZiAoIWV4Y2x1c2lvbnMuaW5jbHVkZXMoXCJTcXJ0XCIpICYmIHIgPT09IDAuNSlcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihjZSwgXCJTcXJ0XCIsIFthcmdzWzBdXSwgbWV0YWRhdGEpO1xuICAgICAgaWYgKCFleGNsdXNpb25zLmluY2x1ZGVzKFwiU3FydFwiKSAmJiByID09PSAtMC41KVxuICAgICAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKFxuICAgICAgICAgIGNlLFxuICAgICAgICAgIFwiRGl2aWRlXCIsXG4gICAgICAgICAgW2NlLl9PTkUsIGNlLl9mbihcIlNxcnRcIiwgW2FyZ3NbMF1dKV0sXG4gICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgKTtcbiAgICAgIGlmIChpc1JhdGlvbmFsKHIpKSB7XG4gICAgICAgIGNvbnN0IG4gPSBtYWNoaW5lTnVtZXJhdG9yKHIpO1xuICAgICAgICBjb25zdCBkID0gbWFjaGluZURlbm9taW5hdG9yKHIpO1xuICAgICAgICBpZiAobiA9PT0gMSkge1xuICAgICAgICAgIGlmICghZXhjbHVzaW9ucy5pbmNsdWRlcyhcIlNxcnRcIikgJiYgZCA9PT0gMilcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oY2UsIFwiU3FydFwiLCBbYXJnc1swXV0sIG1ldGFkYXRhKTtcbiAgICAgICAgICBpZiAoIWV4Y2x1c2lvbnMuaW5jbHVkZXMoXCJSb290XCIpKVxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihcbiAgICAgICAgICAgICAgY2UsXG4gICAgICAgICAgICAgIFwiUm9vdFwiLFxuICAgICAgICAgICAgICBbYXJnc1swXSwgY2UubnVtYmVyKHJbMV0pXSxcbiAgICAgICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPT09IC0xKSB7XG4gICAgICAgICAgaWYgKCFleGNsdXNpb25zLmluY2x1ZGVzKFwiU3FydFwiKSAmJiBkID09PSAyKVxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihcbiAgICAgICAgICAgICAgY2UsXG4gICAgICAgICAgICAgIFwiRGl2aWRlXCIsXG4gICAgICAgICAgICAgIFtjZS5fT05FLCBjZS5fZm4oXCJTcXJ0XCIsIFthcmdzWzBdXSldLFxuICAgICAgICAgICAgICBtZXRhZGF0YVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIWV4Y2x1c2lvbnMuaW5jbHVkZXMoXCJSb290XCIpKVxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihcbiAgICAgICAgICAgICAgY2UsXG4gICAgICAgICAgICAgIFwiRGl2aWRlXCIsXG4gICAgICAgICAgICAgIFtjZS5fT05FLCBjZS5fZm4oXCJSb290XCIsIFthcmdzWzBdLCBjZS5udW1iZXIoclsxXSldKV0sXG4gICAgICAgICAgICAgIG1ldGFkYXRhXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oY2UsIGhlYWQyLCBhcmdzLCBtZXRhZGF0YSk7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVKc29uRnVuY3Rpb24oY2UsIGhlYWQyLCBhcmdzLCBtZXRhZGF0YSkge1xuICBjb25zdCBleGNsdXNpb25zID0gY2UuanNvblNlcmlhbGl6YXRpb25PcHRpb25zLmV4Y2x1ZGU7XG4gIGlmICgoaGVhZDIgPT09IFwiUmF0aW9uYWxcIiB8fCBoZWFkMiA9PT0gXCJEaXZpZGVcIikgJiYgYXJncy5sZW5ndGggPT09IDIgJiYgYXNTbWFsbEludGVnZXIoYXJnc1swXSkgPT09IDEgJiYgYXNTbWFsbEludGVnZXIoYXJnc1sxXSkgPT09IDIgJiYgIWV4Y2x1c2lvbnMuaW5jbHVkZXMoXCJIYWxmXCIpKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25TeW1ib2woY2UsIFwiSGFsZlwiLCB7XG4gICAgICAuLi5tZXRhZGF0YSxcbiAgICAgIHdpa2lkYXRhOiBcIlEzOTM3MzE3MlwiXG4gICAgfSk7XG4gIH1cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgbnVtMCA9IGFyZ3NbMF0ubnVtZXJpY1ZhbHVlO1xuICAgIGlmIChoZWFkMiA9PT0gXCJOZWdhdGVcIiAmJiBudW0wICE9PSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIG51bTAgPT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBzZXJpYWxpemVKc29uTnVtYmVyKGNlLCAtbnVtMCk7XG4gICAgICBpZiAobnVtMCBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdClcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25OdW1iZXIoY2UsIG51bTAubmVnKCkpO1xuICAgICAgaWYgKG51bTAgaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDguQ29tcGxleClcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25OdW1iZXIoY2UsIG51bTAubmVnKCkpO1xuICAgICAgaWYgKGlzUmF0aW9uYWwobnVtMCkpXG4gICAgICAgIHJldHVybiBzZXJpYWxpemVKc29uTnVtYmVyKGNlLCBuZWcobnVtMCkpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIGhlYWQyID09PSBcInN0cmluZ1wiICYmIGV4Y2x1c2lvbnMuaW5jbHVkZXMoaGVhZDIpKSB7XG4gICAgaWYgKGhlYWQyID09PSBcIlJhdGlvbmFsXCIgJiYgYXJncy5sZW5ndGggPT09IDIpXG4gICAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKGNlLCBcIkRpdmlkZVwiLCBhcmdzLCBtZXRhZGF0YSk7XG4gICAgaWYgKGhlYWQyID09PSBcIkNvbXBsZXhcIiAmJiBhcmdzLmxlbmd0aCA9PT0gMilcbiAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oXG4gICAgICAgIGNlLFxuICAgICAgICBcIkFkZFwiLFxuICAgICAgICBbYXJnc1swXSwgY2UuX2ZuKFwiTXVsdGlwbHlcIiwgW2FyZ3NbMV0sIGNlLnN5bWJvbChcIkltYWdpbmFyeVVuaXRcIildKV0sXG4gICAgICAgIG1ldGFkYXRhXG4gICAgICApO1xuICAgIGlmIChoZWFkMiA9PT0gXCJTcXJ0XCIgJiYgYXJncy5sZW5ndGggPT09IDEpXG4gICAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKFxuICAgICAgICBjZSxcbiAgICAgICAgXCJQb3dlclwiLFxuICAgICAgICBbYXJnc1swXSwgZXhjbHVzaW9ucy5pbmNsdWRlcyhcIkhhbGZcIikgPyBjZS5udW1iZXIoWzEsIDJdKSA6IGNlLl9IQUxGXSxcbiAgICAgICAgbWV0YWRhdGFcbiAgICAgICk7XG4gICAgaWYgKGhlYWQyID09PSBcIlJvb3RcIiAmJiBhcmdzLmxlbmd0aCA9PT0gMiAmJiBhcmdzWzFdLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgbiA9IGFzU21hbGxJbnRlZ2VyKGFyZ3NbMV0pO1xuICAgICAgaWYgKG4gPT09IDIpXG4gICAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oY2UsIFwiU3FydFwiLCBbYXJnc1swXV0pO1xuICAgICAgaWYgKG4gIT09IG51bGwpIHtcbiAgICAgICAgaWYgKG4gPCAwKVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oXG4gICAgICAgICAgICBjZSxcbiAgICAgICAgICAgIFwiRGl2aWRlXCIsXG4gICAgICAgICAgICBbY2UuX09ORSwgY2UuX2ZuKFwiUG93ZXJcIiwgW2FyZ3NbMF0sIGNlLm51bWJlcihbMSwgLW5dKV0pXSxcbiAgICAgICAgICAgIG1ldGFkYXRhXG4gICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihcbiAgICAgICAgICBjZSxcbiAgICAgICAgICBcIlBvd2VyXCIsXG4gICAgICAgICAgW2FyZ3NbMF0sIGNlLm51bWJlcihbMSwgLW5dKV0sXG4gICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGhlYWQyID09PSBcIlNxdWFyZVwiICYmIGFyZ3MubGVuZ3RoID09PSAxKVxuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihcbiAgICAgICAgY2UsXG4gICAgICAgIFwiUG93ZXJcIixcbiAgICAgICAgW2FyZ3NbMF0sIGNlLm51bWJlcigyKV0sXG4gICAgICAgIG1ldGFkYXRhXG4gICAgICApO1xuICAgIGlmIChoZWFkMiA9PT0gXCJFeHBcIiAmJiBhcmdzLmxlbmd0aCA9PT0gMSlcbiAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oXG4gICAgICAgIGNlLFxuICAgICAgICBcIlBvd2VyXCIsXG4gICAgICAgIFtjZS5zeW1ib2woXCJFeHBvbmVudGlhbEVcIiksIGFyZ3NbMF1dLFxuICAgICAgICBtZXRhZGF0YVxuICAgICAgKTtcbiAgICBpZiAoaGVhZDIgPT09IFwiU3VidHJhY3RcIiAmJiBhcmdzLmxlbmd0aCA9PT0gMilcbiAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oXG4gICAgICAgIGNlLFxuICAgICAgICBcIkFkZFwiLFxuICAgICAgICBbYXJnc1swXSwgY2UuX2ZuKFwiTmVnYXRlXCIsIFthcmdzWzFdXSldLFxuICAgICAgICBtZXRhZGF0YVxuICAgICAgKTtcbiAgICBpZiAoaGVhZDIgPT09IFwiU3VidHJhY3RcIiAmJiBhcmdzLmxlbmd0aCA9PT0gMSlcbiAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oY2UsIFwiTmVnYXRlXCIsIGFyZ3MsIG1ldGFkYXRhKTtcbiAgfVxuICBpZiAoaGVhZDIgPT09IFwiQWRkXCIgJiYgYXJncy5sZW5ndGggPT09IDIgJiYgIWV4Y2x1c2lvbnMuaW5jbHVkZXMoXCJTdWJ0cmFjdFwiKSkge1xuICAgIGlmIChhcmdzWzFdLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgdDEgPSBhc1NtYWxsSW50ZWdlcihhcmdzWzFdKTtcbiAgICAgIGlmICh0MSAhPT0gbnVsbCAmJiB0MSA8IDApXG4gICAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oXG4gICAgICAgICAgY2UsXG4gICAgICAgICAgXCJTdWJ0cmFjdFwiLFxuICAgICAgICAgIFthcmdzWzBdLCBjZS5udW1iZXIoLXQxKV0sXG4gICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGFyZ3NbMV0uaGVhZCA9PT0gXCJOZWdhdGVcIikge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihcbiAgICAgICAgY2UsXG4gICAgICAgIFwiU3VidHJhY3RcIixcbiAgICAgICAgW2FyZ3NbMF0sIGFyZ3NbMV0ub3AxXSxcbiAgICAgICAgbWV0YWRhdGFcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChoZWFkMiA9PT0gXCJUdXBsZVwiKSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmICFleGNsdXNpb25zLmluY2x1ZGVzKFwiU2luZ2xlXCIpKVxuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25GdW5jdGlvbihjZSwgXCJTaW5nbGVcIiwgYXJncywgbWV0YWRhdGEpO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMiAmJiAhZXhjbHVzaW9ucy5pbmNsdWRlcyhcIlBhaXJcIikpXG4gICAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKGNlLCBcIlBhaXJcIiwgYXJncywgbWV0YWRhdGEpO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiAhZXhjbHVzaW9ucy5pbmNsdWRlcyhcIlRyaXBsZVwiKSlcbiAgICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oY2UsIFwiVHJpcGxlXCIsIGFyZ3MsIG1ldGFkYXRhKTtcbiAgfVxuICBjb25zdCBqc29uSGVhZCA9IHR5cGVvZiBoZWFkMiA9PT0gXCJzdHJpbmdcIiA/IF9lc2NhcGVKc29uU3RyaW5nKGhlYWQyKSA6IGhlYWQyLmpzb247XG4gIGNvbnN0IGZuID0gW2pzb25IZWFkLCAuLi5hcmdzLm1hcCgoeCkgPT4geC5qc29uKV07XG4gIGNvbnN0IG1kID0geyAuLi5tZXRhZGF0YSA/PyB7fSB9O1xuICBpZiAoY2UuanNvblNlcmlhbGl6YXRpb25PcHRpb25zLm1ldGFkYXRhLmluY2x1ZGVzKFwibGF0ZXhcIikpIHtcbiAgICBtZC5sYXRleCA9IF9lc2NhcGVKc29uU3RyaW5nKG1kLmxhdGV4ID8/IGNlLnNlcmlhbGl6ZSh7IGZuIH0pKTtcbiAgfSBlbHNlXG4gICAgbWQubGF0ZXggPSBcIlwiO1xuICBpZiAoIWNlLmpzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5tZXRhZGF0YS5pbmNsdWRlcyhcIndpa2lkYXRhXCIpKVxuICAgIG1kLndpa2lkYXRhID0gXCJcIjtcbiAgaWYgKCFtZC5sYXRleCAmJiAhbWQud2lraWRhdGEgJiYgY2UuanNvblNlcmlhbGl6YXRpb25PcHRpb25zLnNob3J0aGFuZHMuaW5jbHVkZXMoXCJmdW5jdGlvblwiKSlcbiAgICByZXR1cm4gZm47XG4gIGlmIChtZC5sYXRleCAmJiBtZC53aWtpZGF0YSlcbiAgICByZXR1cm4geyBmbiwgbGF0ZXg6IG1kLmxhdGV4LCB3aWtpZGF0YTogbWQud2lraWRhdGEgfTtcbiAgaWYgKG1kLmxhdGV4KVxuICAgIHJldHVybiB7IGZuLCBsYXRleDogbWQubGF0ZXggfTtcbiAgaWYgKG1kLndpa2lkYXRhKVxuICAgIHJldHVybiB7IGZuLCB3aWtpZGF0YTogbWQud2lraWRhdGEgfTtcbiAgcmV0dXJuIHsgZm4gfTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUpzb25TdHJpbmcoY2UsIHMpIHtcbiAgcyA9IF9lc2NhcGVKc29uU3RyaW5nKHMpO1xuICBpZiAoY2UuanNvblNlcmlhbGl6YXRpb25PcHRpb25zLnNob3J0aGFuZHMuaW5jbHVkZXMoXCJzdHJpbmdcIikpXG4gICAgcmV0dXJuIGAnJHtzfSdgO1xuICByZXR1cm4geyBzdHI6IHMgfTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUpzb25TeW1ib2woY2UsIHN5bSwgbWV0YWRhdGEpIHtcbiAgaWYgKHN5bSA9PT0gXCJIYWxmXCIgJiYgY2UuanNvblNlcmlhbGl6YXRpb25PcHRpb25zLmV4Y2x1ZGUuaW5jbHVkZXMoXCJIYWxmXCIpKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25OdW1iZXIoY2UsIFsxLCAyXSwgbWV0YWRhdGEpO1xuICB9XG4gIG1ldGFkYXRhID0geyAuLi5tZXRhZGF0YSB9O1xuICBpZiAoY2UuanNvblNlcmlhbGl6YXRpb25PcHRpb25zLm1ldGFkYXRhLmluY2x1ZGVzKFwibGF0ZXhcIikpIHtcbiAgICBtZXRhZGF0YS5sYXRleCA9IG1ldGFkYXRhLmxhdGV4ID8/IGNlLnNlcmlhbGl6ZSh7IHN5bSB9KTtcbiAgICBpZiAobWV0YWRhdGEubGF0ZXggIT09IHZvaWQgMClcbiAgICAgIG1ldGFkYXRhLmxhdGV4ID0gX2VzY2FwZUpzb25TdHJpbmcobWV0YWRhdGEubGF0ZXgpO1xuICB9IGVsc2VcbiAgICBtZXRhZGF0YS5sYXRleCA9IHZvaWQgMDtcbiAgaWYgKGNlLmpzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5tZXRhZGF0YS5pbmNsdWRlcyhcIndpa2lkYXRhXCIpKSB7XG4gICAgaWYgKG1ldGFkYXRhLndpa2lkYXRhID09PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IHdpa2lkYXRhID0gY2UubG9va3VwU3ltYm9sKHN5bSk/Lndpa2lkYXRhO1xuICAgICAgaWYgKHdpa2lkYXRhICE9PSB2b2lkIDApXG4gICAgICAgIG1ldGFkYXRhLndpa2lkYXRhID0gX2VzY2FwZUpzb25TdHJpbmcod2lraWRhdGEpO1xuICAgIH1cbiAgfSBlbHNlXG4gICAgbWV0YWRhdGEud2lraWRhdGEgPSB2b2lkIDA7XG4gIHN5bSA9IF9lc2NhcGVKc29uU3RyaW5nKHN5bSk7XG4gIGlmIChtZXRhZGF0YS5sYXRleCA9PT0gdm9pZCAwICYmIG1ldGFkYXRhLndpa2lkYXRhID09PSB2b2lkIDAgJiYgY2UuanNvblNlcmlhbGl6YXRpb25PcHRpb25zLnNob3J0aGFuZHMuaW5jbHVkZXMoXCJzeW1ib2xcIikpXG4gICAgcmV0dXJuIHN5bTtcbiAgaWYgKG1ldGFkYXRhLmxhdGV4ICE9PSB2b2lkIDAgJiYgbWV0YWRhdGEud2lraWRhdGEgIT09IHZvaWQgMClcbiAgICByZXR1cm4geyBzeW0sIGxhdGV4OiBtZXRhZGF0YS5sYXRleCwgd2lraWRhdGE6IG1ldGFkYXRhLndpa2lkYXRhIH07XG4gIGlmIChtZXRhZGF0YS5sYXRleCAhPT0gdm9pZCAwKVxuICAgIHJldHVybiB7IHN5bSwgbGF0ZXg6IG1ldGFkYXRhLmxhdGV4IH07XG4gIGlmIChtZXRhZGF0YS53aWtpZGF0YSAhPT0gdm9pZCAwKVxuICAgIHJldHVybiB7IHN5bSwgd2lraWRhdGE6IG1ldGFkYXRhLndpa2lkYXRhIH07XG4gIHJldHVybiB7IHN5bSB9O1xufVxuZnVuY3Rpb24gc2VyaWFsaXplSnNvbk51bWJlcihjZSwgdmFsdWUsIG1ldGFkYXRhKSB7XG4gIG1ldGFkYXRhID0geyAuLi5tZXRhZGF0YSB9O1xuICBpZiAoIWNlLmpzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5tZXRhZGF0YS5pbmNsdWRlcyhcImxhdGV4XCIpKVxuICAgIG1ldGFkYXRhLmxhdGV4ID0gdm9pZCAwO1xuICBjb25zdCBzaG9ydGhhbmRBbGxvd2VkID0gbWV0YWRhdGEubGF0ZXggPT09IHZvaWQgMCAmJiBtZXRhZGF0YS53aWtpZGF0YSA9PT0gdm9pZCAwICYmICFjZS5qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMubWV0YWRhdGEuaW5jbHVkZXMoXCJsYXRleFwiKSAmJiBjZS5qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMuc2hvcnRoYW5kcy5pbmNsdWRlcyhcIm51bWJlclwiKTtcbiAgY29uc3QgZXhjbHVzaW9ucyA9IGNlLmpzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5leGNsdWRlO1xuICBsZXQgbnVtID0gXCJcIjtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgZGVjaW1hbF9kZWZhdWx0KSB7XG4gICAgaWYgKHZhbHVlLmlzTmFOKCkpXG4gICAgICBudW0gPSBcIk5hTlwiO1xuICAgIGVsc2UgaWYgKCF2YWx1ZS5pc0Zpbml0ZSgpKVxuICAgICAgbnVtID0gdmFsdWUuaXNQb3NpdGl2ZSgpID8gXCIrSW5maW5pdHlcIiA6IFwiLUluZmluaXR5XCI7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoc2hvcnRoYW5kQWxsb3dlZCAmJiBpc0luTWFjaGluZVJhbmdlKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvTnVtYmVyKCk7XG4gICAgICBpZiAodmFsdWUuaXNJbnRlZ2VyKCkgJiYgdmFsdWUuZSA8IHZhbHVlLnByZWNpc2lvbigpICsgNClcbiAgICAgICAgbnVtID0gdmFsdWUudG9GaXhlZCgwKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSBjZS5qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMucHJlY2lzaW9uO1xuICAgICAgICBjb25zdCBzID0gcHJlY2lzaW9uID09PSBcIm1heFwiID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlLnRvUHJlY2lzaW9uKFxuICAgICAgICAgIHByZWNpc2lvbiA9PT0gXCJhdXRvXCIgPyBjZS5wcmVjaXNpb24gOiBwcmVjaXNpb25cbiAgICAgICAgKTtcbiAgICAgICAgbnVtID0gcmVwZWF0aW5nRGVjaW1hbHMoY2UsIHMpO1xuICAgICAgICBpZiAoc2hvcnRoYW5kQWxsb3dlZCkge1xuICAgICAgICAgIGNvbnN0IHZhbCA9IHZhbHVlLnRvTnVtYmVyKCk7XG4gICAgICAgICAgaWYgKHZhbC50b1N0cmluZygpID09PSBudW0pXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjZS5qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMubWV0YWRhdGEuaW5jbHVkZXMoXCJsYXRleFwiKSlcbiAgICAgIG1ldGFkYXRhLmxhdGV4ID0gbWV0YWRhdGEubGF0ZXggPz8gY2Uuc2VyaWFsaXplKHsgbnVtIH0pO1xuICAgIHJldHVybiBtZXRhZGF0YS5sYXRleCAhPT0gdm9pZCAwID8geyBudW0sIGxhdGV4OiBtZXRhZGF0YS5sYXRleCB9IDogc2hvcnRoYW5kQWxsb3dlZCA/IG51bSA6IHsgbnVtIH07XG4gIH1cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXg4LkNvbXBsZXgpIHtcbiAgICBpZiAodmFsdWUuaXNJbmZpbml0ZSgpKVxuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25TeW1ib2woY2UsIFwiQ29tcGxleEluZmluaXR5XCIsIG1ldGFkYXRhKTtcbiAgICBpZiAodmFsdWUuaXNOYU4oKSkge1xuICAgICAgbnVtID0gXCJOYU5cIjtcbiAgICAgIGlmIChjZS5qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMubWV0YWRhdGEuaW5jbHVkZXMoXCJsYXRleFwiKSlcbiAgICAgICAgbWV0YWRhdGEubGF0ZXggPSBtZXRhZGF0YS5sYXRleCA/PyBjZS5zZXJpYWxpemUoeyBudW0gfSk7XG4gICAgICByZXR1cm4gbWV0YWRhdGEubGF0ZXggIT09IHZvaWQgMCA/IHsgbnVtLCBsYXRleDogbWV0YWRhdGEubGF0ZXggfSA6IHsgbnVtIH07XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oXG4gICAgICBjZSxcbiAgICAgIFwiQ29tcGxleFwiLFxuICAgICAgW2NlLm51bWJlcih2YWx1ZS5yZSksIGNlLm51bWJlcih2YWx1ZS5pbSldLFxuICAgICAge1xuICAgICAgICAuLi5tZXRhZGF0YSxcbiAgICAgICAgd2lraWRhdGE6IFwiUTExNTY3XCJcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIGlmIChpc1JhdGlvbmFsKHZhbHVlKSkge1xuICAgIGNvbnN0IGFsbG93UmF0aW9uYWwgPSAhZXhjbHVzaW9ucy5pbmNsdWRlcyhcIlJhdGlvbmFsXCIpO1xuICAgIGlmIChzaG9ydGhhbmRBbGxvd2VkICYmIGNlLmpzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5zaG9ydGhhbmRzLmluY2x1ZGVzKFwiZnVuY3Rpb25cIikgJiYgaXNNYWNoaW5lUmF0aW9uYWwodmFsdWUpKSB7XG4gICAgICBpZiAodmFsdWVbMF0gPT09IDEgJiYgdmFsdWVbMV0gPT09IDIgJiYgIWV4Y2x1c2lvbnMuaW5jbHVkZXMoXCJIYWxmXCIpKVxuICAgICAgICByZXR1cm4gc2VyaWFsaXplSnNvblN5bWJvbChjZSwgXCJIYWxmXCIsIG1ldGFkYXRhKTtcbiAgICAgIHJldHVybiBbYWxsb3dSYXRpb25hbCA/IFwiUmF0aW9uYWxcIiA6IFwiRGl2aWRlXCIsIHZhbHVlWzBdLCB2YWx1ZVsxXV07XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVKc29uRnVuY3Rpb24oXG4gICAgICBjZSxcbiAgICAgIGFsbG93UmF0aW9uYWwgPyBcIlJhdGlvbmFsXCIgOiBcIkRpdmlkZVwiLFxuICAgICAgW2NlLm51bWJlcih2YWx1ZVswXSksIGNlLm51bWJlcih2YWx1ZVsxXSldLFxuICAgICAgeyAuLi5tZXRhZGF0YSB9XG4gICAgKTtcbiAgfVxuICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSlcbiAgICBudW0gPSBcIk5hTlwiO1xuICBlbHNlIGlmICghTnVtYmVyLmlzRmluaXRlKHZhbHVlKSlcbiAgICBudW0gPSB2YWx1ZSA+IDAgPyBcIitJbmZpbml0eVwiIDogXCItSW5maW5pdHlcIjtcbiAgZWxzZSB7XG4gICAgaWYgKHNob3J0aGFuZEFsbG93ZWQpXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgbnVtID0gcmVwZWF0aW5nRGVjaW1hbHMoY2UsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICB9XG4gIGlmIChjZS5qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMubWV0YWRhdGEuaW5jbHVkZXMoXCJsYXRleFwiKSlcbiAgICBtZXRhZGF0YS5sYXRleCA9IG1ldGFkYXRhLmxhdGV4ID8/IGNlLnNlcmlhbGl6ZSh7IG51bSB9KTtcbiAgcmV0dXJuIG1ldGFkYXRhLmxhdGV4ICE9PSB2b2lkIDAgPyB7IG51bSwgbGF0ZXg6IG1ldGFkYXRhLmxhdGV4IH0gOiB7IG51bSB9O1xufVxuZnVuY3Rpb24gX2VzY2FwZUpzb25TdHJpbmcocykge1xuICByZXR1cm4gcztcbn1cbmZ1bmN0aW9uIHJlcGVhdGluZ0RlY2ltYWxzKGNlLCBzKSB7XG4gIGlmICghY2UuanNvblNlcmlhbGl6YXRpb25PcHRpb25zLnJlcGVhdGluZ0RlY2ltYWxzKVxuICAgIHJldHVybiBzO1xuICBsZXQgW18sIHdob2xlcGFydCwgZnJhY3Rpb25hbFBhcnQsIGV4cG9uZW50XSA9IHMubWF0Y2goL14oLiopXFwuKFswLTldKykoW2V8RV1bLStdP1swLTldKyk/JC8pID8/IFtdO1xuICBpZiAoIWZyYWN0aW9uYWxQYXJ0KVxuICAgIHJldHVybiBzLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGxhc3REaWdpdCA9IGZyYWN0aW9uYWxQYXJ0W2ZyYWN0aW9uYWxQYXJ0Lmxlbmd0aCAtIDFdO1xuICBmcmFjdGlvbmFsUGFydCA9IGZyYWN0aW9uYWxQYXJ0LnNsaWNlKDAsIC0xKTtcbiAgY29uc3QgTUFYX1JFUEVBVElOR19QQVRURVJOX0xFTkdUSCA9IDE2O1xuICBsZXQgcHJlZml4ID0gXCJcIjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFjdGlvbmFsUGFydC5sZW5ndGggLSBNQVhfUkVQRUFUSU5HX1BBVFRFUk5fTEVOR1RIOyBpKyspIHtcbiAgICBwcmVmaXggPSBmcmFjdGlvbmFsUGFydC5zdWJzdHJpbmcoMCwgaSk7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPD0gTUFYX1JFUEVBVElOR19QQVRURVJOX0xFTkdUSDsgaisrKSB7XG4gICAgICBjb25zdCByZXBldGVuZCA9IGZyYWN0aW9uYWxQYXJ0LnN1YnN0cmluZyhpLCBpICsgaiArIDEpO1xuICAgICAgY29uc3QgdGltZXMgPSBNYXRoLmZsb29yKFxuICAgICAgICAoZnJhY3Rpb25hbFBhcnQubGVuZ3RoIC0gcHJlZml4Lmxlbmd0aCkgLyByZXBldGVuZC5sZW5ndGhcbiAgICAgICk7XG4gICAgICBpZiAodGltZXMgPCAzKVxuICAgICAgICBicmVhaztcbiAgICAgIGlmICgocHJlZml4ICsgcmVwZXRlbmQucmVwZWF0KHRpbWVzICsgMSkpLnN0YXJ0c1dpdGgoZnJhY3Rpb25hbFBhcnQpKSB7XG4gICAgICAgIGlmIChyZXBldGVuZCA9PT0gXCIwXCIpIHtcbiAgICAgICAgICBpZiAobGFzdERpZ2l0ID09PSBcIjBcIilcbiAgICAgICAgICAgIHJldHVybiB3aG9sZXBhcnQgKyBcIi5cIiArIHByZWZpeCArIChleHBvbmVudCA/PyBcIlwiKTtcbiAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2hvbGVwYXJ0ICsgXCIuXCIgKyBwcmVmaXggKyBcIihcIiArIHJlcGV0ZW5kICsgXCIpXCIgKyAoZXhwb25lbnQgPz8gXCJcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZyYWN0aW9uYWxQYXJ0ICs9IGxhc3REaWdpdDtcbiAgd2hpbGUgKGZyYWN0aW9uYWxQYXJ0LmVuZHNXaXRoKFwiMFwiKSlcbiAgICBmcmFjdGlvbmFsUGFydCA9IGZyYWN0aW9uYWxQYXJ0LnNsaWNlKDAsIC0xKTtcbiAgaWYgKGV4cG9uZW50KVxuICAgIHJldHVybiBgJHt3aG9sZXBhcnR9LiR7ZnJhY3Rpb25hbFBhcnR9JHtleHBvbmVudC50b0xvd2VyQ2FzZSgpfWA7XG4gIHJldHVybiBgJHt3aG9sZXBhcnR9LiR7ZnJhY3Rpb25hbFBhcnR9YDtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2JveGVkLWV4cHJlc3Npb24vYm94ZWQtZG9tYWluLnRzXG52YXIgX0JveGVkRG9tYWluID0gY2xhc3MgX19Cb3hlZERvbWFpbiBleHRlbmRzIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY2UsIGRvbSwgbWV0YWRhdGEpIHtcbiAgICBzdXBlcihjZSwgbWV0YWRhdGEpO1xuICAgIHRoaXMuX3ZhbHVlID0gbWFrZUNhbm9uaWNhbChjZSwgZG9tKTtcbiAgfVxuICBnZXQgaXNDYW5vbmljYWwoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqIEJveGVkIGRvbWFpbnMgYXJlIGFsd2F5cyBjYW5vbmljYWwuICovXG4gIGdldCBjYW5vbmljYWwoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3RvciAhPT0gXCJJbnZhbGlkRG9tYWluXCI7XG4gIH1cbiAgZ2V0IGpzb24oKSB7XG4gICAgcmV0dXJuIFtcIkRvbWFpblwiLCBzZXJpYWxpemUodGhpcy5lbmdpbmUsIHRoaXMuX3ZhbHVlKV07XG4gIH1cbiAgZ2V0IGxpdGVyYWwoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBnZXQgY3RvcigpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ZhbHVlID09PSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlWzBdO1xuICB9XG4gIGdldCBkb21haW5BcmdzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fdmFsdWUgPT09IFwic3RyaW5nXCIpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUuc2xpY2UoMSk7XG4gIH1cbiAgZ2V0IGRvbWFpbkFyZzEoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLl92YWx1ZVsxXTtcbiAgfVxuICBnZXQgY29kb21haW4oKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLmVuZ2luZS5kb21haW4odGhpcy5fdmFsdWVbdGhpcy5fdmFsdWUubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGdldCBoYXNoKCkge1xuICAgIGlmICh0aGlzLl9oYXNoID09PSB2b2lkIDApXG4gICAgICB0aGlzLl9oYXNoID0gaGFzaENvZGUoaGFzaCh0aGlzLl92YWx1ZSkpO1xuICAgIHJldHVybiB0aGlzLl9oYXNoO1xuICB9XG4gIGlzRXF1YWwocmhzKSB7XG4gICAgcmV0dXJuIGlzRXF1YWwodGhpcy5fdmFsdWUsIHJocyk7XG4gIH1cbiAgaXNTYW1lKHJocykge1xuICAgIHJldHVybiBpc0VxdWFsKHRoaXMuX3ZhbHVlLCByaHMpO1xuICB9XG4gIGlzKHJocykge1xuICAgIHJldHVybiBpc0VxdWFsKHRoaXMuX3ZhbHVlLCByaHMpO1xuICB9XG4gIGlzQ29tcGF0aWJsZShkb20sIGNvbXBhdGliaWxpdHkgPSBcImNvdmFyaWFudFwiKSB7XG4gICAgY29uc3QgbGhzID0gdGhpcy5fdmFsdWU7XG4gICAgY29uc3QgcmhzID0gZG9tIGluc3RhbmNlb2YgX19Cb3hlZERvbWFpbiA/IGRvbS5fdmFsdWUgOiBkb207XG4gICAgY29uc3QgcmhzQ3RvciA9IEFycmF5LmlzQXJyYXkocmhzKSA/IHJoc1swXSA6IG51bGw7XG4gICAgaWYgKHJoc0N0b3IpIHtcbiAgICAgIGNvbnN0IHJoc1BhcmFtID0gcmhzWzFdO1xuICAgICAgaWYgKHJoc0N0b3IgPT09IFwiQ292YXJpYW50XCIpXG4gICAgICAgIHJldHVybiBpc1N1YmRvbWFpbk9mMShsaHMsIHJoc1BhcmFtKTtcbiAgICAgIGlmIChyaHNDdG9yID09PSBcIkNvbnRyYXZhcmlhbnRcIilcbiAgICAgICAgcmV0dXJuIGlzU3ViZG9tYWluT2YxKHJoc1BhcmFtLCBsaHMpO1xuICAgICAgaWYgKHJoc0N0b3IgPT09IFwiSW52YXJpYW50XCIpXG4gICAgICAgIHJldHVybiAhaXNTdWJkb21haW5PZjEocmhzUGFyYW0sIGxocykgJiYgIWlzU3ViZG9tYWluT2YxKGxocywgcmhzUGFyYW0pO1xuICAgICAgaWYgKHJoc0N0b3IgPT09IFwiQml2YXJpYW50XCIpXG4gICAgICAgIHJldHVybiBpc1N1YmRvbWFpbk9mMShsaHMsIHJoc1BhcmFtKSAmJiBpc1N1YmRvbWFpbk9mMShyaHNQYXJhbSwgbGhzKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhdGliaWxpdHkgPT09IFwiY292YXJpYW50XCIpXG4gICAgICByZXR1cm4gaXNTdWJkb21haW5PZjEobGhzLCByaHMpO1xuICAgIGlmIChjb21wYXRpYmlsaXR5ID09PSBcImNvbnRyYXZhcmlhbnRcIilcbiAgICAgIHJldHVybiBpc1N1YmRvbWFpbk9mMShyaHMsIGxocyk7XG4gICAgaWYgKGNvbXBhdGliaWxpdHkgPT09IFwiYml2YXJpYW50XCIpXG4gICAgICByZXR1cm4gaXNTdWJkb21haW5PZjEocmhzLCBsaHMpICYmIGlzU3ViZG9tYWluT2YxKGxocywgcmhzKTtcbiAgICByZXR1cm4gIWlzU3ViZG9tYWluT2YxKHJocywgbGhzKSAmJiAhaXNTdWJkb21haW5PZjEobGhzLCByaHMpO1xuICB9XG4gIG1hdGNoKHJocywgX29wdGlvbnMpIHtcbiAgICBpZiAoIShyaHMgaW5zdGFuY2VvZiBfX0JveGVkRG9tYWluKSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGlmICh0aGlzLmlzU2FtZShyaHMpKVxuICAgICAgcmV0dXJuIHt9O1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGdldCBoZWFkKCkge1xuICAgIHJldHVybiBcIkRvbWFpblwiO1xuICB9XG4gIGdldCBkb21haW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lLmRvbWFpbihcIkRvbWFpblwiKTtcbiAgfVxuICBnZXQgaXNOb3RoaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZSA9PT0gXCJOb3RoaW5nXCI7XG4gIH1cbiAgZ2V0IGlzRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY3RvciA9PT0gXCJGdW5jdGlvblwiIHx8IHRoaXMuX3ZhbHVlID09PSBcIkZ1bmN0aW9uXCI7XG4gIH1cbiAgLy8gZ2V0IGlzUHJlZGljYXRlKCk6IGJvb2xlYW4ge1xuICAvLyAgIGlmICh0aGlzLmRvbWFpbkxpdGVyYWwgPT09ICdQcmVkaWNhdGUnKSByZXR1cm4gdHJ1ZTtcbiAgLy8gICBpZiAodGhpcy5kb21haW5Db25zdHJ1Y3RvciAhPT0gJ0Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuICAvLyAgIGNvbnN0IHJlc3VsdERvbWFpbiA9IHRoaXMuX3ZhbHVlW3RoaXMuX3ZhbHVlLmxlbmd0aF07XG4gIC8vICAgaWYgKCEocmVzdWx0RG9tYWluIGluc3RhbmNlb2YgX0RvbWFpbikpIHJldHVybiBmYWxzZTtcbiAgLy8gICByZXR1cm4gcmVzdWx0RG9tYWluLmlzQm9vbGVhbjtcbiAgLy8gfVxuICAvLyBnZXQgaXNOdW1lcmljRnVuY3Rpb24oKTogYm9vbGVhbiB7XG4gIC8vICAgaWYgKHRoaXMuZG9tYWluTGl0ZXJhbCA9PT0gJ051bWVyaWNGdW5jdGlvbicpIHJldHVybiB0cnVlO1xuICAvLyAgIGlmICh0aGlzLmRvbWFpbkNvbnN0cnVjdG9yICE9PSAnRnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG4gIC8vICAgZm9yIChjb25zdCBhcmcgb2YgdGhpcy5kb21haW5QYXJhbXMhKVxuICAvLyAgICAgaWYgKCFpc051bWVyaWNTdWJkb21haW4oYXJnLCAnTnVtYmVyJykpIHJldHVybiBmYWxzZTtcbiAgLy8gICByZXR1cm4gdHJ1ZTtcbiAgLy8gfVxuICAvLyBnZXQgaXNCb29sZWFuKCk6IGJvb2xlYW4ge1xuICAvLyAgIGNvbnN0IGRvbSA9IHRoaXMuZG9tYWluTGl0ZXJhbDtcbiAgLy8gICByZXR1cm4gZG9tID09PSAnQm9vbGVhbicgfHwgZG9tID09PSAnTWF5YmVCb29sZWFuJztcbiAgLy8gfVxuICAvLyBnZXQgaXNSZWFsRnVuY3Rpb24oKTogYm9vbGVhbiB7XG4gIC8vICAgaWYgKHRoaXMuZG9tYWluTGl0ZXJhbCA9PT0gJ1JlYWxGdW5jdGlvbicpIHJldHVybiB0cnVlO1xuICAvLyAgIGlmICh0aGlzLmRvbWFpbkNvbnN0cnVjdG9yICE9PSAnRnVuY3Rpb24nKSByZXR1cm4gZmFsc2U7XG4gIC8vICAgZm9yIChjb25zdCBhcmcgb2YgdGhpcy5kb21haW5QYXJhbXMhKVxuICAvLyAgICAgaWYgKCFpc051bWVyaWNTdWJkb21haW4oYXJnLCAnRXh0ZW5kZWRSZWFsTnVtYmVyJykpIHJldHVybiBmYWxzZTtcbiAgLy8gICByZXR1cm4gdHJ1ZTtcbiAgLy8gfVxuICBnZXQgaXNOdW1lcmljKCkge1xuICAgIHJldHVybiB0aGlzLmlzQ29tcGF0aWJsZSh0aGlzLmVuZ2luZS5kb21haW4oXCJOdW1iZXJcIikpO1xuICB9XG4gIC8vIGdldCBpc0xvZ2ljT3BlcmF0b3IoKTogYm9vbGVhbiB7XG4gIC8vICAgaWYgKHRoaXMuZG9tYWluTGl0ZXJhbCA9PT0gJ0xvZ2ljT3BlcmF0b3InKSByZXR1cm4gdHJ1ZTtcbiAgLy8gICBpZiAoIXRoaXMuY29kb21haW4/LmlzQm9vbGVhbikgcmV0dXJuIGZhbHNlO1xuICAvLyAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuZG9tYWluUGFyYW1zITtcbiAgLy8gICBpZiAocGFyYW1zLmxlbmd0aCA8IDEgfHwgcGFyYW1zLmxlbmd0aCA+IDIpIHJldHVybiBmYWxzZTtcbiAgLy8gICBpZiAoIXBhcmFtc1swXS5pc0Jvb2xlYW4pIHJldHVybiBmYWxzZTtcbiAgLy8gICBpZiAocGFyYW1zLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vICAgaWYgKCFwYXJhbXNbMV0uaXNCb29sZWFuKSByZXR1cm4gZmFsc2U7XG4gIC8vICAgcmV0dXJuIHRydWU7XG4gIC8vIH1cbiAgZ2V0IGlzUmVsYXRpb25hbE9wZXJhdG9yKCkge1xuICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gXCJSZWxhdGlvbmFsT3BlcmF0b3JcIilcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICh0aGlzLmN0b3IgIT09IFwiRnVuY3Rpb25cIilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5kb21haW5BcmdzLmxlbmd0aCAhPT0gMilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIXRoaXMuY29kb21haW4uaXNDb21wYXRpYmxlKFwiTWF5YmVCb29sZWFuXCIpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuZnVuY3Rpb24gYm94RG9tYWluKGNlLCBkb20sIG1ldGFkYXRhKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRvbSkgJiYgZG9tWzBdID09PSBcIkRvbWFpblwiKVxuICAgIGRvbSA9IGRvbVsxXTtcbiAgaWYgKGRvbSBpbnN0YW5jZW9mIF9Cb3hlZERvbWFpbilcbiAgICByZXR1cm4gZG9tO1xuICBpZiAoZG9tIGluc3RhbmNlb2YgQWJzdHJhY3RCb3hlZEV4cHJlc3Npb24pXG4gICAgZG9tID0gZG9tLmpzb247XG4gIGlmICh0eXBlb2YgZG9tID09PSBcInN0cmluZ1wiKSB7XG4gICAgY29uc3QgZXhwciA9IERPTUFJTl9BTElBU1tkb21dO1xuICAgIGlmIChleHByKVxuICAgICAgcmV0dXJuIGJveERvbWFpbihjZSwgZXhwcik7XG4gICAgaWYgKCFpc0RvbWFpbkxpdGVyYWwoZG9tKSlcbiAgICAgIHRocm93IEVycm9yKFwiRXhwZWN0ZWQgYSBkb21haW4gbGl0ZXJhbCwgZ290IFwiICsgZG9tKTtcbiAgICByZXR1cm4gbmV3IF9Cb3hlZERvbWFpbihjZSwgZG9tLCBtZXRhZGF0YSk7XG4gIH1cbiAgaWYgKCFBcnJheS5pc0FycmF5KGRvbSkgfHwgZG9tLmxlbmd0aCA9PT0gMClcbiAgICB0aHJvdyBFcnJvcihcIkV4cGVjdGVkIGEgdmFsaWQgZG9tYWluXCIpO1xuICBjb25zdCBjb25zdHJ1Y3RvciA9IGRvbVswXTtcbiAgaWYgKCFET01BSU5fQ09OU1RSVUNUT1JTLmluY2x1ZGVzKGNvbnN0cnVjdG9yKSlcbiAgICB0aHJvdyBFcnJvcihcIkV4cGVjdGVkIGRvbWFpbiBjb25zdHJ1Y3RvciwgZ290IFwiICsgY29uc3RydWN0b3IpO1xuICByZXR1cm4gbmV3IF9Cb3hlZERvbWFpbihjZSwgZG9tLCBtZXRhZGF0YSk7XG59XG5mdW5jdGlvbiBtYWtlQ2Fub25pY2FsKGNlLCBkb20pIHtcbiAgaWYgKGRvbSA9PT0gdm9pZCAwIHx8IHR5cGVvZiBkb20gPT09IFwibnVtYmVyXCIpXG4gICAgdGhyb3cgRXJyb3IoXCJFeHBlY3RlZCBhIGRvbWFpbiBleHByZXNzaW9uXCIpO1xuICBpZiAoZG9tIGluc3RhbmNlb2YgX0JveGVkRG9tYWluKVxuICAgIHJldHVybiBkb20uX3ZhbHVlO1xuICBpZiAodHlwZW9mIGRvbSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmICghaXNEb21haW5MaXRlcmFsKGRvbSkpXG4gICAgICB0aHJvdyBFcnJvcihcIlVua25vd24gZG9tYWluIGxpdGVyYWxcIik7XG4gICAgcmV0dXJuIGRvbTtcbiAgfVxuICBpZiAoIUFycmF5LmlzQXJyYXkoZG9tKSAmJiB0eXBlb2YgZG9tID09PSBcIm9iamVjdFwiKVxuICAgIHRocm93IEVycm9yKFwiRXhwZWN0ZWQgYSBkb21haW4gZXhwcmVzc2lvblwiKTtcbiAgaWYgKCFkb20pXG4gICAgO1xuICBjb25zdCBjdG9yID0gZG9tWzBdO1xuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoY3Rvcik7XG4gIGlmIChjdG9yID09PSBcIlJhbmdlXCIpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA9PT0gMSlcbiAgICAgIHJldHVybiBcIkludGVnZXJcIjtcbiAgICBsZXQgZmlyc3QgPSAxO1xuICAgIGxldCBsYXN0ID0gSW5maW5pdHk7XG4gICAgaWYgKGRvbS5sZW5ndGggPT09IDIpIHtcbiAgICAgIGxhc3QgPSBkb21bMV07XG4gICAgfSBlbHNlIGlmIChkb20ubGVuZ3RoID09PSAzKSB7XG4gICAgICBmaXJzdCA9IGRvbVsxXTtcbiAgICAgIGxhc3QgPSBkb21bMl07XG4gICAgfVxuICAgIGNvbnN0IGZpcnN0TnVtID0gYXNSYW5nZUJvdW5kKGNlLCBmaXJzdCk7XG4gICAgY29uc3QgbGFzdE51bSA9IGFzUmFuZ2VCb3VuZChjZSwgbGFzdCk7XG4gICAgaWYgKGZpcnN0TnVtID09PSBudWxsIHx8IGxhc3ROdW0gPT09IG51bGwpXG4gICAgICB0aHJvdyBFcnJvcihgSW52YWxpZCByYW5nZSBbJHtmaXJzdE51bX0sICR7bGFzdE51bX1dIGApO1xuICAgIGlmIChsYXN0TnVtIDwgZmlyc3ROdW0pXG4gICAgICBbZmlyc3QsIGxhc3RdID0gW2xhc3QsIGZpcnN0XTtcbiAgICBpZiAoZmlyc3ROdW0gPT09IC1JbmZpbml0eSAmJiBsYXN0TnVtID09PSBJbmZpbml0eSlcbiAgICAgIHJldHVybiBcIkludGVnZXJcIjtcbiAgICBpZiAoZmlyc3ROdW0gPT09IDEgJiYgbGFzdE51bSA9PT0gSW5maW5pdHkpXG4gICAgICByZXR1cm4gXCJQb3NpdGl2ZUludGVnZXJcIjtcbiAgICBpZiAoZmlyc3ROdW0gPT09IDAgJiYgbGFzdE51bSA9PT0gSW5maW5pdHkpXG4gICAgICByZXR1cm4gXCJOb25OZWdhdGl2ZUludGVnZXJcIjtcbiAgICBpZiAoZmlyc3ROdW0gPT09IC1JbmZpbml0eSAmJiBsYXN0TnVtID09PSAtMSlcbiAgICAgIHJldHVybiBcIk5lZ2F0aXZlSW50ZWdlclwiO1xuICAgIGlmIChmaXJzdE51bSA9PT0gLUluZmluaXR5ICYmIGxhc3ROdW0gPT09IDApXG4gICAgICByZXR1cm4gXCJOb25Qb3NpdGl2ZUludGVnZXJcIjtcbiAgICByZXR1cm4gW1wiUmFuZ2VcIiwgY2UubnVtYmVyKGZpcnN0TnVtKSwgY2UubnVtYmVyKGxhc3ROdW0pXTtcbiAgfVxuICBpZiAoY3RvciA9PT0gXCJJbnRlcnZhbFwiKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggIT09IDMpXG4gICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgcmFuZ2UgXCIgKyBkb20pO1xuICAgIGxldCBbaXNMZWZ0T3BlbiwgZmlyc3RdID0gbWF5YmVPcGVuKGNlLCBkb21bMV0pO1xuICAgIGxldCBbaXNSaWdodE9wZW4sIGxhc3RdID0gbWF5YmVPcGVuKGNlLCBkb21bMl0pO1xuICAgIGlmIChmaXJzdCA9PT0gbnVsbCB8fCBsYXN0ID09PSBudWxsKVxuICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHJhbmdlIFwiICsgZG9tKTtcbiAgICBpZiAobGFzdCA8IGZpcnN0KSB7XG4gICAgICBbZmlyc3QsIGxhc3RdID0gW2xhc3QsIGZpcnN0XTtcbiAgICAgIFtpc0xlZnRPcGVuLCBpc1JpZ2h0T3Blbl0gPSBbaXNSaWdodE9wZW4sIGlzTGVmdE9wZW5dO1xuICAgIH1cbiAgICBpZiAoZmlyc3QgPT09IDAgJiYgbGFzdCA9PT0gSW5maW5pdHkpXG4gICAgICByZXR1cm4gaXNMZWZ0T3BlbiA/IFwiUG9zaXRpdmVOdW1iZXJcIiA6IFwiTm9uTmVnYXRpdmVOdW1iZXJcIjtcbiAgICBpZiAoZmlyc3QgPT09IC1JbmZpbml0eSAmJiBsYXN0ID09PSAwKVxuICAgICAgcmV0dXJuIGlzUmlnaHRPcGVuID8gXCJOZWdhdGl2ZU51bWJlclwiIDogXCJOb25Qb3NpdGl2ZU51bWJlclwiO1xuICAgIHJldHVybiBbXG4gICAgICBcIkludGVydmFsXCIsXG4gICAgICBpc0xlZnRPcGVuID8gW1wiT3BlblwiLCBjZS5udW1iZXIoZmlyc3QpXSA6IGNlLm51bWJlcihmaXJzdCksXG4gICAgICBpc1JpZ2h0T3BlbiA/IFtcIk9wZW5cIiwgY2UubnVtYmVyKGxhc3QpXSA6IGNlLm51bWJlcihsYXN0KVxuICAgIF07XG4gIH1cbiAgaWYgKGN0b3IgPT09IFwiRnVuY3Rpb25cIikge1xuICAgIHJldHVybiBbXCJGdW5jdGlvblwiLCAuLi5kb20uc2xpY2UoMSkubWFwKCh4KSA9PiBtYWtlQ2Fub25pY2FsKGNlLCB4KSldO1xuICB9XG4gIGlmIChjdG9yID09PSBcIkRpY3Rpb25hcnlcIikge1xuICAgIHJldHVybiBbXCJEaWN0aW9uYXJ5XCIsIG1ha2VDYW5vbmljYWwoY2UsIGRvbVsxXSldO1xuICB9XG4gIGlmIChjdG9yID09PSBcIkxpc3RcIikge1xuICAgIHJldHVybiBbXCJMaXN0XCIsIG1ha2VDYW5vbmljYWwoY2UsIGRvbVsxXSldO1xuICB9XG4gIGlmIChjdG9yID09PSBcIlR1cGxlXCIpIHtcbiAgICByZXR1cm4gW1wiVHVwbGVcIiwgLi4uZG9tLnNsaWNlKDEpLm1hcCgoeCkgPT4gbWFrZUNhbm9uaWNhbChjZSwgeCkpXTtcbiAgfVxuICBpZiAoY3RvciA9PT0gXCJVbmlvblwiKSB7XG4gICAgcmV0dXJuIFtcIlVuaW9uXCIsIC4uLmRvbS5zbGljZSgxKS5tYXAoKHgpID0+IG1ha2VDYW5vbmljYWwoY2UsIHgpKV07XG4gIH1cbiAgaWYgKGN0b3IgPT09IFwiSW50ZXJzZWN0aW9uXCIpIHtcbiAgICByZXR1cm4gW1wiSW50ZXJzZWN0aW9uXCIsIC4uLmRvbS5zbGljZSgxKS5tYXAoKHgpID0+IG1ha2VDYW5vbmljYWwoY2UsIHgpKV07XG4gIH1cbiAgaWYgKGN0b3IgPT09IFwiQ292YXJpYW50XCIgfHwgY3RvciA9PT0gXCJDb250cmF2YXJpYW50XCIgfHwgY3RvciA9PT0gXCJJbnZhcmlhbnRcIikge1xuICAgIHJldHVybiBbY3RvciwgbWFrZUNhbm9uaWNhbChjZSwgZG9tWzFdKV07XG4gIH1cbiAgaWYgKGN0b3IgPT09IFwiTWF5YmVcIikge1xuICAgIHJldHVybiBbXCJNYXliZVwiLCBtYWtlQ2Fub25pY2FsKGNlLCBkb21bMV0pXTtcbiAgfVxuICBpZiAoY3RvciA9PT0gXCJTZXF1ZW5jZVwiKSB7XG4gICAgcmV0dXJuIFtcIlNlcXVlbmNlXCIsIG1ha2VDYW5vbmljYWwoY2UsIGRvbVsxXSldO1xuICB9XG4gIGlmIChjdG9yID09PSBcIkhlYWRcIikge1xuICAgIHJldHVybiBbXCJIZWFkXCIsIGRvbVsxXV07XG4gIH1cbiAgaWYgKGN0b3IgPT09IFwiU3ltYm9sXCIpIHtcbiAgICByZXR1cm4gW1wiU3ltYm9sXCIsIGRvbVsxXV07XG4gIH1cbiAgaWYgKGN0b3IgPT09IFwiVmFsdWVcIikge1xuICAgIHJldHVybiBbXCJWYWx1ZVwiLCBjZS5ib3goZG9tWzFdKV07XG4gIH1cbiAgaWYgKGN0b3IgPT09IFwiSW52YWxpZERvbWFpblwiKSB7XG4gICAgcmV0dXJuIFtcIkludmFsaWREb21haW5cIiwgZG9tWzFdXTtcbiAgfVxuICB0aHJvdyBFcnJvcihcIlVuZXhwZWN0ZWQgZG9tYWluIGNvbnN0cnVjdG9yIFwiICsgY3Rvcik7XG59XG5mdW5jdGlvbiBhc1JhbmdlQm91bmQoY2UsIGV4cHIpIHtcbiAgaWYgKHR5cGVvZiBleHByID09PSBcIm51bWJlclwiKVxuICAgIHJldHVybiBleHByO1xuICBjb25zdCB4ID0gY2UuYm94KGV4cHIpLmV2YWx1YXRlKCk7XG4gIHJldHVybiB4LmlzSW5maW5pdHkgPyB4LmlzUG9zaXRpdmUgPyBJbmZpbml0eSA6IC1JbmZpbml0eSA6IGFzU21hbGxJbnRlZ2VyKHgpO1xufVxuZnVuY3Rpb24gbWF5YmVPcGVuKGNlLCBleHByKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cHIpICYmIGV4cHJbMF0gPT09IFwiT3BlblwiKVxuICAgIHJldHVybiBbdHJ1ZSwgYXNSYW5nZUJvdW5kKGNlLCBleHByWzFdKV07XG4gIHJldHVybiBbZmFsc2UsIGFzUmFuZ2VCb3VuZChjZSwgZXhwcildO1xufVxuZnVuY3Rpb24gaXNEb21haW4oZXhwcikge1xuICBpZiAoZXhwciBpbnN0YW5jZW9mIF9Cb3hlZERvbWFpbilcbiAgICByZXR1cm4gdHJ1ZTtcbiAgaWYgKGV4cHIgaW5zdGFuY2VvZiBBYnN0cmFjdEJveGVkRXhwcmVzc2lvbilcbiAgICBleHByID0gZXhwci5qc29uO1xuICBpZiAodHlwZW9mIGV4cHIgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGlzRG9tYWluTGl0ZXJhbChleHByKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwcikpIHtcbiAgICBpZiAoZXhwci5sZW5ndGggPD0gMSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBjdG9yID0gZXhwclswXTtcbiAgICBpZiAodHlwZW9mIGN0b3IgIT09IFwic3RyaW5nXCIgfHwgIURPTUFJTl9DT05TVFJVQ1RPUlMuaW5jbHVkZXMoY3RvcikpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGN0b3IgPT09IFwiSW52YWxpZERvbWFpblwiKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChjdG9yID09PSBcIkxpc3RcIilcbiAgICAgIHJldHVybiBleHByLmxlbmd0aCA9PT0gMiAmJiBpc1ZhbGlkRG9tYWluKGV4cHJbMV0pO1xuICAgIGlmIChjdG9yID09PSBcIlR1cGxlXCIgfHwgY3RvciA9PT0gXCJGdW5jdGlvblwiIHx8IGN0b3IgPT09IFwiTWF5YmVcIiB8fCBjdG9yID09PSBcIlNlcXVlbmNlXCIgfHwgY3RvciA9PT0gXCJJbnRlcnNlY3Rpb25cIiB8fCBjdG9yID09PSBcIlVuaW9uXCIpXG4gICAgICByZXR1cm4gZXhwci5zbGljZSgxLCAtMSkuZXZlcnkoKHgpID0+IGlzVmFsaWREb21haW4oeCkpO1xuICAgIHJldHVybiBleHByLmV2ZXJ5KCh4KSA9PiB4ICE9PSBudWxsKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc1ZhbGlkRG9tYWluKGV4cHIpIHtcbiAgaWYgKGV4cHIgaW5zdGFuY2VvZiBfQm94ZWREb21haW4pXG4gICAgcmV0dXJuIGV4cHIuaXNWYWxpZDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwcikgJiYgZXhwclswXSA9PT0gXCJJbnZhbGlkRG9tYWluXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gaXNEb21haW4oZXhwcik7XG59XG5mdW5jdGlvbiBpc1N1YmRvbWFpbk9mMShsaHMsIHJocykge1xuICBjb25zdCBbcmVzdWx0LCByZXN0XSA9IGlzU3ViZG9tYWluT2YoW2xoc10sIHJocyk7XG4gIGlmIChyZXN1bHQgJiYgcmVzdC5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzU3ViZG9tYWluT2YoeGxocywgcmhzKSB7XG4gIGxldCBsaHMgPSB4bGhzLnNoaWZ0KCk7XG4gIGNvbnN0IHJoc0xpdGVyYWwgPSB0eXBlb2YgcmhzID09PSBcInN0cmluZ1wiID8gcmhzIDogbnVsbDtcbiAgaWYgKHJoc0xpdGVyYWwgPT09IFwiQW55dGhpbmdcIilcbiAgICByZXR1cm4gW3RydWUsIHhsaHNdO1xuICBjb25zdCBsaHNMaXRlcmFsID0gdHlwZW9mIGxocyA9PT0gXCJzdHJpbmdcIiA/IGxocyA6IG51bGw7XG4gIGlmIChsaHNMaXRlcmFsICYmIHJoc0xpdGVyYWwpIHtcbiAgICBpZiAobGhzTGl0ZXJhbCA9PT0gcmhzTGl0ZXJhbClcbiAgICAgIHJldHVybiBbdHJ1ZSwgeGxoc107XG4gICAgcmV0dXJuIFthbmNlc3RvcnMobGhzTGl0ZXJhbCkuaW5jbHVkZXMocmhzTGl0ZXJhbCksIHhsaHNdO1xuICB9XG4gIGlmIChyaHNMaXRlcmFsKSB7XG4gICAgaWYgKCFsaHMpXG4gICAgICA7XG4gICAgY29uc3QgbGhzQ29uc3RydWN0b3IgPSBsaHNbMF07XG4gICAgaWYgKGxoc0NvbnN0cnVjdG9yID09PSBcIkZ1bmN0aW9uXCIpXG4gICAgICByZXR1cm4gW3Joc0xpdGVyYWwgPT09IFwiRnVuY3Rpb25cIiwgeGxoc107XG4gICAgaWYgKGxoc0NvbnN0cnVjdG9yID09PSBcIkRpY3Rpb25hcnlcIilcbiAgICAgIHJldHVybiBbcmhzTGl0ZXJhbCA9PT0gXCJEaWN0aW9uYXJ5XCIsIHhsaHNdO1xuICAgIGlmIChsaHNDb25zdHJ1Y3RvciA9PT0gXCJMaXN0XCIpXG4gICAgICByZXR1cm4gW3Joc0xpdGVyYWwgPT09IFwiTGlzdFwiLCB4bGhzXTtcbiAgICBpZiAobGhzQ29uc3RydWN0b3IgPT09IFwiVHVwbGVcIilcbiAgICAgIHJldHVybiBbcmhzTGl0ZXJhbCA9PT0gXCJUdXBsZVwiLCB4bGhzXTtcbiAgICBpZiAobGhzQ29uc3RydWN0b3IgPT09IFwiSW50ZXJzZWN0aW9uXCIpIHtcbiAgICB9XG4gICAgaWYgKGxoc0NvbnN0cnVjdG9yID09PSBcIkludGVydmFsXCIpXG4gICAgICByZXR1cm4gW2lzU3ViZG9tYWluT2YxKFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCIsIHJoc0xpdGVyYWwpLCB4bGhzXTtcbiAgICBpZiAobGhzQ29uc3RydWN0b3IgPT09IFwiUmFuZ2VcIilcbiAgICAgIHJldHVybiBbaXNTdWJkb21haW5PZjEoXCJJbnRlZ2VyXCIsIHJoc0xpdGVyYWwpLCB4bGhzXTtcbiAgICByZXR1cm4gW3RydWUsIHhsaHNdO1xuICB9XG4gIGNvbnN0IHJoc0NvbnN0cnVjdG9yID0gcmhzWzBdO1xuICBpZiAocmhzQ29uc3RydWN0b3IgPT09IFwiRnVuY3Rpb25cIikge1xuICAgIGlmIChsaHNMaXRlcmFsID09PSBcIkZ1bmN0aW9uXCIpXG4gICAgICByZXR1cm4gW3RydWUsIHhsaHNdO1xuICAgIGlmIChsaHNMaXRlcmFsKVxuICAgICAgcmV0dXJuIFtmYWxzZSwgeGxoc107XG4gICAgaWYgKGxoc1swXSAhPT0gXCJGdW5jdGlvblwiKVxuICAgICAgcmV0dXJuIFtmYWxzZSwgeGxoc107XG4gICAgaWYgKGxocy5sZW5ndGggPT09IDEgJiYgcmhzLmxlbmd0aCA9PT0gMSlcbiAgICAgIHJldHVybiBbdHJ1ZSwgeGxoc107XG4gICAgaWYgKCFpc1N1YmRvbWFpbk9mMShcbiAgICAgIGxoc1tsaHMubGVuZ3RoIC0gMV0sXG4gICAgICByaHNbcmhzLmxlbmd0aCAtIDFdXG4gICAgKSlcbiAgICAgIHJldHVybiBbZmFsc2UsIHhsaHNdO1xuICAgIGNvbnN0IGxoc1BhcmFtcyA9IGxocy5zbGljZSgxLCAtMSk7XG4gICAgbGV0IHJoc1BhcmFtcyA9IHJocy5zbGljZSgxLCAtMSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbGhzUGFyYW1zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgaWYgKHJoc1BhcmFtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc3QgbGhzQ3RvciA9IEFycmF5LmlzQXJyYXkobGhzUGFyYW1zW2ldKSA/IGxoc1BhcmFtc1tpXVswXSA6IG51bGw7XG4gICAgICAgIGlmIChsaHNDdG9yICE9PSBcIk1heWJlXCIpXG4gICAgICAgICAgcmV0dXJuIFtmYWxzZSwgeGxoc107XG4gICAgICAgIHJldHVybiBbdHJ1ZSwgeGxoc107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbWF0Y2gyID0gZmFsc2U7XG4gICAgICAgIFttYXRjaDIsIHJoc1BhcmFtc10gPSBpc1N1YmRvbWFpbk9mKHJoc1BhcmFtcywgbGhzUGFyYW1zW2ldKTtcbiAgICAgICAgaWYgKCFtYXRjaDIpXG4gICAgICAgICAgcmV0dXJuIFtmYWxzZSwgeGxoc107XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbcmhzUGFyYW1zLmxlbmd0aCA9PT0gMCwgeGxoc107XG4gIH1cbiAgaWYgKHJoc0NvbnN0cnVjdG9yID09PSBcIkludGVyc2VjdGlvblwiKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHJocy5zbGljZSgxLCAtMSkuZXZlcnkoXG4gICAgICAgICh4KSA9PiBpc1N1YmRvbWFpbk9mMShsaHMsIHgpXG4gICAgICApLFxuICAgICAgeGxoc1xuICAgIF07XG4gIH1cbiAgaWYgKHJoc0NvbnN0cnVjdG9yID09PSBcIlVuaW9uXCIpIHtcbiAgICByZXR1cm4gW1xuICAgICAgcmhzLnNsaWNlKDEsIC0xKS5zb21lKCh4KSA9PiBpc1N1YmRvbWFpbk9mMShsaHMsIHgpKSxcbiAgICAgIHhsaHNcbiAgICBdO1xuICB9XG4gIGlmIChyaHNDb25zdHJ1Y3RvciA9PT0gXCJNYXliZVwiKSB7XG4gICAgaWYgKGxoc0xpdGVyYWwgPT09IFwiTm90aGluZ1wiKVxuICAgICAgcmV0dXJuIFt0cnVlLCB4bGhzXTtcbiAgICByZXR1cm4gaXNTdWJkb21haW5PZihcbiAgICAgIFtsaHMsIC4uLnhsaHNdLFxuICAgICAgcmhzWzFdXG4gICAgKTtcbiAgfVxuICBpZiAocmhzQ29uc3RydWN0b3IgPT09IFwiU2VxdWVuY2VcIikge1xuICAgIGNvbnN0IHNlcSA9IHJoc1sxXTtcbiAgICBpZiAoIWlzU3ViZG9tYWluT2YxKGxocywgc2VxKSlcbiAgICAgIHJldHVybiBbZmFsc2UsIHhsaHNdO1xuICAgIGxocyA9IHhsaHMuc2hpZnQoKTtcbiAgICBsZXQgbWF0Y2gyID0gdHJ1ZTtcbiAgICB3aGlsZSAoeGxocy5sZW5ndGggPiAwICYmIG1hdGNoMikge1xuICAgICAgW21hdGNoMiwgeGxoc10gPSBpc1N1YmRvbWFpbk9mKHhsaHMsIHNlcSk7XG4gICAgICBsaHMgPSB4bGhzLnNoaWZ0KCk7XG4gICAgfVxuICAgIHJldHVybiBbdHJ1ZSwgeGxoc107XG4gIH1cbiAgaWYgKHJoc0NvbnN0cnVjdG9yID09PSBcIlR1cGxlXCIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobGhzKSB8fCBsaHNbMF0gIT09IFwiVHVwbGVcIilcbiAgICAgIHJldHVybiBbZmFsc2UsIHhsaHNdO1xuICAgIGlmIChsaHMubGVuZ3RoID4gcmhzLmxlbmd0aClcbiAgICAgIHJldHVybiBbZmFsc2UsIHhsaHNdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHJocy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGlmICghbGhzW2ldIHx8ICFpc1N1YmRvbWFpbk9mMShcbiAgICAgICAgbGhzW2ldLFxuICAgICAgICByaHNbaV1cbiAgICAgICkpXG4gICAgICAgIHJldHVybiBbZmFsc2UsIHhsaHNdO1xuICAgIH1cbiAgICByZXR1cm4gW3RydWUsIHhsaHNdO1xuICB9XG4gIGlmIChyaHNDb25zdHJ1Y3RvciA9PT0gXCJSYW5nZVwiKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGxocykgfHwgbGhzWzBdICE9PSBcIlJhbmdlXCIpXG4gICAgICByZXR1cm4gW2ZhbHNlLCB4bGhzXTtcbiAgICBjb25zdCBsaHNNaW4gPSBhc0Zsb2F0KGxoc1sxXSk7XG4gICAgY29uc3QgbGhzTWF4ID0gYXNGbG9hdChsaHNbMl0pO1xuICAgIGNvbnN0IHJoc01pbiA9IGFzRmxvYXQocmhzWzFdKTtcbiAgICBjb25zdCByaHNNYXggPSBhc0Zsb2F0KHJoc1syXSk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGxoc01pbiAhPT0gbnVsbCAmJiBsaHNNYXggIT09IG51bGwgJiYgcmhzTWluICE9PSBudWxsICYmIHJoc01heCAhPT0gbnVsbCAmJiBsaHNNaW4gPj0gcmhzTWluICYmIGxoc01heCA8PSByaHNNYXgsXG4gICAgICB4bGhzXG4gICAgXTtcbiAgfVxuICBpZiAocmhzQ29uc3RydWN0b3IgPT09IFwiSW50ZXJ2YWxcIikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShsaHMpIHx8IGxoc1swXSAhPT0gXCJJbnRlcnZhbFwiKVxuICAgICAgcmV0dXJuIFtmYWxzZSwgeGxoc107XG4gICAgY29uc3QgbGhzTWluID0gYXNGbG9hdChsaHNbMV0pO1xuICAgIGNvbnN0IGxoc01heCA9IGFzRmxvYXQobGhzWzJdKTtcbiAgICBjb25zdCByaHNNaW4gPSBhc0Zsb2F0KHJoc1sxXSk7XG4gICAgY29uc3QgcmhzTWF4ID0gYXNGbG9hdChyaHNbMl0pO1xuICAgIHJldHVybiBbXG4gICAgICBsaHNNaW4gIT09IG51bGwgJiYgbGhzTWF4ICE9PSBudWxsICYmIHJoc01pbiAhPT0gbnVsbCAmJiByaHNNYXggIT09IG51bGwgJiYgbGhzTWluID49IHJoc01pbiAmJiBsaHNNYXggPD0gcmhzTWF4LFxuICAgICAgeGxoc1xuICAgIF07XG4gIH1cbiAgY29uc29sZS5lcnJvcihcIlVuZXhwZWN0ZWQgZG9tYWluIGNvbnN0cnVjdG9yIFwiICsgcmhzQ29uc3RydWN0b3IpO1xuICByZXR1cm4gW2ZhbHNlLCB4bGhzXTtcbn1cbmZ1bmN0aW9uIHNoYXJlZEFuY2VzdG9yRG9tYWluKGEsIGIpIHtcbiAgY29uc3QgYUxpdGVyYWwgPSBkb21haW5MaXRlcmFsQW5jZXN0b3IoYSk7XG4gIGNvbnN0IGJMaXRlcmFsID0gZG9tYWluTGl0ZXJhbEFuY2VzdG9yKGIpO1xuICBjb25zdCBhQW5jZXN0b3JzID0gW2FMaXRlcmFsLCAuLi5hbmNlc3RvcnMoYUxpdGVyYWwpXTtcbiAgY29uc3QgYkFuY2VzdG9ycyA9IFtiTGl0ZXJhbCwgLi4uYW5jZXN0b3JzKGJMaXRlcmFsKV07XG4gIHdoaWxlICghYkFuY2VzdG9ycy5pbmNsdWRlcyhhQW5jZXN0b3JzWzBdKSlcbiAgICBhQW5jZXN0b3JzLnNoaWZ0KCk7XG4gIHJldHVybiBhLmVuZ2luZS5kb21haW4oYUFuY2VzdG9yc1swXSk7XG59XG5mdW5jdGlvbiBkb21haW5MaXRlcmFsQW5jZXN0b3IoZG9tKSB7XG4gIGxldCByZXN1bHQgPSBkb20ubGl0ZXJhbDtcbiAgaWYgKHJlc3VsdClcbiAgICByZXR1cm4gcmVzdWx0O1xuICByZXN1bHQgPSBkb20uY3RvcjtcbiAgaWYgKHJlc3VsdCA9PT0gXCJNYXliZVwiKVxuICAgIHJldHVybiBcIkFueXRoaW5nXCI7XG4gIGlmIChyZXN1bHQgPT09IFwiSW50ZXJ2YWxcIilcbiAgICByZXR1cm4gXCJSZWFsTnVtYmVyXCI7XG4gIGlmIChyZXN1bHQgPT09IFwiUmFuZ2VcIilcbiAgICByZXR1cm4gXCJJbnRlZ2VyXCI7XG4gIGlmIChyZXN1bHQgPT09IFwiSGVhZFwiKVxuICAgIHJldHVybiBcIkZ1bmN0aW9uXCI7XG4gIGlmIChyZXN1bHQgPT09IFwiVW5pb25cIilcbiAgICByZXR1cm4gXCJBbnl0aGluZ1wiO1xuICBpZiAocmVzdWx0ID09PSBcIkludGVyc2VjdGlvblwiKVxuICAgIHJldHVybiBcIkFueXRoaW5nXCI7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBzZXJpYWxpemUoY2UsIGRvbSkge1xuICBpZiAoZG9tIGluc3RhbmNlb2YgQWJzdHJhY3RCb3hlZEV4cHJlc3Npb24pXG4gICAgcmV0dXJuIGRvbS5qc29uO1xuICBpZiAodHlwZW9mIGRvbSA9PT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gZG9tO1xuICBpZiAoZG9tWzBdID09PSBcIkludmFsaWREb21haW5cIikge1xuICAgIHJldHVybiBbXCJJbnZhbGlkRG9tYWluXCIsIHNlcmlhbGl6ZShjZSwgZG9tWzFdKV07XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gW3NlcmlhbGl6ZUpzb25TeW1ib2woY2UsIGRvbVswXSldO1xuICBpZiAoZG9tLmxlbmd0aCA+IDEpXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gZG9tLmxlbmd0aCAtIDE7IGkrKylcbiAgICAgIHJlc3VsdC5wdXNoKHNlcmlhbGl6ZShjZSwgZG9tW2ldKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBoYXNoKGRvbSkge1xuICBpZiAodHlwZW9mIGRvbSA9PT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gXCJkb21haW46XCIgKyBkb207XG4gIGxldCBzID0gXCJkb21haW46XCIgKyB0aGlzLmN0b3I7XG4gIGZvciAoY29uc3QgYXJnIG9mIHRoaXMuZG9tYWluQXJncylcbiAgICBzICs9IFwiOlwiICsgaGFzaChhcmcpO1xuICByZXR1cm4gcztcbn1cbmZ1bmN0aW9uIGlzRXF1YWwobGhzLCByaHMpIHtcbiAgaWYgKHR5cGVvZiByaHMgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlID09PSByaHM7XG4gIGlmIChyaHMgaW5zdGFuY2VvZiBfQm94ZWREb21haW4pXG4gICAgcmV0dXJuIGlzRXF1YWwobGhzLCByaHMuX3ZhbHVlKTtcbiAgaWYgKHR5cGVvZiBsaHMgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGxocyA9PT0gcmhzO1xuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoQXJyYXkuaXNBcnJheShsaHMpKTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHJocykpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAobGhzWzBdICE9PSByaHNbMF0pXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAocmhzLmxlbmd0aCAhPT0gbGhzLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IGxocy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBpZiAobGhzW2ldIGluc3RhbmNlb2YgQWJzdHJhY3RCb3hlZEV4cHJlc3Npb24pIHtcbiAgICAgIGlmICghKHJoc1tpXSBpbnN0YW5jZW9mIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKCFyaHNbaV0uaXNFcXVhbChyaHNbaV0pKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbGhzW2ldID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBpZiAodHlwZW9mIHJoc1tpXSAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKGxoc1tpXSAhPT0gcmhzW2ldKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICghaXNFcXVhbChsaHNbaV0sIHJoc1tpXSkpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL3ZhbGlkYXRlLnRzXG5mdW5jdGlvbiB2YWxpZGF0ZUFyZ3VtZW50Q291bnQoY2UsIG9wczIsIGNvdW50KSB7XG4gIGlmIChvcHMyLmxlbmd0aCA9PT0gY291bnQpXG4gICAgcmV0dXJuIG9wczI7XG4gIGNvbnN0IHhzID0gWy4uLm9wczIuc2xpY2UoMCwgY291bnQpXTtcbiAgbGV0IGkgPSBNYXRoLm1pbihjb3VudCwgb3BzMi5sZW5ndGgpO1xuICB3aGlsZSAoaSA8IGNvdW50KSB7XG4gICAgeHMucHVzaChjZS5lcnJvcihcIm1pc3NpbmdcIikpO1xuICAgIGkgKz0gMTtcbiAgfVxuICB3aGlsZSAoaSA8IG9wczIubGVuZ3RoKSB7XG4gICAgeHMucHVzaChjZS5lcnJvcihcInVuZXhwZWN0ZWQtYXJndW1lbnRcIiwgb3BzMltpXSkpO1xuICAgIGkgKz0gMTtcbiAgfVxuICByZXR1cm4geHM7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZU51bWVyaWNBcmdzKGNlLCBvcHMyLCBjb3VudCkge1xuICBpZiAoIWNlLnN0cmljdClcbiAgICByZXR1cm4gb3BzMjtcbiAgbGV0IHhzO1xuICBpZiAoY291bnQgPT09IHZvaWQgMClcbiAgICB4cyA9IG9wczI7XG4gIGVsc2Uge1xuICAgIHhzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gTWF0aC5tYXgoY291bnQgLSAxLCBvcHMyLmxlbmd0aCAtIDEpOyBpKyspIHtcbiAgICAgIGlmIChpID4gY291bnQgLSAxKVxuICAgICAgICB4cy5wdXNoKGNlLmVycm9yKFwidW5leHBlY3RlZC1hcmd1bWVudFwiLCBvcHMyW2ldKSk7XG4gICAgICBlbHNlXG4gICAgICAgIHhzLnB1c2gob3BzMltpXSAhPT0gdm9pZCAwID8gY2UuYm94KG9wczJbaV0pIDogY2UuZXJyb3IoXCJtaXNzaW5nXCIpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHhzLm1hcChcbiAgICAob3AzKSA9PiBvcDMgJiYgIW9wMy5pc1ZhbGlkIHx8IG9wMy5pc051bWJlciA/IG9wMyA6IGNlLmVycm9yKFtcImluY29tcGF0aWJsZS1kb21haW5cIiwgXCJOdW1iZXJcIiwgb3AzLmRvbWFpbl0sIG9wMylcbiAgKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlU2lnbmF0dXJlKHNpZywgb3BzMiwgY29kb21haW4pIHtcbiAgY29uc3QgY2UgPSBzaWcuZW5naW5lO1xuICBpZiAoIWNlLnN0cmljdClcbiAgICByZXR1cm4gb3BzMjtcbiAgY29uc3Qgb3BzRG9tYWluID0gb3BzMi5tYXAoKHgpID0+IHguZG9tYWluKTtcbiAgY29uc3QgdGFyZ2V0U2lnID0gY2UuZG9tYWluKFtcbiAgICBcIkZ1bmN0aW9uXCIsXG4gICAgLi4ub3BzRG9tYWluLFxuICAgIGNvZG9tYWluID8/IFwiQW55dGhpbmdcIlxuICBdKTtcbiAgaWYgKHNpZy5pc0NvbXBhdGlibGUodGFyZ2V0U2lnKSlcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgZXhwZWN0ZWRBcmdzID0gc2lnLmRvbWFpbkFyZ3Muc2xpY2UoMCwgLTEpO1xuICBjb25zdCBjb3VudCA9IE1hdGgubWF4KGV4cGVjdGVkQXJncy5sZW5ndGgsIG9wc0RvbWFpbi5sZW5ndGgpO1xuICBsZXQgbmV3T3BzID0gW107XG4gIGxldCByZXN0ID0gWy4uLm9wczJdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8PSBjb3VudCAtIDE7IGkrKylcbiAgICBbbmV3T3BzLCByZXN0XSA9IHZhbGlkYXRlTmV4dEFyZ3VtZW50KFxuICAgICAgY2UsXG4gICAgICBleHBlY3RlZEFyZ3NbaV0sXG4gICAgICBuZXdPcHMsXG4gICAgICByZXN0XG4gICAgKTtcbiAgd2hpbGUgKG5ld09wcy5sZW5ndGggPiAwICYmIG5ld09wc1tuZXdPcHMubGVuZ3RoIC0gMV0uc3ltYm9sID09PSBcIk5vdGhpbmdcIilcbiAgICBuZXdPcHMucG9wKCk7XG4gIHJldHVybiBuZXdPcHM7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUFyZ3VtZW50KGNlLCBhcmcsIGRvbSkge1xuICBpZiAoZG9tID09PSB2b2lkIDApXG4gICAgcmV0dXJuIGNlLmVycm9yKFwidW5leHBlY3RlZC1hcmd1bWVudFwiLCBhcmcpO1xuICBpZiAoYXJnID09PSB2b2lkIDApXG4gICAgcmV0dXJuIGNlLmVycm9yKFwibWlzc2luZ1wiKTtcbiAgaWYgKCFhcmcuaXNWYWxpZClcbiAgICByZXR1cm4gYXJnO1xuICBpZiAoYXJnPy5kb21haW4uaXNDb21wYXRpYmxlKGRvbSkpXG4gICAgcmV0dXJuIGFyZztcbiAgcmV0dXJuIGNlLmVycm9yKFtcImluY29tcGF0aWJsZS1kb21haW5cIiwgZG9tLCBhcmcuZG9tYWluXSwgYXJnKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlTmV4dEFyZ3VtZW50KGNlLCBkb20sIG1hdGNoZWQsIG9wczIpIHtcbiAgbGV0IG5leHQgPSBvcHMyLnNoaWZ0KCk7XG4gIGlmIChkb20gPT09IHZvaWQgMClcbiAgICByZXR1cm4gW1suLi5tYXRjaGVkLCBjZS5lcnJvcihcInVuZXhwZWN0ZWQtYXJndW1lbnRcIiwgbmV4dCldLCBvcHMyXTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGRvbSkpIHtcbiAgICBpZiAoIW5leHQpXG4gICAgICByZXR1cm4gW1suLi5tYXRjaGVkLCBjZS5lcnJvcihcIm1pc3NpbmdcIildLCBvcHMyXTtcbiAgICBpZiAoIW5leHQuZG9tYWluLmlzQ29tcGF0aWJsZShkb20pKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBbLi4ubWF0Y2hlZCwgY2UuZXJyb3IoW1wiaW5jb21wYXRpYmxlLWRvbWFpblwiLCBkb20sIG5leHQuZG9tYWluXSwgbmV4dCldLFxuICAgICAgICBvcHMyXG4gICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gW1suLi5tYXRjaGVkLCBuZXh0XSwgb3BzMl07XG4gIH1cbiAgY29uc3QgY3RvciA9IGRvbVswXTtcbiAgaWYgKG5leHQgPT09IHZvaWQgMCkge1xuICAgIGxldCB2YWxpZCA9IGZhbHNlO1xuICAgIGlmIChjdG9yID09PSBcIlVuaW9uXCIpIHtcbiAgICAgIGZvciAobGV0IGsgPSAxOyBrIDw9IGRvbS5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgICAgaWYgKGRvbVtrXSA9PT0gXCJOb3RoaW5nXCIpIHtcbiAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN0b3IgPT09IFwiTWF5YmVcIilcbiAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICBpZiAodmFsaWQpXG4gICAgICByZXR1cm4gW1suLi5tYXRjaGVkLCBjZS5zeW1ib2woXCJOb3RoaW5nXCIpXSwgb3BzMl07XG4gICAgcmV0dXJuIFtbLi4ubWF0Y2hlZCwgY2UuZXJyb3IoXCJtaXNzaW5nXCIpXSwgb3BzMl07XG4gIH1cbiAgaWYgKGN0b3IgPT09IFwiVW5pb25cIikge1xuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGsgPSAxOyBrIDw9IGRvbS5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIGlmIChuZXh0LmRvbWFpbi5pc0NvbXBhdGlibGUoZG9tW2tdKSkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZm91bmQpXG4gICAgICByZXR1cm4gW1suLi5tYXRjaGVkLCBuZXh0XSwgb3BzMl07XG4gICAgcmV0dXJuIFtcbiAgICAgIFsuLi5tYXRjaGVkLCBjZS5lcnJvcihbXCJpbmNvbXBhdGlibGUtZG9tYWluXCIsIGRvbSwgbmV4dC5kb21haW5dLCBuZXh0KV0sXG4gICAgICBvcHMyXG4gICAgXTtcbiAgfVxuICBpZiAoY3RvciA9PT0gXCJTZXF1ZW5jZVwiKSB7XG4gICAgY29uc3Qgc2VxID0gZG9tWzFdO1xuICAgIGlmICghbmV4dCB8fCAhbmV4dC5kb21haW4uaXNDb21wYXRpYmxlKHNlcSkpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIFsuLi5tYXRjaGVkLCBjZS5lcnJvcihbXCJpbmNvbXBhdGlibGUtZG9tYWluXCIsIHNlcSwgbmV4dC5kb21haW5dLCBuZXh0KV0sXG4gICAgICAgIG9wczJcbiAgICAgIF07XG4gICAgfVxuICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgY29uc3QgcmVzdWx0ID0gWy4uLm1hdGNoZWQsIG5leHRdO1xuICAgIHdoaWxlICghZG9uZSkge1xuICAgICAgbmV4dCA9IG9wczIuc2hpZnQoKTtcbiAgICAgIGlmICghbmV4dClcbiAgICAgICAgZG9uZSA9IGZhbHNlO1xuICAgICAgZWxzZSBpZiAoIW5leHQuZG9tYWluLmlzQ29tcGF0aWJsZShzZXEpKSB7XG4gICAgICAgIG9wczIudW5zaGlmdChuZXh0KTtcbiAgICAgICAgZG9uZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHJlc3VsdC5wdXNoKG5leHQpO1xuICAgIH1cbiAgICByZXR1cm4gW3Jlc3VsdCwgb3BzMl07XG4gIH1cbiAgaWYgKGN0b3IgPT09IFwiTWF5YmVcIikge1xuICAgIGlmIChuZXh0ID09PSB2b2lkIDAgfHwgbmV4dC5zeW1ib2wgPT09IFwiTm90aGluZ1wiKVxuICAgICAgcmV0dXJuIFtbLi4ubWF0Y2hlZCwgY2Uuc3ltYm9sKFwiTm90aGluZ1wiKV0sIG9wczJdO1xuICAgIHJldHVybiB2YWxpZGF0ZU5leHRBcmd1bWVudChjZSwgZG9tWzFdLCBtYXRjaGVkLCBbbmV4dCwgLi4ub3BzMl0pO1xuICB9XG4gIGNvbnNvbGUuZXJyb3IoXCJVbmhhbmRsZWQgY3RvclwiLCBjdG9yKTtcbiAgcmV0dXJuIFtbLi4ubWF0Y2hlZCwgbmV4dF0sIG9wczJdO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVBcmd1bWVudHMoY2UsIGFyZ3MsIGRvbXMpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSBkb21zLmxlbmd0aCAmJiBhcmdzLmV2ZXJ5KCh4LCBpKSA9PiB4LmRvbWFpbi5pc0NvbXBhdGlibGUoZG9tc1tpXSkpKVxuICAgIHJldHVybiBhcmdzO1xuICBjb25zdCB4cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8PSBkb21zLmxlbmd0aCAtIDE7IGkrKylcbiAgICB4cy5wdXNoKHZhbGlkYXRlQXJndW1lbnQoY2UsIGFyZ3NbaV0sIGRvbXNbaV0pKTtcbiAgZm9yIChsZXQgaSA9IGRvbXMubGVuZ3RoOyBpIDw9IGFyZ3MubGVuZ3RoIC0gMTsgaSsrKVxuICAgIHhzLnB1c2goY2UuZXJyb3IoXCJ1bmV4cGVjdGVkLWFyZ3VtZW50XCIsIGFyZ3NbaV0pKTtcbiAgcmV0dXJuIHhzO1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGlicmFyeS9hcml0aG1ldGljLWFkZC50c1xuZnVuY3Rpb24gY2Fub25pY2FsQWRkKGNlLCBvcHMyKSB7XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChvcHMyLmV2ZXJ5KCh4KSA9PiB4LmlzQ2Fub25pY2FsKSk7XG4gIG9wczIgPSBvcHMyLmZpbHRlcigoeCkgPT4geC5udW1lcmljVmFsdWUgPT09IG51bGwgfHwgIXguaXNaZXJvKTtcbiAgaWYgKG9wczIubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBjZS5udW1iZXIoMCk7XG4gIGlmIChvcHMyLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gb3BzMlswXTtcbiAgaWYgKG9wczIubGVuZ3RoID09PSAyKSB7XG4gICAgbGV0IGltID0gMDtcbiAgICBsZXQgcmUgPSAwO1xuICAgIHJlID0gYXNGbG9hdChvcHMyWzBdKTtcbiAgICBpZiAocmUgIT09IG51bGwgJiYgcmUgIT09IDApXG4gICAgICBpbSA9IGdldEltYWdpbmFyeUNvZWYob3BzMlsxXSk7XG4gICAgZWxzZSB7XG4gICAgICBpbSA9IGdldEltYWdpbmFyeUNvZWYob3BzMlswXSk7XG4gICAgICBpZiAoaW0gIT09IDAgJiYgb3BzMlsxXS5udW1lcmljVmFsdWUgIT09IG51bGwpXG4gICAgICAgIHJlID0gYXNGbG9hdChvcHMyWzFdKTtcbiAgICB9XG4gICAgaWYgKHJlICE9PSBudWxsICYmIGltICE9PSBudWxsICYmIGltICE9PSAwKVxuICAgICAgcmV0dXJuIGNlLm51bWJlcihjZS5jb21wbGV4KHJlLCBpbSkpO1xuICB9XG4gIGlmIChvcHMyLmxlbmd0aCA+IDEpXG4gICAgb3BzMiA9IHNvcnRBZGQoY2UsIG9wczIpO1xuICByZXR1cm4gY2UuX2ZuKFwiQWRkXCIsIG9wczIpO1xufVxuZnVuY3Rpb24gZG9tYWluQWRkKF9jZSwgYXJncykge1xuICBsZXQgZG9tID0gbnVsbDtcbiAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgIGlmICghYXJnLmlzTnVtZXJpYylcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGlmICghZG9tKVxuICAgICAgZG9tID0gYXJnO1xuICAgIGVsc2VcbiAgICAgIGRvbSA9IHNoYXJlZEFuY2VzdG9yRG9tYWluKGRvbSwgYXJnKTtcbiAgfVxuICByZXR1cm4gZG9tO1xufVxuZnVuY3Rpb24gc2ltcGxpZnlBZGQoY2UsIGFyZ3MpIHtcbiAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KGFyZ3MubGVuZ3RoID4gMSwgYHNpbXBsaWZ5QWRkOiBub3QgZW5vdWdoIGFyZ3NgKTtcbiAgY29uc3Qgc3VtMiA9IG5ldyBTdW0oY2UpO1xuICBmb3IgKGxldCBhcmcgb2YgYXJncykge1xuICAgIGFyZyA9IGFyZy5zaW1wbGlmeSgpO1xuICAgIGlmIChhcmcuaXNJbWFnaW5hcnkgJiYgYXJnLmlzSW5maW5pdHkpXG4gICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiQ29tcGxleEluZmluaXR5XCIpO1xuICAgIGlmIChhcmcuaXNOYU4gfHwgYXJnLnN5bWJvbCA9PT0gXCJVbmRlZmluZWRcIilcbiAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgIGlmICghYXJnLmlzWmVybylcbiAgICAgIHN1bTIuYWRkVGVybShhcmcpO1xuICB9XG4gIHJldHVybiBzdW0yLmFzRXhwcmVzc2lvbihcImV4cHJlc3Npb25cIik7XG59XG5mdW5jdGlvbiBldmFsQWRkTnVtKG9wczIpIHtcbiAgbGV0IHN1bTIgPSAwO1xuICBmb3IgKGNvbnN0IG9wMyBvZiBvcHMyKSB7XG4gICAgY29uc3QgdiA9IG9wMy5udW1lcmljVmFsdWU7XG4gICAgaWYgKHR5cGVvZiB2ID09PSBcIm51bWJlclwiKVxuICAgICAgc3VtMiArPSB2O1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBzdW0yO1xufVxuZnVuY3Rpb24gZXZhbEFkZChjZSwgb3BzMiwgbW9kZSA9IFwiZXZhbHVhdGVcIikge1xuICBpZiAobW9kZSA9PT0gXCJOXCIgJiYgY2UubnVtZXJpY01vZGUgPT09IFwibWFjaGluZVwiKSB7XG4gICAgb3BzMiA9IG9wczIubWFwKCh4KSA9PiB4Lk4oKSk7XG4gICAgY29uc3Qgc3VtMiA9IGV2YWxBZGROdW0ob3BzMik7XG4gICAgaWYgKHN1bTIgIT09IG51bGwpXG4gICAgICByZXR1cm4gY2UubnVtYmVyKHN1bTIpO1xuICB9XG4gIGZvciAoY29uc3QgYXJnIG9mIG9wczIpIHtcbiAgICBpZiAoYXJnLmlzSW1hZ2luYXJ5ICYmIGFyZy5pc0luZmluaXR5KVxuICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIkNvbXBsZXhJbmZpbml0eVwiKTtcbiAgICBpZiAoYXJnLmlzTmFOIHx8IGFyZy5zeW1ib2wgPT09IFwiVW5kZWZpbmVkXCIpXG4gICAgICByZXR1cm4gY2UuX05BTjtcbiAgICBpZiAoIWFyZy5pc0V4YWN0KVxuICAgICAgbW9kZSA9IFwiTlwiO1xuICB9XG4gIGlmIChtb2RlID09PSBcIk5cIilcbiAgICBvcHMyID0gb3BzMi5tYXAoKHgpID0+IHguTigpKTtcbiAgZWxzZVxuICAgIG9wczIgPSBvcHMyLm1hcCgoeCkgPT4geC5ldmFsdWF0ZSgpKTtcbiAgcmV0dXJuIG5ldyBTdW0oY2UsIG9wczIpLmFzRXhwcmVzc2lvbihtb2RlID09PSBcIk5cIiA/IFwibnVtZXJpY1wiIDogXCJleHByZXNzaW9uXCIpO1xufVxuZnVuY3Rpb24gY2Fub25pY2FsU3VtbWF0aW9uKGNlLCBib2R5LCByYW5nZSkge1xuICBib2R5ID8/IChib2R5ID0gY2UuZXJyb3IoXCJtaXNzaW5nXCIpKTtcbiAgbGV0IGluZGV4ID0gbnVsbDtcbiAgbGV0IGxvd2VyID0gbnVsbDtcbiAgbGV0IHVwcGVyID0gbnVsbDtcbiAgaWYgKHJhbmdlICYmIHJhbmdlLmhlYWQgIT09IFwiVHVwbGVcIiAmJiByYW5nZS5oZWFkICE9PSBcIlRyaXBsZVwiICYmIHJhbmdlLmhlYWQgIT09IFwiUGFpclwiICYmIHJhbmdlLmhlYWQgIT09IFwiU2luZ2xlXCIpIHtcbiAgICBpbmRleCA9IHJhbmdlO1xuICB9IGVsc2UgaWYgKHJhbmdlKSB7XG4gICAgaW5kZXggPSByYW5nZS5vcHM/LlswXSA/PyBudWxsO1xuICAgIGxvd2VyID0gcmFuZ2Uub3BzPy5bMV0/LmNhbm9uaWNhbCA/PyBudWxsO1xuICAgIHVwcGVyID0gcmFuZ2Uub3BzPy5bMl0/LmNhbm9uaWNhbCA/PyBudWxsO1xuICB9XG4gIGlmIChpbmRleD8uaGVhZCA9PT0gXCJIb2xkXCIpXG4gICAgaW5kZXggPSBpbmRleC5vcDE7XG4gIGlmIChpbmRleD8uaGVhZCA9PT0gXCJSZWxlYXNlSG9sZFwiKVxuICAgIGluZGV4ID0gaW5kZXgub3AxPy5ldmFsdWF0ZSgpO1xuICBpbmRleCA/PyAoaW5kZXggPSBjZS5zeW1ib2woXCJOb3RoaW5nXCIpKTtcbiAgaWYgKCFpbmRleC5zeW1ib2wpXG4gICAgaW5kZXggPSBjZS5lcnJvcihbXCJpbmNvbXBhdGlibGUtZG9tYWluXCIsIFwiU3ltYm9sXCIsIGluZGV4LmRvbWFpbl0pO1xuICBpZiAoaW5kZXguc3ltYm9sKVxuICAgIGNlLnB1c2hTY29wZSh7IFtpbmRleC5zeW1ib2xdOiB7IGRvbWFpbjogXCJJbnRlZ2VyXCIgfSB9KTtcbiAgY29uc3QgZm4gPSBib2R5LmNhbm9uaWNhbDtcbiAgaWYgKGluZGV4LnN5bWJvbCkge1xuICAgIGNlLnBvcFNjb3BlKCk7XG4gICAgaW5kZXggPSBpbmRleCA9IGNlLmhvbGQoaW5kZXgpO1xuICB9XG4gIGlmIChsb3dlciAmJiBsb3dlci5pc0Zpbml0ZSlcbiAgICBsb3dlciA9IHZhbGlkYXRlQXJndW1lbnQoY2UsIGxvd2VyLCBcIkludGVnZXJcIik7XG4gIGlmICh1cHBlciAmJiB1cHBlci5pc0Zpbml0ZSlcbiAgICB1cHBlciA9IHZhbGlkYXRlQXJndW1lbnQoY2UsIHVwcGVyLCBcIkludGVnZXJcIik7XG4gIGlmIChsb3dlciAmJiB1cHBlcilcbiAgICByYW5nZSA9IGNlLnR1cGxlKFtpbmRleCwgbG93ZXIsIHVwcGVyXSk7XG4gIGVsc2UgaWYgKHVwcGVyKVxuICAgIHJhbmdlID0gY2UudHVwbGUoW2luZGV4LCBjZS5udW1iZXIoMSksIHVwcGVyXSk7XG4gIGVsc2UgaWYgKGxvd2VyKVxuICAgIHJhbmdlID0gY2UudHVwbGUoW2luZGV4LCBsb3dlcl0pO1xuICBlbHNlXG4gICAgcmFuZ2UgPSBpbmRleDtcbiAgcmV0dXJuIGNlLl9mbihcIlN1bVwiLCBbZm4sIHJhbmdlXSk7XG59XG5mdW5jdGlvbiBldmFsU3VtbWF0aW9uKGNlLCBleHByLCByYW5nZSwgbW9kZSkge1xuICBjb25zdCBbaW5kZXgsIGxvd2VyLCB1cHBlciwgaXNGaW5pdGUyXSA9IG5vcm1hbGl6ZUxpbWl0cyhyYW5nZSk7XG4gIGNvbnN0IGZuID0gZXhwcjtcbiAgaWYgKG1vZGUgIT09IFwiTlwiICYmIChsb3dlciA+PSB1cHBlciB8fCB1cHBlciAtIGxvd2VyID49IE1BWF9TWU1CT0xJQ19URVJNUykpXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgbGV0IHJlc3VsdCA9IG51bGw7XG4gIGNvbnN0IHNhdmVkQ29udGV4dCA9IGNlLmNvbnRleHQ7XG4gIGNlLmNvbnRleHQgPSBmbi5zY29wZSA/PyBjZS5jb250ZXh0O1xuICBpZiAobW9kZSA9PT0gXCJzaW1wbGlmeVwiKSB7XG4gICAgY29uc3QgdGVybXMgPSBbXTtcbiAgICBpZiAoIWZuLnNjb3BlKVxuICAgICAgZm9yIChsZXQgaSA9IGxvd2VyOyBpIDw9IHVwcGVyOyBpKyspXG4gICAgICAgIHRlcm1zLnB1c2goZm4uc2ltcGxpZnkoKSk7XG4gICAgZWxzZVxuICAgICAgZm9yIChsZXQgaSA9IGxvd2VyOyBpIDw9IHVwcGVyOyBpKyspIHtcbiAgICAgICAgY2Uuc2V0KHsgW2luZGV4XTogaSB9KTtcbiAgICAgICAgdGVybXMucHVzaChmbi5zaW1wbGlmeSgpKTtcbiAgICAgIH1cbiAgICByZXN1bHQgPSBjZS5hZGQodGVybXMpLnNpbXBsaWZ5KCk7XG4gIH1cbiAgaWYgKG1vZGUgPT09IFwiZXZhbHVhdGVcIikge1xuICAgIGNvbnN0IHRlcm1zID0gW107XG4gICAgaWYgKCFmbi5zY29wZSlcbiAgICAgIGZvciAobGV0IGkgPSBsb3dlcjsgaSA8PSB1cHBlcjsgaSsrKVxuICAgICAgICB0ZXJtcy5wdXNoKGZuLmV2YWx1YXRlKCkpO1xuICAgIGVsc2VcbiAgICAgIGZvciAobGV0IGkgPSBsb3dlcjsgaSA8PSB1cHBlcjsgaSsrKSB7XG4gICAgICAgIGNlLnNldCh7IFtpbmRleF06IGkgfSk7XG4gICAgICAgIHRlcm1zLnB1c2goZm4uZXZhbHVhdGUoKSk7XG4gICAgICB9XG4gICAgcmVzdWx0ID0gY2UuYWRkKHRlcm1zKS5ldmFsdWF0ZSgpO1xuICB9XG4gIGlmIChtb2RlID09PSBcIk5cIikge1xuICAgIGlmIChyZXN1bHQgPT09IG51bGwgJiYgIWZuLnNjb3BlKSB7XG4gICAgICBjb25zdCBuID0gZm4uTigpO1xuICAgICAgaWYgKCFpc0Zpbml0ZTIpIHtcbiAgICAgICAgaWYgKG4uaXNaZXJvKVxuICAgICAgICAgIHJlc3VsdCA9IGNlLl9aRVJPO1xuICAgICAgICBlbHNlIGlmIChuLmlzUG9zaXRpdmUpXG4gICAgICAgICAgcmVzdWx0ID0gY2UuX1BPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmVzdWx0ID0gY2UuX05FR0FUSVZFX0lORklOSVRZO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCAmJiBmbi5pc1B1cmUpXG4gICAgICAgIHJlc3VsdCA9IGNlLm11bChbY2UubnVtYmVyKHVwcGVyIC0gbG93ZXIgKyAxKSwgbl0pO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ID09PSBudWxsICYmIGlzRmluaXRlMikge1xuICAgICAgaWYgKGJpZ251bVByZWZlcnJlZChjZSkpIHtcbiAgICAgICAgbGV0IHN1bTIgPSBjZS5iaWdudW0oMCk7XG4gICAgICAgIGZvciAobGV0IGkgPSBsb3dlcjsgaSA8PSB1cHBlcjsgaSsrKSB7XG4gICAgICAgICAgY2Uuc2V0KHsgW2luZGV4XTogaSB9KTtcbiAgICAgICAgICBjb25zdCB0ZXJtID0gYXNCaWdudW0oZm4uTigpKTtcbiAgICAgICAgICBpZiAodGVybSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGVybS5pc0Zpbml0ZSgpKSB7XG4gICAgICAgICAgICBzdW0yID0gdGVybTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdW0yID0gc3VtMi5hZGQodGVybSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbClcbiAgICAgICAgICByZXN1bHQgPSBjZS5udW1iZXIoc3VtMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBudW1lcmljTW9kZSA9IGNlLm51bWVyaWNNb2RlO1xuICAgICAgICBjZS5udW1lcmljTW9kZSA9IFwibWFjaGluZVwiO1xuICAgICAgICBsZXQgc3VtMiA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSBsb3dlcjsgaSA8PSB1cHBlcjsgaSsrKSB7XG4gICAgICAgICAgY2Uuc2V0KHsgW2luZGV4XTogaSB9KTtcbiAgICAgICAgICBjb25zdCB0ZXJtID0gYXNGbG9hdChmbi5OKCkpO1xuICAgICAgICAgIGlmICh0ZXJtID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUodGVybSkpIHtcbiAgICAgICAgICAgIHN1bTIgPSB0ZXJtO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1bTIgKz0gdGVybTtcbiAgICAgICAgfVxuICAgICAgICBjZS5udW1lcmljTW9kZSA9IG51bWVyaWNNb2RlO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKVxuICAgICAgICAgIHJlc3VsdCA9IGNlLm51bWJlcihzdW0yKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgY2Uuc2V0KHsgW2luZGV4XTogMWUzIH0pO1xuICAgICAgY29uc3Qgbk1heCA9IGZuLk4oKTtcbiAgICAgIGNlLnNldCh7IFtpbmRleF06IDk5OSB9KTtcbiAgICAgIGNvbnN0IG5NYXhNaW51c09uZSA9IGZuLk4oKTtcbiAgICAgIGNvbnN0IHJhdGlvID0gYXNGbG9hdChjZS5kaXYobk1heCwgbk1heE1pbnVzT25lKS5OKCkpO1xuICAgICAgaWYgKHJhdGlvICE9PSBudWxsICYmIE51bWJlci5pc0Zpbml0ZShyYXRpbykgJiYgTWF0aC5hYnMocmF0aW8pID4gMSkge1xuICAgICAgICByZXN1bHQgPSBjZS5fUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgc3VtMiA9IDA7XG4gICAgICAgIGNvbnN0IG51bWVyaWNNb2RlID0gY2UubnVtZXJpY01vZGU7XG4gICAgICAgIGNlLm51bWVyaWNNb2RlID0gXCJtYWNoaW5lXCI7XG4gICAgICAgIGZvciAobGV0IGkgPSBsb3dlcjsgaSA8PSB1cHBlcjsgaSsrKSB7XG4gICAgICAgICAgY2Uuc2V0KHsgW2luZGV4XTogaSB9KTtcbiAgICAgICAgICBjb25zdCB0ZXJtID0gYXNGbG9hdChmbi5OKCkpO1xuICAgICAgICAgIGlmICh0ZXJtID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKE1hdGguYWJzKHRlcm0pIDwgTnVtYmVyLkVQU0lMT04gfHwgIU51bWJlci5pc0Zpbml0ZSh0ZXJtKSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIHN1bTIgKz0gdGVybTtcbiAgICAgICAgfVxuICAgICAgICBjZS5udW1lcmljTW9kZSA9IG51bWVyaWNNb2RlO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKVxuICAgICAgICAgIHJlc3VsdCA9IGNlLm51bWJlcihzdW0yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2UuY29udGV4dCA9IHNhdmVkQ29udGV4dDtcbiAgcmV0dXJuIHJlc3VsdCA/PyB2b2lkIDA7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9zeW1ib2xpYy9uZWdhdGUudHNcbnZhciBpbXBvcnRfY29tcGxleDkgPSBfX3RvRVNNKHJlcXVpcmVfY29tcGxleCgpKTtcbmZ1bmN0aW9uIG5lZ2F0ZUxpdGVyYWwoZXhwciwgbWV0YWRhdGEpIHtcbiAgbGV0IG4gPSBleHByLm51bWVyaWNWYWx1ZTtcbiAgaWYgKG4gPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0eXBlb2YgbiA9PT0gXCJudW1iZXJcIilcbiAgICBuID0gLW47XG4gIGVsc2UgaWYgKG4gaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpXG4gICAgbiA9IG4ubmVnKCk7XG4gIGVsc2UgaWYgKG4gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDkuQ29tcGxleClcbiAgICBuID0gbi5uZWcoKTtcbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShuKSlcbiAgICBuID0gbmVnKG4pO1xuICByZXR1cm4gZXhwci5lbmdpbmUubnVtYmVyKG4sIHsgbWV0YWRhdGEgfSk7XG59XG5mdW5jdGlvbiBjYW5vbmljYWxOZWdhdGUoZXhwciwgbWV0YWRhdGEpIHtcbiAgaWYgKGV4cHIuaGVhZCA9PT0gXCJOZWdhdGVcIilcbiAgICByZXR1cm4gZXhwci5vcDE7XG4gIGlmIChleHByLm51bWVyaWNWYWx1ZSAhPT0gbnVsbClcbiAgICByZXR1cm4gbmVnYXRlTGl0ZXJhbChleHByLCBtZXRhZGF0YSk7XG4gIGlmIChleHByLmhlYWQgPT09IFwiQWRkXCIpIHtcbiAgICBsZXQgb3BzMiA9IGV4cHIub3BzLm1hcCgoeCkgPT4gY2Fub25pY2FsTmVnYXRlKHgpKTtcbiAgICBvcHMyID0gZmxhdHRlbk9wcyhvcHMyLCBcIkFkZFwiKTtcbiAgICByZXR1cm4gZXhwci5lbmdpbmUuYWRkKG9wczIsIG1ldGFkYXRhKTtcbiAgfVxuICBpZiAoZXhwci5oZWFkID09PSBcIk11bHRpcGx5XCIpIHtcbiAgICByZXR1cm4gbmVnYXRlUHJvZHVjdChleHByLmVuZ2luZSwgZXhwci5vcHMpO1xuICB9XG4gIGlmIChleHByLmhlYWQgPT09IFwiRGl2aWRlXCIpXG4gICAgcmV0dXJuIGV4cHIuZW5naW5lLl9mbihcIkRpdmlkZVwiLCBbY2Fub25pY2FsTmVnYXRlKGV4cHIub3AxKSwgZXhwci5vcDJdKTtcbiAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KGV4cHIuaGVhZCAhPT0gXCJTdWJ0cmFjdFwiKTtcbiAgcmV0dXJuIGV4cHIuZW5naW5lLl9mbihcIk5lZ2F0ZVwiLCBbZXhwcl0sIG1ldGFkYXRhKTtcbn1cbmZ1bmN0aW9uIG5lZ2F0ZVByb2R1Y3QoY2UsIGFyZ3MpIHtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICBsZXQgZG9uZSA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgaWYgKCFkb25lICYmIGFyZy5oZWFkID09PSBcIk5lZ2F0ZVwiKSB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIHJlc3VsdC5wdXNoKGFyZy5vcDEpO1xuICAgIH0gZWxzZVxuICAgICAgcmVzdWx0LnB1c2goYXJnKTtcbiAgfVxuICBpZiAoZG9uZSlcbiAgICByZXR1cm4gY2UubXVsKHJlc3VsdCk7XG4gIHJlc3VsdCA9IFtdO1xuICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgaWYgKGRvbmUgfHwgYXJnLm51bWVyaWNWYWx1ZSA9PT0gbnVsbCB8fCAhYXJnLmlzSW50ZWdlcilcbiAgICAgIHJlc3VsdC5wdXNoKGFyZyk7XG4gICAgZWxzZSB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIHJlc3VsdC5wdXNoKGNhbm9uaWNhbE5lZ2F0ZShhcmcpKTtcbiAgICB9XG4gIH1cbiAgaWYgKGRvbmUpXG4gICAgcmV0dXJuIGNlLm11bChyZXN1bHQpO1xuICByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgIGlmIChkb25lIHx8IGFyZy5udW1lcmljVmFsdWUgPT09IG51bGwgfHwgIWFyZy5pc051bWJlcilcbiAgICAgIHJlc3VsdC5wdXNoKGFyZyk7XG4gICAgZWxzZSB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIHJlc3VsdC5wdXNoKGNhbm9uaWNhbE5lZ2F0ZShhcmcpKTtcbiAgICB9XG4gIH1cbiAgaWYgKGRvbmUpXG4gICAgcmV0dXJuIGNlLm11bChyZXN1bHQpO1xuICByZXR1cm4gY2UuX2ZuKFwiTmVnYXRlXCIsIFtjZS5fZm4oXCJNdWx0aXBseVwiLCBhcmdzKV0pO1xufVxuZnVuY3Rpb24gcHJvY2Vzc05lZ2F0ZShfY2UsIHgsIF9tb2RlID0gXCJzaW1wbGlmeVwiKSB7XG4gIHJldHVybiBjYW5vbmljYWxOZWdhdGUoeCk7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9zeW1ib2xpYy9leHBhbmQudHNcbmZ1bmN0aW9uIGRpc3RyaWJ1dGUyKGxocywgcmhzKSB7XG4gIGlmIChsaHMuaGVhZCA9PT0gXCJOZWdhdGVcIiAmJiByaHMuaGVhZCA9PT0gXCJOZWdhdGVcIilcbiAgICByZXR1cm4gZGlzdHJpYnV0ZTIobGhzLm9wMSwgcmhzLm9wMSk7XG4gIGlmIChsaHMuaGVhZCA9PT0gXCJOZWdhdGVcIilcbiAgICByZXR1cm4gY2Fub25pY2FsTmVnYXRlKGRpc3RyaWJ1dGUyKGxocy5vcDEsIHJocykpO1xuICBpZiAocmhzLmhlYWQgPT09IFwiTmVnYXRlXCIpXG4gICAgcmV0dXJuIGNhbm9uaWNhbE5lZ2F0ZShkaXN0cmlidXRlMihsaHMsIHJocy5vcDEpKTtcbiAgY29uc3QgY2UgPSBsaHMuZW5naW5lO1xuICBpZiAobGhzLmhlYWQgPT09IFwiRGl2aWRlXCIgJiYgcmhzLmhlYWQgPT09IFwiRGl2aWRlXCIpIHtcbiAgICBjb25zdCBkZW5vbSA9IGNlLm11bChbbGhzLm9wMiwgcmhzLm9wMl0pO1xuICAgIHJldHVybiBjZS5kaXYoZGlzdHJpYnV0ZTIobGhzLm9wMSwgcmhzLm9wMSksIGRlbm9tKTtcbiAgfVxuICBpZiAobGhzLmhlYWQgPT09IFwiRGl2aWRlXCIpXG4gICAgcmV0dXJuIGNlLmRpdihkaXN0cmlidXRlMihsaHMub3AxLCByaHMpLCBsaHMub3AyKTtcbiAgaWYgKHJocy5oZWFkID09PSBcIkRpdmlkZVwiKVxuICAgIHJldHVybiBjZS5kaXYoZGlzdHJpYnV0ZTIobGhzLCByaHMub3AxKSwgcmhzLm9wMik7XG4gIGlmIChsaHMuaGVhZCA9PT0gXCJBZGRcIilcbiAgICByZXR1cm4gY2UuYWRkKGxocy5vcHMubWFwKCh4KSA9PiBkaXN0cmlidXRlMih4LCByaHMpKSk7XG4gIGlmIChyaHMuaGVhZCA9PT0gXCJBZGRcIilcbiAgICByZXR1cm4gY2UuYWRkKHJocy5vcHMubWFwKCh4KSA9PiBkaXN0cmlidXRlMihsaHMsIHgpKSk7XG4gIHJldHVybiBjZS5tdWwoW2xocywgcmhzXSk7XG59XG5mdW5jdGlvbiBkaXN0cmlidXRlKGV4cHIpIHtcbiAgaWYgKGV4cHIubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiBleHByWzBdO1xuICBpZiAoZXhwci5sZW5ndGggPT09IDIpXG4gICAgcmV0dXJuIGRpc3RyaWJ1dGUyKGV4cHJbMF0sIGV4cHJbMV0pO1xuICByZXR1cm4gZGlzdHJpYnV0ZTIoZXhwclswXSwgZGlzdHJpYnV0ZShleHByLnNsaWNlKDEpKSk7XG59XG52YXIgYmlub21pYWxzID0gW1xuICBbMV0sXG4gIFsxLCAxXSxcbiAgWzEsIDIsIDFdLFxuICBbMSwgMywgMywgMV0sXG4gIFsxLCA0LCA2LCA0LCAxXSxcbiAgWzEsIDUsIDEwLCAxMCwgNSwgMV0sXG4gIFsxLCA2LCAxNSwgMjAsIDE1LCA2LCAxXSxcbiAgWzEsIDcsIDIxLCAzNSwgMzUsIDIxLCA3LCAxXSxcbiAgWzEsIDgsIDI4LCA1NiwgNzAsIDU2LCAyOCwgOCwgMV1cbl07XG5mdW5jdGlvbiBjaG9vc2Uobiwgaykge1xuICB3aGlsZSAobiA+PSBiaW5vbWlhbHMubGVuZ3RoKSB7XG4gICAgY29uc3QgcyA9IGJpbm9taWFscy5sZW5ndGg7XG4gICAgY29uc3QgbmV4dFJvdyA9IFsxXTtcbiAgICBjb25zdCBwcmV2ID0gYmlub21pYWxzW3MgLSAxXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHM7IGkrKylcbiAgICAgIG5leHRSb3dbaV0gPSBwcmV2W2kgLSAxXSArIHByZXZbaV07XG4gICAgbmV4dFJvd1tzXSA9IDE7XG4gICAgYmlub21pYWxzLnB1c2gobmV4dFJvdyk7XG4gIH1cbiAgcmV0dXJuIGJpbm9taWFsc1tuXVtrXTtcbn1cbmZ1bmN0aW9uIG11bHRpbm9taWFsQ29lZmZpY2llbnQoaykge1xuICBsZXQgbiA9IGsucmVkdWNlKChhY2MsIHYpID0+IGFjYyArIHYsIDApO1xuICBsZXQgcHJvZCA9IDE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgay5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHByb2QgKj0gY2hvb3NlKG4sIGtbaV0pO1xuICAgIG4gLT0ga1tpXTtcbiAgfVxuICByZXR1cm4gcHJvZDtcbn1cbmZ1bmN0aW9uKiBwb3dlcnMobiwgZXhwMikge1xuICBpZiAobiA9PT0gMSkge1xuICAgIHlpZWxkIFtleHAyXTtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gZXhwMjsgaSArPSAxKVxuICAgIGZvciAoY29uc3QgcCBvZiBwb3dlcnMobiAtIDEsIGV4cDIgLSBpKSlcbiAgICAgIHlpZWxkIFtpLCAuLi5wXTtcbn1cbmZ1bmN0aW9uIGV4cGFuZE11bHRpbm9taWFsKGV4cHIpIHtcbiAgaWYgKGV4cHIuaGVhZCAhPT0gXCJQb3dlclwiKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCBleHAyID0gYXNTbWFsbEludGVnZXIoZXhwci5vcDIpO1xuICBpZiAoZXhwMiA9PT0gbnVsbCB8fCBleHAyIDwgMClcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKGV4cDIgPT09IDApXG4gICAgcmV0dXJuIGV4cHIuZW5naW5lLl9PTkU7XG4gIGlmIChleHAyID09PSAxKVxuICAgIHJldHVybiBleHByLm9wMTtcbiAgY29uc3QgY2UgPSBleHByLmVuZ2luZTtcbiAgaWYgKGV4cHIub3AxLmhlYWQgPT09IFwiTmVnYXRlXCIpIHtcbiAgICBjb25zdCBzaWduMiA9IGV4cDIgJSAyID09PSAwID8gMSA6IC0xO1xuICAgIGNvbnN0IHJlc3VsdDIgPSBleHBhbmRNdWx0aW5vbWlhbChjZS5wb3coZXhwci5vcDEub3AxLCBleHByLm9wMikpO1xuICAgIGlmIChyZXN1bHQyID09PSBudWxsKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKHNpZ24yID4gMClcbiAgICAgIHJldHVybiByZXN1bHQyO1xuICAgIHJldHVybiBjZS5uZWcocmVzdWx0Mik7XG4gIH1cbiAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KGV4cHIub3AxLmhlYWQgIT09IFwiU3VidHJhY3RcIik7XG4gIGlmIChleHByLm9wMS5oZWFkICE9PSBcIkFkZFwiKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCB0ZXJtcyA9IGV4cHIub3AxLm9wcztcbiAgY29uc3QgaXQgPSBwb3dlcnModGVybXMubGVuZ3RoLCBleHAyKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgdmFsIG9mIGl0KSB7XG4gICAgY29uc3QgcHJvZHVjdCA9IFtjZS5udW1iZXIobXVsdGlub21pYWxDb2VmZmljaWVudCh2YWwpKV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh2YWxbaV0gIT09IDApIHtcbiAgICAgICAgaWYgKHZhbFtpXSA9PT0gMSlcbiAgICAgICAgICBwcm9kdWN0LnB1c2godGVybXNbaV0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcHJvZHVjdC5wdXNoKGNlLnBvdyh0ZXJtc1tpXSwgdmFsW2ldKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKGNlLm11bChwcm9kdWN0KSk7XG4gIH1cbiAgcmV0dXJuIGNlLmFkZChyZXN1bHQpO1xufVxuZnVuY3Rpb24gZXhwYW5kTnVtZXJhdG9yKGV4cHIpIHtcbiAgaWYgKGV4cHIuaGVhZCAhPT0gXCJEaXZpZGVcIilcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgZXhwYW5kZWROdW1lcmF0b3IgPSBleHBhbmQyKGV4cHIub3AxKTtcbiAgaWYgKGV4cGFuZGVkTnVtZXJhdG9yID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCBjZSA9IGV4cHIuZW5naW5lO1xuICBpZiAoZXhwYW5kZWROdW1lcmF0b3IuaGVhZCA9PT0gXCJBZGRcIikge1xuICAgIHJldHVybiBjZS5hZGQoZXhwYW5kZWROdW1lcmF0b3Iub3BzLm1hcCgoeCkgPT4gY2UuZGl2KHgsIGV4cHIub3AyKSkpO1xuICB9XG4gIHJldHVybiBleHByLmVuZ2luZS5kaXYoZXhwYW5kZWROdW1lcmF0b3IsIGV4cHIub3AyKTtcbn1cbmZ1bmN0aW9uIGV4cGFuZDIoZXhwcikge1xuICBpZiAoIWV4cHIpXG4gICAgcmV0dXJuIG51bGw7XG4gIGxldCByZXN1bHQgPSBleHBhbmROdW1lcmF0b3IoZXhwcik7XG4gIGlmIChyZXN1bHQgIT09IG51bGwpXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgaWYgKGV4cHIuaGVhZCA9PT0gXCJNdWx0aXBseVwiKSB7XG4gICAgcmVzdWx0ID0gZGlzdHJpYnV0ZShleHByLm9wcyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbClcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGV4cHIuaGVhZCA9PT0gXCJBZGRcIikge1xuICAgIGNvbnN0IG9wczIgPSBleHByLm9wcy5tYXAoKHgpID0+IGV4cGFuZDIoeCkgPz8geCk7XG4gICAgcmV0dXJuIHNpbXBsaWZ5QWRkKGV4cHIuZW5naW5lLCBvcHMyKTtcbiAgfVxuICBpZiAoZXhwci5oZWFkID09PSBcIk5lZ2F0ZVwiKSB7XG4gICAgcmVzdWx0ID0gZXhwYW5kMihleHByLm9wMSk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbClcbiAgICAgIHJldHVybiBleHByLmVuZ2luZS5uZWcocmVzdWx0KTtcbiAgfVxuICBpZiAoZXhwci5oZWFkID09PSBcIlBvd2VyXCIpIHtcbiAgICByZXN1bHQgPSBleHBhbmRNdWx0aW5vbWlhbChleHByKTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsKVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL3NvbHZlLnRzXG52YXIgVU5JVkFSSUFURV9ST09UUyA9IFtcbiAgLy8gYXggPSAwXG4gIFtbXCJNdWx0aXBseVwiLCBcIl94XCIsIFwiX2FcIl0sIDBdLFxuICAvLyB4ICsgYSA9IDBcbiAgW1xuICAgIFtcIkFkZFwiLCBcIl9hXCIsIFwiX3hcIl0sXG4gICAgW1wiTmVnYXRlXCIsIFwiX2FcIl1cbiAgXSxcbiAgW1tcIkFkZFwiLCBbXCJOZWdhdGVcIiwgXCJfeFwiXSwgXCJfYVwiXSwgXCJfYVwiXSxcbiAgLy8gYXggKyBiID0gMFxuICBbXG4gICAgW1wiQWRkXCIsIFtcIk11bHRpcGx5XCIsIFwiX3hcIiwgXCJfYVwiXSwgXCJfYlwiXSxcbiAgICBbXCJEaXZpZGVcIiwgW1wiTmVnYXRlXCIsIFwiX2JcIl0sIFwiX2FcIl1cbiAgXSxcbiAgLy8gUXVhZHJhdGljIGZvcm11bGEgKHJlYWwpXG4gIC8vIGF4XjIgKyBieCArIGMgPSAwXG4gIFtcbiAgICBbXG4gICAgICBcIkFkZFwiLFxuICAgICAgW1wiTXVsdGlwbHlcIiwgW1wiUG93ZXJcIiwgXCJfeFwiLCAyXSwgXCJfYVwiXSxcbiAgICAgIFtcIk11bHRpcGx5XCIsIFwiX3hcIiwgXCJfYlwiXSxcbiAgICAgIFwiX2NcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJEaXZpZGVcIixcbiAgICAgIFtcbiAgICAgICAgXCJBZGRcIixcbiAgICAgICAgW1wiTmVnYXRlXCIsIFwiX2JcIl0sXG4gICAgICAgIFtcIlNxcnRcIiwgW1wiU3VidHJhY3RcIiwgW1wiU3F1YXJlXCIsIFwiX2JcIl0sIFtcIk11bHRpcGx5XCIsIDQsIFwiX2FcIiwgXCJfY1wiXV1dXG4gICAgICBdLFxuICAgICAgW1wiTXVsdGlwbHlcIiwgMiwgXCJfYVwiXVxuICAgIF1cbiAgICAvLyAoX2NlLCB2YXJzKTogYm9vbGVhbiA9PiB2YXJzLnguaXNSZWFsID09PSB0cnVlLFxuICBdLFxuICBbXG4gICAgW1xuICAgICAgXCJBZGRcIixcbiAgICAgIFtcIk11bHRpcGx5XCIsIFtcIlBvd2VyXCIsIFwiX3hcIiwgMl0sIFwiX2FcIl0sXG4gICAgICBbXCJNdWx0aXBseVwiLCBcIl94XCIsIFwiX2JcIl0sXG4gICAgICBcIl9jXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiRGl2aWRlXCIsXG4gICAgICBbXG4gICAgICAgIFwiU3VidHJhY3RcIixcbiAgICAgICAgW1wiTmVnYXRlXCIsIFwiX2JcIl0sXG4gICAgICAgIFtcIlNxcnRcIiwgW1wiU3VidHJhY3RcIiwgW1wiU3F1YXJlXCIsIFwiX2JcIl0sIFtcIk11bHRpcGx5XCIsIDQsIFwiX2FcIiwgXCJfY1wiXV1dXG4gICAgICBdLFxuICAgICAgW1wiTXVsdGlwbHlcIiwgMiwgXCJfYVwiXVxuICAgIF1cbiAgICAvLyAoX2NlLCB2YXJzKTogYm9vbGVhbiA9PiB2YXJzLnguaXNSZWFsID09PSB0cnVlLFxuICBdLFxuICAvLyBheF4yICsgYnggPSAwXG4gIFtcbiAgICBbXCJBZGRcIiwgW1wiTXVsdGlwbHlcIiwgW1wiUG93ZXJcIiwgXCJfeFwiLCAyXSwgXCJfYVwiXSwgW1wiTXVsdGlwbHlcIiwgXCJfeFwiLCBcIl9iXCJdXSxcbiAgICAwXG4gICAgLy8gKF9jZSwgdmFycyk6IGJvb2xlYW4gPT4gdmFycy54LmlzUmVhbCA9PT0gdHJ1ZSxcbiAgXSxcbiAgW1xuICAgIFtcIkFkZFwiLCBbXCJNdWx0aXBseVwiLCBbXCJQb3dlclwiLCBcIl94XCIsIDJdLCBcIl9hXCJdLCBbXCJNdWx0aXBseVwiLCBcIl94XCIsIFwiX2JcIl1dLFxuICAgIFtcIkRpdmlkZVwiLCBbXCJOZWdhdGVcIiwgXCJfYlwiXSwgXCJfYVwiXVxuICAgIC8vIChfY2UsIHZhcnMpOiBib29sZWFuID0+IHZhcnMueC5pc1JlYWwgPT09IHRydWUsXG4gIF0sXG4gIC8vIGF4XjIgKyBiID0gMFxuICBbXG4gICAgW1wiQWRkXCIsIFtcIk11bHRpcGx5XCIsIFtcIlBvd2VyXCIsIFwiX3hcIiwgMl0sIFwiX2FcIl0sIFwiX2JcIl0sXG4gICAgW1wiU3FydFwiLCBbXCJEaXZpZGVcIiwgW1wiTmVnYXRlXCIsIFwiX2JcIl0sIFwiX2FcIl1dXG4gICAgLy8gKF9jZSwgdmFycyk6IGJvb2xlYW4gPT4gdmFycy54LmlzUmVhbCA9PT0gdHJ1ZSxcbiAgXSxcbiAgW1xuICAgIFtcIkFkZFwiLCBbXCJNdWx0aXBseVwiLCBbXCJQb3dlclwiLCBcIl94XCIsIDJdLCBcIl9hXCJdLCBcIl9iXCJdLFxuICAgIFtcIk5lZ2F0ZVwiLCBbXCJTcXJ0XCIsIFtcIkRpdmlkZVwiLCBbXCJOZWdhdGVcIiwgXCJfYlwiXSwgXCJfYVwiXV1dXG4gICAgLy8gKF9jZSwgdmFycyk6IGJvb2xlYW4gPT4gdmFycy54LmlzUmVhbCA9PT0gdHJ1ZSxcbiAgXVxuICAvLyBRdWFkcmF0aWMgZm9ybXVsYSAoY29tcGxleClcbiAgLy8gW1xuICAvLyAgICckYXheMiArIGJ4ICsgYyQnLFxuICAvLyAgIFtcbiAgLy8gICAgICckLVxcXFxmcmFje2J9ezJhfSAtIFxcXFxpbWFnaW5hcnlJIFxcXFxmcmFje1xcXFxzcXJ0ezRhYyAtIGJeMn19ezJhfSQnLFxuICAvLyAgICAgJyQtXFxcXGZyYWN7Yn17MmF9ICsgXFxcXGltYWdpbmFyeUkgXFxcXGZyYWN7XFxcXHNxcnR7NGFjIC0gYl4yfX17MmF9JCcsXG4gIC8vICAgXSxcbiAgLy8gICAoX2NlLCB2YXJzKTogYm9vbGVhbiA9PiB2YXJzLnguaXNJbWFnaW5hcnkgPT09IHRydWUsXG4gIC8vIF0sXG5dO1xuZnVuY3Rpb24gZmluZFVuaXZhcmlhdGVSb290cyhleHByLCB4KSB7XG4gIGNvbnN0IGNlID0gZXhwci5lbmdpbmU7XG4gIGlmIChleHByLmhlYWQgPT09IFwiRXF1YWxcIikge1xuICAgIGV4cHIgPSBjZS5hZGQoW2V4cHIub3AxLmNhbm9uaWNhbCwgY2UubmVnKGV4cHIub3AyLmNhbm9uaWNhbCldKS5zaW1wbGlmeSgpO1xuICB9XG4gIGNvbnN0IHJ1bGVzID0gY2UuY2FjaGUoXG4gICAgXCJ1bml2YXJpYXRlLXJvb3RzLXJ1bGVzXCIsXG4gICAgKCkgPT4gYm94UnVsZXMoY2UsIFVOSVZBUklBVEVfUk9PVFMpXG4gICk7XG4gIGxldCByZXN1bHQgPSBtYXRjaFJ1bGVzKFxuICAgIGV4cHIuc3Vicyh7IFt4XTogXCJfeFwiIH0sIHsgY2Fub25pY2FsOiBmYWxzZSB9KSxcbiAgICBydWxlcyxcbiAgICB7IF94OiBjZS5zeW1ib2woXCJfeFwiKSB9XG4gICk7XG4gIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc3QgZXhwYW5kZWRFeHByID0gZXhwYW5kMihleHByLmNhbm9uaWNhbCk7XG4gICAgaWYgKGV4cGFuZGVkRXhwciA9PT0gbnVsbClcbiAgICAgIHJldHVybiBbXTtcbiAgICByZXN1bHQgPSBtYXRjaFJ1bGVzKFxuICAgICAgZXhwYW5kZWRFeHByLnN1YnMoeyBbeF06IFwiX3hcIiB9LCB7IGNhbm9uaWNhbDogZmFsc2UgfSksXG4gICAgICBydWxlcyxcbiAgICAgIHtcbiAgICAgICAgX3g6IGNlLnN5bWJvbChcIl94XCIpXG4gICAgICB9XG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0Lm1hcCgoeDIpID0+IHgyLmNhbm9uaWNhbC5ldmFsdWF0ZSgpKTtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2Fzc3VtZS50c1xuZnVuY3Rpb24gYXNzdW1lKHByb3Bvc2l0aW9uKSB7XG4gIGlmIChwcm9wb3NpdGlvbi5oZWFkID09PSBcIkVsZW1lbnRcIilcbiAgICByZXR1cm4gYXNzdW1lRWxlbWVudChwcm9wb3NpdGlvbik7XG4gIGlmIChwcm9wb3NpdGlvbi5oZWFkID09PSBcIkVxdWFsXCIpXG4gICAgcmV0dXJuIGFzc3VtZUVxdWFsaXR5KHByb3Bvc2l0aW9uKTtcbiAgaWYgKGlzSW5lcXVhbGl0eShwcm9wb3NpdGlvbikpXG4gICAgcmV0dXJuIGFzc3VtZUluZXF1YWxpdHkocHJvcG9zaXRpb24pO1xuICByZXR1cm4gXCJub3QtYS1wcmVkaWNhdGVcIjtcbn1cbmZ1bmN0aW9uIGFzc3VtZUVxdWFsaXR5KHByb3Bvc2l0aW9uKSB7XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChwcm9wb3NpdGlvbi5oZWFkID09PSBcIkVxdWFsXCIpO1xuICBjb25zdCBmcmVlVmFycyA9IHByb3Bvc2l0aW9uLmZyZWVWYXJzO1xuICBpZiAoZnJlZVZhcnMubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc3QgdmFsID0gcHJvcG9zaXRpb24uZXZhbHVhdGUoKTtcbiAgICBpZiAodmFsLnN5bWJvbCA9PT0gXCJUcnVlXCIpXG4gICAgICByZXR1cm4gXCJ0YXV0b2xvZ3lcIjtcbiAgICBpZiAodmFsLnN5bWJvbCA9PT0gXCJGYWxzZVwiKVxuICAgICAgcmV0dXJuIFwiY29udHJhZGljdGlvblwiO1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmxvZyhwcm9wb3NpdGlvbi5jYW5vbmljYWwuZXZhbHVhdGUoKSk7XG4gICAgcmV0dXJuIFwibm90LWEtcHJlZGljYXRlXCI7XG4gIH1cbiAgY29uc3QgY2UgPSBwcm9wb3NpdGlvbi5lbmdpbmU7XG4gIGNvbnN0IGxocyA9IHByb3Bvc2l0aW9uLm9wMS5zeW1ib2w7XG4gIGlmIChsaHMgJiYgIWhhc1ZhbHVlKGNlLCBsaHMpICYmICFwcm9wb3NpdGlvbi5vcDIuaGFzKGxocykpIHtcbiAgICBjb25zdCB2YWwgPSBwcm9wb3NpdGlvbi5vcDIuZXZhbHVhdGUoKTtcbiAgICBpZiAoIXZhbC5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIFwibm90LWEtcHJlZGljYXRlXCI7XG4gICAgY29uc3QgZGVmID0gY2UubG9va3VwU3ltYm9sKGxocyk7XG4gICAgaWYgKCFkZWYpIHtcbiAgICAgIGNlLmRlZmluZVN5bWJvbChsaHMsIHsgdmFsdWU6IHZhbCB9KTtcbiAgICAgIHJldHVybiBcIm9rXCI7XG4gICAgfVxuICAgIGlmIChkZWYuZG9tYWluICYmICF2YWwuZG9tYWluLmlzQ29tcGF0aWJsZShkZWYuZG9tYWluKSlcbiAgICAgIHJldHVybiBcImNvbnRyYWRpY3Rpb25cIjtcbiAgICBkZWYudmFsdWUgPSB2YWw7XG4gICAgcmV0dXJuIFwib2tcIjtcbiAgfVxuICBpZiAoZnJlZVZhcnMubGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgbGhzMiA9IGZyZWVWYXJzWzBdO1xuICAgIGNvbnN0IHNvbHMgPSBmaW5kVW5pdmFyaWF0ZVJvb3RzKHByb3Bvc2l0aW9uLCBsaHMyKTtcbiAgICBpZiAoc29scy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNlLmFzc3VtcHRpb25zLnNldChcbiAgICAgICAgY2UuZm4oXCJFcXVhbFwiLCBbXG4gICAgICAgICAgY2UuYWRkKFtwcm9wb3NpdGlvbi5vcDEuY2Fub25pY2FsLCBjZS5uZWcocHJvcG9zaXRpb24ub3AyLmNhbm9uaWNhbCldKS5zaW1wbGlmeSgpLFxuICAgICAgICAgIDBcbiAgICAgICAgXSksXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHZhbCA9IHNvbHMubGVuZ3RoID09PSAxID8gc29sc1swXSA6IGNlLmZuKFwiTGlzdFwiLCBzb2xzKTtcbiAgICBjb25zdCBkZWYgPSBjZS5sb29rdXBTeW1ib2wobGhzMik7XG4gICAgaWYgKCFkZWYpIHtcbiAgICAgIGNlLmRlZmluZVN5bWJvbChsaHMyLCB7IHZhbHVlOiB2YWwgfSk7XG4gICAgICByZXR1cm4gXCJva1wiO1xuICAgIH1cbiAgICBpZiAoZGVmLmRvbWFpbiAmJiAhc29scy5ldmVyeSgoc29sKSA9PiB2YWwuZG9tYWluLmlzQ29tcGF0aWJsZShzb2wuZG9tYWluKSkpXG4gICAgICByZXR1cm4gXCJjb250cmFkaWN0aW9uXCI7XG4gICAgZGVmLnZhbHVlID0gdmFsO1xuICAgIHJldHVybiBcIm9rXCI7XG4gIH1cbiAgY2UuYXNzdW1wdGlvbnMuc2V0KHByb3Bvc2l0aW9uLCB0cnVlKTtcbiAgcmV0dXJuIFwib2tcIjtcbn1cbmZ1bmN0aW9uIGFzc3VtZUluZXF1YWxpdHkocHJvcG9zaXRpb24pIHtcbiAgY29uc3QgY2UgPSBwcm9wb3NpdGlvbi5lbmdpbmU7XG4gIGlmIChwcm9wb3NpdGlvbi5vcDEuc3ltYm9sICYmICFoYXNEZWYoY2UsIHByb3Bvc2l0aW9uLm9wMS5zeW1ib2wpKSB7XG4gICAgaWYgKHByb3Bvc2l0aW9uLm9wMi5ldmFsdWF0ZSgpLmlzWmVybykge1xuICAgICAgaWYgKHByb3Bvc2l0aW9uLmhlYWQgPT09IFwiTGVzc1wiKSB7XG4gICAgICAgIGNlLmRlZmluZVN5bWJvbChwcm9wb3NpdGlvbi5vcDEuc3ltYm9sLCB7XG4gICAgICAgICAgZG9tYWluOiBjZS5kb21haW4oXCJOZWdhdGl2ZU51bWJlclwiKVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcG9zaXRpb24uaGVhZCA9PT0gXCJMZXNzRXF1YWxcIikge1xuICAgICAgICBjZS5kZWZpbmVTeW1ib2wocHJvcG9zaXRpb24ub3AxLnN5bWJvbCwge1xuICAgICAgICAgIGRvbWFpbjogY2UuZG9tYWluKFwiTm9uUG9zaXRpdmVOdW1iZXJcIilcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHByb3Bvc2l0aW9uLmhlYWQgPT09IFwiR3JlYXRlclwiKSB7XG4gICAgICAgIGNlLmRlZmluZVN5bWJvbChwcm9wb3NpdGlvbi5vcDEuc3ltYm9sLCB7XG4gICAgICAgICAgZG9tYWluOiBjZS5kb21haW4oXCJQb3NpdGl2ZU51bWJlclwiKVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcG9zaXRpb24uaGVhZCA9PT0gXCJHcmVhdGVyRXF1YWxcIikge1xuICAgICAgICBjZS5kZWZpbmVTeW1ib2wocHJvcG9zaXRpb24ub3AxLnN5bWJvbCwge1xuICAgICAgICAgIGRvbWFpbjogY2UuZG9tYWluKFwiTm9uTmVnYXRpdmVOdW1iZXJcIilcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNlLmRlZmluZVN5bWJvbChwcm9wb3NpdGlvbi5vcDEuc3ltYm9sLCB7XG4gICAgICAgIGRvbWFpbjogY2UuZG9tYWluKFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCIpXG4gICAgICB9KTtcbiAgICAgIGNlLmFzc3VtcHRpb25zLnNldChwcm9wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBcIm9rXCI7XG4gIH1cbiAgbGV0IG9wMyA9IFwiXCI7XG4gIGxldCBsaHM7XG4gIGxldCByaHM7XG4gIGlmIChwcm9wb3NpdGlvbi5oZWFkID09PSBcIkxlc3NcIikge1xuICAgIGxocyA9IHByb3Bvc2l0aW9uLm9wMTtcbiAgICByaHMgPSBwcm9wb3NpdGlvbi5vcDI7XG4gICAgb3AzID0gXCI8XCI7XG4gIH0gZWxzZSBpZiAocHJvcG9zaXRpb24uaGVhZCA9PT0gXCJMZXNzRXF1YWxcIikge1xuICAgIGxocyA9IHByb3Bvc2l0aW9uLm9wMTtcbiAgICByaHMgPSBwcm9wb3NpdGlvbi5vcDI7XG4gICAgb3AzID0gXCI8PVwiO1xuICB9IGVsc2UgaWYgKHByb3Bvc2l0aW9uLmhlYWQgPT09IFwiR3JlYXRlclwiKSB7XG4gICAgbGhzID0gcHJvcG9zaXRpb24ub3AyO1xuICAgIHJocyA9IHByb3Bvc2l0aW9uLm9wMTtcbiAgICBvcDMgPSBcIjxcIjtcbiAgfSBlbHNlIGlmIChwcm9wb3NpdGlvbi5oZWFkID09PSBcIkdyZWF0ZXJFcXVhbFwiKSB7XG4gICAgbGhzID0gcHJvcG9zaXRpb24ub3AyO1xuICAgIHJocyA9IHByb3Bvc2l0aW9uLm9wMTtcbiAgICBvcDMgPSBcIjw9XCI7XG4gIH1cbiAgaWYgKCFvcDMpXG4gICAgcmV0dXJuIFwiaW50ZXJuYWwtZXJyb3JcIjtcbiAgY29uc3QgcCA9IGNlLmFkZChbbGhzLmNhbm9uaWNhbCwgY2UubmVnKHJocy5jYW5vbmljYWwpXSkuc2ltcGxpZnkoKTtcbiAgY29uc3QgcmVzdWx0ID0gY2UuYm94KFtvcDMgPT09IFwiPFwiID8gXCJMZXNzXCIgOiBcIkxlc3NFcXVhbFwiLCBwLCAwXSkuZXZhbHVhdGUoKTtcbiAgaWYgKHJlc3VsdC5zeW1ib2wgPT09IFwiVHJ1ZVwiKVxuICAgIHJldHVybiBcInRhdXRvbG9neVwiO1xuICBpZiAocmVzdWx0LnN5bWJvbCA9PT0gXCJGYWxzZVwiKVxuICAgIHJldHVybiBcImNvbnRyYWRpY3Rpb25cIjtcbiAgY29uc3QgZnJlZVZhcnMgPSByZXN1bHQuZnJlZVZhcnM7XG4gIGlmIChmcmVlVmFycy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFwibm90LWEtcHJlZGljYXRlXCI7XG4gIGlmIChmcmVlVmFycy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoIWNlLmxvb2t1cFN5bWJvbChmcmVlVmFyc1swXSkpXG4gICAgICBjZS5kZWZpbmVTeW1ib2woZnJlZVZhcnNbMF0sIHsgZG9tYWluOiBcIkV4dGVuZGVkUmVhbE51bWJlclwiIH0pO1xuICB9XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChyZXN1bHQuaGVhZCA9PT0gXCJMZXNzXCIgfHwgcmVzdWx0LmhlYWQgPT09IFwiTGVzc0VxdWFsXCIpO1xuICBjZS5hc3N1bXB0aW9ucy5zZXQocmVzdWx0LCB0cnVlKTtcbiAgcmV0dXJuIFwib2tcIjtcbn1cbmZ1bmN0aW9uIGFzc3VtZUVsZW1lbnQocHJvcG9zaXRpb24pIHtcbiAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KHByb3Bvc2l0aW9uLmhlYWQgPT09IFwiRWxlbWVudFwiKTtcbiAgY29uc3QgY2UgPSBwcm9wb3NpdGlvbi5lbmdpbmU7XG4gIGNvbnN0IHVuZGVmcyA9IHVuZGVmaW5lZElkZW50aWZpZXJzKHByb3Bvc2l0aW9uLm9wMSk7XG4gIGlmICh1bmRlZnMubGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgZG9tID0gY2UuZG9tYWluKHByb3Bvc2l0aW9uLm9wMi5ldmFsdWF0ZSgpLmpzb24pO1xuICAgIGlmICghZG9tLmlzVmFsaWQpXG4gICAgICByZXR1cm4gXCJub3QtYS1wcmVkaWNhdGVcIjtcbiAgICBpZiAoZG9tLmlzQ29tcGF0aWJsZShcIkZ1bmN0aW9uXCIpKVxuICAgICAgY2UuZGVmaW5lRnVuY3Rpb24odW5kZWZzWzBdLCB7IHNpZ25hdHVyZTogeyBkb21haW46IFwiRnVuY3Rpb25cIiB9IH0pO1xuICAgIGVsc2VcbiAgICAgIGNlLmRlZmluZVN5bWJvbCh1bmRlZnNbMF0sIHsgZG9tYWluOiBkb20gfSk7XG4gICAgcmV0dXJuIFwib2tcIjtcbiAgfVxuICBpZiAocHJvcG9zaXRpb24ub3AxLnN5bWJvbCAmJiBoYXNEZWYoY2UsIHByb3Bvc2l0aW9uLm9wMS5zeW1ib2wpKSB7XG4gICAgY29uc3QgZG9tID0gY2UuZG9tYWluKHByb3Bvc2l0aW9uLm9wMi5ldmFsdWF0ZSgpLmpzb24pO1xuICAgIGlmICghZG9tLmlzVmFsaWQpXG4gICAgICByZXR1cm4gXCJub3QtYS1wcmVkaWNhdGVcIjtcbiAgICBjb25zdCBkZWYgPSBjZS5sb29rdXBTeW1ib2wocHJvcG9zaXRpb24ub3AxLnN5bWJvbCk7XG4gICAgaWYgKGRlZikge1xuICAgICAgaWYgKGRlZi5kb21haW4gJiYgIWRvbS5pc0NvbXBhdGlibGUoZGVmLmRvbWFpbikpXG4gICAgICAgIHJldHVybiBcImNvbnRyYWRpY3Rpb25cIjtcbiAgICAgIGRlZi5kb21haW4gPSBkb207XG4gICAgICByZXR1cm4gXCJva1wiO1xuICAgIH1cbiAgICBjb25zdCBmZGVmID0gY2UubG9va3VwRnVuY3Rpb24ocHJvcG9zaXRpb24ub3AxLnN5bWJvbCk7XG4gICAgaWYgKGZkZWY/LnNpZ25hdHVyZT8uZG9tYWluKSB7XG4gICAgICBpZiAoIWRvbS5pc0NvbXBhdGlibGUoZmRlZi5zaWduYXR1cmUuZG9tYWluKSlcbiAgICAgICAgcmV0dXJuIFwiY29udHJhZGljdGlvblwiO1xuICAgICAgaWYgKGRvbS5pc0NvbXBhdGlibGUoZmRlZi5zaWduYXR1cmUuZG9tYWluLCBcImJpdmFyaWFudFwiKSlcbiAgICAgICAgcmV0dXJuIFwidGF1dG9sb2d5XCI7XG4gICAgICByZXR1cm4gXCJub3QtYS1wcmVkaWNhdGVcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwib2tcIjtcbiAgfVxuICBpZiAodW5kZWZzLmxlbmd0aCA+IDApIHtcbiAgICBjZS5hc3N1bXB0aW9ucy5zZXQocHJvcG9zaXRpb24sIHRydWUpO1xuICAgIHJldHVybiBcIm9rXCI7XG4gIH1cbiAgY29uc3QgdmFsID0gcHJvcG9zaXRpb24uZXZhbHVhdGUoKTtcbiAgaWYgKHZhbC5zeW1ib2wgPT09IFwiVHJ1ZVwiKVxuICAgIHJldHVybiBcInRhdXRvbG9neVwiO1xuICBpZiAodmFsLnN5bWJvbCA9PT0gXCJGYWxzZVwiKVxuICAgIHJldHVybiBcImNvbnRyYWRpY3Rpb25cIjtcbiAgcmV0dXJuIFwibm90LWEtcHJlZGljYXRlXCI7XG59XG5mdW5jdGlvbiBoYXNEZWYoY2UsIHMpIHtcbiAgcmV0dXJuIChjZS5sb29rdXBTeW1ib2wocykgPz8gY2UubG9va3VwRnVuY3Rpb24ocykpICE9PSB2b2lkIDA7XG59XG5mdW5jdGlvbiB1bmRlZmluZWRJZGVudGlmaWVycyhleHByKSB7XG4gIHJldHVybiBleHByLnN5bWJvbHMuZmlsdGVyKCh4KSA9PiAhaGFzRGVmKGV4cHIuZW5naW5lLCB4KSk7XG59XG5mdW5jdGlvbiBoYXNWYWx1ZShjZSwgcykge1xuICBpZiAoY2UubG9va3VwRnVuY3Rpb24ocykpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gY2UubG9va3VwU3ltYm9sKHMpPy52YWx1ZSAhPT0gdm9pZCAwO1xufVxuZnVuY3Rpb24gaXNJbmVxdWFsaXR5KGV4cHIpIHtcbiAgY29uc3QgaCA9IGV4cHIuaGVhZDtcbiAgaWYgKHR5cGVvZiBoICE9PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFtcIkxlc3NcIiwgXCJHcmVhdGVyXCIsIFwiTGVzc0VxdWFsXCIsIFwiR3JlYXRlckVxdWFsXCJdLmluY2x1ZGVzKGgpO1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvYm94ZWQtZXhwcmVzc2lvbi9ib3gudHNcbnZhciBpbXBvcnRfY29tcGxleDEzID0gX190b0VTTShyZXF1aXJlX2NvbXBsZXgoKSk7XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL2JveGVkLWRpY3Rpb25hcnkudHNcbnZhciBCb3hlZERpY3Rpb25hcnkgPSBjbGFzcyBfQm94ZWREaWN0aW9uYXJ5IGV4dGVuZHMgQWJzdHJhY3RCb3hlZEV4cHJlc3Npb24ge1xuICBjb25zdHJ1Y3RvcihjZSwgZGljdCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPz8gKG9wdGlvbnMgPSB7fSk7XG4gICAgc3VwZXIoY2UsIG9wdGlvbnMubWV0YWRhdGEpO1xuICAgIHRoaXMuX3ZhbHVlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBjb25zdCBjYW5vbmljYWwyID0gb3B0aW9ucy5jYW5vbmljYWwgPz8gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkaWN0KSlcbiAgICAgIHRoaXMuX3ZhbHVlLnNldChrZXksIGNlLmJveChkaWN0W2tleV0sIHsgY2Fub25pY2FsOiBjYW5vbmljYWwyIH0pKTtcbiAgICBjZS5fcmVnaXN0ZXIodGhpcyk7XG4gIH1cbiAgdW5iaW5kKCkge1xuICAgIGZvciAoY29uc3QgW19rLCB2XSBvZiB0aGlzLl92YWx1ZSlcbiAgICAgIHYudW5iaW5kKCk7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBnZXQgaGFzaCgpIHtcbiAgICBsZXQgaCA9IGhhc2hDb2RlKFwiRGljdGlvbmFyeVwiKTtcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiB0aGlzLl92YWx1ZSlcbiAgICAgIGggXj0gaGFzaENvZGUoaykgXiB2Lmhhc2g7XG4gICAgcmV0dXJuIGg7XG4gIH1cbiAgZ2V0IGNvbXBsZXhpdHkoKSB7XG4gICAgcmV0dXJuIDk3O1xuICB9XG4gIGdldCBoZWFkKCkge1xuICAgIHJldHVybiBcIkRpY3Rpb25hcnlcIjtcbiAgfVxuICBnZXQgaXNQdXJlKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBnZXRLZXkoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmdldChrZXkpO1xuICB9XG4gIGhhc0tleShrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUuaGFzKGtleSk7XG4gIH1cbiAgZ2V0IGtleXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmtleXMoKTtcbiAgfVxuICBnZXQga2V5c0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS5zaXplO1xuICB9XG4gIGhhcyh4KSB7XG4gICAgZm9yIChjb25zdCBbX2ssIHZdIG9mIHRoaXMuX3ZhbHVlKVxuICAgICAgaWYgKHYuaGFzKHgpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0IGRvbWFpbigpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXCJEaWN0aW9uYXJ5XCJdO1xuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHRoaXMuX3ZhbHVlKVxuICAgICAgcmVzdWx0LnB1c2goW1wiVHVwbGVcIiwgaywgdi5kb21haW5dKTtcbiAgICByZXR1cm4gdGhpcy5lbmdpbmUuZG9tYWluKHJlc3VsdCk7XG4gIH1cbiAgZ2V0IGpzb24oKSB7XG4gICAgaWYgKHRoaXMuZW5naW5lLmpzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5zaG9ydGhhbmRzLmluY2x1ZGVzKFwiZGljdGlvbmFyeVwiKSkge1xuICAgICAgY29uc3QgZGljdCA9IHt9O1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5fdmFsdWUua2V5cygpKVxuICAgICAgICBkaWN0W2tleV0gPSB0aGlzLl92YWx1ZS5nZXQoa2V5KS5qc29uO1xuICAgICAgcmV0dXJuIHsgZGljdCB9O1xuICAgIH1cbiAgICBjb25zdCBrdnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLl92YWx1ZS5rZXlzKCkpXG4gICAgICBrdnMucHVzaChcbiAgICAgICAgdGhpcy5lbmdpbmUuX2ZuKFwiS2V5VmFsdWVQYWlyXCIsIFtcbiAgICAgICAgICB0aGlzLmVuZ2luZS5zdHJpbmcoa2V5KSxcbiAgICAgICAgICB0aGlzLl92YWx1ZS5nZXQoa2V5KVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKHRoaXMuZW5naW5lLCBcIkRpY3Rpb25hcnlcIiwga3ZzLCB7XG4gICAgICBsYXRleDogdGhpcy5fbGF0ZXhcbiAgICB9KTtcbiAgfVxuICAvKiogU3RydWN0dXJhbCBlcXVhbGl0eSAqL1xuICBpc1NhbWUocmhzKSB7XG4gICAgaWYgKHRoaXMgPT09IHJocylcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICghKHJocyBpbnN0YW5jZW9mIF9Cb3hlZERpY3Rpb25hcnkpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0aGlzLl92YWx1ZS5zaXplICE9PSByaHMuX3ZhbHVlLnNpemUpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgdGhpcy5fdmFsdWUpIHtcbiAgICAgIGNvbnN0IHJoc1YgPSByaHMuZ2V0S2V5KGspO1xuICAgICAgaWYgKCFyaHNWIHx8ICF2LmlzU2FtZShyaHNWKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBtYXRjaChyaHMsIF9vcHRpb25zKSB7XG4gICAgaWYgKCEocmhzIGluc3RhbmNlb2YgX0JveGVkRGljdGlvbmFyeSkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpZiAodGhpcy5fdmFsdWUuc2l6ZSAhPT0gcmhzLl92YWx1ZS5zaXplKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHRoaXMuX3ZhbHVlKSB7XG4gICAgICBjb25zdCByaHNWID0gcmhzLmdldEtleShrKTtcbiAgICAgIGlmICghcmhzVilcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBjb25zdCBtID0gdi5tYXRjaChyaHNWKTtcbiAgICAgIGlmIChtID09PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIHJlc3VsdCA9IHsgLi4ucmVzdWx0LCAuLi5tIH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqIE1hdGhlbWF0aWNhbCBlcXVhbGl0eSAqL1xuICBpc0VxdWFsKHJocykge1xuICAgIGlmICh0aGlzID09PSByaHMpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoIShyaHMgaW5zdGFuY2VvZiBfQm94ZWREaWN0aW9uYXJ5KSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIXJocy5rZXlzIHx8IHRoaXMuX3ZhbHVlLnNpemUgIT09IHJocy5fdmFsdWUuc2l6ZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiB0aGlzLl92YWx1ZSkge1xuICAgICAgY29uc3QgcmhzViA9IHJocy5nZXRLZXkoayk7XG4gICAgICBpZiAoIXJoc1YgfHwgIXYuaXNFcXVhbChyaHNWKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhcHBseShmbiwgaGVhZDIpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmtleXMpXG4gICAgICByZXN1bHRba2V5XSA9IHRoaXMuZW5naW5lLmJveChmbih0aGlzLmdldEtleShrZXkpKSk7XG4gICAgaWYgKGhlYWQyKVxuICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLmZuKGhlYWQyLCBbeyBkaWN0OiByZXN1bHQgfV0pO1xuICAgIHJldHVybiBuZXcgX0JveGVkRGljdGlvbmFyeSh0aGlzLmVuZ2luZSwgcmVzdWx0KTtcbiAgfVxuICBldmFsdWF0ZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwbHkoKHgpID0+IHguZXZhbHVhdGUob3B0aW9ucykgPz8geCk7XG4gIH1cbiAgZ2V0IGlzQ2Fub25pY2FsKCkge1xuICAgIHJldHVybiB0aGlzLl9pc0Nhbm9uaWNhbDtcbiAgfVxuICBzZXQgaXNDYW5vbmljYWwodmFsKSB7XG4gICAgdGhpcy5faXNDYW5vbmljYWwgPSB2YWw7XG4gIH1cbiAgZ2V0IGNhbm9uaWNhbCgpIHtcbiAgICBpZiAodGhpcy5pc0Nhbm9uaWNhbClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYXBwbHkoKHgpID0+IHguY2Fub25pY2FsKTtcbiAgICByZXN1bHQuaXNDYW5vbmljYWwgPSB0cnVlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgc2ltcGxpZnkob3B0aW9ucykge1xuICAgIGlmICghKG9wdGlvbnM/LnJlY3Vyc2l2ZSA/PyB0cnVlKSlcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIHJldHVybiB0aGlzLmFwcGx5KCh4KSA9PiB4LnNpbXBsaWZ5KG9wdGlvbnMpID8/IHgpO1xuICB9XG4gIE4ob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmFwcGx5KCh4KSA9PiB4Lk4ob3B0aW9ucykpO1xuICB9XG4gIHJlcGxhY2UocnVsZXMsIG9wdGlvbnMpIHtcbiAgICBsZXQgY2hhbmdlQ291bnQgPSAwO1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMua2V5cykge1xuICAgICAgY29uc3QgdmFsID0gdGhpcy5nZXRLZXkoa2V5KTtcbiAgICAgIGNvbnN0IG5ld1ZhbCA9IHZhbC5yZXBsYWNlKHJ1bGVzLCBvcHRpb25zKTtcbiAgICAgIGlmIChuZXdWYWwgIT09IG51bGwpXG4gICAgICAgIGNoYW5nZUNvdW50ICs9IDE7XG4gICAgICByZXN1bHRba2V5XSA9IG5ld1ZhbCA/PyB2YWw7XG4gICAgfVxuICAgIHJldHVybiBjaGFuZ2VDb3VudCA9PT0gMCA/IG51bGwgOiBuZXcgX0JveGVkRGljdGlvbmFyeSh0aGlzLmVuZ2luZSwgcmVzdWx0KTtcbiAgfVxuICBzdWJzKHN1YjIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmtleXMpXG4gICAgICByZXN1bHRba2V5XSA9IHRoaXMuZ2V0S2V5KGtleSkuc3VicyhzdWIyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gbmV3IF9Cb3hlZERpY3Rpb25hcnkodGhpcy5lbmdpbmUsIHJlc3VsdCwgb3B0aW9ucyk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL2JveGVkLWZ1bmN0aW9uLnRzXG52YXIgaW1wb3J0X2NvbXBsZXgxMCA9IF9fdG9FU00ocmVxdWlyZV9jb21wbGV4KCkpO1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvc2ltcGxpZnktcnVsZXMudHNcbnZhciBTSU1QTElGWV9SVUxFUyA9IFtdO1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvYm94ZWQtZXhwcmVzc2lvbi9ib3hlZC1mdW5jdGlvbi50c1xuZnVuY3Rpb24gY2hlYXBlc3Qob2xkRXhwciwgbmV3RXhwcikge1xuICBpZiAobmV3RXhwciA9PT0gbnVsbCB8fCBuZXdFeHByID09PSB2b2lkIDApXG4gICAgcmV0dXJuIG9sZEV4cHI7XG4gIGlmIChvbGRFeHByID09PSBuZXdFeHByKVxuICAgIHJldHVybiBvbGRFeHByO1xuICBjb25zdCBjZSA9IG9sZEV4cHIuZW5naW5lO1xuICBjb25zdCBib3hlZE5ld0V4cHIgPSBjZS5ib3gobmV3RXhwcik7XG4gIGlmIChjZS5jb3N0RnVuY3Rpb24oYm94ZWROZXdFeHByKSA8PSAxLjIgKiBjZS5jb3N0RnVuY3Rpb24ob2xkRXhwcikpIHtcbiAgICByZXR1cm4gYm94ZWROZXdFeHByO1xuICB9XG4gIHJldHVybiBvbGRFeHByO1xufVxudmFyIEJveGVkRnVuY3Rpb24gPSBjbGFzcyBfQm94ZWRGdW5jdGlvbiBleHRlbmRzIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY2UsIGhlYWQyLCBvcHMyLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA/PyAob3B0aW9ucyA9IHt9KTtcbiAgICBvcHRpb25zLmNhbm9uaWNhbCA/PyAob3B0aW9ucy5jYW5vbmljYWwgPSBmYWxzZSk7XG4gICAgc3VwZXIoY2UsIG9wdGlvbnMubWV0YWRhdGEpO1xuICAgIHRoaXMuX3Njb3BlID0gY2UuY29udGV4dDtcbiAgICB0aGlzLl9oZWFkID0gaGVhZDI7XG4gICAgdGhpcy5fb3BzID0gb3BzMjtcbiAgICB0aGlzLl9kZWYgPSBvcHRpb25zLmRlZiA/PyBudWxsO1xuICAgIGlmIChvcHRpb25zLmNhbm9uaWNhbCkge1xuICAgICAgaWYgKCF0aGlzLl9kZWYpXG4gICAgICAgIHRoaXMuX2RlZiA9IGNlLmxvb2t1cEZ1bmN0aW9uKGhlYWQyLCBjZS5jb250ZXh0KTtcbiAgICAgIHRoaXMuX2Nhbm9uaWNhbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NvZG9tYWluID0gbnVsbDtcbiAgICBpZiAoIW9wdGlvbnMuY2Fub25pY2FsKSB7XG4gICAgICB0aGlzLl9jb2RvbWFpbiA9IGNlLmRvbWFpbihcIkFueXRoaW5nXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuX2hlYWQgIT09IFwic3RyaW5nXCIpXG4gICAgICAgIHRoaXMuX2NvZG9tYWluID0gdGhpcy5faGVhZC5kb21haW4uY29kb21haW47XG4gICAgICBlbHNlIGlmICh0aGlzLl9kZWYpIHtcbiAgICAgICAgY29uc3Qgc2lnID0gdGhpcy5fZGVmLnNpZ25hdHVyZTtcbiAgICAgICAgaWYgKHR5cGVvZiBzaWcuY29kb21haW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRoaXMuX2NvZG9tYWluID0gc2lnLmNvZG9tYWluKGNlLCB0aGlzLl9vcHMpID8/IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fY29kb21haW4gPSBzaWcuY29kb21haW4gPz8gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9jb2RvbWFpbilcbiAgICAgICAgdGhpcy5fY29kb21haW4gPSBjZS5kZWZhdWx0RG9tYWluID8/IGNlLmRvbWFpbihcIlZvaWRcIik7XG4gICAgfVxuICAgIGNlLl9yZWdpc3Rlcih0aGlzKTtcbiAgfVxuICAvL1xuICAvLyBOT04tQ0FOT05JQ0FMIE9SIENBTk9OSUNBTCBPUEVSQVRJT05TXG4gIC8vXG4gIC8vIFRob3NlIG9wZXJhdGlvbnMvcHJvcGVydGllcyBjYW4gYmUgYXBwbGllZCB0byBhIGNhbm9uaWNhbCBvclxuICAvLyBub24tY2Fub25pY2FsIGV4cHJlc3Npb25cbiAgLy9cbiAgZ2V0IGhhc2goKSB7XG4gICAgaWYgKHRoaXMuX2hhc2ggIT09IHZvaWQgMClcbiAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuICAgIGxldCBoID0gMDtcbiAgICBmb3IgKGNvbnN0IG9wMyBvZiB0aGlzLl9vcHMpXG4gICAgICBoID0gaCA8PCAxIF4gb3AzLmhhc2ggfCAwO1xuICAgIGlmICh0eXBlb2YgdGhpcy5faGVhZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgIGggPSBoIF4gaGFzaENvZGUodGhpcy5faGVhZCkgfCAwO1xuICAgIGVsc2VcbiAgICAgIGggPSBoIF4gdGhpcy5faGVhZC5oYXNoIHwgMDtcbiAgICB0aGlzLl9oYXNoID0gaDtcbiAgICByZXR1cm4gaDtcbiAgfVxuICBnZXQgaXNDYW5vbmljYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nhbm9uaWNhbCA9PT0gdGhpcztcbiAgfVxuICBzZXQgaXNDYW5vbmljYWwodmFsKSB7XG4gICAgdGhpcy5fY2Fub25pY2FsID0gdmFsID8gdGhpcyA6IHZvaWQgMDtcbiAgfVxuICBnZXQgaXNQdXJlKCkge1xuICAgIGlmICh0aGlzLl9pc1B1cmUgIT09IHZvaWQgMClcbiAgICAgIHJldHVybiB0aGlzLl9pc1B1cmU7XG4gICAgaWYgKCF0aGlzLmlzQ2Fub25pY2FsKSB7XG4gICAgICB0aGlzLl9pc1B1cmUgPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IHZvaWQgMDtcbiAgICBpZiAodGhpcy5mdW5jdGlvbkRlZmluaXRpb24/LnB1cmUgIT09IHZvaWQgMClcbiAgICAgIHJlc3VsdCA9IHRoaXMuZnVuY3Rpb25EZWZpbml0aW9uLnB1cmU7XG4gICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpXG4gICAgICByZXN1bHQgPSB0aGlzLl9vcHMuZXZlcnkoKHgpID0+IHguaXNQdXJlKTtcbiAgICB0aGlzLl9pc1B1cmUgPSByZXN1bHQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBnZXQganNvbigpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkICYmIHRoaXMuX2Nhbm9uaWNhbCA9PT0gdGhpcylcbiAgICAgIHJldHVybiBzZXJpYWxpemVKc29uQ2Fub25pY2FsRnVuY3Rpb24oXG4gICAgICAgIHRoaXMuZW5naW5lLFxuICAgICAgICB0aGlzLl9oZWFkLFxuICAgICAgICB0aGlzLl9vcHMsXG4gICAgICAgIHsgbGF0ZXg6IHRoaXMuX2xhdGV4LCB3aWtpZGF0YTogdGhpcy5fd2lraWRhdGEgfVxuICAgICAgKTtcbiAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKHRoaXMuZW5naW5lLCB0aGlzLl9oZWFkLCB0aGlzLl9vcHMsIHtcbiAgICAgIGxhdGV4OiB0aGlzLl9sYXRleCxcbiAgICAgIHdpa2lkYXRhOiB0aGlzLl93aWtpZGF0YVxuICAgIH0pO1xuICB9XG4gIGdldCByYXdKc29uKCkge1xuICAgIGNvbnN0IGhlYWQyID0gdHlwZW9mIHRoaXMuX2hlYWQgPT09IFwic3RyaW5nXCIgPyB0aGlzLl9oZWFkIDogdGhpcy5faGVhZC5qc29uO1xuICAgIHJldHVybiBbaGVhZDIsIC4uLnRoaXMub3BzLm1hcCgoeCkgPT4geC5yYXdKc29uKV07XG4gIH1cbiAgZ2V0IHNjb3BlKCkge1xuICAgIHJldHVybiB0aGlzLl9zY29wZTtcbiAgfVxuICBnZXQgaGVhZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faGVhZDtcbiAgfVxuICBnZXQgb3BzKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHM7XG4gIH1cbiAgZ2V0IG5vcHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wcy5sZW5ndGg7XG4gIH1cbiAgZ2V0IG9wMSgpIHtcbiAgICByZXR1cm4gdGhpcy5fb3BzWzBdID8/IHRoaXMuZW5naW5lLnN5bWJvbChcIk5vdGhpbmdcIik7XG4gIH1cbiAgZ2V0IG9wMigpIHtcbiAgICByZXR1cm4gdGhpcy5fb3BzWzFdID8/IHRoaXMuZW5naW5lLnN5bWJvbChcIk5vdGhpbmdcIik7XG4gIH1cbiAgZ2V0IG9wMygpIHtcbiAgICByZXR1cm4gdGhpcy5fb3BzWzJdID8/IHRoaXMuZW5naW5lLnN5bWJvbChcIk5vdGhpbmdcIik7XG4gIH1cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgaWYgKHRoaXMuX2hlYWQgPT09IFwiRXJyb3JcIilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2hlYWQgIT09IFwic3RyaW5nXCIgJiYgIXRoaXMuX2hlYWQuaXNWYWxpZClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5fb3BzLmV2ZXJ5KCh4KSA9PiB4LmlzVmFsaWQpO1xuICB9XG4gIGdldCBjYW5vbmljYWwoKSB7XG4gICAgaWYgKHRoaXMuX2Nhbm9uaWNhbClcbiAgICAgIHJldHVybiB0aGlzLl9jYW5vbmljYWw7XG4gICAgdGhpcy5fY2Fub25pY2FsID0gdGhpcy5pc1ZhbGlkID8gbWFrZUNhbm9uaWNhbEZ1bmN0aW9uKHRoaXMuZW5naW5lLCB0aGlzLl9oZWFkLCB0aGlzLl9vcHMpIDogdGhpcztcbiAgICByZXR1cm4gdGhpcy5fY2Fub25pY2FsO1xuICB9XG4gICptYXAoZm4pIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCB0aGlzLl9vcHMubGVuZ3RoKVxuICAgICAgeWllbGQgZm4odGhpcy5fb3BzW2krK10pO1xuICB9XG4gIHN1YnMoc3ViMiwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zID8geyAuLi5vcHRpb25zIH0gOiB7fTtcbiAgICBpZiAoIShcImNhbm9uaWNhbFwiIGluIG9wdGlvbnMpKVxuICAgICAgb3B0aW9ucy5jYW5vbmljYWwgPSB0cnVlO1xuICAgIGNvbnN0IG9wczIgPSB0aGlzLl9vcHMubWFwKCh4KSA9PiB4LnN1YnMoc3ViMiwgb3B0aW9ucykpO1xuICAgIGlmIChvcHRpb25zLmNhbm9uaWNhbCAmJiBvcHMyLmV2ZXJ5KCh4KSA9PiB4LmlzVmFsaWQpKVxuICAgICAgcmV0dXJuIG1ha2VDYW5vbmljYWxGdW5jdGlvbih0aGlzLmVuZ2luZSwgdGhpcy5faGVhZCwgb3BzMik7XG4gICAgcmV0dXJuIG5ldyBfQm94ZWRGdW5jdGlvbih0aGlzLmVuZ2luZSwgdGhpcy5faGVhZCwgb3BzMiwge1xuICAgICAgY2Fub25pY2FsOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIHJlcGxhY2UocnVsZXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcmVwbGFjZSh0aGlzLCBydWxlcywgb3B0aW9ucyk7XG4gIH1cbiAgaGFzKHgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2hlYWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmICh0eXBlb2YgeCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAodGhpcy5faGVhZCA9PT0geClcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoeC5pbmNsdWRlcyh0aGlzLl9oZWFkKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgYXJnIG9mIHRoaXMuX29wcylcbiAgICAgIGlmIChhcmcuaGFzKHgpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqIGBpc1NhbWVgIGlzIHN0cnVjdHVyYWwvc3ltYm9saWMgZXF1YWxpdHkgKi9cbiAgaXNTYW1lKHJocykge1xuICAgIGlmICh0aGlzID09PSByaHMpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoIShyaHMgaW5zdGFuY2VvZiBfQm94ZWRGdW5jdGlvbikpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMubm9wcyAhPT0gcmhzLm5vcHMpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmhlYWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmICh0aGlzLmhlYWQgIT09IHJocy5oZWFkKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcmhzLmhlYWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGVsc2UgaWYgKCFyaHMuaGVhZCB8fCAhdGhpcy5oZWFkLmlzU2FtZShyaHMuaGVhZCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbGhzVGFpbCA9IHRoaXMuX29wcztcbiAgICBjb25zdCByaHNUYWlsID0gcmhzLl9vcHM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaHNUYWlsLmxlbmd0aDsgaSsrKVxuICAgICAgaWYgKCFsaHNUYWlsW2ldLmlzU2FtZShyaHNUYWlsW2ldKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIG1hdGNoKHJocywgb3B0aW9ucykge1xuICAgIGlmICghKHJocyBpbnN0YW5jZW9mIF9Cb3hlZEZ1bmN0aW9uKSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHRoaXMuaGVhZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaWYgKHRoaXMuaGVhZCAhPT0gcmhzLmhlYWQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHJocy5oZWFkID09PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIXJocy5oZWFkKVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCBtID0gdGhpcy5oZWFkLm1hdGNoKHJocy5oZWFkLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG0gPT09IG51bGwpXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJlc3VsdCA9IHsgLi4ucmVzdWx0LCAuLi5tIH07XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxoc1RhaWwgPSB0aGlzLl9vcHM7XG4gICAgY29uc3QgcmhzVGFpbCA9IHJocy5fb3BzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGhzVGFpbC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbSA9IGxoc1RhaWxbaV0ubWF0Y2gocmhzVGFpbFtpXSwgb3B0aW9ucyk7XG4gICAgICBpZiAobSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXN1bHQgPSB7IC4uLnJlc3VsdCwgLi4ubSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8vXG4gIC8vIENBTk9OSUNBTCBPUEVSQVRJT05TXG4gIC8vXG4gIC8vIFRoZXNlIG9wZXJhdGlvbnMgYXBwbHkgb25seSB0byBjYW5vbmljYWwgZXhwcmVzc2lvbnNcbiAgLy9cbiAgdW5iaW5kKCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMuX251bWVyaWNWYWx1ZSA9IHZvaWQgMDtcbiAgfVxuICBnZXQgd2lraWRhdGEoKSB7XG4gICAgaWYgKCF0aGlzLmlzQ2Fub25pY2FsKVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICByZXR1cm4gdGhpcy5fd2lraWRhdGEgPz8gdGhpcy5mdW5jdGlvbkRlZmluaXRpb24/Lndpa2lkYXRhID8/IHZvaWQgMDtcbiAgfVxuICBnZXQgZGVzY3JpcHRpb24oKSB7XG4gICAgaWYgKCF0aGlzLmlzQ2Fub25pY2FsKVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICBjb25zdCBkZWYgPSB0aGlzLmZ1bmN0aW9uRGVmaW5pdGlvbjtcbiAgICBpZiAoIWRlZilcbiAgICAgIHJldHVybiBbXTtcbiAgICBpZiAoIWRlZi5kZXNjcmlwdGlvbilcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgaWYgKHR5cGVvZiBkZWYuZGVzY3JpcHRpb24gPT09IFwic3RyaW5nXCIpXG4gICAgICByZXR1cm4gW2RlZi5kZXNjcmlwdGlvbl07XG4gICAgcmV0dXJuIGRlZi5kZXNjcmlwdGlvbjtcbiAgfVxuICBnZXQgdXJsKCkge1xuICAgIGlmICghdGhpcy5pc0Nhbm9uaWNhbClcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uRGVmaW5pdGlvbj8udXJsID8/IHZvaWQgMDtcbiAgfVxuICBnZXQgY29tcGxleGl0eSgpIHtcbiAgICBpZiAoIXRoaXMuaXNDYW5vbmljYWwpXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uRGVmaW5pdGlvbj8uY29tcGxleGl0eSA/PyBERUZBVUxUX0NPTVBMRVhJVFk7XG4gIH1cbiAgZ2V0IGZ1bmN0aW9uRGVmaW5pdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuaXNDYW5vbmljYWwpXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIGlmICh0aGlzLl9kZWYgIT09IG51bGwpXG4gICAgICByZXR1cm4gdGhpcy5fZGVmO1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgYmluZChfc2NvcGUpIHtcbiAgfVxuICBnZXQgdmFsdWUoKSB7XG4gICAgaWYgKCF0aGlzLmlzQ2Fub25pY2FsIHx8ICF0aGlzLmlzUHVyZSlcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgaWYgKCF0aGlzLl92YWx1ZSlcbiAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5ldmFsdWF0ZSgpO1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuICAvKiogYGlzRXF1YWxgIGlzIG1hdGhlbWF0aWNhbCBlcXVhbGl0eSAqL1xuICBpc0VxdWFsKHJocykge1xuICAgIGNvbnN0IHMgPSBzaWduRGlmZih0aGlzLCByaHMpO1xuICAgIGlmIChzID09PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHMgIT09IHZvaWQgMClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBkaWZmID0gdGhpcy5lbmdpbmUuYm94KFtcIlN1YnRyYWN0XCIsIHRoaXMsIHJoc10pLnNpbXBsaWZ5KCk7XG4gICAgaWYgKGRpZmYuaXNaZXJvKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKHJocyk7XG4gIH1cbiAgaXNMZXNzKHJocykge1xuICAgIGNvbnN0IHMgPSBzaWduRGlmZih0aGlzLCByaHMpO1xuICAgIGlmIChzID09PSB2b2lkIDApXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIHJldHVybiBzIDwgMDtcbiAgfVxuICBpc0xlc3NFcXVhbChyaHMpIHtcbiAgICBjb25zdCBzID0gc2lnbkRpZmYodGhpcywgcmhzKTtcbiAgICBpZiAocyA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICByZXR1cm4gcyA8PSAwO1xuICB9XG4gIGlzR3JlYXRlcihyaHMpIHtcbiAgICBjb25zdCBzID0gc2lnbkRpZmYodGhpcywgcmhzKTtcbiAgICBpZiAocyA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICByZXR1cm4gcyA+IDA7XG4gIH1cbiAgaXNHcmVhdGVyRXF1YWwocmhzKSB7XG4gICAgY29uc3QgcyA9IHNpZ25EaWZmKHRoaXMsIHJocyk7XG4gICAgaWYgKHMgPT09IHZvaWQgMClcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgcmV0dXJuIHMgPj0gMDtcbiAgfVxuICBnZXQgaXNaZXJvKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzLnNnbjtcbiAgICBpZiAocyA9PT0gbnVsbClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIHMgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gcyA9PT0gMDtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc05vdFplcm8oKSB7XG4gICAgY29uc3QgcyA9IHRoaXMuc2duO1xuICAgIGlmIChzID09PSBudWxsKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgcyA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiBzICE9PSAwO1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgZ2V0IGlzT25lKCkge1xuICAgIHJldHVybiB0aGlzLmlzRXF1YWwodGhpcy5lbmdpbmUuX09ORSk7XG4gIH1cbiAgZ2V0IGlzTmVnYXRpdmVPbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNFcXVhbCh0aGlzLmVuZ2luZS5fTkVHQVRJVkVfT05FKTtcbiAgfVxuICAvLyB4ID4gMFxuICBnZXQgaXNQb3NpdGl2ZSgpIHtcbiAgICBjb25zdCBzID0gdGhpcy5zZ247XG4gICAgaWYgKHMgPT09IG51bGwpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBzID09PSBcIm51bWJlclwiKVxuICAgICAgcmV0dXJuIHMgPiAwO1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgLy8geCA8PSAwXG4gIGdldCBpc05vblBvc2l0aXZlKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzLnNnbjtcbiAgICBpZiAocyA9PT0gbnVsbClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIHMgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gcyA8PSAwO1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgLy8geCA8IDBcbiAgZ2V0IGlzTmVnYXRpdmUoKSB7XG4gICAgY29uc3QgcyA9IHRoaXMuc2duO1xuICAgIGlmIChzID09PSBudWxsKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgcyA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiBzIDwgMDtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIC8vIHggPj0gMFxuICBnZXQgaXNOb25OZWdhdGl2ZSgpIHtcbiAgICBjb25zdCBzID0gdGhpcy5zZ247XG4gICAgaWYgKHMgPT09IG51bGwpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBzID09PSBcIm51bWJlclwiKVxuICAgICAgcmV0dXJuIHMgPj0gMDtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc051bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy5kb21haW4uaXNDb21wYXRpYmxlKFwiTnVtYmVyXCIpO1xuICB9XG4gIGdldCBpc0ludGVnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tYWluLmlzQ29tcGF0aWJsZShcIkludGVnZXJcIik7XG4gIH1cbiAgZ2V0IGlzUmF0aW9uYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tYWluLmlzQ29tcGF0aWJsZShcIlJhdGlvbmFsTnVtYmVyXCIpO1xuICB9XG4gIGdldCBpc0FsZ2VicmFpYygpIHtcbiAgICByZXR1cm4gdGhpcy5kb21haW4uaXNDb21wYXRpYmxlKFwiQWxnZWJyYWljTnVtYmVyXCIpO1xuICB9XG4gIGdldCBpc1JlYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tYWluLmlzQ29tcGF0aWJsZShcIlJlYWxOdW1iZXJcIik7XG4gIH1cbiAgZ2V0IGlzRXh0ZW5kZWRSZWFsKCkge1xuICAgIHJldHVybiB0aGlzLmRvbWFpbi5pc0NvbXBhdGlibGUoXCJFeHRlbmRlZFJlYWxOdW1iZXJcIik7XG4gIH1cbiAgZ2V0IGlzQ29tcGxleCgpIHtcbiAgICByZXR1cm4gdGhpcy5kb21haW4uaXNDb21wYXRpYmxlKFwiQ29tcGxleE51bWJlclwiKTtcbiAgfVxuICBnZXQgaXNJbWFnaW5hcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tYWluLmlzQ29tcGF0aWJsZShcIkltYWdpbmFyeU51bWJlclwiKTtcbiAgfVxuICBnZXQgc2duKCkge1xuICAgIGlmICghdGhpcy5pc0Nhbm9uaWNhbClcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgY29uc3QgaGVhZDIgPSB0aGlzLmhlYWQ7XG4gICAgaWYgKGhlYWQyID09PSBcIk5lZ2F0ZVwiKSB7XG4gICAgICBjb25zdCBzID0gdGhpcy5fb3BzWzBdPy5zZ247XG4gICAgICBpZiAocyA9PT0gdm9pZCAwKVxuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgaWYgKHMgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHMgPT09IDAgPyAwIDogcyA+IDAgPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmIChoZWFkMiA9PT0gXCJNdWx0aXBseVwiKSB7XG4gICAgICBjb25zdCB0b3RhbCA9IHRoaXMuX29wcy5yZWR1Y2UoKGFjYywgeCkgPT4gYWNjICogKHguc2duID8/IE5hTiksIDEpO1xuICAgICAgaWYgKGlzTmFOKHRvdGFsKSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBpZiAodG90YWwgPiAwKVxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGlmICh0b3RhbCA8IDApXG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoaGVhZDIgPT09IFwiQWRkXCIpIHtcbiAgICAgIGxldCBwb3NDb3VudCA9IDA7XG4gICAgICBsZXQgbmVnQ291bnQgPSAwO1xuICAgICAgbGV0IHplcm9Db3VudCA9IDA7XG4gICAgICBjb25zdCBjb3VudCA9IHRoaXMuX29wcy5sZW5ndGg7XG4gICAgICBmb3IgKGNvbnN0IG9wMyBvZiB0aGlzLl9vcHMpIHtcbiAgICAgICAgY29uc3QgcyA9IG9wMy5zZ247XG4gICAgICAgIGlmIChzID09PSBudWxsIHx8IHMgPT09IHZvaWQgMClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKHMgPT09IDApXG4gICAgICAgICAgemVyb0NvdW50ICs9IDE7XG4gICAgICAgIGlmIChzID4gMClcbiAgICAgICAgICBwb3NDb3VudCArPSAxO1xuICAgICAgICBpZiAocyA8IDApXG4gICAgICAgICAgbmVnQ291bnQgKz0gMTtcbiAgICAgIH1cbiAgICAgIGlmICh6ZXJvQ291bnQgPT09IGNvdW50KVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGlmIChwb3NDb3VudCA9PT0gY291bnQpXG4gICAgICAgIHJldHVybiAxO1xuICAgICAgaWYgKG5lZ0NvdW50ID09PSBjb3VudClcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChoZWFkMiA9PT0gXCJEaXZpZGVcIikge1xuICAgICAgY29uc3QgbiA9IHRoaXMuX29wc1swXT8uc2duO1xuICAgICAgY29uc3QgZCA9IHRoaXMuX29wc1sxXT8uc2duO1xuICAgICAgaWYgKG4gPT09IG51bGwgfHwgZCA9PT0gbnVsbCB8fCBuID09PSB2b2lkIDAgfHwgZCA9PT0gdm9pZCAwKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChuID09PSAwKVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGlmIChuID4gMCAmJiBkID4gMCB8fCBuIDwgMCAmJiBkIDwgMClcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChoZWFkMiA9PT0gXCJTcXVhcmVcIikge1xuICAgICAgaWYgKHRoaXMuX29wc1swXT8uaXNJbWFnaW5hcnkpXG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIGlmICh0aGlzLl9vcHNbMF0/LmlzWmVybylcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGhlYWQyID09PSBcIkFic1wiKSB7XG4gICAgICBpZiAodGhpcy5fb3BzWzBdPy5pc1plcm8pXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChoZWFkMiA9PT0gXCJTcXJ0XCIpIHtcbiAgICAgIGlmICh0aGlzLl9vcHNbMF0/LmlzWmVybylcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBpZiAodGhpcy5fb3BzWzBdPy5pc0ltYWdpbmFyeSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGhlYWQyID09PSBcIlBvd2VyXCIpIHtcbiAgICB9XG4gICAgaWYgKGhlYWQyID09PSBcIlJvb3RcIikge1xuICAgIH1cbiAgICBpZiAoaGVhZDIgPT09IFwiTG5cIikge1xuICAgIH1cbiAgICBpZiAoaGVhZDIgPT09IFwiRmxvb3JcIikge1xuICAgIH1cbiAgICBpZiAoaGVhZDIgPT09IFwiQ2VpbFwiKSB7XG4gICAgfVxuICAgIGlmIChoZWFkMiA9PT0gXCJSb3VuZFwiKSB7XG4gICAgfVxuICAgIGNvbnN0IHYgPSBhc0Zsb2F0KHRoaXMuTigpKTtcbiAgICBpZiAodiA9PT0gbnVsbClcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgaWYgKHYgPT09IDApXG4gICAgICByZXR1cm4gMDtcbiAgICBpZiAodiA8IDApXG4gICAgICByZXR1cm4gLTE7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgLy9cbiAgLy8gQVVUTy1DQU5PTklDQUwgT1BFUkFUSU9OU1xuICAvL1xuICAvLyBUaGUgb3BlcmF0aW9ucyBhcmUgYXV0b21hdGljYWxseSBkb25lIG9uIHRoZSBjYW5vbmljYWwgZm9ybSBvZiB0aGVcbiAgLy8gZXhwcmVzc2lvblxuICAvL1xuICBnZXQgZG9tYWluKCkge1xuICAgIHJldHVybiB0aGlzLl9jb2RvbWFpbjtcbiAgfVxuICAvLyBzaW1wbGlmeShvcHRpb25zPzogU2ltcGxpZnlPcHRpb25zKTogQm94ZWRFeHByZXNzaW9uIHtcbiAgLy8gICBjb25zdCByZXN1bHQgPSB0aGlzLnNpbXBsaWZ5QWxsKG9wdGlvbnMpO1xuICAvLyAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAxKSByZXR1cm4gcmVzdWx0WzBdO1xuICAvLyAgIGNvbnN0IGNlID0gdGhpcy5lbmdpbmU7XG4gIC8vICAgcmVzdWx0LnNvcnQoKGEsIGIpID0+IHtcbiAgLy8gICAgIGlmIChhID09PSBiKSByZXR1cm4gMDtcbiAgLy8gICAgIHJldHVybiBjZS5jb3N0RnVuY3Rpb24oYSkgLSBjZS5jb3N0RnVuY3Rpb24oYik7XG4gIC8vICAgfSk7XG4gIC8vICAgcmV0dXJuIHJlc3VsdFswXTtcbiAgLy8gfVxuICBzaW1wbGlmeShvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpXG4gICAgICByZXR1cm4gdGhpcztcbiAgICBpZiAoIXRoaXMuaXNDYW5vbmljYWwpIHtcbiAgICAgIGNvbnN0IGNhbm9uaWNhbDIgPSB0aGlzLmNhbm9uaWNhbDtcbiAgICAgIGlmICghY2Fub25pY2FsMi5pc0Nhbm9uaWNhbCB8fCAhY2Fub25pY2FsMi5pc1ZhbGlkKVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIHJldHVybiBjYW5vbmljYWwyLnNpbXBsaWZ5KG9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCByZWN1cnNpdmUgPSBvcHRpb25zPy5yZWN1cnNpdmUgPz8gdHJ1ZTtcbiAgICBsZXQgZXhwcjtcbiAgICBpZiAocmVjdXJzaXZlKSB7XG4gICAgICBleHByID0gZXhwYW5kMih0aGlzKTtcbiAgICAgIGlmIChleHByICE9PSBudWxsKSB7XG4gICAgICAgIGV4cHIgPSBleHByLnNpbXBsaWZ5KHsgLi4ub3B0aW9ucywgcmVjdXJzaXZlOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuIGNoZWFwZXN0KHRoaXMsIGV4cHIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBkZWYgPSB0aGlzLmZ1bmN0aW9uRGVmaW5pdGlvbjtcbiAgICBjb25zdCB0YWlsID0gcmVjdXJzaXZlID8gaG9sZE1hcChcbiAgICAgIHRoaXMuX29wcyxcbiAgICAgIGRlZj8uaG9sZCA/PyBcIm5vbmVcIixcbiAgICAgIGRlZj8uYXNzb2NpYXRpdmUgPyBkZWYubmFtZSA6IFwiXCIsXG4gICAgICAoeCkgPT4geC5zaW1wbGlmeShvcHRpb25zKVxuICAgICkgOiB0aGlzLl9vcHM7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9oZWFkICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBleHByMiA9IGFwcGx5KHRoaXMuX2hlYWQsIHRhaWwpO1xuICAgICAgaWYgKHR5cGVvZiBleHByMi5oZWFkICE9PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gZXhwcjI7XG4gICAgICByZXR1cm4gZXhwcjIuc2ltcGxpZnkob3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChkZWYpIHtcbiAgICAgIGlmIChkZWYuaW5lcnQpXG4gICAgICAgIGV4cHIgPSB0YWlsWzBdPy5jYW5vbmljYWwgPz8gdGhpcztcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBzaWcgPSBkZWYuc2lnbmF0dXJlO1xuICAgICAgICBpZiAoc2lnPy5zaW1wbGlmeSlcbiAgICAgICAgICBleHByID0gc2lnLnNpbXBsaWZ5KHRoaXMuZW5naW5lLCB0YWlsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFleHByKVxuICAgICAgZXhwciA9IHRoaXMuZW5naW5lLmZuKHRoaXMuX2hlYWQsIHRhaWwpO1xuICAgIGVsc2VcbiAgICAgIGV4cHIgPSBjaGVhcGVzdCh0aGlzLmVuZ2luZS5mbih0aGlzLl9oZWFkLCB0YWlsKSwgZXhwcik7XG4gICAgZXhwciA9IGNoZWFwZXN0KHRoaXMsIGV4cHIpO1xuICAgIGNvbnN0IHJ1bGVzID0gb3B0aW9ucz8ucnVsZXMgPz8gdGhpcy5lbmdpbmUuY2FjaGUoXG4gICAgICBcInN0YW5kYXJkLXNpbXBsaWZpY2F0aW9uLXJ1bGVzXCIsXG4gICAgICAoKSA9PiBib3hSdWxlcyh0aGlzLmVuZ2luZSwgU0lNUExJRllfUlVMRVMpLFxuICAgICAgKHJ1bGVzMikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IFtsaHMsIHJocywgX3ByaW9yaXR5LCBfY29uZGl0aW9uXSBvZiBydWxlczIpIHtcbiAgICAgICAgICBsaHMudW5iaW5kKCk7XG4gICAgICAgICAgcmhzLnVuYmluZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlczI7XG4gICAgICB9XG4gICAgKTtcbiAgICBsZXQgaXRlcmF0aW9uQ291bnQgPSAwO1xuICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgZG8ge1xuICAgICAgY29uc3QgbmV3RXhwciA9IGV4cHIucmVwbGFjZShydWxlcyk7XG4gICAgICBpZiAobmV3RXhwciAhPT0gbnVsbCkge1xuICAgICAgICBleHByID0gY2hlYXBlc3QoZXhwciwgbmV3RXhwcik7XG4gICAgICAgIGlmIChleHByID09PSBuZXdFeHByKVxuICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfSBlbHNlXG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgaXRlcmF0aW9uQ291bnQgKz0gMTtcbiAgICB9IHdoaWxlICghZG9uZSAmJiBpdGVyYXRpb25Db3VudCA8IHRoaXMuZW5naW5lLml0ZXJhdGlvbkxpbWl0KTtcbiAgICByZXR1cm4gY2hlYXBlc3QodGhpcywgZXhwcik7XG4gIH1cbiAgZXZhbHVhdGUob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCF0aGlzLmlzQ2Fub25pY2FsKSB7XG4gICAgICBjb25zdCBjYW5vbmljYWwyID0gdGhpcy5jYW5vbmljYWw7XG4gICAgICBpZiAoIWNhbm9uaWNhbDIuaXNDYW5vbmljYWwgfHwgIWNhbm9uaWNhbDIuaXNWYWxpZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICByZXR1cm4gY2Fub25pY2FsMi5ldmFsdWF0ZShvcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3QgZGVmID0gdGhpcy5mdW5jdGlvbkRlZmluaXRpb247XG4gICAgY29uc3QgdGFpbCA9IGhvbGRNYXAoXG4gICAgICB0aGlzLl9vcHMsXG4gICAgICBkZWY/LmhvbGQgPz8gXCJub25lXCIsXG4gICAgICBkZWY/LmFzc29jaWF0aXZlID8gZGVmLm5hbWUgOiBcIlwiLFxuICAgICAgKHgpID0+IHguZXZhbHVhdGUob3B0aW9ucylcbiAgICApO1xuICAgIGlmICh0eXBlb2YgdGhpcy5faGVhZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgZXhwciA9IGFwcGx5KHRoaXMuX2hlYWQsIHRhaWwpO1xuICAgICAgaWYgKHR5cGVvZiBleHByLmhlYWQgIT09IFwic3RyaW5nXCIpXG4gICAgICAgIHJldHVybiBleHByO1xuICAgICAgcmV0dXJuIGV4cHIuZXZhbHVhdGUob3B0aW9ucyk7XG4gICAgfVxuICAgIGlmICghZGVmKVxuICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLmZuKHRoaXMuX2hlYWQsIHRhaWwpO1xuICAgIGlmIChkZWYuaW5lcnQpXG4gICAgICByZXR1cm4gdGFpbFswXSA/PyB0aGlzO1xuICAgIGNvbnN0IHNpZyA9IGRlZi5zaWduYXR1cmU7XG4gICAgaWYgKCFzaWcgfHwgIXNpZy5ldmFsdWF0ZSlcbiAgICAgIHJldHVybiB0aGlzLmVuZ2luZS5mbih0aGlzLl9oZWFkLCB0YWlsKTtcbiAgICBpZiAodHlwZW9mIHNpZy5ldmFsdWF0ZSAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgcmV0dXJuIGFwcGx5KHNpZy5ldmFsdWF0ZSwgdGFpbCk7XG4gICAgcmV0dXJuIHNpZy5ldmFsdWF0ZSh0aGlzLmVuZ2luZSwgdGFpbCkgPz8gdGhpcy5lbmdpbmUuZm4odGhpcy5faGVhZCwgdGFpbCk7XG4gIH1cbiAgTihvcHRpb25zKSB7XG4gICAgaWYgKHRoaXMuX251bWVyaWNWYWx1ZSlcbiAgICAgIHJldHVybiB0aGlzLl9udW1lcmljVmFsdWU7XG4gICAgaWYgKHRoaXMuZW5naW5lLnN0cmljdCAmJiAhdGhpcy5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCF0aGlzLmlzQ2Fub25pY2FsKSB7XG4gICAgICBjb25zdCBjYW5vbmljYWwyID0gdGhpcy5jYW5vbmljYWw7XG4gICAgICBpZiAoIWNhbm9uaWNhbDIuaXNDYW5vbmljYWwgfHwgIWNhbm9uaWNhbDIuaXNWYWxpZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICByZXR1cm4gY2Fub25pY2FsMi5OKG9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBkZWYgPSB0aGlzLmZ1bmN0aW9uRGVmaW5pdGlvbjtcbiAgICBjb25zdCB0YWlsID0gaG9sZE1hcChcbiAgICAgIHRoaXMuX29wcyxcbiAgICAgIGRlZj8uaG9sZCA/PyBcIm5vbmVcIixcbiAgICAgIGRlZj8uYXNzb2NpYXRpdmUgPyBkZWYubmFtZSA6IFwiXCIsXG4gICAgICAoeCkgPT4geC5OKG9wdGlvbnMpXG4gICAgKTtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2hlYWQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGV4cHIgPSBhcHBseSh0aGlzLl9oZWFkLCB0YWlsKTtcbiAgICAgIGlmICh0eXBlb2YgZXhwci5oZWFkICE9PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gZXhwcjtcbiAgICAgIHJldHVybiBleHByLk4ob3B0aW9ucyk7XG4gICAgfVxuICAgIGlmICghZGVmKVxuICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLmZuKHRoaXMuX2hlYWQsIHRhaWwpO1xuICAgIGlmIChkZWYuaW5lcnQpXG4gICAgICByZXR1cm4gdGFpbFswXSA/PyB0aGlzO1xuICAgIGNvbnN0IHNpZyA9IGRlZi5zaWduYXR1cmU7XG4gICAgbGV0IHJlc3VsdCA9IHNpZz8uTj8uKHRoaXMuZW5naW5lLCB0YWlsKSA/PyB0aGlzLmVuZ2luZS5mbih0aGlzLl9oZWFkLCB0YWlsKS5ldmFsdWF0ZSgpO1xuICAgIGNvbnN0IG51bSA9IHJlc3VsdC5udW1lcmljVmFsdWU7XG4gICAgaWYgKG51bSAhPT0gbnVsbCkge1xuICAgICAgaWYgKCFjb21wbGV4QWxsb3dlZCh0aGlzLmVuZ2luZSkgJiYgbnVtIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgxMC5kZWZhdWx0KVxuICAgICAgICByZXN1bHQgPSB0aGlzLmVuZ2luZS5fTkFOO1xuICAgICAgZWxzZSBpZiAoIWJpZ251bVByZWZlcnJlZCh0aGlzLmVuZ2luZSkgJiYgbnVtIGluc3RhbmNlb2YgZGVjaW1hbF9kZWZhdWx0KVxuICAgICAgICByZXN1bHQgPSB0aGlzLmVuZ2luZS5udW1iZXIobnVtLnRvTnVtYmVyKCkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc1B1cmUpXG4gICAgICB0aGlzLl9udW1lcmljVmFsdWUgPSByZXN1bHQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBzb2x2ZSh2YXJzKSB7XG4gICAgaWYgKHZhcnMubGVuZ3RoICE9PSAxKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3Qgcm9vdHMgPSBmaW5kVW5pdmFyaWF0ZVJvb3RzKHRoaXMuc2ltcGxpZnkoKSwgdmFyc1swXSk7XG4gICAgcmV0dXJuIHJvb3RzO1xuICB9XG59O1xuZnVuY3Rpb24gbWFrZU51bWVyaWNGdW5jdGlvbihjZSwgaGVhZDIsIHNlbWlPcHMsIG1ldGFkYXRhKSB7XG4gIGxldCBvcHMyID0gW107XG4gIGlmIChoZWFkMiA9PT0gXCJBZGRcIiB8fCBoZWFkMiA9PT0gXCJNdWx0aXBseVwiKVxuICAgIG9wczIgPSB2YWxpZGF0ZU51bWVyaWNBcmdzKFxuICAgICAgY2UsXG4gICAgICBmbGF0dGVuT3BzKGZsYXR0ZW5TZXF1ZW5jZShjZS5jYW5vbmljYWwoc2VtaU9wcykpLCBoZWFkMilcbiAgICApO1xuICBlbHNlIGlmIChoZWFkMiA9PT0gXCJOZWdhdGVcIiB8fCBoZWFkMiA9PT0gXCJTcXVhcmVcIiB8fCBoZWFkMiA9PT0gXCJTcXJ0XCIpXG4gICAgb3BzMiA9IHZhbGlkYXRlTnVtZXJpY0FyZ3MoY2UsIGZsYXR0ZW5TZXF1ZW5jZShjZS5jYW5vbmljYWwoc2VtaU9wcykpLCAxKTtcbiAgZWxzZSBpZiAoaGVhZDIgPT09IFwiRGl2aWRlXCIgfHwgaGVhZDIgPT09IFwiUG93ZXJcIilcbiAgICBvcHMyID0gdmFsaWRhdGVOdW1lcmljQXJncyhjZSwgZmxhdHRlblNlcXVlbmNlKGNlLmNhbm9uaWNhbChzZW1pT3BzKSksIDIpO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICghb3BzMi5ldmVyeSgoeCkgPT4geC5pc1ZhbGlkKSlcbiAgICByZXR1cm4gbmV3IEJveGVkRnVuY3Rpb24oY2UsIGhlYWQyLCBvcHMyLCB7IG1ldGFkYXRhLCBjYW5vbmljYWw6IGZhbHNlIH0pO1xuICBpZiAoaGVhZDIgPT09IFwiQWRkXCIpXG4gICAgcmV0dXJuIGNlLmFkZChvcHMyLCBtZXRhZGF0YSk7XG4gIGlmIChoZWFkMiA9PT0gXCJOZWdhdGVcIilcbiAgICByZXR1cm4gY2UubmVnKG9wczJbMF0gPz8gY2UuZXJyb3IoXCJtaXNzaW5nXCIpLCBtZXRhZGF0YSk7XG4gIGlmIChoZWFkMiA9PT0gXCJNdWx0aXBseVwiKVxuICAgIHJldHVybiBjZS5tdWwob3BzMiwgbWV0YWRhdGEpO1xuICBpZiAoaGVhZDIgPT09IFwiRGl2aWRlXCIpXG4gICAgcmV0dXJuIGNlLmRpdihvcHMyWzBdLCBvcHMyWzFdLCBtZXRhZGF0YSk7XG4gIGlmIChoZWFkMiA9PT0gXCJQb3dlclwiKVxuICAgIHJldHVybiBjZS5wb3cob3BzMlswXSwgb3BzMlsxXSwgbWV0YWRhdGEpO1xuICBpZiAoaGVhZDIgPT09IFwiU3F1YXJlXCIpXG4gICAgcmV0dXJuIGNlLnBvdyhvcHMyWzBdLCBjZS5udW1iZXIoMiksIG1ldGFkYXRhKTtcbiAgaWYgKGhlYWQyID09PSBcIlNxcnRcIikge1xuICAgIGNvbnN0IG9wMyA9IG9wczJbMF0uY2Fub25pY2FsO1xuICAgIGlmIChpc1JhdGlvbmFsKG9wMy5udW1lcmljVmFsdWUpKVxuICAgICAgcmV0dXJuIG5ldyBCb3hlZEZ1bmN0aW9uKGNlLCBcIlNxcnRcIiwgW29wM10sIHsgbWV0YWRhdGEsIGNhbm9uaWNhbDogdHJ1ZSB9KTtcbiAgICByZXR1cm4gY2UucG93KG9wMywgY2UuX0hBTEYsIG1ldGFkYXRhKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG1ha2VDYW5vbmljYWxGdW5jdGlvbihjZSwgaGVhZDIsIG9wczIsIG1ldGFkYXRhKSB7XG4gIGlmICh0eXBlb2YgaGVhZDIgIT09IFwic3RyaW5nXCIpXG4gICAgaGVhZDIgPSBoZWFkMi5ldmFsdWF0ZSgpLnN5bWJvbCA/PyBoZWFkMjtcbiAgaWYgKHR5cGVvZiBoZWFkMiA9PT0gXCJzdHJpbmdcIikge1xuICAgIGNvbnN0IHJlc3VsdCA9IG1ha2VOdW1lcmljRnVuY3Rpb24oY2UsIGhlYWQyLCBvcHMyLCBtZXRhZGF0YSk7XG4gICAgaWYgKHJlc3VsdClcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFoZWFkMi5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIG5ldyBCb3hlZEZ1bmN0aW9uKFxuICAgICAgICBjZSxcbiAgICAgICAgaGVhZDIsXG4gICAgICAgIG9wczIubWFwKCh4KSA9PiBjZS5ib3goeCwgeyBjYW5vbmljYWw6IGZhbHNlIH0pKSxcbiAgICAgICAgeyBtZXRhZGF0YSwgY2Fub25pY2FsOiBmYWxzZSB9XG4gICAgICApO1xuICB9XG4gIGNvbnN0IGRlZiA9IGNlLmxvb2t1cEZ1bmN0aW9uKGhlYWQyLCBjZS5jb250ZXh0KTtcbiAgaWYgKHR5cGVvZiBoZWFkMiAhPT0gXCJzdHJpbmdcIiB8fCAhZGVmKSB7XG4gICAgcmV0dXJuIG5ldyBCb3hlZEZ1bmN0aW9uKFxuICAgICAgY2UsXG4gICAgICBoZWFkMixcbiAgICAgIGZsYXR0ZW5TZXF1ZW5jZShvcHMyLm1hcCgoeCkgPT4gY2UuYm94KHgpKSksXG4gICAgICB7IG1ldGFkYXRhLCBjYW5vbmljYWw6IHRydWUgfVxuICAgICk7XG4gIH1cbiAgbGV0IHhzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb3BzMi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcHBsaWNhYmxlKGRlZi5ob2xkLCBvcHMyLmxlbmd0aCAtIDEsIGkpKSB7XG4gICAgICB4cy5wdXNoKGNlLmJveChvcHMyW2ldKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHkgPSBjZS5ib3gob3BzMltpXSwgeyBjYW5vbmljYWw6IGZhbHNlIH0pO1xuICAgICAgaWYgKHkuaGVhZCA9PT0gXCJSZWxlYXNlSG9sZFwiKVxuICAgICAgICB4cy5wdXNoKHkub3AxLmNhbm9uaWNhbCk7XG4gICAgICBlbHNlXG4gICAgICAgIHhzLnB1c2goeSk7XG4gICAgfVxuICB9XG4gIGlmICgheHMuZXZlcnkoKHgpID0+IHguaXNWYWxpZCkpXG4gICAgcmV0dXJuIG5ldyBCb3hlZEZ1bmN0aW9uKGNlLCBoZWFkMiwgeHMsIHsgbWV0YWRhdGEsIGNhbm9uaWNhbDogZmFsc2UgfSk7XG4gIGNvbnN0IHNpZyA9IGRlZi5zaWduYXR1cmU7XG4gIGlmIChzaWcuY2Fub25pY2FsKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHNpZy5jYW5vbmljYWwoY2UsIHhzKTtcbiAgICAgIGlmIChyZXN1bHQpXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCb3hlZEZ1bmN0aW9uKGNlLCBoZWFkMiwgeHMsIHsgbWV0YWRhdGEsIGNhbm9uaWNhbDogZmFsc2UgfSk7XG4gIH1cbiAgeHMgPSBmbGF0dGVuU2VxdWVuY2UoeHMpO1xuICBpZiAoZGVmLmFzc29jaWF0aXZlKVxuICAgIHhzID0gZmxhdHRlbk9wcyh4cywgaGVhZDIpO1xuICBpZiAoIXhzLmV2ZXJ5KCh4KSA9PiB4LmlzVmFsaWQpKVxuICAgIHJldHVybiBuZXcgQm94ZWRGdW5jdGlvbihjZSwgaGVhZDIsIHhzLCB7IG1ldGFkYXRhLCBjYW5vbmljYWw6IGZhbHNlIH0pO1xuICB4cyA9IHZhbGlkYXRlU2lnbmF0dXJlKHNpZy5kb21haW4sIHhzKSA/PyB4cztcbiAgaWYgKCF4cy5ldmVyeSgoeCkgPT4geC5pc1ZhbGlkKSlcbiAgICByZXR1cm4gbmV3IEJveGVkRnVuY3Rpb24oY2UsIGhlYWQyLCB4cywgeyBtZXRhZGF0YSwgY2Fub25pY2FsOiBmYWxzZSB9KTtcbiAgaWYgKHhzLmxlbmd0aCA9PT0gMSAmJiB4c1swXS5oZWFkID09PSBoZWFkMikge1xuICAgIGlmIChkZWYuaW52b2x1dGlvbilcbiAgICAgIHJldHVybiB4c1swXS5vcDE7XG4gICAgaWYgKGRlZi5pZGVtcG90ZW50KVxuICAgICAgeHMgPSB4c1swXS5vcHM7XG4gIH1cbiAgaWYgKHhzLmxlbmd0aCA+IDEgJiYgZGVmLmNvbW11dGF0aXZlID09PSB0cnVlKVxuICAgIHhzID0geHMuc29ydChvcmRlcik7XG4gIHJldHVybiBuZXcgQm94ZWRGdW5jdGlvbihjZSwgaGVhZDIsIHhzLCB7IG1ldGFkYXRhLCBkZWYsIGNhbm9uaWNhbDogdHJ1ZSB9KTtcbn1cbmZ1bmN0aW9uIGFwcGx5KGZuLCBhcmdzKSB7XG4gIGNvbnN0IGNlID0gZm4uZW5naW5lO1xuICBpZiAoZm4uaGVhZCAhPT0gXCJMYW1iZGFcIilcbiAgICByZXR1cm4gY2UuX2ZuKGZuLmV2YWx1YXRlKCksIGFyZ3MpO1xuICBjb25zdCBzdWJzMiA9IHtcbiAgICBcIl9fXCI6IGNlLnR1cGxlKGFyZ3MpLFxuICAgIFwiXyNcIjogY2UubnVtYmVyKGFyZ3MubGVuZ3RoKVxuICB9O1xuICBsZXQgbiA9IDE7XG4gIGZvciAoY29uc3Qgb3AzIG9mIGFyZ3MpXG4gICAgc3ViczJbYF8ke24rK31gXSA9IG9wMztcbiAgc3ViczJbXCJfXCJdID0gc3ViczJbXCJfMVwiXTtcbiAgY29uc3Qgc2F2ZWRDb250ZXh0ID0gY2UuY29udGV4dDtcbiAgY2UuY29udGV4dCA9IGZuLnNjb3BlID8/IG51bGw7XG4gIGNvbnN0IHJlc3VsdCA9IGZuLnN1YnMoc3ViczIpO1xuICBjZS5jb250ZXh0ID0gc2F2ZWRDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0Lm9wMS5ldmFsdWF0ZSgpO1xufVxuZnVuY3Rpb24gaG9sZE1hcCh4cywgc2tpcCwgYXNzb2NpYXRpdmVIZWFkLCBmKSB7XG4gIGlmICh4cy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuICB4cyA9IGZsYXR0ZW5PcHMoeHMsIGFzc29jaWF0aXZlSGVhZCk7XG4gIGlmIChza2lwID09PSBcImFsbFwiKVxuICAgIHJldHVybiB4cztcbiAgaWYgKHNraXAgPT09IFwibm9uZVwiKSB7XG4gICAgY29uc3QgcmVzdWx0MiA9IFtdO1xuICAgIGZvciAoY29uc3QgeCBvZiB4cykge1xuICAgICAgY29uc3QgaCA9IHguaGVhZDtcbiAgICAgIGlmIChoID09PSBcIkhvbGRcIilcbiAgICAgICAgcmVzdWx0Mi5wdXNoKHgpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG9wMyA9IGggPT09IFwiUmVsZWFzZUhvbGRcIiA/IHgub3AxIDogeDtcbiAgICAgICAgaWYgKG9wMykge1xuICAgICAgICAgIGNvbnN0IHkgPSBmKG9wMyk7XG4gICAgICAgICAgaWYgKHkgIT09IG51bGwpXG4gICAgICAgICAgICByZXN1bHQyLnB1c2goeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZsYXR0ZW5PcHMocmVzdWx0MiwgYXNzb2NpYXRpdmVIZWFkKTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh4c1tpXS5oZWFkID09PSBcIkhvbGRcIikge1xuICAgICAgcmVzdWx0LnB1c2goeHNbaV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgeSA9IHZvaWQgMDtcbiAgICAgIGlmICh4c1tpXS5oZWFkID09PSBcIlJlbGVhc2VIb2xkXCIpXG4gICAgICAgIHkgPSB4c1tpXS5vcDE7XG4gICAgICBlbHNlIGlmIChhcHBsaWNhYmxlKHNraXAsIHhzLmxlbmd0aCAtIDEsIGkpKVxuICAgICAgICB5ID0geHNbaV07XG4gICAgICBlbHNlXG4gICAgICAgIHJlc3VsdC5wdXNoKHhzW2ldKTtcbiAgICAgIGlmICh5KSB7XG4gICAgICAgIGNvbnN0IHggPSBmKHkpO1xuICAgICAgICBpZiAoeCAhPT0gbnVsbClcbiAgICAgICAgICByZXN1bHQucHVzaCh4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZsYXR0ZW5PcHMocmVzdWx0LCBhc3NvY2lhdGl2ZUhlYWQpO1xufVxuZnVuY3Rpb24gYXBwbGljYWJsZShza2lwLCBjb3VudCwgaW5kZXgpIHtcbiAgaWYgKHNraXAgPT09IFwiYWxsXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoc2tpcCA9PT0gXCJub25lXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmIChza2lwID09PSBcImZpcnN0XCIpXG4gICAgcmV0dXJuIGluZGV4ICE9PSAwO1xuICBpZiAoc2tpcCA9PT0gXCJyZXN0XCIpXG4gICAgcmV0dXJuIGluZGV4ID09PSAwO1xuICBpZiAoc2tpcCA9PT0gXCJsYXN0XCIpXG4gICAgcmV0dXJuIGluZGV4ICE9PSBjb3VudDtcbiAgaWYgKHNraXAgPT09IFwibW9zdFwiKVxuICAgIHJldHVybiBpbmRleCA9PT0gY291bnQ7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2JveGVkLWV4cHJlc3Npb24vYm94ZWQtbnVtYmVyLnRzXG52YXIgaW1wb3J0X2NvbXBsZXgxMiA9IF9fdG9FU00ocmVxdWlyZV9jb21wbGV4KCkpO1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvZG9tYWluLXV0aWxzLnRzXG52YXIgaW1wb3J0X2NvbXBsZXgxMSA9IF9fdG9FU00ocmVxdWlyZV9jb21wbGV4KCkpO1xuZnVuY3Rpb24gaW5mZXJOdW1lcmljRG9tYWluKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgIGlmICghaXNGaW5pdGUodmFsdWUpKVxuICAgICAgcmV0dXJuIFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCI7XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICBpZiAodmFsdWUgPiAwKVxuICAgICAgICByZXR1cm4gXCJQb3NpdGl2ZUludGVnZXJcIjtcbiAgICAgIGlmICh2YWx1ZSA8IDApXG4gICAgICAgIHJldHVybiBcIk5lZ2F0aXZlSW50ZWdlclwiO1xuICAgICAgcmV0dXJuIFwiSW50ZWdlclwiO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPiAwKVxuICAgICAgcmV0dXJuIFwiUG9zaXRpdmVOdW1iZXJcIjtcbiAgICBpZiAodmFsdWUgPCAwKVxuICAgICAgcmV0dXJuIFwiTmVnYXRpdmVOdW1iZXJcIjtcbiAgICByZXR1cm4gXCJSZWFsTnVtYmVyXCI7XG4gIH1cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbCkge1xuICAgIGlmICh2YWx1ZS5pc05hTigpKVxuICAgICAgcmV0dXJuIFwiTnVtYmVyXCI7XG4gICAgaWYgKCF2YWx1ZS5pc0Zpbml0ZSgpKVxuICAgICAgcmV0dXJuIFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCI7XG4gICAgaWYgKHZhbHVlLmlzSW50ZWdlcigpKSB7XG4gICAgICBpZiAodmFsdWUuaXNQb3NpdGl2ZSgpKVxuICAgICAgICByZXR1cm4gXCJQb3NpdGl2ZUludGVnZXJcIjtcbiAgICAgIGlmICh2YWx1ZS5pc05lZ2F0aXZlKCkpXG4gICAgICAgIHJldHVybiBcIk5lZ2F0aXZlSW50ZWdlclwiO1xuICAgICAgcmV0dXJuIFwiSW50ZWdlclwiO1xuICAgIH1cbiAgICBpZiAodmFsdWUuaXNQb3NpdGl2ZSgpKVxuICAgICAgcmV0dXJuIFwiUG9zaXRpdmVOdW1iZXJcIjtcbiAgICBpZiAodmFsdWUuaXNOZWdhdGl2ZSgpKVxuICAgICAgcmV0dXJuIFwiTmVnYXRpdmVOdW1iZXJcIjtcbiAgICByZXR1cm4gXCJSZWFsTnVtYmVyXCI7XG4gIH1cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgxMS5Db21wbGV4KSB7XG4gICAgY29uc3QgYyA9IHZhbHVlO1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChjLmltICE9PSAwKTtcbiAgICBpZiAoYy5yZSA9PT0gMClcbiAgICAgIHJldHVybiBcIkltYWdpbmFyeU51bWJlclwiO1xuICAgIHJldHVybiBcIkNvbXBsZXhOdW1iZXJcIjtcbiAgfVxuICBpZiAoaXNSYXRpb25hbCh2YWx1ZSkpIHtcbiAgICBjb25zdCBbbnVtZXIsIGRlbm9tXSA9IHZhbHVlO1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChcbiAgICAgIHR5cGVvZiBudW1lciAhPT0gXCJudW1iZXJcIiB8fCAhTnVtYmVyLmlzTmFOKG51bWVyKSAmJiAhTnVtYmVyLmlzTmFOKGRlbm9tKVxuICAgICk7XG4gICAgcmV0dXJuIFwiUmF0aW9uYWxOdW1iZXJcIjtcbiAgfVxuICByZXR1cm4gXCJOdW1iZXJcIjtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL251bWVyaWNzL3ByaW1lcy50c1xudmFyIExBUkdFX1BSSU1FID0gMTEyNTg5OTkwNjg0MjU5NztcbmZ1bmN0aW9uIGlzUHJpbWUobikge1xuICBpZiAoIU51bWJlci5pc0ludGVnZXIobikgfHwgIU51bWJlci5pc0Zpbml0ZShuKSB8fCBOdW1iZXIuaXNOYU4obikgfHwgbiA8PSAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChuIDw9IExBUkdFU1RfU01BTExfUFJJTUUpXG4gICAgcmV0dXJuIFNNQUxMX1BSSU1FUy5oYXMobik7XG4gIGZvciAoY29uc3Qgc21hbGxQcmltZSBvZiBTTUFMTF9QUklNRVMpIHtcbiAgICBpZiAobiAlIHNtYWxsUHJpbWUgPT09IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG4gPj0gTEFSR0VfUFJJTUUpIHtcbiAgICByZXR1cm4gcHJvYmFibHlQcmltZShuLCAzMCkgPyB2b2lkIDAgOiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbiA9PT0gbGVhc3RGYWN0b3Iobik7XG59XG5mdW5jdGlvbiBsZWFzdEZhY3RvcihuKSB7XG4gIGlmIChuID09PSAxKVxuICAgIHJldHVybiAxO1xuICBpZiAobiAlIDIgPT09IDApXG4gICAgcmV0dXJuIDI7XG4gIGlmIChuICUgMyA9PT0gMClcbiAgICByZXR1cm4gMztcbiAgaWYgKG4gJSA1ID09PSAwKVxuICAgIHJldHVybiA1O1xuICBjb25zdCBtID0gTWF0aC5mbG9vcihNYXRoLnNxcnQobikpO1xuICBsZXQgaSA9IDc7XG4gIHdoaWxlIChpIDw9IG0pIHtcbiAgICBpZiAobiAlIGkgPT09IDApXG4gICAgICByZXR1cm4gaTtcbiAgICBpZiAobiAlIChpICsgNCkgPT09IDApXG4gICAgICByZXR1cm4gaSArIDQ7XG4gICAgaWYgKG4gJSAoaSArIDYpID09PSAwKVxuICAgICAgcmV0dXJuIGkgKyA2O1xuICAgIGlmIChuICUgKGkgKyAxMCkgPT09IDApXG4gICAgICByZXR1cm4gaSArIDEwO1xuICAgIGlmIChuICUgKGkgKyAxMikgPT09IDApXG4gICAgICByZXR1cm4gaSArIDEyO1xuICAgIGlmIChuICUgKGkgKyAxNikgPT09IDApXG4gICAgICByZXR1cm4gaSArIDE2O1xuICAgIGlmIChuICUgKGkgKyAyMikgPT09IDApXG4gICAgICByZXR1cm4gaSArIDIyO1xuICAgIGlmIChuICUgKGkgKyAyNCkgPT09IDApXG4gICAgICByZXR1cm4gaSArIDI0O1xuICAgIGkgKz0gMzA7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5mdW5jdGlvbiBwcm9iYWJseVByaW1lKG4sIGspIHtcbiAgbGV0IHMgPSAwLCBkID0gbiAtIDE7XG4gIHdoaWxlIChkICUgMiA9PT0gMCkge1xuICAgIGQgLz0gMjtcbiAgICArK3M7XG4gIH1cbiAgV2l0bmVzc0xvb3A6XG4gICAgZG8ge1xuICAgICAgbGV0IHggPSBNYXRoLnBvdygyICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG4gLSAzKSksIGQpICUgbjtcbiAgICAgIGlmICh4ID09PSAxIHx8IHggPT09IG4gLSAxKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGZvciAobGV0IGkgPSBzIC0gMTsgaS0tOyApIHtcbiAgICAgICAgeCA9IHggKiB4ICUgbjtcbiAgICAgICAgaWYgKHggPT09IDEpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoeCA9PT0gbiAtIDEpXG4gICAgICAgICAgY29udGludWUgV2l0bmVzc0xvb3A7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSB3aGlsZSAoLS1rKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL2JveGVkLW51bWJlci50c1xudmFyIEJveGVkTnVtYmVyID0gY2xhc3MgX0JveGVkTnVtYmVyIGV4dGVuZHMgQWJzdHJhY3RCb3hlZEV4cHJlc3Npb24ge1xuICAvKipcbiAgICogQnkgdGhlIHRpbWUgdGhlIGNvbnN0cnVjdG9yIGlzIGNhbGxlZCwgdGhlIGB2YWx1ZWAgc2hvdWxkIGhhdmUgYmVlblxuICAgKiBzY3JlZW5lZCBmb3IgY2FzZXMgd2hlcmUgaXQncyBhIHdlbGwta25vd24gdmFsdWUgKDAsIE5hTiwgK0luZmluaXR5LFxuICAgKiBldGMuLi4pIG9yIG5vbi1ub3JtYWwgKGNvbXBsZXggbnVtYmVyIHdpdGggaW0gPSAwLCByYXRpb25hbCB3aXRoXG4gICAqIGRlbm9tID0gMSwgZXRjLi4uKS5cbiAgICpcbiAgICogVGhpcyBpcyBkb25lIGluIGBjZS5udW1iZXIoKWAuIEluIGdlbmVyYWwsIHVzZSBgY2UubnVtYmVyKClgIHJhdGhlclxuICAgKiB0aGFuIGNhbGxpbmcgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS5cbiAgICpcbiAgICogV2UgbWF5IHN0b3JlIGFzIGEgbWFjaGluZSBudW1iZXIgaWYgYSBEZWNpbWFsIGlzIHBhc3NlZCB0aGF0IGlzIGluIG1hY2hpbmVcbiAgICogcmFuZ2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNlLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKGNlLCBvcHRpb25zPy5tZXRhZGF0YSk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX2lzQ2Fub25pY2FsID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUmF0aW9uYWwodmFsdWUpKSB7XG4gICAgICBjb25zdCBbbiwgZF0gPSB2YWx1ZTtcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChcbiAgICAgICAgdHlwZW9mIG4gIT09IFwibnVtYmVyXCIgfHwgTnVtYmVyLmlzSW50ZWdlcihuKSAmJiBOdW1iZXIuaXNJbnRlZ2VyKGQpICYmIGQgIT09IG4gJiYgZCAhPT0gMVxuICAgICAgKTtcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChcbiAgICAgICAgISh0eXBlb2YgbiA9PT0gXCJiaWdpbnRcIiAmJiB0eXBlb2YgZCA9PSBcImJpZ2ludFwiKSB8fCBkICE9PSBuICYmIGQgIT09IEJpZ0ludCgxKVxuICAgICAgKTtcbiAgICAgIGlmIChvcHRpb25zPy5jYW5vbmljYWwgPz8gdHJ1ZSkge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IGNhbm9uaWNhbE51bWJlcihjZSwgdmFsdWUpO1xuICAgICAgICB0aGlzLl9pc0Nhbm9uaWNhbCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9pc0Nhbm9uaWNhbCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoXG4gICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDEyLkNvbXBsZXgpIHx8ICFOdW1iZXIuaXNOYU4odmFsdWUucmUpICYmICFOdW1iZXIuaXNOYU4odmFsdWUuaW0pICYmIGNlLmNob3AodmFsdWUuaW0pICE9PSAwXG4gICAgICApO1xuICAgICAgdGhpcy5fdmFsdWUgPSBjYW5vbmljYWxOdW1iZXIoY2UsIHZhbHVlKTtcbiAgICAgIHRoaXMuX2lzQ2Fub25pY2FsID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgZ2V0IGhhc2goKSB7XG4gICAgaWYgKHRoaXMuX2hhc2ggIT09IHZvaWQgMClcbiAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuICAgIGxldCBoID0gMDtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ZhbHVlID09PSBcIm51bWJlclwiKVxuICAgICAgaCA9IGhhc2hDb2RlKHRoaXMuX3ZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIGVsc2UgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgxMi5Db21wbGV4KVxuICAgICAgaCA9IGhhc2hDb2RlKFxuICAgICAgICB0aGlzLl92YWx1ZS5yZS50b1N0cmluZygpICsgXCIgK2kgXCIgKyB0aGlzLl92YWx1ZS5pbS50b1N0cmluZygpXG4gICAgICApO1xuICAgIGVsc2UgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgIGggPSBoYXNoQ29kZSh0aGlzLl92YWx1ZS50b1N0cmluZygpKTtcbiAgICBlbHNlXG4gICAgICBoID0gaGFzaENvZGUoXG4gICAgICAgIHRoaXMuX3ZhbHVlWzBdLnRvU3RyaW5nKCkgKyBcIiAvIFwiICsgdGhpcy5fdmFsdWVbMV0udG9TdHJpbmcoKVxuICAgICAgKTtcbiAgICB0aGlzLl9oYXNoID0gaDtcbiAgICByZXR1cm4gaDtcbiAgfVxuICBnZXQgaGVhZCgpIHtcbiAgICByZXR1cm4gXCJOdW1iZXJcIjtcbiAgfVxuICBnZXQgaXNQdXJlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGdldCBpc0V4YWN0KCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih0aGlzLl92YWx1ZSk7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5pc0ludGVnZXIoKTtcbiAgICBpZiAodGhpcy5fdmFsdWUgaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDEyLkNvbXBsZXgpXG4gICAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih0aGlzLl92YWx1ZS5yZSkgJiYgTnVtYmVyLmlzSW50ZWdlcih0aGlzLl92YWx1ZS5pbSk7XG4gICAgcmV0dXJuIGlzUmF0aW9uYWwodGhpcy5fdmFsdWUpO1xuICB9XG4gIGdldCBpc0Nhbm9uaWNhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNDYW5vbmljYWw7XG4gIH1cbiAgc2V0IGlzQ2Fub25pY2FsKHZhbCkge1xuICAgIHRoaXMuX2lzQ2Fub25pY2FsID0gdmFsO1xuICB9XG4gIGdldCBjb21wbGV4aXR5KCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBnZXQgbnVtZXJpY1ZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuICBnZXQgZG9tYWluKCkge1xuICAgIGlmICh0aGlzLl9kb21haW4gPT09IHZvaWQgMClcbiAgICAgIHRoaXMuX2RvbWFpbiA9IHRoaXMuZW5naW5lLmRvbWFpbihpbmZlck51bWVyaWNEb21haW4odGhpcy5fdmFsdWUpKTtcbiAgICByZXR1cm4gdGhpcy5fZG9tYWluO1xuICB9XG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiBzZXJpYWxpemVKc29uTnVtYmVyKHRoaXMuZW5naW5lLCB0aGlzLl92YWx1ZSwge1xuICAgICAgbGF0ZXg6IHRoaXMuX2xhdGV4XG4gICAgfSk7XG4gIH1cbiAgZ2V0IHNnbigpIHtcbiAgICBpZiAodGhpcy5fdmFsdWUgPT09IDApXG4gICAgICByZXR1cm4gMDtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAodGhpcy5fdmFsdWUgPCAwKVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgICBpZiAodGhpcy5fdmFsdWUgPiAwKVxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdmFsdWUgaW5zdGFuY2VvZiBEZWNpbWFsKSB7XG4gICAgICBpZiAodGhpcy5fdmFsdWUuaXNaZXJvKCkpXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgaWYgKHRoaXMuX3ZhbHVlLmlzTmVnYXRpdmUoKSlcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgaWYgKHRoaXMuX3ZhbHVlLmlzUG9zaXRpdmUoKSlcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKSB7XG4gICAgICBjb25zdCBbbnVtZXIsIGRlbm9tXSA9IHRoaXMuX3ZhbHVlO1xuICAgICAgaWYgKG51bWVyID09PSAwICYmIGRlbm9tICE9PSAwKVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGlmIChudW1lciA8IDApXG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIGlmIChudW1lciA+IDApXG4gICAgICAgIHJldHVybiAxO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlzU2FtZShyaHMpIHtcbiAgICBpZiAodGhpcyA9PT0gcmhzKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKCEocmhzIGluc3RhbmNlb2YgX0JveGVkTnVtYmVyKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAodHlwZW9mIHJocy5fdmFsdWUgIT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA9PT0gcmhzLl92YWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbCkge1xuICAgICAgaWYgKCEocmhzLl92YWx1ZSBpbnN0YW5jZW9mIERlY2ltYWwpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWUuZXEocmhzLl92YWx1ZSk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJocy5fdmFsdWUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBjb25zdCBbcmhzTiwgcmhzRF0gPSByaHMuX3ZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlWzBdID09PSByaHNOICYmIHRoaXMuX3ZhbHVlWzFdID09PSByaHNEO1xuICAgIH1cbiAgICBpZiAodGhpcy5fdmFsdWUgaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDEyLkNvbXBsZXgpIHtcbiAgICAgIGlmICghKHJocy5fdmFsdWUgaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDEyLkNvbXBsZXgpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWUuZXF1YWxzKHJocy5fdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaXNFcXVhbChyaHMpIHtcbiAgICByZXR1cm4gdGhpcy5pc1NhbWUocmhzKTtcbiAgfVxuICBtYXRjaChyaHMsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5pc0VxdWFsV2l0aFRvbGVyYW5jZShyaHMsIG9wdGlvbnM/Lm51bWVyaWNUb2xlcmFuY2UgPz8gMCkpXG4gICAgICByZXR1cm4ge307XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqIENvbXBhcmUgdGhpcyB3aXRoIGFub3RoZXIgQm94ZWROdW1iZXIuXG4gICAqIGByaHNgIG11c3QgYmUgYSBCb3hlZE51bWJlci4gVXNlIGBpc0VxdWFsV2l0aFRvbGVyYW5jZShyaHMuTigpKWBcbiAgICogaWYgbmVjZXNzYXJ5LlxuICAgKi9cbiAgaXNFcXVhbFdpdGhUb2xlcmFuY2UocmhzLCB0b2xlcmFuY2UpIHtcbiAgICByZXR1cm4gcmhzIGluc3RhbmNlb2YgX0JveGVkTnVtYmVyICYmIHNpZ25EaWZmKHRoaXMsIHJocywgdG9sZXJhbmNlKSA9PT0gMDtcbiAgfVxuICBpc0xlc3MocmhzKSB7XG4gICAgY29uc3QgcyA9IHNpZ25EaWZmKHRoaXMsIHJocyk7XG4gICAgaWYgKHMgPT09IHZvaWQgMClcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgcmV0dXJuIHMgPCAwO1xuICB9XG4gIGlzTGVzc0VxdWFsKHJocykge1xuICAgIGNvbnN0IHMgPSBzaWduRGlmZih0aGlzLCByaHMpO1xuICAgIGlmIChzID09PSB2b2lkIDApXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIHJldHVybiBzIDw9IDA7XG4gIH1cbiAgaXNHcmVhdGVyKHJocykge1xuICAgIHJldHVybiByaHMuaXNMZXNzRXF1YWwodGhpcyk7XG4gIH1cbiAgaXNHcmVhdGVyRXF1YWwocmhzKSB7XG4gICAgcmV0dXJuIHJocy5pc0xlc3ModGhpcyk7XG4gIH1cbiAgLyoqIHggPiAwLCBzYW1lIGFzIGBpc0dyZWF0ZXIoMClgICovXG4gIGdldCBpc1Bvc2l0aXZlKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWUgPiAwO1xuICAgIGNvbnN0IHMgPSB0aGlzLnNnbjtcbiAgICBpZiAocyA9PT0gdm9pZCAwIHx8IHMgPT09IG51bGwpXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIHJldHVybiBzID4gMDtcbiAgfVxuICAvKiogeCA+PSAwLCBzYW1lIGFzIGBpc0dyZWF0ZXJFcXVhbCgwKWAgKi9cbiAgZ2V0IGlzTm9uTmVnYXRpdmUoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA+PSAwO1xuICAgIGNvbnN0IHMgPSB0aGlzLnNnbjtcbiAgICBpZiAocyA9PT0gdm9pZCAwIHx8IHMgPT09IG51bGwpXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIHJldHVybiBzID49IDA7XG4gIH1cbiAgLyoqIHggPCAwLCBzYW1lIGFzIGBpc0xlc3MoMClgICovXG4gIGdldCBpc05lZ2F0aXZlKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWUgPCAwO1xuICAgIGNvbnN0IHMgPSB0aGlzLnNnbjtcbiAgICBpZiAocyA9PT0gdm9pZCAwIHx8IHMgPT09IG51bGwpXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIHJldHVybiBzIDwgMDtcbiAgfVxuICAvKiogeCA8PSAwLCBzYW1lIGFzIGBpc0xlc3NFcXVhbCgwKWAgKi9cbiAgZ2V0IGlzTm9uUG9zaXRpdmUoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA8PSAwO1xuICAgIGNvbnN0IHMgPSB0aGlzLnNnbjtcbiAgICBpZiAocyA9PT0gdm9pZCAwIHx8IHMgPT09IG51bGwpXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIHJldHVybiBzIDw9IDA7XG4gIH1cbiAgZ2V0IGlzWmVybygpIHtcbiAgICBpZiAodGhpcy5fdmFsdWUgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAodGhpcy5fdmFsdWUgaW5zdGFuY2VvZiBEZWNpbWFsKVxuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmlzWmVybygpO1xuICAgIGlmICh0aGlzLl92YWx1ZSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTIuQ29tcGxleClcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5pc1plcm8oKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0IGlzTm90WmVybygpIHtcbiAgICBpZiAodGhpcy5fdmFsdWUgPT09IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgIHJldHVybiAhdGhpcy5fdmFsdWUuaXNaZXJvKCk7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgxMi5Db21wbGV4KVxuICAgICAgcmV0dXJuICF0aGlzLl92YWx1ZS5pc1plcm8oKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBnZXQgaXNPbmUoKSB7XG4gICAgaWYgKHRoaXMuX3ZhbHVlID09PSAxKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5fdmFsdWUgaW5zdGFuY2VvZiBEZWNpbWFsKVxuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmVxdWFscyh0aGlzLmVuZ2luZS5fQklHTlVNX09ORSk7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgxMi5Db21wbGV4KVxuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmltID09PSAwICYmIHRoaXMuX3ZhbHVlLnJlID09PSAxO1xuICAgIHJldHVybiBpc1JhdGlvbmFsT25lKHRoaXMuX3ZhbHVlKTtcbiAgfVxuICBnZXQgaXNOZWdhdGl2ZU9uZSgpIHtcbiAgICBpZiAodGhpcy5fdmFsdWUgPT09IC0xKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5fdmFsdWUgaW5zdGFuY2VvZiBEZWNpbWFsKVxuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmVxdWFscyh0aGlzLmVuZ2luZS5fQklHTlVNX05FR0FUSVZFX09ORSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fdmFsdWUpKVxuICAgICAgcmV0dXJuIGlzUmF0aW9uYWxOZWdhdGl2ZU9uZSh0aGlzLl92YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmVxdWFscygtMSk7XG4gIH1cbiAgZ2V0IGlzT2RkKCkge1xuICAgIGlmICh0aGlzLmlzT25lIHx8IHRoaXMuaXNOZWdhdGl2ZU9uZSlcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICh0aGlzLmlzWmVybylcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIXRoaXMuaXNJbnRlZ2VyKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgdGhpcy5fdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWUgJSAyICE9PSAwO1xuICAgIGlmICh0aGlzLl92YWx1ZSBpbnN0YW5jZW9mIERlY2ltYWwpXG4gICAgICByZXR1cm4gIXRoaXMuX3ZhbHVlLm1vZCgyKS5pc1plcm8oKTtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc0V2ZW4oKSB7XG4gICAgaWYgKHRoaXMuaXNPbmUgfHwgdGhpcy5pc05lZ2F0aXZlT25lKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0aGlzLmlzWmVybylcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICghdGhpcy5pc0ludGVnZXIpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZSAlIDIgPT09IDA7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5tb2QoMikuaXNaZXJvKCk7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBnZXQgaXNQcmltZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNJbnRlZ2VyIHx8ICF0aGlzLmlzRmluaXRlIHx8IHRoaXMuaXNOb25Qb3NpdGl2ZSB8fCB0aGlzLmlzT25lIHx8IHRoaXMuaXNaZXJvKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgdGhpcy5fdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gaXNQcmltZSh0aGlzLl92YWx1ZSk7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgIHJldHVybiBpc1ByaW1lKHRoaXMuX3ZhbHVlLnRvTnVtYmVyKCkpO1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgZ2V0IGlzQ29tcG9zaXRlKCkge1xuICAgIGlmICghdGhpcy5pc0ludGVnZXIgfHwgIXRoaXMuaXNGaW5pdGUgfHwgdGhpcy5pc05vblBvc2l0aXZlIHx8IHRoaXMuaXNPbmUgfHwgdGhpcy5pc1plcm8pXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiAhaXNQcmltZSh0aGlzLl92YWx1ZSk7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgIHJldHVybiAhaXNQcmltZSh0aGlzLl92YWx1ZS50b051bWJlcigpKTtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc0luZmluaXR5KCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gIU51bWJlci5pc0Zpbml0ZSh0aGlzLl92YWx1ZSkgJiYgIU51bWJlci5pc05hTih0aGlzLl92YWx1ZSk7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgIHJldHVybiAhdGhpcy5fdmFsdWUuaXNGaW5pdGUoKSAmJiAhdGhpcy5fdmFsdWUuaXNOYU4oKTtcbiAgICBpZiAodGhpcy5fdmFsdWUgaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDEyLkNvbXBsZXgpXG4gICAgICByZXR1cm4gIXRoaXMuX3ZhbHVlLmlzRmluaXRlKCkgJiYgIXRoaXMuX3ZhbHVlLmlzTmFOKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldCBpc05hTigpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ZhbHVlID09PSBcIm51bWJlclwiKVxuICAgICAgcmV0dXJuIE51bWJlci5pc05hTih0aGlzLl92YWx1ZSk7XG4gICAgaWYgKHRoaXMuX3ZhbHVlIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5pc05hTigpO1xuICAgIGlmICh0aGlzLl92YWx1ZSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTIuQ29tcGxleClcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5pc05hTigpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBnZXQgaXNGaW5pdGUoKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzSW5maW5pdHkgJiYgIXRoaXMuaXNOYU47XG4gIH1cbiAgZ2V0IGlzTnVtYmVyKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGdldCBpc0ludGVnZXIoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl92YWx1ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKHRoaXMuX3ZhbHVlKTtcbiAgICBpZiAodGhpcy5fdmFsdWUgaW5zdGFuY2VvZiBEZWNpbWFsKVxuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmlzSW50ZWdlcigpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBnZXQgaXNSYXRpb25hbCgpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl92YWx1ZSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5pc0ludGVnZXI7XG4gIH1cbiAgZ2V0IGlzQWxnZWJyYWljKCkge1xuICAgIGlmICh0aGlzLmlzUmF0aW9uYWwpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGdldCBpc1JlYWwoKSB7XG4gICAgaWYgKCF0aGlzLmlzRmluaXRlKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0aGlzLl92YWx1ZSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTIuQ29tcGxleClcbiAgICAgIHJldHVybiB0aGlzLmVuZ2luZS5jaG9wKHRoaXMuX3ZhbHVlLmltKSA9PT0gMDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBSZWFsIG9yICstSW5maW5pdHlcbiAgZ2V0IGlzRXh0ZW5kZWRSZWFsKCkge1xuICAgIHJldHVybiB0aGlzLmlzSW5maW5pdHkgfHwgdGhpcy5pc1JlYWw7XG4gIH1cbiAgZ2V0IGlzQ29tcGxleCgpIHtcbiAgICByZXR1cm4gIXRoaXMuaXNOYU47XG4gIH1cbiAgZ2V0IGlzSW1hZ2luYXJ5KCkge1xuICAgIGlmICh0aGlzLl92YWx1ZSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTIuQ29tcGxleCkge1xuICAgICAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KHRoaXMuX3ZhbHVlLmltICE9PSAwKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0IGlzRXh0ZW5kZWRDb21wbGV4KCkge1xuICAgIHJldHVybiB0aGlzLmlzSW5maW5pdHkgfHwgIXRoaXMuaXNOYU47XG4gIH1cbiAgZ2V0IGNhbm9uaWNhbCgpIHtcbiAgICBpZiAodGhpcy5faXNDYW5vbmljYWwpXG4gICAgICByZXR1cm4gdGhpcztcbiAgICByZXR1cm4gdGhpcy5lbmdpbmUubnVtYmVyKGNhbm9uaWNhbE51bWJlcih0aGlzLmVuZ2luZSwgdGhpcy5fdmFsdWUpKTtcbiAgfVxuICBzaW1wbGlmeShfb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmNhbm9uaWNhbDtcbiAgfVxuICBOKF9vcHRpb25zKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuX3ZhbHVlKSlcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGNlID0gdGhpcy5lbmdpbmU7XG4gICAgY29uc3QgW251bWVyLCBkZW5vbV0gPSB0aGlzLl92YWx1ZTtcbiAgICBpZiAodHlwZW9mIG51bWVyID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBkZW5vbSA9PT0gXCJudW1iZXJcIiAmJiAhYmlnbnVtUHJlZmVycmVkKGNlKSlcbiAgICAgIHJldHVybiBjZS5udW1iZXIobnVtZXIgLyBkZW5vbSk7XG4gICAgcmV0dXJuIGNlLm51bWJlcihjZS5iaWdudW0obnVtZXIpLmRpdihjZS5iaWdudW0oZGVub20pKSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjYW5vbmljYWxOdW1iZXIoY2UsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERlY2ltYWwgJiYgaXNJbk1hY2hpbmVSYW5nZSh2YWx1ZSkpXG4gICAgcmV0dXJuIHZhbHVlLnRvTnVtYmVyKCk7XG4gIGlmICghaXNSYXRpb25hbCh2YWx1ZSkpXG4gICAgcmV0dXJuIHZhbHVlO1xuICB2YWx1ZSA9IHJlZHVjZWRSYXRpb25hbCh2YWx1ZSk7XG4gIGlmIChpc0JpZ1JhdGlvbmFsKHZhbHVlKSkge1xuICAgIGxldCBbbjIsIGQyXSA9IHZhbHVlO1xuICAgIGlmIChuMiA+IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSICYmIG4yIDwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgJiYgZDIgPiBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiAmJiBkMiA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgdmFsdWUgPSBbTnVtYmVyKG4yKSwgTnVtYmVyKGQyKV07XG4gICAgZWxzZSB7XG4gICAgICBpZiAoZDIgPCAwKVxuICAgICAgICBbbjIsIGQyXSA9IFstbjIsIC1kMl07XG4gICAgICBpZiAoZDIgPT09IEJpZ0ludCgxKSlcbiAgICAgICAgcmV0dXJuIGNlLmJpZ251bShuMik7XG4gICAgICBpZiAoZDIgPT09IEJpZ0ludCgwKSkge1xuICAgICAgICBpZiAobjIgPT09IGQyKVxuICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIHJldHVybiBuMiA8IDAgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbbjIsIGQyXTtcbiAgICB9XG4gIH1cbiAgbGV0IFtuLCBkXSA9IHZhbHVlO1xuICBpZiAoTnVtYmVyLmlzTmFOKG4pIHx8IE51bWJlci5pc05hTihkKSlcbiAgICByZXR1cm4gTmFOO1xuICBpZiAoZCA8IDApXG4gICAgW24sIGRdID0gWy1uLCAtZF07XG4gIGlmIChkID09PSAxKVxuICAgIHJldHVybiBuO1xuICBpZiAoZCA9PT0gMCkge1xuICAgIGlmIChuID09PSAwIHx8ICFOdW1iZXIuaXNGaW5pdGUobikpXG4gICAgICByZXR1cm4gTmFOO1xuICAgIGlmIChuIDwgMClcbiAgICAgIHJldHVybiAtSW5maW5pdHk7XG4gICAgcmV0dXJuIEluZmluaXR5O1xuICB9XG4gIGlmIChuID09PSAwKVxuICAgIHJldHVybiBuO1xuICByZXR1cm4gW24sIGRdO1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvYm94ZWQtZXhwcmVzc2lvbi9ib3hlZC1zdHJpbmcudHNcbnZhciBCb3hlZFN0cmluZyA9IGNsYXNzIF9Cb3hlZFN0cmluZyBleHRlbmRzIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY2UsIGV4cHIsIG1ldGFkYXRhKSB7XG4gICAgc3VwZXIoY2UsIG1ldGFkYXRhKTtcbiAgICB0aGlzLl9zdHJpbmcgPSBleHByLm5vcm1hbGl6ZSgpO1xuICAgIGNlLl9yZWdpc3Rlcih0aGlzKTtcbiAgfVxuICBnZXQgaGFzaCgpIHtcbiAgICByZXR1cm4gaGFzaENvZGUoXCJTdHJpbmdcIiArIHRoaXMuX3N0cmluZyk7XG4gIH1cbiAgZ2V0IGpzb24oKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZUpzb25TdHJpbmcodGhpcy5lbmdpbmUsIHRoaXMuX3N0cmluZyk7XG4gIH1cbiAgZ2V0IGhlYWQoKSB7XG4gICAgcmV0dXJuIFwiU3RyaW5nXCI7XG4gIH1cbiAgZ2V0IGlzUHVyZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBnZXQgaXNDYW5vbmljYWwoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc2V0IGlzQ2Fub25pY2FsKF92YSkge1xuICAgIHJldHVybjtcbiAgfVxuICBnZXQgZG9tYWluKCkge1xuICAgIHJldHVybiB0aGlzLmVuZ2luZS5kb21haW4oXCJTdHJpbmdcIik7XG4gIH1cbiAgZ2V0IGNvbXBsZXhpdHkoKSB7XG4gICAgcmV0dXJuIDE5O1xuICB9XG4gIGdldCBzdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZztcbiAgfVxuICBpc0VxdWFsKHJocykge1xuICAgIHJldHVybiByaHMuc3RyaW5nID09PSB0aGlzLl9zdHJpbmc7XG4gIH1cbiAgaXNTYW1lKHJocykge1xuICAgIHJldHVybiByaHMuc3RyaW5nID09PSB0aGlzLl9zdHJpbmc7XG4gIH1cbiAgbWF0Y2gocmhzLCBfb3B0aW9ucykge1xuICAgIGlmICghKHJocyBpbnN0YW5jZW9mIF9Cb3hlZFN0cmluZykpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpZiAodGhpcy5fc3RyaW5nID09PSByaHMuX3N0cmluZylcbiAgICAgIHJldHVybiB7fTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2JveGVkLWV4cHJlc3Npb24vYm94LnRzXG5mdW5jdGlvbiBib3hOdW1iZXIoY2UsIG51bSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIG51bSA9PT0gXCJudW1iZXJcIiB8fCBudW0gaW5zdGFuY2VvZiBEZWNpbWFsKVxuICAgIHJldHVybiBuZXcgQm94ZWROdW1iZXIoY2UsIG51bSwgb3B0aW9ucyk7XG4gIG9wdGlvbnMgPSBvcHRpb25zID8geyAuLi5vcHRpb25zIH0gOiB7fTtcbiAgaWYgKCEoXCJjYW5vbmljYWxcIiBpbiBvcHRpb25zKSlcbiAgICBvcHRpb25zLmNhbm9uaWNhbCA9IHRydWU7XG4gIGlmIChBcnJheS5pc0FycmF5KG51bSkgJiYgbnVtLmxlbmd0aCA9PT0gMiAmJiBudW1bMF0gaW5zdGFuY2VvZiBEZWNpbWFsICYmIG51bVsxXSBpbnN0YW5jZW9mIERlY2ltYWwpIHtcbiAgICBpZiAoIW51bVswXS5pc0ludGVnZXIoKSB8fCAhbnVtWzFdLmlzSW50ZWdlcigpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXJyYXkgYXJndW1lbnQgdG8gYGJveE51bWJlcigpYCBzaG91bGQgYmUgdHdvIGludGVnZXJzXCIpO1xuICAgIG51bSA9IFtiaWdpbnQobnVtWzBdLnRvU3RyaW5nKCkpLCBiaWdpbnQobnVtWzFdLnRvU3RyaW5nKCkpXTtcbiAgfVxuICBpZiAoaXNSYXRpb25hbChudW0pKSB7XG4gICAgaWYgKG51bS5sZW5ndGggIT09IDIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiQXJyYXkgYXJndW1lbnQgdG8gYGJveE51bWJlcigpYCBzaG91bGQgYmUgdHdvIGludGVnZXJzIG9yIHR3byBiaWdudW1zXCJcbiAgICAgICk7XG4gICAgY29uc3QgW24sIGRdID0gbnVtO1xuICAgIGlmICh0eXBlb2YgbiA9PT0gXCJiaWdpbnRcIiAmJiB0eXBlb2YgZCA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgaWYgKG4gPT09IGQpXG4gICAgICAgIHJldHVybiBkID09PSBCaWdJbnQoMCkgPyBjZS5fTkFOIDogY2UuX09ORTtcbiAgICAgIGlmIChuID09PSBCaWdJbnQoMCkpXG4gICAgICAgIHJldHVybiBjZS5fWkVSTztcbiAgICAgIGlmIChkID09PSBCaWdJbnQoMSkpXG4gICAgICAgIHJldHVybiBjZS5udW1iZXIobiwgb3B0aW9ucyk7XG4gICAgICBpZiAoZCA9PT0gQmlnSW50KC0xKSlcbiAgICAgICAgcmV0dXJuIGNlLm51bWJlcigtbiwgb3B0aW9ucyk7XG4gICAgICBpZiAobiA9PT0gQmlnSW50KDEpICYmIGQgPT09IEJpZ0ludCgyKSlcbiAgICAgICAgcmV0dXJuIGNlLl9IQUxGO1xuICAgICAgcmV0dXJuIG5ldyBCb3hlZE51bWJlcihjZSwgW24sIGRdLCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiBkICE9PSBcIm51bWJlclwiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkFycmF5IGFyZ3VtZW50IHRvIGBib3hOdW1iZXIoKWAgc2hvdWxkIGJlIHR3byBpbnRlZ2VycyBvciB0d28gYmlnbnVtc1wiXG4gICAgICApO1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihuKSB8fCAhTnVtYmVyLmlzSW50ZWdlcihkKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkFycmF5IGFyZ3VtZW50IHRvIGBib3hOdW1iZXIoKWAgc2hvdWxkIGJlIHR3byBpbnRlZ2Vyc1wiKTtcbiAgICBpZiAoZCA9PT0gbilcbiAgICAgIHJldHVybiBkID09PSAwID8gY2UuX05BTiA6IGNlLl9PTkU7XG4gICAgaWYgKG4gPT09IDApXG4gICAgICByZXR1cm4gY2UuX1pFUk87XG4gICAgaWYgKGQgPT09IDEpXG4gICAgICByZXR1cm4gY2UubnVtYmVyKG4sIG9wdGlvbnMpO1xuICAgIGlmIChkID09PSAtMSlcbiAgICAgIHJldHVybiBjZS5udW1iZXIoLW4sIG9wdGlvbnMpO1xuICAgIGlmIChuID09PSAxICYmIGQgPT09IDIpXG4gICAgICByZXR1cm4gY2UuX0hBTEY7XG4gICAgcmV0dXJuIG5ldyBCb3hlZE51bWJlcihjZSwgW24sIGRdLCBvcHRpb25zKTtcbiAgfVxuICBpZiAobnVtIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgxMy5Db21wbGV4KSB7XG4gICAgaWYgKG51bS5pc05hTigpKVxuICAgICAgcmV0dXJuIGNlLl9OQU47XG4gICAgaWYgKG51bS5pc1plcm8oKSlcbiAgICAgIHJldHVybiBjZS5fWkVSTztcbiAgICBpZiAobnVtLmlzSW5maW5pdGUoKSlcbiAgICAgIHJldHVybiBjZS5fQ09NUExFWF9JTkZJTklUWTtcbiAgICBpZiAoY2UuY2hvcChudW0uaW0pID09PSAwKVxuICAgICAgcmV0dXJuIGNlLm51bWJlcihudW0ucmUsIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgQm94ZWROdW1iZXIoY2UsIG51bSwgb3B0aW9ucyk7XG4gIH1cbiAgbGV0IHN0ck51bSA9IFwiXCI7XG4gIGlmICh0eXBlb2YgbnVtID09PSBcInN0cmluZ1wiKVxuICAgIHN0ck51bSA9IG51bTtcbiAgZWxzZSBpZiAodHlwZW9mIG51bSA9PT0gXCJvYmplY3RcIiAmJiBcIm51bVwiIGluIG51bSkge1xuICAgIGlmICh0eXBlb2YgbnVtLm51bSA9PT0gXCJudW1iZXJcIilcbiAgICAgIHJldHVybiBjZS5udW1iZXIobnVtLm51bSwgb3B0aW9ucyk7XG4gICAgaWYgKHR5cGVvZiBudW0ubnVtICE9PSBcInN0cmluZ1wiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWF0aEpTT04gYG51bWAgcHJvcGVydHkgc2hvdWxkIGJlIGEgc3RyaW5nIG9mIGRpZ2l0c1wiKTtcbiAgICBzdHJOdW0gPSBudW0ubnVtO1xuICB9XG4gIGlmIChzdHJOdW0pIHtcbiAgICBzdHJOdW0gPSBzdHJOdW0udG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoL1swLTldW25kXSQvLnRlc3Qoc3RyTnVtKSlcbiAgICAgIHN0ck51bSA9IHN0ck51bS5zbGljZSgwLCAtMSk7XG4gICAgc3RyTnVtID0gc3RyTnVtLnJlcGxhY2UoL1tcXHUwMDA5LVxcdTAwMGRcXHUwMDIwXFx1MDBhMF0vZywgXCJcIik7XG4gICAgaWYgKHN0ck51bSA9PT0gXCJuYW5cIilcbiAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgIGlmIChzdHJOdW0gPT09IFwiaW5maW5pdHlcIiB8fCBzdHJOdW0gPT09IFwiK2luZmluaXR5XCIpXG4gICAgICByZXR1cm4gY2UuX1BPU0lUSVZFX0lORklOSVRZO1xuICAgIGlmIChzdHJOdW0gPT09IFwiLWluZmluaXR5XCIpXG4gICAgICByZXR1cm4gY2UuX05FR0FUSVZFX0lORklOSVRZO1xuICAgIGlmIChzdHJOdW0gPT09IFwiMFwiKVxuICAgICAgcmV0dXJuIGNlLl9aRVJPO1xuICAgIGlmIChzdHJOdW0gPT09IFwiMVwiKVxuICAgICAgcmV0dXJuIGNlLl9PTkU7XG4gICAgaWYgKHN0ck51bSA9PT0gXCItMVwiKVxuICAgICAgcmV0dXJuIGNlLl9ORUdBVElWRV9PTkU7XG4gICAgaWYgKC9cXChbMC05XStcXCkvLnRlc3Qoc3RyTnVtKSkge1xuICAgICAgY29uc3QgW18sIGJvZHksIHJlcGVhdCwgdHJhaWxdID0gc3RyTnVtLm1hdGNoKC8oLispXFwoKFswLTldKylcXCkoLispPyQvKSA/PyBbXTtcbiAgICAgIHN0ck51bSA9IGJvZHkgKyByZXBlYXQucmVwZWF0KE1hdGguY2VpbChjZS5wcmVjaXNpb24gLyByZXBlYXQubGVuZ3RoKSkgKyAodHJhaWwgPz8gXCJcIik7XG4gICAgfVxuICAgIHJldHVybiBib3hOdW1iZXIoY2UsIGNlLmJpZ251bShzdHJOdW0pLCBvcHRpb25zKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGJveEhvbGQoY2UsIGV4cHIsIG9wdGlvbnMpIHtcbiAgaWYgKGV4cHIgPT09IG51bGwpXG4gICAgcmV0dXJuIGNlLmVycm9yKFwibWlzc2luZ1wiKTtcbiAgaWYgKHR5cGVvZiBleHByID09PSBcIm9iamVjdFwiICYmIGV4cHIgaW5zdGFuY2VvZiBBYnN0cmFjdEJveGVkRXhwcmVzc2lvbilcbiAgICByZXR1cm4gZXhwcjtcbiAgZXhwciA9IG1pc3NpbmdJZkVtcHR5KGV4cHIpO1xuICBpZiAodHlwZW9mIGV4cHIgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGJveChjZSwgZXhwciwgb3B0aW9ucyk7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cHIpKSB7XG4gICAgY29uc3QgYm94ZWQgPSBleHByLm1hcCgoeCkgPT4gYm94SG9sZChjZSwgeCwgb3B0aW9ucykpO1xuICAgIHJldHVybiBuZXcgQm94ZWRGdW5jdGlvbihjZSwgYm94ZWRbMF0sIGJveGVkLnNsaWNlKDEpKTtcbiAgfVxuICBpZiAodHlwZW9mIGV4cHIgPT09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAoXCJkaWN0XCIgaW4gZXhwcilcbiAgICAgIHJldHVybiBuZXcgQm94ZWREaWN0aW9uYXJ5KGNlLCBleHByLmRpY3QpO1xuICAgIGlmIChcImZuXCIgaW4gZXhwcilcbiAgICAgIHJldHVybiBib3hIb2xkKGNlLCBleHByLmZuLCBvcHRpb25zKTtcbiAgICBpZiAoXCJzdHJcIiBpbiBleHByKVxuICAgICAgcmV0dXJuIG5ldyBCb3hlZFN0cmluZyhjZSwgZXhwci5zdHIpO1xuICAgIGlmIChcInN5bVwiIGluIGV4cHIpXG4gICAgICByZXR1cm4gYm94KGNlLCBleHByLnN5bSwgb3B0aW9ucyk7XG4gICAgaWYgKFwibnVtXCIgaW4gZXhwcilcbiAgICAgIHJldHVybiBib3goY2UsIGV4cHIubnVtLCBvcHRpb25zKTtcbiAgfVxuICByZXR1cm4gYm94KGNlLCBleHByLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGJveEZ1bmN0aW9uKGNlLCBoZWFkMiwgb3BzMiwgb3B0aW9ucykge1xuICBpZiAoaGVhZDIgPT09IFwiSG9sZFwiKSB7XG4gICAgcmV0dXJuIG5ldyBCb3hlZEZ1bmN0aW9uKGNlLCBcIkhvbGRcIiwgW2JveEhvbGQoY2UsIG9wczJbMF0sIG9wdGlvbnMpXSwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGNhbm9uaWNhbDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGlmIChoZWFkMiA9PT0gXCJFcnJvclwiIHx8IGhlYWQyID09PSBcIkVycm9yQ29kZVwiKSB7XG4gICAgcmV0dXJuIGNlLl9mbihcbiAgICAgIGhlYWQyLFxuICAgICAgb3BzMi5tYXAoKHgpID0+IGNlLmJveCh4LCB7IGNhbm9uaWNhbDogZmFsc2UgfSkpLFxuICAgICAgb3B0aW9ucy5tZXRhZGF0YVxuICAgICk7XG4gIH1cbiAgaWYgKGhlYWQyID09PSBcIkRvbWFpblwiKVxuICAgIHJldHVybiBjZS5kb21haW4ob3BzMlswXSwgb3B0aW9ucy5tZXRhZGF0YSk7XG4gIGlmIChoZWFkMiA9PT0gXCJOdW1iZXJcIiAmJiBvcHMyLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gYm94KGNlLCBvcHMyWzBdLCBvcHRpb25zKTtcbiAgaWYgKGhlYWQyID09PSBcIlN0cmluZ1wiKSB7XG4gICAgaWYgKG9wczIubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIG5ldyBCb3hlZFN0cmluZyhjZSwgXCJcIiwgb3B0aW9ucy5tZXRhZGF0YSk7XG4gICAgcmV0dXJuIG5ldyBCb3hlZFN0cmluZyhcbiAgICAgIGNlLFxuICAgICAgb3BzMi5tYXAoKHgpID0+IGFzU3RyaW5nKHgpID8/IFwiXCIpLmpvaW4oXCJcIiksXG4gICAgICBvcHRpb25zLm1ldGFkYXRhXG4gICAgKTtcbiAgfVxuICBpZiAoaGVhZDIgPT09IFwiU3ltYm9sXCIgJiYgb3BzMi5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGNlLnN5bWJvbChvcHMyLm1hcCgoeCkgPT4gYXNTdHJpbmcoeCkgPz8gXCJcIikuam9pbihcIlwiKSwgb3B0aW9ucyk7XG4gIH1cbiAgaWYgKChoZWFkMiA9PT0gXCJEaXZpZGVcIiB8fCBoZWFkMiA9PT0gXCJSYXRpb25hbFwiKSAmJiBvcHMyLmxlbmd0aCA9PT0gMikge1xuICAgIGlmIChvcHMyWzBdIGluc3RhbmNlb2YgQWJzdHJhY3RCb3hlZEV4cHJlc3Npb24gJiYgb3BzMlsxXSBpbnN0YW5jZW9mIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uKSB7XG4gICAgICBpZiAoY2UubnVtZXJpY01vZGUgPT09IFwibWFjaGluZVwiKSB7XG4gICAgICAgIGNvbnN0IFtmbiwgZmRdID0gW2FzRmxvYXQob3BzMlswXSksIGFzRmxvYXQob3BzMlsxXSldO1xuICAgICAgICBpZiAoZm4gIT09IG51bGwgJiYgTnVtYmVyLmlzSW50ZWdlcihmbikgJiYgZmQgIT09IG51bGwgJiYgTnVtYmVyLmlzSW50ZWdlcihmZCkpXG4gICAgICAgICAgcmV0dXJuIGNlLm51bWJlcihbZm4sIGZkXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBjb25zdCBbbiwgZF0gPSBbYXNCaWdpbnQob3BzMlswXSksIGFzQmlnaW50KG9wczJbMV0pXTtcbiAgICAgIGlmIChuICE9PSBudWxsICYmIGQgIT09IG51bGwpXG4gICAgICAgIHJldHVybiBjZS5udW1iZXIoW24sIGRdLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgW24sIGRdID0gW1xuICAgICAgICBiaWdpbnRWYWx1ZShjZSwgb3BzMlswXSksXG4gICAgICAgIGJpZ2ludFZhbHVlKGNlLCBvcHMyWzFdKVxuICAgICAgXTtcbiAgICAgIGlmIChuICE9PSBudWxsICYmIGQgIT09IG51bGwpXG4gICAgICAgIHJldHVybiBjZS5udW1iZXIoW24sIGRdLCBvcHRpb25zKTtcbiAgICB9XG4gICAgaGVhZDIgPSBcIkRpdmlkZVwiO1xuICB9XG4gIGlmIChoZWFkMiA9PT0gXCJDb21wbGV4XCIpIHtcbiAgICBpZiAob3BzMi5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IG9wMTIgPSBib3goY2UsIG9wczJbMF0sIG9wdGlvbnMpO1xuICAgICAgY29uc3QgaW0gPSBhc0Zsb2F0KG9wMTIpO1xuICAgICAgaWYgKGltICE9PSBudWxsICYmIGltICE9PSAwKVxuICAgICAgICByZXR1cm4gY2UubnVtYmVyKGNlLmNvbXBsZXgoMCwgaW0pLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBjZS5tdWwoW29wMTIsIGNlLl9JXSk7XG4gICAgfVxuICAgIGlmIChvcHMyLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3Qgb3AxMiA9IGJveChjZSwgb3BzMlswXSwgb3B0aW9ucyk7XG4gICAgICBjb25zdCBvcDIyID0gYm94KGNlLCBvcHMyWzFdLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHJlID0gYXNGbG9hdChvcDEyKTtcbiAgICAgIGNvbnN0IGltID0gYXNGbG9hdChvcDIyKTtcbiAgICAgIGlmIChpbSAhPT0gbnVsbCAmJiByZSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoaW0gPT09IDAgJiYgcmUgPT09IDApXG4gICAgICAgICAgcmV0dXJuIGNlLl9aRVJPO1xuICAgICAgICBpZiAoaW0gIT09IG51bGwgJiYgaW0gIT09IDApXG4gICAgICAgICAgcmV0dXJuIGNlLm51bWJlcihjZS5jb21wbGV4KHJlLCBpbSksIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gb3AxMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjZS5hZGQoW29wMTIsIGNlLm11bChbb3AyMiwgY2UuX0ldKV0sIG9wdGlvbnMubWV0YWRhdGEpO1xuICAgIH1cbiAgfVxuICBpZiAoaGVhZDIgPT09IFwiTmVnYXRlXCIgJiYgb3BzMi5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBvcDEyID0gb3BzMlswXTtcbiAgICBpZiAodHlwZW9mIG9wMTIgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gY2UubnVtYmVyKC1vcDEyLCBvcHRpb25zKTtcbiAgICBpZiAob3AxMiBpbnN0YW5jZW9mIERlY2ltYWwpXG4gICAgICByZXR1cm4gY2UubnVtYmVyKG9wMTIubmVnKCksIG9wdGlvbnMpO1xuICAgIGNvbnN0IG51bSA9IGNlLmJveChvcDEyLCBvcHRpb25zKS5udW1lcmljVmFsdWU7XG4gICAgaWYgKG51bSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBudW0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBjZS5udW1iZXIoLW51bSwgb3B0aW9ucyk7XG4gICAgICBpZiAobnVtIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgICAgcmV0dXJuIGNlLm51bWJlcihudW0ubmVnKCksIG9wdGlvbnMpO1xuICAgICAgaWYgKG51bSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTMuQ29tcGxleClcbiAgICAgICAgcmV0dXJuIGNlLm51bWJlcihudW0ubmVnKCkpO1xuICAgICAgaWYgKGlzUmF0aW9uYWwobnVtKSlcbiAgICAgICAgcmV0dXJuIGNlLm51bWJlcihuZWcobnVtKSk7XG4gICAgfVxuICB9XG4gIGlmIChoZWFkMiA9PT0gXCJEaWN0aW9uYXJ5XCIpIHtcbiAgICBjb25zdCBkaWN0ID0ge307XG4gICAgZm9yIChjb25zdCBvcDMgb2Ygb3BzMikge1xuICAgICAgY29uc3QgYXJnID0gY2UuYm94KG9wMyk7XG4gICAgICBjb25zdCBoZWFkMyA9IGFyZy5oZWFkO1xuICAgICAgaWYgKGhlYWQzID09PSBcIktleVZhbHVlUGFpclwiIHx8IGhlYWQzID09PSBcIlBhaXJcIiB8fCBoZWFkMyA9PT0gXCJUdXBsZVwiICYmIGFyZy5ub3BzID09PSAyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGFyZy5vcDE7XG4gICAgICAgIGlmIChrZXkuaXNWYWxpZCAmJiAha2V5LmlzTm90aGluZykge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXJnLm9wMjtcbiAgICAgICAgICBsZXQgayA9IGtleS5zeW1ib2wgPz8ga2V5LnN0cmluZztcbiAgICAgICAgICBpZiAoIWsgJiYgKGtleS5udW1lcmljVmFsdWUgIT09IG51bGwgfHwga2V5LnN0cmluZykpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0eXBlb2Yga2V5Lm51bWVyaWNWYWx1ZSA9PT0gXCJudW1iZXJcIiA/IGtleS5udW1lcmljVmFsdWUgOiBhc1NtYWxsSW50ZWdlcihrZXkpO1xuICAgICAgICAgICAgaWYgKG4gJiYgTnVtYmVyLmlzRmluaXRlKG4pICYmIE51bWJlci5pc0ludGVnZXIobikpXG4gICAgICAgICAgICAgIGsgPSBuLnRvU3RyaW5nKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrKVxuICAgICAgICAgICAgZGljdFtrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgQm94ZWREaWN0aW9uYXJ5KGNlLCBkaWN0LCBvcHRpb25zKTtcbiAgfVxuICBpZiAob3B0aW9ucy5jYW5vbmljYWwpXG4gICAgcmV0dXJuIG1ha2VDYW5vbmljYWxGdW5jdGlvbihjZSwgaGVhZDIsIG9wczIsIG9wdGlvbnMubWV0YWRhdGEpO1xuICByZXR1cm4gbmV3IEJveGVkRnVuY3Rpb24oXG4gICAgY2UsXG4gICAgaGVhZDIsXG4gICAgb3BzMi5tYXAoKHgpID0+IGJveChjZSwgeCwgeyBjYW5vbmljYWw6IGZhbHNlIH0pKSxcbiAgICBvcHRpb25zXG4gICk7XG59XG5mdW5jdGlvbiBib3goY2UsIGV4cHIsIG9wdGlvbnMpIHtcbiAgaWYgKGV4cHIgPT09IG51bGwgfHwgZXhwciA9PT0gdm9pZCAwKVxuICAgIHJldHVybiBjZS5fZm4oXCJTZXF1ZW5jZVwiLCBbXSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zID8geyAuLi5vcHRpb25zIH0gOiB7fTtcbiAgaWYgKCEoXCJjYW5vbmljYWxcIiBpbiBvcHRpb25zKSlcbiAgICBvcHRpb25zLmNhbm9uaWNhbCA9IHRydWU7XG4gIGlmIChleHByIGluc3RhbmNlb2YgQWJzdHJhY3RCb3hlZEV4cHJlc3Npb24pXG4gICAgcmV0dXJuIG9wdGlvbnMuY2Fub25pY2FsID8gZXhwci5jYW5vbmljYWwgOiBleHByO1xuICBpZiAoQXJyYXkuaXNBcnJheShleHByKSkge1xuICAgIGlmIChpc01hY2hpbmVSYXRpb25hbChleHByKSkge1xuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoZXhwclswXSkgJiYgTnVtYmVyLmlzSW50ZWdlcihleHByWzFdKSlcbiAgICAgICAgcmV0dXJuIGNlLm51bWJlcihleHByKTtcbiAgICAgIHJldHVybiBib3hGdW5jdGlvbihjZSwgXCJEaXZpZGVcIiwgZXhwciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChpc0JpZ1JhdGlvbmFsKGV4cHIpKVxuICAgICAgcmV0dXJuIGNlLm51bWJlcihleHByKTtcbiAgICBpZiAodHlwZW9mIGV4cHJbMF0gPT09IFwic3RyaW5nXCIpXG4gICAgICByZXR1cm4gYm94RnVuY3Rpb24oY2UsIGV4cHJbMF0sIGV4cHIuc2xpY2UoMSksIG9wdGlvbnMpO1xuICAgIGNvbnN0IG9wczIgPSBleHByLnNsaWNlKDEpLm1hcCgoeCkgPT4gYm94KGNlLCB4LCBvcHRpb25zKSk7XG4gICAgY29uc3QgaGVhZDIgPSBib3goY2UsIGV4cHJbMF0sIG9wdGlvbnMpO1xuICAgIGlmIChoZWFkMi5zeW1ib2wpXG4gICAgICByZXR1cm4gbmV3IEJveGVkRnVuY3Rpb24oY2UsIGhlYWQyLnN5bWJvbCwgb3BzMik7XG4gICAgcmV0dXJuIGFwcGx5KGhlYWQyLCBvcHMyKTtcbiAgfVxuICBpZiAodHlwZW9mIGV4cHIgPT09IFwibnVtYmVyXCIgfHwgZXhwciBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTMuQ29tcGxleCB8fCBleHByIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICByZXR1cm4gY2UubnVtYmVyKGV4cHIpO1xuICBpZiAodHlwZW9mIGV4cHIgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoZXhwci5zdGFydHNXaXRoKFwiJ1wiKSAmJiBleHByLmVuZHNXaXRoKFwiJ1wiKSlcbiAgICAgIHJldHVybiBuZXcgQm94ZWRTdHJpbmcoY2UsIGV4cHIuc2xpY2UoMSwgLTEpKTtcbiAgICBpZiAoL15bKy1dP1swLTldLy50ZXN0KGV4cHIpKVxuICAgICAgcmV0dXJuIGNlLm51bWJlcihleHByKTtcbiAgICBpZiAoIWlzVmFsaWRJZGVudGlmaWVyKGV4cHIpKVxuICAgICAgcmV0dXJuIGNlLmVycm9yKFwiaW52YWxpZC1pZGVudGlmaWVyXCIsIHsgc3RyOiBleHByIH0pO1xuICAgIHJldHVybiBjZS5zeW1ib2woZXhwciwgb3B0aW9ucyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBleHByID09PSBcIm9iamVjdFwiKSB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB7XG4gICAgICBsYXRleDogZXhwci5sYXRleCxcbiAgICAgIHdpa2lkYXRhOiBleHByLndpa2lkYXRhXG4gICAgfTtcbiAgICBpZiAoXCJkaWN0XCIgaW4gZXhwcilcbiAgICAgIHJldHVybiBuZXcgQm94ZWREaWN0aW9uYXJ5KGNlLCBleHByLmRpY3QsIHsgY2Fub25pY2FsOiB0cnVlLCBtZXRhZGF0YSB9KTtcbiAgICBpZiAoXCJmblwiIGluIGV4cHIpIHtcbiAgICAgIGlmICh0eXBlb2YgZXhwci5mblswXSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgcmV0dXJuIGJveEZ1bmN0aW9uKGNlLCBleHByLmZuWzBdLCBleHByLmZuLnNsaWNlKDEpLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBuZXcgQm94ZWRGdW5jdGlvbihcbiAgICAgICAgY2UsXG4gICAgICAgIGJveChjZSwgZXhwci5mblswXSwgb3B0aW9ucyksXG4gICAgICAgIGV4cHIuZm4uc2xpY2UoMSkubWFwKCh4KSA9PiBib3goY2UsIHgsIG9wdGlvbnMpKSxcbiAgICAgICAgeyBtZXRhZGF0YSB9XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoXCJzdHJcIiBpbiBleHByKVxuICAgICAgcmV0dXJuIG5ldyBCb3hlZFN0cmluZyhjZSwgZXhwci5zdHIsIG1ldGFkYXRhKTtcbiAgICBpZiAoXCJzeW1cIiBpbiBleHByKVxuICAgICAgcmV0dXJuIGNlLnN5bWJvbChleHByLnN5bSwgb3B0aW9ucyk7XG4gICAgaWYgKFwibnVtXCIgaW4gZXhwcilcbiAgICAgIHJldHVybiBjZS5udW1iZXIoZXhwciwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIGNlLnN5bWJvbChcIlVuZGVmaW5lZFwiKTtcbn1cbmZ1bmN0aW9uIGFzU3RyaW5nKGV4cHIpIHtcbiAgaWYgKHR5cGVvZiBleHByID09PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBleHByO1xuICBpZiAoZXhwciBpbnN0YW5jZW9mIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHIuc3RyaW5nID8/IGV4cHIuc3ltYm9sID8/IGV4cHIudG9TdHJpbmcoKTtcbiAgfVxuICBpZiAodHlwZW9mIGV4cHIgPT09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAoXCJzdHJcIiBpbiBleHByKVxuICAgICAgcmV0dXJuIGV4cHIuc3RyO1xuICAgIGlmIChcImZuXCIgaW4gZXhwciAmJiBleHByLmZuWzBdID09PSBcIlN0cmluZ1wiICYmIHR5cGVvZiBleHByLmZuWzFdID09PSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIGV4cHIuZm5bMV07XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwcikpIHtcbiAgICBpZiAoZXhwclswXSA9PT0gXCJTdHJpbmdcIiAmJiB0eXBlb2YgZXhwclsxXSA9PT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiBleHByWzFdO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbnVtZXJpY3MvbnVtZXJpYy1jb21wbGV4LnRzXG5mdW5jdGlvbiBnYW1tYTMoYykge1xuICByZXR1cm4gYztcbn1cbmZ1bmN0aW9uIGxuZ2FtbWEzKGMpIHtcbiAgcmV0dXJuIGM7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9saWJyYXJ5L2FyaXRobWV0aWMtcG93ZXIudHNcbnZhciBpbXBvcnRfY29tcGxleDE1ID0gX190b0VTTShyZXF1aXJlX2NvbXBsZXgoKSk7XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9zeW1ib2xpYy91dGlscy50c1xudmFyIGltcG9ydF9jb21wbGV4MTQgPSBfX3RvRVNNKHJlcXVpcmVfY29tcGxleCgpKTtcbmZ1bmN0aW9uIG1ha2VQb3NpdGl2ZShleHByKSB7XG4gIGlmIChleHByLmhlYWQgPT09IFwiTmVnYXRlXCIpXG4gICAgcmV0dXJuIFstMSwgZXhwci5vcDFdO1xuICBjb25zdCBuID0gZXhwci5udW1lcmljVmFsdWU7XG4gIGlmIChuID09PSBudWxsKVxuICAgIHJldHVybiBbMSwgZXhwcl07XG4gIGNvbnN0IGNlID0gZXhwci5lbmdpbmU7XG4gIGlmICh0eXBlb2YgbiA9PT0gXCJudW1iZXJcIiAmJiBuIDwgMClcbiAgICByZXR1cm4gWy0xLCBjZS5udW1iZXIoLW4pXTtcbiAgaWYgKG4gaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQgJiYgbi5pc05lZ2F0aXZlKCkpXG4gICAgcmV0dXJuIFstMSwgY2UubnVtYmVyKG4ubmVnKCkpXTtcbiAgaWYgKG4gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDE0LmRlZmF1bHQgJiYgbi5yZSA8IDApXG4gICAgcmV0dXJuIFstMSwgY2UubnVtYmVyKGNlLmNvbXBsZXgoLW4ucmUsIC1uLmltKSldO1xuICBpZiAoaXNNYWNoaW5lUmF0aW9uYWwobikgJiYgblswXSA8IDApXG4gICAgcmV0dXJuIFstMSwgY2UubnVtYmVyKFstblswXSwgblsxXV0pXTtcbiAgaWYgKGlzQmlnUmF0aW9uYWwobikgJiYgblswXSA8IDApXG4gICAgcmV0dXJuIFstMSwgY2UubnVtYmVyKFstblswXSwgblsxXV0pXTtcbiAgcmV0dXJuIFsxLCBleHByXTtcbn1cbmZ1bmN0aW9uIGFwcGx5MihleHByLCBmbiwgYmlnRm4sIGNvbXBsZXhGbikge1xuICBjb25zdCBuID0gZXhwci5udW1lcmljVmFsdWU7XG4gIGNvbnN0IGNlID0gZXhwci5lbmdpbmU7XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChuICE9PSBudWxsKTtcbiAgaWYgKHR5cGVvZiBuID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKGJpZ251bVByZWZlcnJlZChjZSkgJiYgYmlnRm4pXG4gICAgICByZXR1cm4gY2UuY2hvcChiaWdGbihjZS5iaWdudW0obikpKTtcbiAgICByZXR1cm4gY2UuY2hvcChmbihuKSk7XG4gIH1cbiAgaWYgKG4gaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpXG4gICAgcmV0dXJuIGNlLmNob3AoYmlnRm4/LihuKSA/PyBmbihuLnRvTnVtYmVyKCkpKTtcbiAgaWYgKGlzTWFjaGluZVJhdGlvbmFsKG4pKSB7XG4gICAgaWYgKCFiaWdudW1QcmVmZXJyZWQoY2UpIHx8ICFiaWdGbilcbiAgICAgIHJldHVybiBjZS5jaG9wKGZuKG5bMF0gLyBuWzFdKSk7XG4gICAgcmV0dXJuIGNlLmNob3AoYmlnRm4oY2UuYmlnbnVtKG5bMF0pLmRpdihuWzFdKSkpO1xuICB9XG4gIGlmIChpc0JpZ1JhdGlvbmFsKG4pKSB7XG4gICAgaWYgKGJpZ0ZuKVxuICAgICAgcmV0dXJuIGNlLmNob3AoYmlnRm4oY2UuYmlnbnVtKG5bMF0pLmRpdihjZS5iaWdudW0oblsxXSkpKSk7XG4gICAgcmV0dXJuIGNlLmNob3AoZm4oTnVtYmVyKG5bMF0pIC8gTnVtYmVyKG5bMV0pKSk7XG4gIH1cbiAgaWYgKG4gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDE0LmRlZmF1bHQpIHtcbiAgICBpZiAoIWNvbXBsZXhGbiB8fCAhY29tcGxleEFsbG93ZWQoY2UpKVxuICAgICAgcmV0dXJuIE5hTjtcbiAgICByZXR1cm4gY2UuY2hvcChjb21wbGV4Rm4obikpO1xuICB9XG4gIHJldHVybiBOYU47XG59XG5mdW5jdGlvbiBhcHBseU4oZXhwciwgZm4sIGJpZ0ZuLCBjb21wbGV4Rm4pIHtcbiAgaWYgKChleHByPy5udW1lcmljVmFsdWUgPz8gbnVsbCkgPT09IG51bGwpXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgcmV0dXJuIGV4cHIuZW5naW5lLm51bWJlcihhcHBseTIoZXhwciwgZm4sIGJpZ0ZuLCBjb21wbGV4Rm4pKTtcbn1cbmZ1bmN0aW9uIGFwcGx5MjIoZXhwcjEsIGV4cHIyLCBmbiwgYmlnRm4sIGNvbXBsZXhGbikge1xuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoZXhwcjEubnVtZXJpY1ZhbHVlICE9PSBudWxsICYmIGV4cHIyLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCk7XG4gIGNvbnN0IGNlID0gZXhwcjEuZW5naW5lO1xuICBsZXQgbTEgPSBleHByMS5udW1lcmljVmFsdWU7XG4gIGlmIChpc01hY2hpbmVSYXRpb25hbChtMSkpXG4gICAgbTEgPSBtMVswXSAvIG0xWzFdO1xuICBsZXQgbTIgPSBleHByMi5udW1lcmljVmFsdWU7XG4gIGlmIChpc01hY2hpbmVSYXRpb25hbChtMikpXG4gICAgbTIgPSBtMlswXSAvIG0yWzFdO1xuICBpZiAoIWJpZ251bVByZWZlcnJlZChjZSkgJiYgdHlwZW9mIG0xID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBtMiA9PT0gXCJudW1iZXJcIilcbiAgICByZXR1cm4gZm4obTEsIG0yKTtcbiAgbGV0IGIxID0gdm9pZCAwO1xuICBpZiAobTEgaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpXG4gICAgYjEgPSBtMTtcbiAgZWxzZSBpZiAoaXNCaWdSYXRpb25hbChtMSkpXG4gICAgYjEgPSBjZS5iaWdudW0obTFbMF0pLmRpdihjZS5iaWdudW0obTFbMV0pKTtcbiAgZWxzZSBpZiAobTEgIT09IG51bGwgJiYgdHlwZW9mIG0xID09PSBcIm51bWJlclwiKVxuICAgIGIxID0gY2UuYmlnbnVtKG0xKTtcbiAgbGV0IGIyID0gdm9pZCAwO1xuICBpZiAobTIgaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpXG4gICAgYjIgPSBtMjtcbiAgZWxzZSBpZiAoaXNCaWdSYXRpb25hbChtMikpXG4gICAgYjEgPSBjZS5iaWdudW0obTJbMF0pLmRpdihjZS5iaWdudW0obTJbMV0pKTtcbiAgZWxzZSBpZiAobTIgIT09IG51bGwgJiYgdHlwZW9mIG0yID09PSBcIm51bWJlclwiKVxuICAgIGIyID0gY2UuYmlnbnVtKG0yKTtcbiAgaWYgKGIxICYmIGIyKVxuICAgIHJldHVybiBiaWdGbj8uKGIxLCBiMikgPz8gZm4oYjEudG9OdW1iZXIoKSwgYjIudG9OdW1iZXIoKSk7XG4gIGlmIChtMSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTQuZGVmYXVsdCB8fCBtMiBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTQuZGVmYXVsdCkge1xuICAgIGlmICghY29tcGxleEZuIHx8ICFjb21wbGV4QWxsb3dlZChjZSkpXG4gICAgICByZXR1cm4gTmFOO1xuICAgIHJldHVybiBjb21wbGV4Rm4oXG4gICAgICBjZS5jb21wbGV4KG0xID8/IGIxPy50b051bWJlcigpID8/IE5hTiksXG4gICAgICBjZS5jb21wbGV4KG0yID8/IGIyPy50b051bWJlcigpID8/IE5hTilcbiAgICApO1xuICB9XG4gIHJldHVybiBOYU47XG59XG5mdW5jdGlvbiBhcHBseTJOKGV4cHIxLCBleHByMiwgZm4sIGJpZ0ZuLCBjb21wbGV4Rm4pIHtcbiAgaWYgKGV4cHIxLm51bWVyaWNWYWx1ZSA9PT0gbnVsbCB8fCBleHByMi5udW1lcmljVmFsdWUgPT09IG51bGwpXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgcmV0dXJuIGV4cHIxLmVuZ2luZS5udW1iZXIoYXBwbHkyMihleHByMSwgZXhwcjIsIGZuLCBiaWdGbiwgY29tcGxleEZuKSk7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9saWJyYXJ5L2FyaXRobWV0aWMtcG93ZXIudHNcbmZ1bmN0aW9uIGNhbm9uaWNhbFBvd2VyKGNlLCBiYXNlLCBleHBvbmVudCwgbWV0YWRhdGEpIHtcbiAgaWYgKGV4cG9uZW50LnN5bWJvbCA9PT0gXCJDb21wbGV4SW5maW5pdHlcIilcbiAgICByZXR1cm4gY2UuX05BTjtcbiAgaWYgKGV4cG9uZW50LmlzWmVybylcbiAgICByZXR1cm4gY2UuX09ORTtcbiAgaWYgKGV4cG9uZW50LmlzT25lKVxuICAgIHJldHVybiBiYXNlO1xuICBpZiAoZXhwb25lbnQuaXNOZWdhdGl2ZU9uZSlcbiAgICByZXR1cm4gY2UuaW52KGJhc2UpO1xuICBpZiAoZXhwb25lbnQubnVtZXJpY1ZhbHVlICE9PSBudWxsKSB7XG4gICAgaWYgKGJhc2UubnVtZXJpY1ZhbHVlICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBudW1CYXNlID0gYXNGbG9hdChiYXNlKTtcbiAgICAgIGlmIChudW1CYXNlID09PSAxKVxuICAgICAgICByZXR1cm4gY2UuX09ORTtcbiAgICAgIGlmIChudW1CYXNlID09PSAwKSB7XG4gICAgICAgIGlmIChleHBvbmVudC5pc1Bvc2l0aXZlKVxuICAgICAgICAgIHJldHVybiBjZS5fWkVSTztcbiAgICAgICAgaWYgKGV4cG9uZW50LmlzTmVnYXRpdmUpXG4gICAgICAgICAgcmV0dXJuIGNlLl9DT01QTEVYX0lORklOSVRZO1xuICAgICAgfVxuICAgICAgaWYgKGV4cG9uZW50LmlzTmVnYXRpdmVPbmUpXG4gICAgICAgIHJldHVybiBjZS5pbnYoYmFzZSk7XG4gICAgICBjb25zdCBlID0gYXNGbG9hdChleHBvbmVudCk7XG4gICAgICBpZiAoZSA9PT0gMC41IHx8IGUgPT09IC0wLjUpIHtcbiAgICAgICAgY29uc3QgYiA9IGFzU21hbGxJbnRlZ2VyKGJhc2UpO1xuICAgICAgICBpZiAoYiAhPT0gbnVsbCAmJiBiID4gMCkge1xuICAgICAgICAgIGNvbnN0IFtjb2VmLCByYWRpY2FuZF0gPSBmYWN0b3JQb3dlcihiLCAyKTtcbiAgICAgICAgICBpZiAocmFkaWNhbmQgPT09IDEgJiYgY29lZiA9PT0gMSlcbiAgICAgICAgICAgIHJldHVybiBjZS5fT05FO1xuICAgICAgICAgIGlmIChjb2VmICE9PSAxKSB7XG4gICAgICAgICAgICBpZiAocmFkaWNhbmQgPT09IDEpXG4gICAgICAgICAgICAgIHJldHVybiBjZS5udW1iZXIoZSA+PSAwID8gY29lZiA6IFsxLCBjb2VmXSk7XG4gICAgICAgICAgICByZXR1cm4gY2UubXVsKFtcbiAgICAgICAgICAgICAgY2UubnVtYmVyKGNvZWYpLFxuICAgICAgICAgICAgICBjZS5fZm4oXCJTcXJ0XCIsIFtjZS5udW1iZXIocmFkaWNhbmQpXSlcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZSA+IDApXG4gICAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiU3FydFwiLCBbYmFzZV0sIG1ldGFkYXRhKTtcbiAgICAgICAgICByZXR1cm4gY2UuaW52KGNlLl9mbihcIlNxcnRcIiwgW2Jhc2VdKSwgbWV0YWRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlID4gMClcbiAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiUG93ZXJcIiwgW2Jhc2UsIGNlLl9IQUxGXSwgbWV0YWRhdGEpO1xuICAgICAgICByZXR1cm4gY2UuX2ZuKFwiUG93ZXJcIiwgW2Jhc2UsIGNlLm51bWJlcihbLTEsIDJdKV0sIG1ldGFkYXRhKTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlLmlzSW5maW5pdHkpIHtcbiAgICAgICAgaWYgKGV4cG9uZW50Lm51bWVyaWNWYWx1ZSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTUuZGVmYXVsdCkge1xuICAgICAgICAgIGNvbnN0IHJlID0gZXhwb25lbnQubnVtZXJpY1ZhbHVlLnJlO1xuICAgICAgICAgIGlmIChyZSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgICAgICAgIGlmIChyZSA8IDApXG4gICAgICAgICAgICByZXR1cm4gY2UuX1pFUk87XG4gICAgICAgICAgaWYgKHJlID4gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5fQ09NUExFWF9JTkZJTklUWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZS5pc05lZ2F0aXZlKSB7XG4gICAgICAgICAgaWYgKGV4cG9uZW50LmlzSW5maW5pdHkpXG4gICAgICAgICAgICByZXR1cm4gY2UuX05BTjtcbiAgICAgICAgfSBlbHNlIGlmIChiYXNlLmlzUG9zaXRpdmUpIHtcbiAgICAgICAgICBpZiAoZXhwb25lbnQuaXNOZWdhdGl2ZU9uZSlcbiAgICAgICAgICAgIHJldHVybiBjZS5fWkVSTztcbiAgICAgICAgICBpZiAoZXhwb25lbnQuaXNJbmZpbml0eSlcbiAgICAgICAgICAgIHJldHVybiBleHBvbmVudC5pc05lZ2F0aXZlID8gY2UuX1pFUk8gOiBjZS5fUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChleHBvbmVudC5pc0luZmluaXR5ICYmIChiYXNlLmlzT25lIHx8IGJhc2UuaXNOZWdhdGl2ZU9uZSkpXG4gICAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgIH1cbiAgfVxuICBpZiAoYmFzZS5oZWFkID09PSBcIlBvd2VyXCIgJiYgYmFzZS5vcDEuaXNSZWFsKSB7XG4gICAgY29uc3QgYSA9IGFzU21hbGxJbnRlZ2VyKGV4cG9uZW50KTtcbiAgICBpZiAoYSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgYiA9IGFzU21hbGxJbnRlZ2VyKGJhc2Uub3AyKTtcbiAgICAgIGlmIChiICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjZS5wb3coYmFzZS5vcDEsIGNlLm51bWJlcihhICogYikpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYmFzZS5vcDEuaXNOb25OZWdhdGl2ZSkge1xuICAgICAgY29uc3QgYXIgPSBhc1JhdGlvbmFsKGV4cG9uZW50KTtcbiAgICAgIGlmIChhcikge1xuICAgICAgICBjb25zdCBiciA9IGFzUmF0aW9uYWwoYmFzZS5vcDIpO1xuICAgICAgICBpZiAoYnIpXG4gICAgICAgICAgcmV0dXJuIGNlLnBvdyhiYXNlLm9wMSwgY2UubnVtYmVyKG11bDIoYXIsIGJyKSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoYmFzZS5oZWFkID09PSBcIk11bHRpcGx5XCIpIHtcbiAgICBjb25zdCBlID0gYXNTbWFsbEludGVnZXIoZXhwb25lbnQpO1xuICAgIGlmIChlICE9PSBudWxsKVxuICAgICAgcmV0dXJuIGNlLl9mbihcbiAgICAgICAgXCJNdWx0aXBseVwiLFxuICAgICAgICBiYXNlLm9wcy5tYXAoKHgpID0+IGNlLnBvdyh4LCBleHBvbmVudCkpXG4gICAgICApO1xuICB9XG4gIHJldHVybiBjZS5fZm4oXCJQb3dlclwiLCBbYmFzZSwgZXhwb25lbnRdLCBtZXRhZGF0YSk7XG59XG5mdW5jdGlvbiBzcXVhcmUoY2UsIGJhc2UpIHtcbiAgY29uc3QgbnVtID0gYmFzZS5udW1lcmljVmFsdWU7XG4gIGlmICh0eXBlb2YgbnVtID09PSBcIm51bWJlclwiKVxuICAgIHJldHVybiBjZS5udW1iZXIobnVtICogbnVtKTtcbiAgaWYgKG51bSBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdClcbiAgICByZXR1cm4gY2UubnVtYmVyKG51bS5wb3coMikpO1xuICBpZiAobnVtIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgxNS5kZWZhdWx0KVxuICAgIHJldHVybiBjZS5udW1iZXIobnVtLnBvdygyKSk7XG4gIGlmIChpc01hY2hpbmVSYXRpb25hbChudW0pKVxuICAgIHJldHVybiBjZS5udW1iZXIoW251bVsxXSAqIG51bVsxXSwgbnVtWzBdICogbnVtWzBdXSk7XG4gIGlmIChpc0JpZ1JhdGlvbmFsKG51bSkpXG4gICAgcmV0dXJuIGNlLm51bWJlcihbbnVtWzFdICogbnVtWzFdLCBudW1bMF0gKiBudW1bMF1dKTtcbiAgaWYgKGJhc2UuaGVhZCA9PT0gXCJNdWx0aXBseVwiKVxuICAgIHJldHVybiBjZS5fZm4oXG4gICAgICBcIk11bHRpcGx5XCIsXG4gICAgICBiYXNlLm9wcy5tYXAoKHgpID0+IHNxdWFyZShjZSwgeCkpXG4gICAgKTtcbiAgaWYgKGJhc2UuaGVhZCA9PT0gXCJQb3dlclwiKSB7XG4gICAgY29uc3QgZXhwMiA9IGFzU21hbGxJbnRlZ2VyKGJhc2Uub3AyKTtcbiAgICBpZiAoZXhwMiAhPT0gbnVsbClcbiAgICAgIHJldHVybiBjZS5wb3coYmFzZS5vcDEsIGNlLm51bWJlcihleHAyICogMikpO1xuICAgIHJldHVybiBjZS5wb3coYmFzZS5vcDEsIGNlLm11bChbY2UubnVtYmVyKDIpLCBiYXNlLm9wMl0pKTtcbiAgfVxuICByZXR1cm4gY2UucG93KGJhc2UsIGNlLm51bWJlcigyKSk7XG59XG5mdW5jdGlvbiBudW1FdmFsUG93ZXIoY2UsIGJhc2UsIGV4cG9uZW50KSB7XG4gIGlmIChiYXNlLm51bWVyaWNWYWx1ZSA9PT0gbnVsbCB8fCBleHBvbmVudC5udW1lcmljVmFsdWUgPT09IG51bGwpXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgaWYgKGJhc2UubnVtZXJpY1ZhbHVlIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgxNS5kZWZhdWx0KSB7XG4gICAgaWYgKGV4cG9uZW50Lm51bWVyaWNWYWx1ZSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTUuZGVmYXVsdClcbiAgICAgIHJldHVybiBjZS5udW1iZXIoYmFzZS5udW1lcmljVmFsdWUucG93KGV4cG9uZW50Lm51bWVyaWNWYWx1ZSkpO1xuICAgIHJldHVybiBjZS5udW1iZXIoYmFzZS5udW1lcmljVmFsdWUucG93KGFzRmxvYXQoZXhwb25lbnQpID8/IE5hTikpO1xuICB9XG4gIGlmIChleHBvbmVudC5udW1lcmljVmFsdWUgaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDE1LmRlZmF1bHQpIHtcbiAgICBjb25zdCBiID0gYXNGbG9hdChiYXNlKSA/PyBudWxsO1xuICAgIGlmIChiICE9PSBudWxsKVxuICAgICAgcmV0dXJuIGNlLm51bWJlcihjZS5jb21wbGV4KGIpLnBvdyhleHBvbmVudC5udW1lcmljVmFsdWUpKTtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGNvbnN0IGludkV4cCA9IHJvb3RFeHAoZXhwb25lbnQpO1xuICBpZiAoYmlnbnVtUHJlZmVycmVkKGNlKSB8fCBiYXNlLm51bWVyaWNWYWx1ZSBpbnN0YW5jZW9mIGRlY2ltYWxfZGVmYXVsdCB8fCBleHBvbmVudC5udW1lcmljVmFsdWUgaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpIHtcbiAgICBjb25zdCBiaWdCYXNlID0gYXNCaWdudW0oYmFzZSk7XG4gICAgY29uc3QgYmlnRXhwID0gYXNCaWdudW0oZXhwb25lbnQpO1xuICAgIGlmICghYmlnQmFzZSB8fCAhYmlnRXhwKVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAoaW52RXhwID09PSAyKSB7XG4gICAgICBpZiAoYmlnQmFzZS5pc05lZygpKVxuICAgICAgICByZXR1cm4gY29tcGxleEFsbG93ZWQoY2UpID8gY2UubnVtYmVyKGNlLmNvbXBsZXgoMCwgYmlnQmFzZS5uZWcoKS5zcXJ0KCkudG9OdW1iZXIoKSkpIDogY2UuX05BTjtcbiAgICAgIHJldHVybiBjZS5udW1iZXIoYmlnQmFzZS5zcXJ0KCkpO1xuICAgIH1cbiAgICBpZiAoIWJpZ0V4cC5pc0ludGVnZXIoKSAmJiBiaWdCYXNlLmlzTmVnKCkpIHtcbiAgICAgIGlmICghY29tcGxleEFsbG93ZWQoY2UpKVxuICAgICAgICByZXR1cm4gY2UuX05BTjtcbiAgICAgIGNvbnN0IHpCYXNlID0gY2UuY29tcGxleChiaWdCYXNlLnRvTnVtYmVyKCkpO1xuICAgICAgY29uc3QgekV4cCA9IGNlLmNvbXBsZXgoYmlnRXhwLnRvTnVtYmVyKCkpO1xuICAgICAgcmV0dXJuIGNlLm51bWJlcih6QmFzZS5wb3coekV4cCkpO1xuICAgIH1cbiAgICByZXR1cm4gY2UubnVtYmVyKGJpZ0Jhc2UucG93KGJpZ0V4cCkpO1xuICB9XG4gIGNvbnN0IGZsb2F0RXhwID0gYXNGbG9hdChleHBvbmVudCkgPz8gTmFOO1xuICBjb25zdCBmbG9hdEJhc2UgPSBhc0Zsb2F0KGJhc2UpID8/IE5hTjtcbiAgaWYgKGludkV4cCA9PT0gMikge1xuICAgIGlmIChmbG9hdEJhc2UgPCAwKSB7XG4gICAgICByZXR1cm4gY29tcGxleEFsbG93ZWQoY2UpID8gY2UubXVsKFtjZS5fSSwgY2UubnVtYmVyKE1hdGguc3FydCgtZmxvYXRCYXNlKSldKSA6IGNlLl9OQU47XG4gICAgfVxuICAgIHJldHVybiBjZS5udW1iZXIoTWF0aC5zcXJ0KGZsb2F0QmFzZSkpO1xuICB9XG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihmbG9hdEV4cCkgJiYgZmxvYXRCYXNlIDwgMCkge1xuICAgIGlmICghY29tcGxleEFsbG93ZWQoY2UpKVxuICAgICAgcmV0dXJuIGNlLl9OQU47XG4gICAgY29uc3QgekJhc2UgPSBjZS5jb21wbGV4KGZsb2F0QmFzZSk7XG4gICAgY29uc3QgekV4cCA9IGNlLmNvbXBsZXgoZmxvYXRFeHApO1xuICAgIHJldHVybiBjZS5udW1iZXIoekJhc2UucG93KHpFeHApKTtcbiAgfVxuICByZXR1cm4gY2UubnVtYmVyKE1hdGgucG93KGZsb2F0QmFzZSwgZmxvYXRFeHApKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NQb3dlcihjZSwgYmFzZSwgZXhwb25lbnQsIG1vZGUpIHtcbiAgaWYgKGJhc2UuaGVhZCA9PT0gXCJNdWx0aXBseVwiKSB7XG4gICAgbGV0IGMgPSBiaWdudW1QcmVmZXJyZWQoY2UpID8gW0JpZ0ludCgxKSwgQmlnSW50KDEpXSA6IFsxLCAxXTtcbiAgICBjb25zdCB4cyA9IFtdO1xuICAgIGZvciAoY29uc3Qgb3AzIG9mIGJhc2Uub3BzKSB7XG4gICAgICBjb25zdCByID0gYXNSYXRpb25hbChvcDMpO1xuICAgICAgaWYgKHIpXG4gICAgICAgIGMgPSBtdWwyKGMsIHIpO1xuICAgICAgZWxzZVxuICAgICAgICB4cy5wdXNoKG9wMyk7XG4gICAgfVxuICAgIGlmICghaXNSYXRpb25hbE9uZShjKSlcbiAgICAgIHJldHVybiBjZS5tdWwoW1xuICAgICAgICBwcm9jZXNzU3FydChjZSwgY2UubnVtYmVyKGMpLCBtb2RlKSA/PyBjZS5fT05FLFxuICAgICAgICBjZS5wb3coXG4gICAgICAgICAgcHJvY2Vzc1Bvd2VyKGNlLCBjZS5tdWwoeHMpLCBleHBvbmVudCwgbW9kZSkgPz8gY2UubXVsKHhzKSxcbiAgICAgICAgICBleHBvbmVudFxuICAgICAgICApXG4gICAgICBdKTtcbiAgfVxuICBpZiAoYmFzZS5oZWFkID09PSBcIlBvd2VyXCIpIHtcbiAgICBpZiAoYXNTbWFsbEludGVnZXIoYmFzZS5vcDIpID09PSAtMSAmJiBhc1NtYWxsSW50ZWdlcihleHBvbmVudCkgPT09IC0xKVxuICAgICAgcmV0dXJuIGJhc2Uub3AxO1xuICAgIGNvbnN0IGUxID0gYXNSYXRpb25hbChiYXNlLm9wMik7XG4gICAgY29uc3QgZTIgPSBhc1JhdGlvbmFsKGV4cG9uZW50KTtcbiAgICBpZiAoZTEgJiYgZTIpIHtcbiAgICAgIGNvbnN0IGUgPSBtdWwyKGUxLCBlMik7XG4gICAgICBpZiAoaXNSYXRpb25hbFplcm8oZSkpXG4gICAgICAgIHJldHVybiBjZS5fT05FO1xuICAgICAgaWYgKGlzUmF0aW9uYWxPbmUoZSkpXG4gICAgICAgIHJldHVybiBiYXNlLm9wMTtcbiAgICAgIHJldHVybiBjZS5wb3coYmFzZS5vcDEsIGUpO1xuICAgIH1cbiAgICBpZiAobW9kZSA9PT0gXCJOXCIpIHtcbiAgICAgIGNvbnN0IGVmMSA9IGFzRmxvYXQoYmFzZS5vcDIpO1xuICAgICAgY29uc3QgZWYyID0gYXNGbG9hdChleHBvbmVudCk7XG4gICAgICBpZiAoZWYxICE9PSBudWxsICYmIGVmMiAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBlZiA9IGVmMSAqIGVmMjtcbiAgICAgICAgaWYgKGVmID09PSAwKVxuICAgICAgICAgIHJldHVybiBjZS5fT05FO1xuICAgICAgICBpZiAoZWYgPT09IDEpXG4gICAgICAgICAgcmV0dXJuIGJhc2Uub3AxO1xuICAgICAgICByZXR1cm4gY2UucG93KGJhc2Uub3AxLCBlZik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChtb2RlICE9PSBcIk5cIiAmJiBiYXNlLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCAmJiBiYXNlLmlzSW50ZWdlcikge1xuICAgIGNvbnN0IHNtYWxsRXhwciA9IGFzU21hbGxJbnRlZ2VyKGV4cG9uZW50KTtcbiAgICBpZiAoc21hbGxFeHByKVxuICAgICAgcmV0dXJuIG51bUV2YWxQb3dlcihjZSwgYmFzZSwgZXhwb25lbnQpO1xuICAgIGNvbnN0IHIgPSBhc1JhdGlvbmFsKGV4cG9uZW50KTtcbiAgICBpZiAocikge1xuICAgICAgY29uc3QgW24sIGRdID0gW21hY2hpbmVOdW1lcmF0b3IociksIG1hY2hpbmVEZW5vbWluYXRvcihyKV07XG4gICAgICBpZiAoKG4gPT09IDEgfHwgbiA9PT0gLTEpICYmIChkID09PSAyIHx8IGQgPT09IDMpKSB7XG4gICAgICAgIGlmIChiaWdudW1QcmVmZXJyZWQoY2UpIHx8IGJhc2UubnVtZXJpY1ZhbHVlIGluc3RhbmNlb2YgZGVjaW1hbF9kZWZhdWx0KSB7XG4gICAgICAgICAgY29uc3QgYmlnQmFzZSA9IGFzQmlnaW50KGJhc2UpO1xuICAgICAgICAgIGlmIChkICUgMiA9PT0gMCAmJiBiaWdCYXNlIDwgMCAmJiAhY29tcGxleEFsbG93ZWQoY2UpKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9OQU47XG4gICAgICAgICAgY29uc3Qgc2lnbjIgPSBiaWdCYXNlIDwgMCA/IGQgJSAyID09PSAwID8gY2UuX0kgOiBjZS5fTkVHQVRJVkVfT05FIDogY2UuX09ORTtcbiAgICAgICAgICBjb25zdCBbZmFjdG9yLCByb290XSA9IGZhY3RvclBvd2VyMihcbiAgICAgICAgICAgIGJpZ0Jhc2UgPiAwID8gYmlnQmFzZSA6IC1iaWdCYXNlLFxuICAgICAgICAgICAgZFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHJvb3QgPT09IEJpZ0ludCgxKSAmJiBmYWN0b3IgPT09IEJpZ0ludCgxKSlcbiAgICAgICAgICAgIHJldHVybiBzaWduMjtcbiAgICAgICAgICBpZiAoZmFjdG9yICE9PSBCaWdJbnQoMSkpIHtcbiAgICAgICAgICAgIGlmIChyb290ID09PSBCaWdJbnQoMSkpXG4gICAgICAgICAgICAgIHJldHVybiBjZS5tdWwoW1xuICAgICAgICAgICAgICAgIHNpZ24yLFxuICAgICAgICAgICAgICAgIGNlLm51bWJlcihuID49IDAgPyBmYWN0b3IgOiBbQmlnSW50KDEpLCBmYWN0b3JdKVxuICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiBjZS5tdWwoW1xuICAgICAgICAgICAgICBzaWduMixcbiAgICAgICAgICAgICAgY2UubnVtYmVyKGZhY3RvciksXG4gICAgICAgICAgICAgIGNlLnBvdyhjZS5udW1iZXIocm9vdCksIGV4cG9uZW50KVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBiYXNlLm51bWVyaWNWYWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGlmIChiYXNlLm51bWVyaWNWYWx1ZSA8IDAgJiYgZCAlIDIgPT09IDAgJiYgIWNvbXBsZXhBbGxvd2VkKGNlKSlcbiAgICAgICAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgICAgICAgIGNvbnN0IFtmYWN0b3IsIHJvb3RdID0gZmFjdG9yUG93ZXIoTWF0aC5hYnMoYmFzZS5udW1lcmljVmFsdWUpLCBkKTtcbiAgICAgICAgICBjb25zdCBzaWduMiA9IGJhc2UubnVtZXJpY1ZhbHVlIDwgMCA/IGQgJSAyID09PSAwID8gY2UuX0kgOiBjZS5fTkVHQVRJVkVfT05FIDogY2UuX09ORTtcbiAgICAgICAgICBpZiAocm9vdCA9PT0gMSAmJiBmYWN0b3IgPT09IDEpXG4gICAgICAgICAgICByZXR1cm4gc2lnbjI7XG4gICAgICAgICAgaWYgKGZhY3RvciAhPT0gMSkge1xuICAgICAgICAgICAgaWYgKHJvb3QgPT09IDEpXG4gICAgICAgICAgICAgIHJldHVybiBjZS5tdWwoW3NpZ24yLCBjZS5udW1iZXIobiA+PSAwID8gZmFjdG9yIDogWzEsIGZhY3Rvcl0pXSk7XG4gICAgICAgICAgICByZXR1cm4gY2UubXVsKFtcbiAgICAgICAgICAgICAgc2lnbjIsXG4gICAgICAgICAgICAgIGNlLm51bWJlcihmYWN0b3IpLFxuICAgICAgICAgICAgICBjZS5wb3coY2UubnVtYmVyKHJvb3QpLCBleHBvbmVudClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGJhc2UuaXNOZWdhdGl2ZSkge1xuICAgICAgICBpZiAoIWNvbXBsZXhBbGxvd2VkKVxuICAgICAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgICAgICByZXR1cm4gY2UubXVsKFtjZS5fSSwgY2UuZm4oXCJTcXJ0XCIsIFtjZS5uZWcoYmFzZSldKV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgaWYgKG1vZGUgIT09IFwic2ltcGxpZnlcIiAmJiBiYXNlLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCAmJiBleHBvbmVudC5udW1lcmljVmFsdWUgIT09IG51bGwpXG4gICAgcmV0dXJuIG51bUV2YWxQb3dlcihjZSwgYmFzZSwgZXhwb25lbnQpO1xuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1NxcnQoY2UsIGJhc2UsIG1vZGUpIHtcbiAgaWYgKGJhc2UuaXNPbmUpXG4gICAgcmV0dXJuIGNlLl9PTkU7XG4gIGlmIChiYXNlLmlzWmVybylcbiAgICByZXR1cm4gY2UuX1pFUk87XG4gIGlmIChiYXNlLmlzTmVnYXRpdmVPbmUpXG4gICAgcmV0dXJuIGNvbXBsZXhBbGxvd2VkKGNlKSA/IGNlLl9JIDogY2UuX05BTjtcbiAgaWYgKGJhc2UuaXNOZWdhdGl2ZSAmJiAhY29tcGxleEFsbG93ZWQoY2UpKVxuICAgIHJldHVybiBjZS5fTkFOO1xuICBjb25zdCByID0gYXNSYXRpb25hbChiYXNlKTtcbiAgaWYgKG1vZGUgPT09IFwiTlwiIHx8IG1vZGUgPT09IFwiZXZhbHVhdGVcIiAmJiAhcilcbiAgICByZXR1cm4gYXBwbHlOKFxuICAgICAgYmFzZSxcbiAgICAgICh4KSA9PiB4IDwgMCA/IGNlLmNvbXBsZXgoeCkuc3FydCgpIDogTWF0aC5zcXJ0KHgpLFxuICAgICAgKHgpID0+IHguaXNOZWcoKSA/IGNlLmNvbXBsZXgoeC50b051bWJlcigpKS5zcXJ0KCkgOiB4LnNxcnQoKSxcbiAgICAgICh4KSA9PiB4LnNxcnQoKVxuICAgICk7XG4gIGNvbnN0IG4gPSBhc1NtYWxsSW50ZWdlcihiYXNlKTtcbiAgaWYgKG4gIT09IG51bGwpIHtcbiAgICBjb25zdCBbZmFjdG9yLCByb290XSA9IGZhY3RvclBvd2VyKE1hdGguYWJzKG4pLCAyKTtcbiAgICBpZiAobiA8IDApIHtcbiAgICAgIGlmIChyb290ID09PSAxKVxuICAgICAgICBjZS5tdWwoW2NlLm51bWJlcihjZS5jb21wbGV4KDAsIGZhY3RvcikpXSk7XG4gICAgICByZXR1cm4gY2UubXVsKFtcbiAgICAgICAgY2UubnVtYmVyKGNlLmNvbXBsZXgoMCwgZmFjdG9yKSksXG4gICAgICAgIGNlLnNxcnQoY2UubnVtYmVyKHJvb3QpKVxuICAgICAgXSk7XG4gICAgfVxuICAgIGlmIChyb290ID09PSAxKVxuICAgICAgcmV0dXJuIGNlLm51bWJlcihmYWN0b3IpO1xuICAgIHJldHVybiBjZS5tdWwoW2NlLm51bWJlcihmYWN0b3IpLCBjZS5zcXJ0KGNlLm51bWJlcihyb290KSldKTtcbiAgfVxuICBpZiAocikge1xuICAgIGlmIChpc01hY2hpbmVSYXRpb25hbChyKSAmJiAhYmlnbnVtUHJlZmVycmVkKGNlKSkge1xuICAgICAgY29uc3QgW24yLCBkXSA9IHI7XG4gICAgICBpZiAoTWF0aC5hYnMobjIpIDwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgJiYgZCA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIGNvbnN0IFtuRmFjdG9yLCBuUm9vdF0gPSBmYWN0b3JQb3dlcihNYXRoLmFicyhuMiksIDIpO1xuICAgICAgICBjb25zdCBbZEZhY3RvciwgZFJvb3RdID0gZmFjdG9yUG93ZXIoZCwgMik7XG4gICAgICAgIGlmIChuMiA8IDApXG4gICAgICAgICAgcmV0dXJuIGNlLm11bChbXG4gICAgICAgICAgICBjZS5udW1iZXIoW25GYWN0b3IsIGRGYWN0b3JdKSxcbiAgICAgICAgICAgIGNlLnNxcnQoY2UubnVtYmVyKFtuUm9vdCwgZFJvb3RdKSksXG4gICAgICAgICAgICBjZS5fSVxuICAgICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gY2UubXVsKFtcbiAgICAgICAgICBjZS5udW1iZXIoW25GYWN0b3IsIGRGYWN0b3JdKSxcbiAgICAgICAgICBjZS5zcXJ0KGNlLm51bWJlcihbblJvb3QsIGRSb290XSkpXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNCaWdSYXRpb25hbChyKSB8fCBiaWdudW1QcmVmZXJyZWQoY2UpKSB7XG4gICAgICBjb25zdCBuMiA9IGJpZ2ludChyWzBdKTtcbiAgICAgIGNvbnN0IFtuRmFjdG9yLCBuUm9vdF0gPSBmYWN0b3JQb3dlcjIobjIgPiAwID8gbjIgOiAtbjIsIDIpO1xuICAgICAgY29uc3QgW2RGYWN0b3IsIGRSb290XSA9IGZhY3RvclBvd2VyMihiaWdpbnQoclsxXSksIDIpO1xuICAgICAgaWYgKG4yIDwgMClcbiAgICAgICAgcmV0dXJuIGNlLm11bChbXG4gICAgICAgICAgY2UubnVtYmVyKFtuRmFjdG9yLCBkRmFjdG9yXSksXG4gICAgICAgICAgY2Uuc3FydChjZS5udW1iZXIoW25Sb290LCBkUm9vdF0pKSxcbiAgICAgICAgICBjZS5fSVxuICAgICAgICBdKTtcbiAgICAgIHJldHVybiBjZS5tdWwoW1xuICAgICAgICBjZS5udW1iZXIoW25GYWN0b3IsIGRGYWN0b3JdKSxcbiAgICAgICAgY2Uuc3FydChjZS5udW1iZXIoW25Sb290LCBkUm9vdF0pKVxuICAgICAgXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiByb290RXhwKGV4cG9uZW50KSB7XG4gIGlmICh0eXBlb2YgZXhwb25lbnQubnVtZXJpY1ZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgY29uc3QgaW52ID0gMSAvIGV4cG9uZW50Lm51bWVyaWNWYWx1ZTtcbiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihpbnYpKVxuICAgICAgcmV0dXJuIGludjtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoZXhwb25lbnQubnVtZXJpY1ZhbHVlIGluc3RhbmNlb2YgZGVjaW1hbF9kZWZhdWx0KSB7XG4gICAgY29uc3QgaW52ID0gZXhwb25lbnQuZW5naW5lLl9CSUdOVU1fT05FLmRpdihleHBvbmVudC5udW1lcmljVmFsdWUpO1xuICAgIGlmIChpbnYuaXNJbnQoKSlcbiAgICAgIHJldHVybiBpbnYudG9OdW1iZXIoKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIWlzUmF0aW9uYWwoZXhwb25lbnQubnVtZXJpY1ZhbHVlKSlcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgW24sIGRdID0gW1xuICAgIG1hY2hpbmVOdW1lcmF0b3IoZXhwb25lbnQubnVtZXJpY1ZhbHVlKSxcbiAgICBtYWNoaW5lRGVub21pbmF0b3IoZXhwb25lbnQubnVtZXJpY1ZhbHVlKVxuICBdO1xuICBpZiAobiAhPT0gMSAmJiBuICE9PSAtMSlcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIG4gKiBkO1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGlicmFyeS9hcml0aG1ldGljLW11bHRpcGx5LnRzXG5mdW5jdGlvbiBjYW5vbmljYWxNdWx0aXBseShjZSwgb3BzMikge1xuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQob3BzMi5ldmVyeSgoeCkgPT4geC5pc0Nhbm9uaWNhbCkpO1xuICBpZiAob3BzMi5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIGNlLm51bWJlcigxKTtcbiAgaWYgKG9wczIubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiBvcHMyWzBdO1xuICBpZiAob3BzMi5sZW5ndGggPT09IDIpXG4gICAgcmV0dXJuIG11bHRpcGx5MihvcHMyWzBdLCBvcHMyWzFdKTtcbiAgY29uc3QgcHJvZHVjdCA9IG5ldyBQcm9kdWN0KGNlKTtcbiAgZm9yIChjb25zdCBvcDMgb2Ygb3BzMikge1xuICAgIGlmIChvcDMuaXNOYU4gfHwgb3AzLnN5bWJvbCA9PT0gXCJVbmRlZmluZWRcIilcbiAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgIHByb2R1Y3QuYWRkVGVybShvcDMpO1xuICB9XG4gIHJldHVybiBwcm9kdWN0LmFzRXhwcmVzc2lvbigpO1xufVxuZnVuY3Rpb24gc2ltcGxpZnlNdWx0aXBseShjZSwgb3BzMikge1xuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQob3BzMi5ldmVyeSgoeCkgPT4geC5oZWFkICE9PSBcIk11bHRpcGx5XCIpKTtcbiAgY29uc3QgcHJvZHVjdCA9IG5ldyBQcm9kdWN0KGNlKTtcbiAgZm9yIChsZXQgb3AzIG9mIG9wczIpIHtcbiAgICBvcDMgPSBvcDMuc2ltcGxpZnkoKTtcbiAgICBpZiAob3AzLmlzTmFOIHx8IG9wMy5zeW1ib2wgPT09IFwiVW5kZWZpbmVkXCIpXG4gICAgICByZXR1cm4gY2UuX05BTjtcbiAgICBwcm9kdWN0LmFkZFRlcm0ob3AzKTtcbiAgfVxuICByZXR1cm4gcHJvZHVjdC5hc0V4cHJlc3Npb24oKTtcbn1cbmZ1bmN0aW9uIGV2YWxNdWx0aXBseShjZSwgb3BzMiwgbW9kZSA9IFwiZXZhbHVhdGVcIikge1xuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQob3BzMi5sZW5ndGggPiAxLCBcImV2YWxNdWx0aXBseSgpOiBubyBhcmd1bWVudHNcIik7XG4gIGlmIChtb2RlID09PSBcIk5cIikge1xuICAgIG9wczIgPSBvcHMyLm1hcCgoeCkgPT4geC5OKCkpO1xuICAgIGlmICgoY2UubnVtZXJpY01vZGUgPT09IFwibWFjaGluZVwiIHx8IGNlLm51bWVyaWNNb2RlID09PSBcImF1dG9cIikgJiYgb3BzMi5ldmVyeSgoeCkgPT4gdHlwZW9mIHgubnVtZXJpY1ZhbHVlID09PSBcIm51bWJlclwiKSkge1xuICAgICAgbGV0IHByb2QgPSAxO1xuICAgICAgZm9yIChjb25zdCBvcDMgb2Ygb3BzMilcbiAgICAgICAgcHJvZCAqPSBvcDMubnVtZXJpY1ZhbHVlO1xuICAgICAgcmV0dXJuIGNlLm51bWJlcihwcm9kKTtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBvcDMgb2Ygb3BzMikge1xuICAgIGlmIChvcDMuaXNOYU4gfHwgb3AzLnN5bWJvbCA9PT0gXCJVbmRlZmluZWRcIilcbiAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgIGlmICghb3AzLmlzRXhhY3QpXG4gICAgICBtb2RlID0gXCJOXCI7XG4gIH1cbiAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KG9wczIuZXZlcnkoKHgpID0+IHguaGVhZCAhPT0gXCJNdWx0aXBseVwiKSk7XG4gIGlmIChtb2RlID09PSBcIk5cIilcbiAgICBvcHMyID0gb3BzMi5tYXAoKHgpID0+IHguTigpKTtcbiAgZWxzZVxuICAgIG9wczIgPSBvcHMyLm1hcCgoeCkgPT4geC5ldmFsdWF0ZSgpKTtcbiAgcmV0dXJuIG5ldyBQcm9kdWN0KGNlLCBvcHMyKS5hc0V4cHJlc3Npb24obW9kZSk7XG59XG5mdW5jdGlvbiBtdWx0aXBseTIob3AxMiwgb3AyMiwgbWV0YWRhdGEpIHtcbiAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KG9wMTIuaXNDYW5vbmljYWwpO1xuICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQob3AyMi5pc0Nhbm9uaWNhbCk7XG4gIGNvbnN0IGNlID0gb3AxMi5lbmdpbmU7XG4gIGlmIChvcDEyLnN5bWJvbCA9PT0gXCJJbWFnaW5hcnlVbml0XCIpIHtcbiAgICBjb25zdCBmID0gYXNGbG9hdChvcDIyKTtcbiAgICBpZiAoZiAhPT0gbnVsbClcbiAgICAgIHJldHVybiBjZS5udW1iZXIoY2UuY29tcGxleCgwLCBmKSk7XG4gIH1cbiAgaWYgKG9wMjIuc3ltYm9sID09PSBcIkltYWdpbmFyeVVuaXRcIikge1xuICAgIGNvbnN0IGYgPSBhc0Zsb2F0KG9wMTIpO1xuICAgIGlmIChmICE9PSBudWxsKVxuICAgICAgcmV0dXJuIGNlLm51bWJlcihjZS5jb21wbGV4KDAsIGYpKTtcbiAgfVxuICBpZiAob3AxMi5udW1lcmljVmFsdWUgIT09IG51bGwgJiYgb3AyMi5udW1lcmljVmFsdWUgIT09IG51bGwpIHtcbiAgICBjb25zdCBmMSA9IGFzRmxvYXQob3AxMik7XG4gICAgY29uc3QgZjIgPSBhc0Zsb2F0KG9wMjIpO1xuICAgIGlmIChmMSAhPT0gbnVsbCAmJiBjZS5pc0NvbXBsZXgob3AyMikpXG4gICAgICByZXR1cm4gY2UubnVtYmVyKGNlLmNvbXBsZXgoZjEgKiBvcDIyLnJlLCBmMSAqIG9wMjIuaW0pKTtcbiAgICBpZiAoZjIgIT09IG51bGwgJiYgY2UuaXNDb21wbGV4KG9wMTIpKVxuICAgICAgcmV0dXJuIGNlLm51bWJlcihjZS5jb21wbGV4KGYyICogb3AxMi5yZSwgZjIgKiBvcDEyLmltKSk7XG4gIH1cbiAgaWYgKG9wMTIubnVtZXJpY1ZhbHVlICE9PSBudWxsICYmIG9wMjIubnVtZXJpY1ZhbHVlICE9PSBudWxsICYmIG9wMTIuaXNJbnRlZ2VyICYmIG9wMjIuaXNJbnRlZ2VyKSB7XG4gICAgcmV0dXJuIGFwcGx5Mk4oXG4gICAgICBvcDEyLFxuICAgICAgb3AyMixcbiAgICAgIChhLCBiKSA9PiBhICogYixcbiAgICAgIChhLCBiKSA9PiBhLm11bChiKVxuICAgICkgPz8gY2UuX05BTjtcbiAgfVxuICBpZiAob3AxMi5pc05hTiB8fCBvcDIyLmlzTmFOIHx8IG9wMTIuc3ltYm9sID09PSBcIlVuZGVmaW5lZFwiIHx8IG9wMjIuc3ltYm9sID09PSBcIlVuZGVmaW5lZFwiKVxuICAgIHJldHVybiBjZS5fTkFOO1xuICBpZiAob3AxMi5pc05vdGhpbmcpXG4gICAgcmV0dXJuIG9wMjI7XG4gIGlmIChvcDIyLmlzTm90aGluZylcbiAgICByZXR1cm4gb3AxMjtcbiAgaWYgKG9wMTIubnVtZXJpY1ZhbHVlICE9PSBudWxsKSB7XG4gICAgaWYgKG9wMTIuaXNPbmUpXG4gICAgICByZXR1cm4gb3AyMjtcbiAgICBpZiAob3AxMi5pc05lZ2F0aXZlT25lKVxuICAgICAgcmV0dXJuIGNhbm9uaWNhbE5lZ2F0ZShvcDIyKTtcbiAgfVxuICBpZiAob3AyMi5udW1lcmljVmFsdWUgIT09IG51bGwpIHtcbiAgICBpZiAob3AyMi5pc09uZSlcbiAgICAgIHJldHVybiBvcDEyO1xuICAgIGlmIChvcDIyLmlzTmVnYXRpdmVPbmUpXG4gICAgICByZXR1cm4gY2Fub25pY2FsTmVnYXRlKG9wMTIpO1xuICB9XG4gIGxldCBzaWduMiA9IDE7XG4gIGxldCBbdCwgY10gPSBvcDEyLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCA/IFtvcDEyLCBvcDIyXSA6IFtvcDIyLCBvcDEyXTtcbiAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KHQuaGVhZCAhPT0gXCJTdWJ0cmFjdFwiKTtcbiAgaWYgKHQuaGVhZCA9PT0gXCJOZWdhdGVcIikge1xuICAgIHQgPSB0Lm9wMTtcbiAgICBzaWduMiA9IC1zaWduMjtcbiAgfVxuICBpZiAoYy5udW1lcmljVmFsdWUgIT09IG51bGwpIHtcbiAgICBjb25zdCByID0gYXNSYXRpb25hbChjKTtcbiAgICBpZiAocikge1xuICAgICAgaWYgKGlzUmF0aW9uYWxPbmUocikpXG4gICAgICAgIHJldHVybiB0O1xuICAgICAgaWYgKGlzUmF0aW9uYWxaZXJvKHIpKVxuICAgICAgICByZXR1cm4gY2UuX1pFUk87XG4gICAgICBpZiAodC5oZWFkID09PSBcIkFkZFwiKSB7XG4gICAgICAgIGlmIChzaWduMiA8IDApXG4gICAgICAgICAgYyA9IGNhbm9uaWNhbE5lZ2F0ZShjKTtcbiAgICAgICAgcmV0dXJuIGNlLmFkZChcbiAgICAgICAgICB0Lm9wcy5tYXAoKHgpID0+IG11bHRpcGx5MihjLCB4KSksXG4gICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRyID0gYXNSYXRpb25hbCh0KTtcbiAgICAgIGlmICh0cikge1xuICAgICAgICBjb25zdCBwID0gbXVsMihyLCB0cik7XG4gICAgICAgIHJldHVybiBjZS5udW1iZXIoc2lnbjIgPCAwID8gbmVnKHApIDogcCwgeyBtZXRhZGF0YSB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzaWduMiA8IDApXG4gICAgICAgIHJldHVybiBjZS5fZm4oXCJNdWx0aXBseVwiLCBbY2Fub25pY2FsTmVnYXRlKGMpLCB0XSwgbWV0YWRhdGEpO1xuICAgICAgcmV0dXJuIGNlLl9mbihcIk11bHRpcGx5XCIsIFtjLCB0XSwgbWV0YWRhdGEpO1xuICAgIH1cbiAgfVxuICBpZiAoYy5oYXNoID09PSB0Lmhhc2ggJiYgYy5pc1NhbWUodCkpXG4gICAgcmV0dXJuIHNxdWFyZShjZSwgYyk7XG4gIGNvbnN0IHByb2R1Y3QgPSBuZXcgUHJvZHVjdChjZSwgW2MsIHRdKTtcbiAgaWYgKHNpZ24yID4gMClcbiAgICByZXR1cm4gcHJvZHVjdC5hc0V4cHJlc3Npb24oKTtcbiAgcmV0dXJuIGNhbm9uaWNhbE5lZ2F0ZShwcm9kdWN0LmFzRXhwcmVzc2lvbigpLCBtZXRhZGF0YSk7XG59XG5mdW5jdGlvbiBjYW5vbmljYWxQcm9kdWN0KGNlLCBib2R5LCByYW5nZSkge1xuICBib2R5ID8/IChib2R5ID0gY2UuZXJyb3IoXCJtaXNzaW5nXCIpKTtcbiAgbGV0IGluZGV4ID0gbnVsbDtcbiAgbGV0IGxvd2VyID0gbnVsbDtcbiAgbGV0IHVwcGVyID0gbnVsbDtcbiAgaWYgKHJhbmdlICYmIHJhbmdlLmhlYWQgIT09IFwiVHVwbGVcIiAmJiByYW5nZS5oZWFkICE9PSBcIlRyaXBsZVwiICYmIHJhbmdlLmhlYWQgIT09IFwiUGFpclwiICYmIHJhbmdlLmhlYWQgIT09IFwiU2luZ2xlXCIpIHtcbiAgICBpbmRleCA9IHJhbmdlO1xuICB9IGVsc2UgaWYgKHJhbmdlKSB7XG4gICAgaW5kZXggPSByYW5nZS5vcHM/LlswXSA/PyBudWxsO1xuICAgIGxvd2VyID0gcmFuZ2Uub3BzPy5bMV0/LmNhbm9uaWNhbCA/PyBudWxsO1xuICAgIHVwcGVyID0gcmFuZ2Uub3BzPy5bMl0/LmNhbm9uaWNhbCA/PyBudWxsO1xuICB9XG4gIGlmIChpbmRleCAmJiBpbmRleC5oZWFkID09PSBcIkhvbGRcIilcbiAgICBpbmRleCA9IGluZGV4Lm9wMTtcbiAgaWYgKGluZGV4ICYmIGluZGV4LmhlYWQgPT09IFwiUmVsZWFzZUhvbGRcIilcbiAgICBpbmRleCA9IGluZGV4Lm9wMS5ldmFsdWF0ZSgpO1xuICBpbmRleCA/PyAoaW5kZXggPSBjZS5zeW1ib2woXCJOb3RoaW5nXCIpKTtcbiAgaWYgKCFpbmRleC5zeW1ib2wpXG4gICAgaW5kZXggPSBjZS5lcnJvcihbXCJpbmNvbXBhdGlibGUtZG9tYWluXCIsIFwiU3ltYm9sXCIsIGluZGV4LmRvbWFpbl0pO1xuICBlbHNlXG4gICAgaW5kZXggPSBjZS5ob2xkKGluZGV4KTtcbiAgaWYgKGxvd2VyICYmIGxvd2VyLmlzRmluaXRlKVxuICAgIGxvd2VyID0gdmFsaWRhdGVBcmd1bWVudChjZSwgbG93ZXIsIFwiSW50ZWdlclwiKTtcbiAgaWYgKHVwcGVyICYmIHVwcGVyLmlzRmluaXRlKVxuICAgIHVwcGVyID0gdmFsaWRhdGVBcmd1bWVudChjZSwgdXBwZXIsIFwiSW50ZWdlclwiKTtcbiAgaWYgKGxvd2VyICYmIHVwcGVyKVxuICAgIHJhbmdlID0gY2UudHVwbGUoW2luZGV4LCBsb3dlciwgdXBwZXJdKTtcbiAgZWxzZSBpZiAodXBwZXIpXG4gICAgcmFuZ2UgPSBjZS50dXBsZShbaW5kZXgsIGNlLm51bWJlcigxKSwgdXBwZXJdKTtcbiAgZWxzZSBpZiAobG93ZXIpXG4gICAgcmFuZ2UgPSBjZS50dXBsZShbaW5kZXgsIGxvd2VyXSk7XG4gIGVsc2VcbiAgICByYW5nZSA9IGluZGV4O1xuICByZXR1cm4gY2UuX2ZuKFwiUHJvZHVjdFwiLCBbYm9keS5jYW5vbmljYWwsIHJhbmdlXSk7XG59XG5mdW5jdGlvbiBldmFsTXVsdGlwbGljYXRpb24oY2UsIGV4cHIsIHJhbmdlLCBtb2RlKSB7XG4gIGNvbnN0IFtpbmRleCwgbG93ZXIsIHVwcGVyLCBpc0Zpbml0ZTJdID0gbm9ybWFsaXplTGltaXRzKHJhbmdlKTtcbiAgY29uc3QgZm4gPSBleHByO1xuICBpZiAobW9kZSAhPT0gXCJOXCIgJiYgKGxvd2VyID49IHVwcGVyIHx8IHVwcGVyIC0gbG93ZXIgPj0gTUFYX1NZTUJPTElDX1RFUk1TKSlcbiAgICByZXR1cm4gdm9pZCAwO1xuICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgY29uc3Qgc2F2ZWRDb250ZXh0ID0gY2UuY29udGV4dDtcbiAgY2UuY29udGV4dCA9IGZuLnNjb3BlID8/IGNlLmNvbnRleHQ7XG4gIGlmIChtb2RlID09PSBcInNpbXBsaWZ5XCIpIHtcbiAgICBjb25zdCB0ZXJtcyA9IFtdO1xuICAgIGlmICghZm4uc2NvcGUpXG4gICAgICBmb3IgKGxldCBpID0gbG93ZXI7IGkgPD0gdXBwZXI7IGkrKylcbiAgICAgICAgdGVybXMucHVzaChmbi5zaW1wbGlmeSgpKTtcbiAgICBlbHNlXG4gICAgICBmb3IgKGxldCBpID0gbG93ZXI7IGkgPD0gdXBwZXI7IGkrKykge1xuICAgICAgICBjZS5zZXQoeyBbaW5kZXhdOiBpIH0pO1xuICAgICAgICB0ZXJtcy5wdXNoKGZuLnNpbXBsaWZ5KCkpO1xuICAgICAgfVxuICAgIHJlc3VsdCA9IGNlLm11bCh0ZXJtcykuc2ltcGxpZnkoKTtcbiAgfVxuICBpZiAobW9kZSA9PT0gXCJldmFsdWF0ZVwiKSB7XG4gICAgY29uc3QgdGVybXMgPSBbXTtcbiAgICBpZiAoIWZuLnNjb3BlKVxuICAgICAgZm9yIChsZXQgaSA9IGxvd2VyOyBpIDw9IHVwcGVyOyBpKyspXG4gICAgICAgIHRlcm1zLnB1c2goZm4uZXZhbHVhdGUoKSk7XG4gICAgZWxzZVxuICAgICAgZm9yIChsZXQgaSA9IGxvd2VyOyBpIDw9IHVwcGVyOyBpKyspIHtcbiAgICAgICAgY2Uuc2V0KHsgW2luZGV4XTogaSB9KTtcbiAgICAgICAgdGVybXMucHVzaChmbi5ldmFsdWF0ZSgpKTtcbiAgICAgIH1cbiAgICByZXN1bHQgPSBjZS5tdWwodGVybXMpLmV2YWx1YXRlKCk7XG4gIH1cbiAgaWYgKG1vZGUgPT09IFwiTlwiKSB7XG4gICAgaWYgKHJlc3VsdCA9PT0gbnVsbCAmJiAhZm4uc2NvcGUpIHtcbiAgICAgIGNvbnN0IG4gPSBmbi5OKCk7XG4gICAgICBpZiAoIWlzRmluaXRlMikge1xuICAgICAgICBpZiAobi5pc1plcm8pXG4gICAgICAgICAgcmVzdWx0ID0gY2UuX1pFUk87XG4gICAgICAgIGVsc2UgaWYgKG4uaXNQb3NpdGl2ZSlcbiAgICAgICAgICByZXN1bHQgPSBjZS5fUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXN1bHQgPSBjZS5fTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsICYmIGZuLmlzUHVyZSlcbiAgICAgICAgcmVzdWx0ID0gY2UucG93KG4sIGNlLm51bWJlcih1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ID09PSBudWxsICYmIGlzRmluaXRlMikge1xuICAgICAgaWYgKGJpZ251bVByZWZlcnJlZChjZSkpIHtcbiAgICAgICAgbGV0IHByb2R1Y3QyID0gY2UuYmlnbnVtKDEpO1xuICAgICAgICBmb3IgKGxldCBpID0gbG93ZXI7IGkgPD0gdXBwZXI7IGkrKykge1xuICAgICAgICAgIGNlLnNldCh7IFtpbmRleF06IGkgfSk7XG4gICAgICAgICAgY29uc3QgdGVybSA9IGFzQmlnbnVtKGZuLk4oKSk7XG4gICAgICAgICAgaWYgKHRlcm0gPT09IG51bGwgfHwgIXRlcm0uaXNGaW5pdGUoKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGVybSAhPT0gbnVsbCA/IGNlLm51bWJlcih0ZXJtKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9kdWN0MiA9IHByb2R1Y3QyLm11bCh0ZXJtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKVxuICAgICAgICAgIHJlc3VsdCA9IGNlLm51bWJlcihwcm9kdWN0Mik7XG4gICAgICB9XG4gICAgICBsZXQgcHJvZHVjdCA9IDE7XG4gICAgICBjb25zdCBudW1lcmljTW9kZSA9IGNlLm51bWVyaWNNb2RlO1xuICAgICAgY2UubnVtZXJpY01vZGUgPSBcIm1hY2hpbmVcIjtcbiAgICAgIGZvciAobGV0IGkgPSBsb3dlcjsgaSA8PSB1cHBlcjsgaSsrKSB7XG4gICAgICAgIGNlLnNldCh7IFtpbmRleF06IGkgfSk7XG4gICAgICAgIGNvbnN0IHRlcm0gPSBhc0Zsb2F0KGZuLk4oKSk7XG4gICAgICAgIGlmICh0ZXJtID09PSBudWxsIHx8ICFOdW1iZXIuaXNGaW5pdGUodGVybSkpIHtcbiAgICAgICAgICByZXN1bHQgPSB0ZXJtICE9PSBudWxsID8gY2UubnVtYmVyKHRlcm0pIDogdm9pZCAwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHByb2R1Y3QgKj0gdGVybTtcbiAgICAgIH1cbiAgICAgIGNlLm51bWVyaWNNb2RlID0gbnVtZXJpY01vZGU7XG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsKVxuICAgICAgICByZXN1bHQgPSBjZS5udW1iZXIocHJvZHVjdCk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHtcbiAgICAgIGNlLnNldCh7IFtpbmRleF06IDFlMyB9KTtcbiAgICAgIGNvbnN0IG5NYXggPSBmbi5OKCk7XG4gICAgICBjZS5zZXQoeyBbaW5kZXhdOiA5OTkgfSk7XG4gICAgICBjb25zdCBuTWF4TWludXNPbmUgPSBmbi5OKCk7XG4gICAgICBjb25zdCByYXRpbyA9IGFzRmxvYXQoY2UuZGl2KG5NYXgsIG5NYXhNaW51c09uZSkuTigpKTtcbiAgICAgIGlmIChyYXRpbyAhPT0gbnVsbCAmJiBOdW1iZXIuaXNGaW5pdGUocmF0aW8pICYmIE1hdGguYWJzKHJhdGlvKSA+IDEpIHtcbiAgICAgICAgcmVzdWx0ID0gY2UuX1BPU0lUSVZFX0lORklOSVRZO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByb2R1Y3QgPSAxO1xuICAgICAgICBjb25zdCBudW1lcmljTW9kZSA9IGNlLm51bWVyaWNNb2RlO1xuICAgICAgICBjZS5udW1lcmljTW9kZSA9IFwibWFjaGluZVwiO1xuICAgICAgICBmb3IgKGxldCBpID0gbG93ZXI7IGkgPD0gdXBwZXI7IGkrKykge1xuICAgICAgICAgIGNlLnNldCh7IFtpbmRleF06IGkgfSk7XG4gICAgICAgICAgY29uc3QgdGVybSA9IGFzRmxvYXQoZm4uTigpKTtcbiAgICAgICAgICBpZiAodGVybSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChNYXRoLmFicygxIC0gdGVybSkgPCBOdW1iZXIuRVBTSUxPTiB8fCAhTnVtYmVyLmlzRmluaXRlKHRlcm0pKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgcHJvZHVjdCAqPSB0ZXJtO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpXG4gICAgICAgICAgcmVzdWx0ID0gY2UubnVtYmVyKHByb2R1Y3QpO1xuICAgICAgICBjZS5udW1lcmljTW9kZSA9IG51bWVyaWNNb2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjZS5jb250ZXh0ID0gc2F2ZWRDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0ID8/IHZvaWQgMDtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xpYnJhcnkvYXJpdGhtZXRpYy1kaXZpZGUudHNcbmZ1bmN0aW9uIGNhbm9uaWNhbERpdmlkZShjZSwgb3AxMiwgb3AyMikge1xuICBpZiAoIW9wMTIuaXNWYWxpZCB8fCAhb3AyMi5pc1ZhbGlkKVxuICAgIHJldHVybiBjZS5fZm4oXCJEaXZpZGVcIiwgW29wMTIsIG9wMjJdKTtcbiAgaWYgKG9wMTIuaGVhZCA9PT0gXCJOZWdhdGVcIiAmJiBvcDIyLmhlYWQgPT09IFwiTmVnYXRlXCIpIHtcbiAgICBvcDEyID0gb3AxMi5vcDE7XG4gICAgb3AyMiA9IG9wMjIub3AxO1xuICB9XG4gIGlmIChvcDEyLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCAmJiBvcDIyLm51bWVyaWNWYWx1ZSAhPT0gbnVsbCkge1xuICAgIGlmIChvcDIyLmlzT25lKVxuICAgICAgcmV0dXJuIG9wMTI7XG4gICAgaWYgKG9wMjIuaXNOZWdhdGl2ZU9uZSlcbiAgICAgIHJldHVybiBjZS5uZWcob3AxMik7XG4gICAgaWYgKG9wMTIuaXNPbmUpXG4gICAgICByZXR1cm4gY2UuaW52KG9wMjIpO1xuICAgIGlmIChvcDEyLmlzTmVnYXRpdmVPbmUpXG4gICAgICByZXR1cm4gY2UubmVnKGNlLmludihvcDIyKSk7XG4gICAgY29uc3QgcjEgPSBhc1JhdGlvbmFsKG9wMTIpO1xuICAgIGNvbnN0IHIyID0gYXNSYXRpb25hbChvcDIyKTtcbiAgICBpZiAocjEgJiYgcjIgJiYgIWlzUmF0aW9uYWxaZXJvKHIyKSlcbiAgICAgIHJldHVybiBjZS5udW1iZXIobXVsMihyMSwgaW52ZXJzZShyMikpKTtcbiAgfVxuICBpZiAob3AxMi5oZWFkID09PSBcIkRpdmlkZVwiICYmIG9wMjIuaGVhZCA9PT0gXCJEaXZpZGVcIikge1xuICAgIHJldHVybiBjYW5vbmljYWxEaXZpZGUoXG4gICAgICBjZSxcbiAgICAgIGNlLm11bChbb3AxMi5vcDEsIG9wMjIub3AyXSksXG4gICAgICBjZS5tdWwoW29wMTIub3AyLCBvcDIyLm9wMV0pXG4gICAgKTtcbiAgfVxuICBpZiAob3AxMi5oZWFkID09PSBcIkRpdmlkZVwiKVxuICAgIHJldHVybiBjYW5vbmljYWxEaXZpZGUoY2UsIGNlLm11bChbb3AxMi5vcDEsIG9wMjJdKSwgb3AxMi5vcDIpO1xuICBpZiAob3AyMi5oZWFkID09PSBcIkRpdmlkZVwiKVxuICAgIHJldHVybiBjYW5vbmljYWxEaXZpZGUoY2UsIGNlLm11bChbb3AxMiwgb3AyMi5vcDJdKSwgb3AyMi5vcDEpO1xuICBjb25zdCBudW0xID0gb3AxMi5udW1lcmljVmFsdWU7XG4gIGlmIChudW0xICE9PSBudWxsKSB7XG4gICAgaWYgKGlzTWFjaGluZVJhdGlvbmFsKG51bTEpKSB7XG4gICAgICBjb25zdCBbYSwgYl0gPSBudW0xO1xuICAgICAgcmV0dXJuIGNhbm9uaWNhbERpdmlkZShjZSwgY2UubnVtYmVyKGEpLCBjZS5tdWwoW2NlLm51bWJlcihiKSwgb3AyMl0pKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnUmF0aW9uYWwobnVtMSkpIHtcbiAgICAgIGNvbnN0IFthLCBiXSA9IG51bTE7XG4gICAgICByZXR1cm4gY2Fub25pY2FsRGl2aWRlKGNlLCBjZS5udW1iZXIoYSksIGNlLm11bChbY2UubnVtYmVyKGIpLCBvcDIyXSkpO1xuICAgIH1cbiAgfVxuICBjb25zdCBudW0yID0gb3AyMi5udW1lcmljVmFsdWU7XG4gIGlmIChudW0yICE9PSBudWxsKSB7XG4gICAgaWYgKGlzTWFjaGluZVJhdGlvbmFsKG51bTIpKSB7XG4gICAgICBjb25zdCBbYSwgYl0gPSBudW0yO1xuICAgICAgcmV0dXJuIGNhbm9uaWNhbERpdmlkZShjZSwgY2UubXVsKFtvcDEyLCBjZS5udW1iZXIoYildKSwgY2UubnVtYmVyKGEpKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnUmF0aW9uYWwobnVtMikpIHtcbiAgICAgIGNvbnN0IFthLCBiXSA9IG51bTI7XG4gICAgICByZXR1cm4gY2Fub25pY2FsRGl2aWRlKGNlLCBjZS5tdWwoW29wMTIsIGNlLm51bWJlcihiKV0pLCBjZS5udW1iZXIoYSkpO1xuICAgIH1cbiAgfVxuICBjb25zdCBbYzEsIHQxXSA9IGFzQ29lZmZpY2llbnQob3AxMik7XG4gIGNvbnN0IFtjMiwgdDJdID0gYXNDb2VmZmljaWVudChvcDIyKTtcbiAgaWYgKCFpc1JhdGlvbmFsT25lKGMxKSB8fCAhaXNSYXRpb25hbE9uZShjMikpIHtcbiAgICBjb25zdCBbY24sIGNkXSA9IG11bDIoYzEsIGludmVyc2UoYzIpKTtcbiAgICBjb25zdCBlbiA9IGNlLm11bChbY2UubnVtYmVyKGNuKSwgdDFdKTtcbiAgICBpZiAoZW4uaXNaZXJvKVxuICAgICAgcmV0dXJuIGNlLl9aRVJPO1xuICAgIGNvbnN0IGVkID0gY2UubXVsKFtjZS5udW1iZXIoY2QpLCB0Ml0pO1xuICAgIGlmIChlZC5pc09uZSlcbiAgICAgIHJldHVybiBlbjtcbiAgICByZXR1cm4gY2UuX2ZuKFwiRGl2aWRlXCIsIFtlbiwgZWRdKTtcbiAgfVxuICBsZXQgW25TaWduLCBuXSA9IG1ha2VQb3NpdGl2ZShvcDEyKTtcbiAgbGV0IFtkU2lnbiwgZF0gPSBtYWtlUG9zaXRpdmUob3AyMik7XG4gIG4gPSBuLmNhbm9uaWNhbDtcbiAgZCA9IGQuY2Fub25pY2FsO1xuICBpZiAoZC5udW1lcmljVmFsdWUgIT09IG51bGwgJiYgZC5pc09uZSlcbiAgICByZXR1cm4gblNpZ24gKiBkU2lnbiA8IDAgPyBjYW5vbmljYWxOZWdhdGUobikgOiBuO1xuICBpZiAoblNpZ24gKiBkU2lnbiA+IDApXG4gICAgcmV0dXJuIGNlLl9mbihcIkRpdmlkZVwiLCBbbiwgZF0pO1xuICBpZiAobi5udW1lcmljVmFsdWUpXG4gICAgcmV0dXJuIGNlLl9mbihcIkRpdmlkZVwiLCBbY2Fub25pY2FsTmVnYXRlKG4pLCBkXSk7XG4gIHJldHVybiBjYW5vbmljYWxOZWdhdGUoY2UuX2ZuKFwiRGl2aWRlXCIsIFtuLCBkXSkpO1xufVxuZnVuY3Rpb24gc2ltcGxpZnlEaXZpZGUoY2UsIG9wMTIsIG9wMjIpIHtcbiAgaWYgKG9wMTIubnVtZXJpY1ZhbHVlICE9PSBudWxsICYmIG9wMjIubnVtZXJpY1ZhbHVlICE9PSBudWxsKSB7XG4gICAgY29uc3QgcjEgPSBhc1JhdGlvbmFsKG9wMTIpO1xuICAgIGNvbnN0IHIyID0gYXNSYXRpb25hbChvcDIyKTtcbiAgICBpZiAocjEgJiYgcjIgJiYgIWlzUmF0aW9uYWxaZXJvKHIyKSlcbiAgICAgIHJldHVybiBjZS5udW1iZXIobXVsMihyMSwgaW52ZXJzZShyMikpKTtcbiAgfVxuICByZXR1cm4gbmV3IFByb2R1Y3QoY2UsIFtvcDEyLCBjZS5pbnYob3AyMildKS5hc1JhdGlvbmFsRXhwcmVzc2lvbigpO1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGlicmFyeS9hcml0aG1ldGljLnRzXG52YXIgaW1wb3J0X2NvbXBsZXgxNiA9IF9fdG9FU00ocmVxdWlyZV9jb21wbGV4KCkpO1xudmFyIEFSSVRITUVUSUNfTElCUkFSWSA9IFtcbiAge1xuICAgIC8vXG4gICAgLy8gRnVuY3Rpb25zXG4gICAgLy9cbiAgICBBYnM6IHtcbiAgICAgIHdpa2lkYXRhOiBcIlEzMzE3OTgyXCIsXG4gICAgICAvLyBtYWduaXR1ZGUgJ1ExMjA4MTIgKGZvciByZWFscylcbiAgICAgIHRocmVhZGFibGU6IHRydWUsXG4gICAgICBpZGVtcG90ZW50OiB0cnVlLFxuICAgICAgY29tcGxleGl0eTogMTIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiTnVtYmVyXCIsIFwiTm9uTmVnYXRpdmVOdW1iZXJcIl0sXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IHByb2Nlc3NBYnMoY2UsIG9wczJbMF0sIFwic2ltcGxpZnlcIiksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHByb2Nlc3NBYnMoY2UsIG9wczJbMF0sIFwiZXZhbHVhdGVcIiksXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gcHJvY2Vzc0FicyhjZSwgb3BzMlswXSwgXCJOXCIpXG4gICAgICB9XG4gICAgfSxcbiAgICBBZGQ6IHtcbiAgICAgIHdpa2lkYXRhOiBcIlEzMjA0M1wiLFxuICAgICAgYXNzb2NpYXRpdmU6IHRydWUsXG4gICAgICBjb21tdXRhdGl2ZTogdHJ1ZSxcbiAgICAgIHRocmVhZGFibGU6IHRydWUsXG4gICAgICBpZGVtcG90ZW50OiB0cnVlLFxuICAgICAgY29tcGxleGl0eTogMTMwMCxcbiAgICAgIGhvbGQ6IFwiYWxsXCIsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBcIk51bWVyaWNGdW5jdGlvblwiLFxuICAgICAgICBjb2RvbWFpbjogKGNlLCBhcmdzKSA9PiBkb21haW5BZGQoXG4gICAgICAgICAgY2UsXG4gICAgICAgICAgYXJncy5tYXAoKHgpID0+IHguZG9tYWluKVxuICAgICAgICApLFxuICAgICAgICAvLyBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2Fub25pY2FsQWRkKGNlLCBhcmdzKSwgLy8gbmV2ZXIgY2FsbGVkOiBzaG9ydHBhdGhcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gc2ltcGxpZnlBZGQoY2UsIG9wczIpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBldmFsQWRkKGNlLCBvcHMyKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsQWRkKGNlLCBvcHMyLCBcIk5cIilcbiAgICAgIH1cbiAgICB9LFxuICAgIENlaWw6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlJvdW5kcyBhIG51bWJlciB1cCB0byB0aGUgbmV4dCBsYXJnZXN0IGludGVnZXJcIixcbiAgICAgIGNvbXBsZXhpdHk6IDEyNTAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIkludGVnZXJcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoX2NlLCBvcHMyKSA9PiBhcHBseU4oXG4gICAgICAgICAgb3BzMlswXSxcbiAgICAgICAgICBNYXRoLmNlaWwsXG4gICAgICAgICAgKHgpID0+IHguY2VpbCgpLFxuICAgICAgICAgICh6KSA9PiB6LmNlaWwoMClcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2hvcDoge1xuICAgICAgYXNzb2NpYXRpdmU6IHRydWUsXG4gICAgICB0aHJlYWRhYmxlOiB0cnVlLFxuICAgICAgaWRlbXBvdGVudDogdHJ1ZSxcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gYXBwbHlOKFxuICAgICAgICAgIG9wczJbMF0sXG4gICAgICAgICAgKHgpID0+IGNlLmNob3AoeCksXG4gICAgICAgICAgKHgpID0+IGNlLmNob3AoeCksXG4gICAgICAgICAgKHgpID0+IGNlLmNob3AoeClcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0sXG4gICAgQ29tcGxleDoge1xuICAgICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBjb252ZXJ0ZWQgZHVyaW5nIGJveGluZywgc28gdW5saWtlbHkgdG8gZW5jb3VudGVyXG4gICAgICB3aWtpZGF0YTogXCJRMTE1NjdcIixcbiAgICAgIGNvbXBsZXhpdHk6IDUwMFxuICAgIH0sXG4gICAgRGl2aWRlOiB7XG4gICAgICB3aWtpZGF0YTogXCJRMTIyNjkzOVwiLFxuICAgICAgY29tcGxleGl0eTogMjUwMCxcbiAgICAgIC8vIC0gaWYgbnVtZXIgcHJvZHVjdCBvZiBudW1iZXJzLCBvciBkZW5vbSBwcm9kdWN0IG9mIG51bWJlcnMsXG4gICAgICAvLyBpLmUuIFx1MjIxQTJ4LzIgLT4gMC43MDd4LCAyL1x1MjIxQTJ4IC0+IDEuNDE0MnhcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiTnVtYmVyXCIsIFwiTnVtYmVyXCIsIFwiTnVtYmVyXCJdLFxuICAgICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4ge1xuICAgICAgICAgIGFyZ3MgPSB2YWxpZGF0ZUFyZ3VtZW50cyhjZSwgY2Fub25pY2FsKGZsYXR0ZW5TZXF1ZW5jZShhcmdzKSksIFtcbiAgICAgICAgICAgIFwiTnVtYmVyXCIsXG4gICAgICAgICAgICBcIk51bWJlclwiXG4gICAgICAgICAgXSk7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9mbihcIkRpdmlkZVwiLCBhcmdzKTtcbiAgICAgICAgICByZXR1cm4gY2UuZGl2KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICB9LFxuICAgICAgICBzaW1wbGlmeTogKGNlLCBhcmdzKSA9PiBzaW1wbGlmeURpdmlkZShjZSwgYXJnc1swXSwgYXJnc1sxXSksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGFwcGx5Mk4oXG4gICAgICAgICAgb3BzMlswXSxcbiAgICAgICAgICBvcHMyWzFdLFxuICAgICAgICAgIChuLCBkKSA9PiBuIC8gZCxcbiAgICAgICAgICAobiwgZCkgPT4gbi5kaXYoZCksXG4gICAgICAgICAgKG4sIGQpID0+IG4uZGl2KGQpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9LFxuICAgIEV4cDoge1xuICAgICAgd2lraWRhdGE6IFwiUTE2ODY5OFwiLFxuICAgICAgdGhyZWFkYWJsZTogdHJ1ZSxcbiAgICAgIGNvbXBsZXhpdHk6IDM1MDAsXG4gICAgICAvLyBFeHAoeCkgLT4gZV54XG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IHtcbiAgICAgICAgICBhcmdzID0gdmFsaWRhdGVBcmd1bWVudHMoY2UsIGNhbm9uaWNhbChmbGF0dGVuU2VxdWVuY2UoYXJncykpLCBbXG4gICAgICAgICAgICBcIk51bWJlclwiXG4gICAgICAgICAgXSk7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAxKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9mbihcIlBvd2VyXCIsIGFyZ3MpO1xuICAgICAgICAgIHJldHVybiBjZS5wb3coY2Uuc3ltYm9sKFwiRXhwb25lbnRpYWxFXCIpLCBhcmdzWzBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgRmFjdG9yaWFsOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJGYWN0b3JpYWwgRnVuY3Rpb25cIixcbiAgICAgIHdpa2lkYXRhOiBcIlExMjA5NzZcIixcbiAgICAgIGNvbXBsZXhpdHk6IDllMyxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiTnVtYmVyXCIsIFwiTnVtYmVyXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgY29uc3QgbiA9IGFzU21hbGxJbnRlZ2VyKG9wczJbMF0pO1xuICAgICAgICAgIGlmIChuICE9PSBudWxsICYmIG4gPj0gMCkge1xuICAgICAgICAgICAgaWYgKCFiaWdudW1QcmVmZXJyZWQoY2UpKVxuICAgICAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKGZhY3RvcmlhbChuKSk7XG4gICAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKGZhY3RvcmlhbDIoY2UsIGNlLmJpZ251bShuKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBudW0gPSBvcHMyWzBdLm51bWVyaWNWYWx1ZTtcbiAgICAgICAgICBpZiAobnVtICE9PSBudWxsICYmIG51bSBpbnN0YW5jZW9mIGltcG9ydF9jb21wbGV4MTYuZGVmYXVsdClcbiAgICAgICAgICAgIHJldHVybiBjZS5udW1iZXIoZ2FtbWEzKG51bS5hZGQoMSkpKTtcbiAgICAgICAgICBjb25zdCBmID0gYXNGbG9hdChvcHMyWzBdKTtcbiAgICAgICAgICBpZiAoZiAhPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBjZS5udW1iZXIoZ2FtbWEoMSArIGYpKTtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBGbG9vcjoge1xuICAgICAgd2lraWRhdGE6IFwiUTU2ODYwNzgzXCIsXG4gICAgICBjb21wbGV4aXR5OiAxMjUwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJFeHRlbmRlZFJlYWxOdW1iZXJcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGFwcGx5TihcbiAgICAgICAgICBvcHMyWzBdLFxuICAgICAgICAgIE1hdGguZmxvb3IsXG4gICAgICAgICAgKHgpID0+IHguZmxvb3IoKSxcbiAgICAgICAgICAoeikgPT4gei5mbG9vcigwKVxuICAgICAgICApXG4gICAgICB9XG4gICAgfSxcbiAgICBHYW1tYToge1xuICAgICAgd2lraWRhdGE6IFwiUTE5MDU3M1wiLFxuICAgICAgY29tcGxleGl0eTogOGUzLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJOdW1iZXJcIl0sXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gYXBwbHlOKFxuICAgICAgICAgIG9wczJbMF0sXG4gICAgICAgICAgKHgpID0+IGdhbW1hKHgpLFxuICAgICAgICAgICh4KSA9PiBnYW1tYTIoY2UsIHgpLFxuICAgICAgICAgICh4KSA9PiBnYW1tYTMoeClcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0sXG4gICAgTG9nR2FtbWE6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDhlMyxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiTnVtYmVyXCIsIFwiTnVtYmVyXCJdLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGFwcGx5TihcbiAgICAgICAgICBvcHMyWzBdLFxuICAgICAgICAgICh4KSA9PiBsbmdhbW1hKHgpLFxuICAgICAgICAgICh4KSA9PiBsbmdhbW1hMihjZSwgeCksXG4gICAgICAgICAgKHgpID0+IGxuZ2FtbWEzKHgpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9LFxuICAgIExuOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJOYXR1cmFsIExvZ2FyaXRobVwiLFxuICAgICAgd2lraWRhdGE6IFwiUTIwNDAzN1wiLFxuICAgICAgY29tcGxleGl0eTogNGUzLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJOdW1iZXJcIl0sXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gYXBwbHlOKFxuICAgICAgICAgIG9wczJbMF0sXG4gICAgICAgICAgKHgpID0+IHggPj0gMCA/IE1hdGgubG9nKHgpIDogY2UuY29tcGxleCh4KS5sb2coKSxcbiAgICAgICAgICAoeCkgPT4gIXguaXNOZWcoKSA/IHgubG4oKSA6IGNlLmNvbXBsZXgoeC50b051bWJlcigpKS5sb2coKSxcbiAgICAgICAgICAoeikgPT4gei5sb2coKVxuICAgICAgICApXG4gICAgICB9XG4gICAgfSxcbiAgICBMb2c6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkxvZyh6LCBiID0gMTApID0gTG9nYXJpdGhtIG9mIGJhc2UgYlwiLFxuICAgICAgd2lraWRhdGE6IFwiUTExMTk3XCIsXG4gICAgICBjb21wbGV4aXR5OiA0MTAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgW1wiTWF5YmVcIiwgXCJOdW1iZXJcIl0sIFwiTnVtYmVyXCJdLFxuICAgICAgICBjYW5vbmljYWw6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIG9wczIgPSBjYW5vbmljYWwoZmxhdHRlblNlcXVlbmNlKG9wczIpKTtcbiAgICAgICAgICBpZiAob3BzMi5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiTG9nXCIsIFt2YWxpZGF0ZUFyZ3VtZW50KGNlLCBvcHMyWzBdLCBcIk51bWJlclwiKV0pO1xuICAgICAgICAgIGlmIChvcHMyLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgY29uc3QgYXJnID0gdmFsaWRhdGVBcmd1bWVudChjZSwgb3BzMlswXSwgXCJOdW1iZXJcIik7XG4gICAgICAgICAgICBjb25zdCBiYXNlID0gdmFsaWRhdGVBcmd1bWVudChjZSwgb3BzMlsxXSwgXCJOdW1iZXJcIik7XG4gICAgICAgICAgICBpZiAoYmFzZS5udW1lcmljVmFsdWUgPT09IDEwKVxuICAgICAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiTG9nXCIsIFthcmddKTtcbiAgICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJMb2dcIiwgW2FyZywgYmFzZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiTG9nXCIsIHZhbGlkYXRlQXJndW1lbnRDb3VudChjZSwgb3BzMiwgMikpO1xuICAgICAgICB9LFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBpZiAob3BzMlsxXSA9PT0gdm9pZCAwKVxuICAgICAgICAgICAgcmV0dXJuIGFwcGx5TihcbiAgICAgICAgICAgICAgb3BzMlswXSxcbiAgICAgICAgICAgICAgKHgpID0+IHggPj0gMCA/IE1hdGgubG9nMTAoeCkgOiBjZS5jb21wbGV4KHgpLmxvZygpLmRpdihNYXRoLkxOMTApLFxuICAgICAgICAgICAgICAoeCkgPT4gIXguaXNOZWcoKSA/IGRlY2ltYWxfZGVmYXVsdC5sb2cxMCh4KSA6IGNlLmNvbXBsZXgoeC50b051bWJlcigpKS5sb2coKS5kaXYoTWF0aC5MTjEwKSxcbiAgICAgICAgICAgICAgKHopID0+IHoubG9nKCkuZGl2KE1hdGguTE4xMClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGFwcGx5Mk4oXG4gICAgICAgICAgICBvcHMyWzBdLFxuICAgICAgICAgICAgb3BzMlsxXSxcbiAgICAgICAgICAgIChhLCBiKSA9PiBNYXRoLmxvZyhhKSAvIE1hdGgubG9nKGIpLFxuICAgICAgICAgICAgKGEsIGIpID0+IGEubG9nKGIpLFxuICAgICAgICAgICAgKGEsIGIpID0+IGEubG9nKCkuZGl2KHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gTWF0aC5sb2coYikgOiBiLmxvZygpKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIExiOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJCYXNlLTIgTG9nYXJpdGhtXCIsXG4gICAgICB3aWtpZGF0YTogXCJRNTgxMTY4XCIsXG4gICAgICBjb21wbGV4aXR5OiA0MTAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJOdW1iZXJcIl0sXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gYXBwbHlOKFxuICAgICAgICAgIG9wczJbMF0sXG4gICAgICAgICAgKHgpID0+IHggPj0gMCA/IE1hdGgubG9nMih4KSA6IGNlLmNvbXBsZXgoeCkubG9nKCkuZGl2KE1hdGguTE4yKSxcbiAgICAgICAgICAoeCkgPT4geC5pc05lZygpID8gZGVjaW1hbF9kZWZhdWx0LmxvZzEwKHgpIDogY2UuY29tcGxleCh4LnRvTnVtYmVyKCkpLmxvZygpLmRpdihNYXRoLkxOMiksXG4gICAgICAgICAgKHopID0+IHoubG9nKCkuZGl2KE1hdGguTE4yKVxuICAgICAgICApXG4gICAgICB9XG4gICAgfSxcbiAgICBMZzoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQmFzZS0xMCBMb2dhcml0aG1cIixcbiAgICAgIHdpa2lkYXRhOiBcIlE5NjY1ODJcIixcbiAgICAgIGNvbXBsZXhpdHk6IDQxMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBhcHBseU4oXG4gICAgICAgICAgb3BzMlswXSxcbiAgICAgICAgICAoeCkgPT4geCA+PSAwID8gTWF0aC5sb2cxMCh4KSA6IGNlLmNvbXBsZXgoeCkubG9nKCkuZGl2KE1hdGguTE4xMCksXG4gICAgICAgICAgKHgpID0+ICF4LmlzTmVnKCkgPyBkZWNpbWFsX2RlZmF1bHQubG9nMTAoeCkgOiBjZS5jb21wbGV4KHgudG9OdW1iZXIoKSkubG9nKCkuZGl2KE1hdGguTE4xMCksXG4gICAgICAgICAgKHopID0+IHoubG9nKCkuZGl2KE1hdGguTE4xMClcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0sXG4gICAgTWF4OiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJNYXhpbXVtIG9mIHR3byBvciBtb3JlIG51bWJlcnNcIixcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBbXCJTZXF1ZW5jZVwiLCBcIlZhbHVlXCJdLCBcIk51bWJlclwiXSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGlmIChvcHMyLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5fTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgaWYgKG9wczIubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIG9wczJbMF07XG4gICAgICAgICAgcmV0dXJuIGNlLmZuKFwiTWF4XCIsIG9wczIpO1xuICAgICAgICB9LFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgaWYgKG9wczIubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9ORUdBVElWRV9JTkZJTklUWTtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICAgIGNvbnN0IHJlc3QgPSBbXTtcbiAgICAgICAgICBmb3IgKGNvbnN0IG9wMyBvZiBvcHMyKSB7XG4gICAgICAgICAgICBpZiAoIW9wMy5pc051bWJlciB8fCBvcDMubnVtZXJpY1ZhbHVlID09PSB2b2lkIDApXG4gICAgICAgICAgICAgIHJlc3QucHVzaChvcDMpO1xuICAgICAgICAgICAgZWxzZSBpZiAoIXJlc3VsdCB8fCBvcDMuaXNHcmVhdGVyKHJlc3VsdCkpXG4gICAgICAgICAgICAgIHJlc3VsdCA9IG9wMztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3QubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5ib3gocmVzdWx0ID8gW1wiTWF4XCIsIHJlc3VsdCwgLi4ucmVzdF0gOiBbXCJNYXhcIiwgLi4ucmVzdF0pO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgPz8gY2UuX05BTjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgTWluOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJNaW5pbXVtIG9mIHR3byBvciBtb3JlIG51bWJlcnNcIixcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBbXCJTZXF1ZW5jZVwiLCBcIlZhbHVlXCJdLCBcIk51bWJlclwiXSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGlmIChvcHMyLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5fTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgICAgICAgaWYgKG9wczIubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIG9wczJbMF07XG4gICAgICAgICAgcmV0dXJuIGNlLmZuKFwiTWluXCIsIG9wczIpO1xuICAgICAgICB9LFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgaWYgKG9wczIubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9ORUdBVElWRV9JTkZJTklUWTtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gdm9pZCAwO1xuICAgICAgICAgIGNvbnN0IHJlc3QgPSBbXTtcbiAgICAgICAgICBmb3IgKGNvbnN0IG9wMyBvZiBvcHMyKSB7XG4gICAgICAgICAgICBpZiAoIW9wMy5pc051bWJlciB8fCBvcDMubnVtZXJpY1ZhbHVlID09PSB2b2lkIDApXG4gICAgICAgICAgICAgIHJlc3QucHVzaChvcDMpO1xuICAgICAgICAgICAgZWxzZSBpZiAoIXJlc3VsdCB8fCBvcDMuaXNMZXNzKHJlc3VsdCkpXG4gICAgICAgICAgICAgIHJlc3VsdCA9IG9wMztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3QubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5ib3gocmVzdWx0ID8gW1wiTWluXCIsIHJlc3VsdCwgLi4ucmVzdF0gOiBbXCJNaW5cIiwgLi4ucmVzdF0pO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgPz8gY2UuX05BTjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgTXVsdGlwbHk6IHtcbiAgICAgIHdpa2lkYXRhOiBcIlE0MDI3NlwiLFxuICAgICAgYXNzb2NpYXRpdmU6IHRydWUsXG4gICAgICBjb21tdXRhdGl2ZTogdHJ1ZSxcbiAgICAgIGlkZW1wb3RlbnQ6IHRydWUsXG4gICAgICBjb21wbGV4aXR5OiAyMTAwLFxuICAgICAgaG9sZDogXCJhbGxcIixcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFwiTnVtZXJpY0Z1bmN0aW9uXCIsXG4gICAgICAgIC8vIE5ldmVyIGNhbGxlZDogZmFzdHBhdGhcbiAgICAgICAgLy8gY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IHtcbiAgICAgICAgLy8gICByZXR1cm4gY2Fub25pY2FsTXVsdGlwbHkoY2UsIGFyZ3MpO1xuICAgICAgICAvLyB9LFxuICAgICAgICBzaW1wbGlmeTogKGNlLCBvcHMyKSA9PiBzaW1wbGlmeU11bHRpcGx5KGNlLCBvcHMyKSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gZXZhbE11bHRpcGx5KGNlLCBvcHMyKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsTXVsdGlwbHkoY2UsIG9wczIsIFwiTlwiKVxuICAgICAgfVxuICAgIH0sXG4gICAgTmVnYXRlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJBZGRpdGl2ZSBJbnZlcnNlXCIsXG4gICAgICB3aWtpZGF0YTogXCJRNzE1MzU4XCIsXG4gICAgICBjb21wbGV4aXR5OiAyZTMsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgY29kb21haW46IChjZSwgYXJncykgPT4ge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbMF0uZG9tYWluO1xuICAgICAgICAgIGlmICghYXJnLmxpdGVyYWwpXG4gICAgICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgICAgIGNvbnN0IG5lZ0RvbWFpbiA9IHtcbiAgICAgICAgICAgIFBvc2l0aXZlTnVtYmVyOiBcIk5lZ2F0aXZlTnVtYmVyXCIsXG4gICAgICAgICAgICBOb25OZWdhdGl2ZU51bWJlcjogXCJOb25Qb3NpdGl2ZU51bWJlclwiLFxuICAgICAgICAgICAgTm9uUG9zaXRpdmVOdW1iZXI6IFwiTm9uTmVnYXRpdmVOdW1iZXJcIixcbiAgICAgICAgICAgIE5lZ2F0aXZlTnVtYmVyOiBcIlBvc2l0aXZlTnVtYmVyXCIsXG4gICAgICAgICAgICBQb3NpdGl2ZUludGVnZXI6IFwiTmVnYXRpdmVJbnRlZ2VyXCIsXG4gICAgICAgICAgICBOb25OZWdhdGl2ZUludGVnZXI6IFwiTm9uUG9zaXRpdmVJbnRlZ2VyXCIsXG4gICAgICAgICAgICBOb25Qb3NpdGl2ZUludGVnZXI6IFwiTm9uTmVnYXRpdmVJbnRlZ2VyXCIsXG4gICAgICAgICAgICBOZWdhdGl2ZUludGVnZXI6IFwiUG9zaXRpdmVJbnRlZ2VyXCJcbiAgICAgICAgICB9W2FyZy5saXRlcmFsXTtcbiAgICAgICAgICBpZiAobmVnRG9tYWluKVxuICAgICAgICAgICAgcmV0dXJuIGNlLmRvbWFpbihuZWdEb21haW4pO1xuICAgICAgICAgIHJldHVybiBhcmc7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBhcmdzKSA9PiB7XG4gICAgICAgICAgYXJncyA9IHZhbGlkYXRlQXJndW1lbnRzKGNlLCBjYW5vbmljYWwoZmxhdHRlblNlcXVlbmNlKGFyZ3MpKSwgW1xuICAgICAgICAgICAgXCJOdW1iZXJcIlxuICAgICAgICAgIF0pO1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJOZWdhdGVcIiwgYXJncyk7XG4gICAgICAgICAgcmV0dXJuIGNhbm9uaWNhbE5lZ2F0ZShhcmdzWzBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gcHJvY2Vzc05lZ2F0ZShjZSwgb3BzMlswXSwgXCJzaW1wbGlmeVwiKSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gcHJvY2Vzc05lZ2F0ZShjZSwgb3BzMlswXSwgXCJldmFsdWF0ZVwiKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBwcm9jZXNzTmVnYXRlKGNlLCBvcHMyWzBdLCBcIk5cIiksXG4gICAgICAgIHNnbjogKF9jZSwgYXJncykgPT4ge1xuICAgICAgICAgIGNvbnN0IHMgPSBhcmdzWzBdLnNnbjtcbiAgICAgICAgICBpZiAocyA9PT0gdm9pZCAwIHx8IHMgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIGlmIChzID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgaWYgKHMgPiAwKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIGlmIChzIDwgMClcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFBvd2VyOiB7XG4gICAgICB3aWtpZGF0YTogXCJRMzM0NTZcIixcbiAgICAgIGNvbW11dGF0aXZlOiBmYWxzZSxcbiAgICAgIGNvbXBsZXhpdHk6IDM1MDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IHtcbiAgICAgICAgICBhcmdzID0gdmFsaWRhdGVBcmd1bWVudHMoY2UsIGNhbm9uaWNhbChmbGF0dGVuU2VxdWVuY2UoYXJncykpLCBbXG4gICAgICAgICAgICBcIk51bWJlclwiLFxuICAgICAgICAgICAgXCJOdW1iZXJcIlxuICAgICAgICAgIF0pO1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMilcbiAgICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJQb3dlclwiLCBhcmdzKTtcbiAgICAgICAgICByZXR1cm4gY2UucG93KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICB9LFxuICAgICAgICBzaW1wbGlmeTogKGNlLCBvcHMyKSA9PiBwcm9jZXNzUG93ZXIoY2UsIG9wczJbMF0sIG9wczJbMV0sIFwic2ltcGxpZnlcIiksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHByb2Nlc3NQb3dlcihjZSwgb3BzMlswXSwgb3BzMlsxXSwgXCJldmFsdWF0ZVwiKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgaWYgKGNlLm51bWVyaWNNb2RlID09PSBcIm1hY2hpbmVcIiAmJiB0eXBlb2Ygb3BzMlswXS5udW1lcmljVmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIG9wczJbMV0ubnVtZXJpY1ZhbHVlID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgcmV0dXJuIGNlLm51bWJlcihcbiAgICAgICAgICAgICAgTWF0aC5wb3cob3BzMlswXS5udW1lcmljVmFsdWUsIG9wczJbMV0ubnVtZXJpY1ZhbHVlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gcHJvY2Vzc1Bvd2VyKGNlLCBvcHMyWzBdLCBvcHMyWzFdLCBcIk5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVmaW5lZCBhcyBSZWFsTnVtYmVyIGZvciBhbGwgcG93ZXIgaW4gUmVhbE51bWJlciB3aGVuIGJhc2UgPiAwO1xuICAgICAgICAvLyB3aGVuIHggPCAwLCBvbmx5IGRlZmluZWQgaWYgbiBpcyBhbiBpbnRlZ2VyXG4gICAgICAgIC8vIGlmIHggaXMgYSBub24temVybyBjb21wbGV4LCBkZWZpbmVkIGFzIENvbXBsZXhOdW1iZXJcbiAgICAgICAgLy8gU3F1YXJlIHJvb3Qgb2YgYSBwcmltZSBpcyBpcnJhdGlvbmFsIChBbGdlYnJhaWNOdW1iZXIpXG4gICAgICAgIC8vIGh0dHBzOi8vcHJvb2Z3aWtpLm9yZy93aWtpL1NxdWFyZV9Sb290X29mX1ByaW1lX2lzX0lycmF0aW9uYWxcbiAgICAgICAgLy8gZXZhbERvbWFpbjogKGNlLCBiYXNlOiBCb3hlZEV4cHJlc3Npb24sIHBvd2VyOiBCb3hlZEV4cHJlc3Npb24pIDtcbiAgICAgIH1cbiAgICB9LFxuICAgIFByb2R1Y3Q6IHtcbiAgICAgIHdpa2lkYXRhOiBcIlE5MDE3MThcIixcbiAgICAgIGNvbXBsZXhpdHk6IDFlMyxcbiAgICAgIGhvbGQ6IFwiZmlyc3RcIixcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcbiAgICAgICAgICBcIkZ1bmN0aW9uXCIsXG4gICAgICAgICAgXCJBbnl0aGluZ1wiLFxuICAgICAgICAgIC8vIFtcbiAgICAgICAgICAvLyAgICdNYXliZScsXG4gICAgICAgICAgXCJUdXBsZVwiLFxuICAgICAgICAgIC8vIFsnVHVwbGUnLCAnU3ltYm9sJywgWydNYXliZScsICdJbnRlZ2VyJ10sIFsnTWF5YmUnLCAnSW50ZWdlciddXSxcbiAgICAgICAgICAvLyBdLFxuICAgICAgICAgIFwiTnVtYmVyXCJcbiAgICAgICAgXSxcbiAgICAgICAgLy8gY29kb21haW46IChjZSwgYXJncykgPT4gZG9tYWluQWRkKGNlLCBhcmdzKSxcbiAgICAgICAgLy8gVGhlICdib2R5JyBhbmQgJ3JhbmdlJyBuZWVkIHRvIGJlIGludGVycHJldGVkIGJ5IGNhbm9uaWNhbE11bHRpcGxpY2F0aW9uKCkuIERvbid0IGNhbm9uaWNhbGl6ZSB0aGVtIHlldC5cbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIG9wczIpID0+IGNhbm9uaWNhbFByb2R1Y3QoY2UsIG9wczJbMF0sIG9wczJbMV0pLFxuICAgICAgICBzaW1wbGlmeTogKGNlLCBvcHMyKSA9PiBldmFsTXVsdGlwbGljYXRpb24oY2UsIG9wczJbMF0sIG9wczJbMV0sIFwic2ltcGxpZnlcIiksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxNdWx0aXBsaWNhdGlvbihjZSwgb3BzMlswXSwgb3BzMlsxXSwgXCJldmFsdWF0ZVwiKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsTXVsdGlwbGljYXRpb24oY2UsIG9wczJbMF0sIG9wczJbMV0sIFwiTlwiKVxuICAgICAgfVxuICAgIH0sXG4gICAgUmF0aW9uYWw6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDI0MDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBbXCJNYXliZVwiLCBcIk51bWJlclwiXSwgXCJSYXRpb25hbE51bWJlclwiXSxcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IHtcbiAgICAgICAgICBhcmdzID0gY2Fub25pY2FsKGZsYXR0ZW5TZXF1ZW5jZShhcmdzKSk7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9mbihcIlJhdGlvbmFsXCIsIFtjZS5lcnJvcihcIm1pc3NpbmdcIildKTtcbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiUmF0aW9uYWxcIiwgW1xuICAgICAgICAgICAgICB2YWxpZGF0ZUFyZ3VtZW50KGNlLCBhcmdzWzBdLCBcIkV4dGVuZGVkUmVhbE51bWJlclwiKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgYXJncyA9IHZhbGlkYXRlQXJndW1lbnRzKGNlLCBhcmdzLCBbXCJJbnRlZ2VyXCIsIFwiSW50ZWdlclwiXSk7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9mbihcIlJhdGlvbmFsXCIsIGFyZ3MpO1xuICAgICAgICAgIHJldHVybiBjZS5kaXYoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBpZiAob3BzMi5sZW5ndGggIT09IDIpXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiBzaW1wbGlmeURpdmlkZShjZSwgb3BzMlswXSwgb3BzMlsxXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBpZiAob3BzMi5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IFtuLCBkXSA9IFthc1NtYWxsSW50ZWdlcihvcHMyWzBdKSwgYXNTbWFsbEludGVnZXIob3BzMlsxXSldO1xuICAgICAgICAgICAgaWYgKG4gIT09IG51bGwgJiYgZCAhPT0gbnVsbClcbiAgICAgICAgICAgICAgcmV0dXJuIGNlLm51bWJlcihbbiwgZF0pO1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZiA9IGFzRmxvYXQob3BzMlswXS5OKCkpO1xuICAgICAgICAgIGlmIChmID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKHJhdGlvbmFsaXplKGYpKTtcbiAgICAgICAgfSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgaWYgKG9wczIubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIG9wczJbMF07XG4gICAgICAgICAgcmV0dXJuIGFwcGx5Mk4oXG4gICAgICAgICAgICBvcHMyWzBdLFxuICAgICAgICAgICAgb3BzMlsxXSxcbiAgICAgICAgICAgIChhLCBiKSA9PiBhIC8gYixcbiAgICAgICAgICAgIChhLCBiKSA9PiBhLmRpdihiKSxcbiAgICAgICAgICAgIChhLCBiKSA9PiBhLmRpdihiKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFJvb3Q6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDMyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IHtcbiAgICAgICAgICBhcmdzID0gY2Fub25pY2FsKGZsYXR0ZW5TZXF1ZW5jZShhcmdzKSk7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMilcbiAgICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJSb290XCIsIHZhbGlkYXRlQXJndW1lbnRDb3VudChjZSwgYXJncywgMikpO1xuICAgICAgICAgIGNvbnN0IFtiYXNlLCBleHAyXSA9IFtcbiAgICAgICAgICAgIHZhbGlkYXRlQXJndW1lbnQoY2UsIGFyZ3NbMF0sIFwiTnVtYmVyXCIpLFxuICAgICAgICAgICAgdmFsaWRhdGVBcmd1bWVudChjZSwgYXJnc1sxXSwgXCJOdW1iZXJcIilcbiAgICAgICAgICBdO1xuICAgICAgICAgIGlmICghZXhwMi5pc1ZhbGlkIHx8ICFiYXNlLmlzVmFsaWQpXG4gICAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiUm9vdFwiLCBbYmFzZSwgZXhwMl0pO1xuICAgICAgICAgIHJldHVybiBjZS5wb3coYmFzZSwgY2UuaW52KGV4cDIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgUm91bmQ6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDEyNTAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gYXBwbHlOKFxuICAgICAgICAgIG9wczJbMF0sXG4gICAgICAgICAgTWF0aC5yb3VuZCxcbiAgICAgICAgICAoeCkgPT4geC5yb3VuZCgpLFxuICAgICAgICAgICh4KSA9PiB4LnJvdW5kKDApXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9LFxuICAgIFNpZ246IHtcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBbXCJSYW5nZVwiLCAtMSwgMV1dLFxuICAgICAgICBzaW1wbGlmeTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgY29uc3QgcyA9IG9wczJbMF0uc2duO1xuICAgICAgICAgIGlmIChzID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9aRVJPO1xuICAgICAgICAgIGlmIChzID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9PTkU7XG4gICAgICAgICAgaWYgKHMgPT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9ORUdBVElWRV9PTkU7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGNvbnN0IHMgPSBvcHMyWzBdLnNnbjtcbiAgICAgICAgICBpZiAocyA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5fWkVSTztcbiAgICAgICAgICBpZiAocyA9PT0gMSlcbiAgICAgICAgICAgIHJldHVybiBjZS5fT05FO1xuICAgICAgICAgIGlmIChzID09PSAtMSlcbiAgICAgICAgICAgIHJldHVybiBjZS5fTkVHQVRJVkVfT05FO1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH0sXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGNvbnN0IHMgPSBvcHMyWzBdLnNnbjtcbiAgICAgICAgICBpZiAocyA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5fWkVSTztcbiAgICAgICAgICBpZiAocyA9PT0gMSlcbiAgICAgICAgICAgIHJldHVybiBjZS5fT05FO1xuICAgICAgICAgIGlmIChzID09PSAtMSlcbiAgICAgICAgICAgIHJldHVybiBjZS5fTkVHQVRJVkVfT05FO1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFNpZ25HYW1tYToge1xuICAgICAgZGVzY3JpcHRpb246IFwiVGhlIHNpZ24gb2YgdGhlIGdhbW1hIGZ1bmN0aW9uOiAtMSBvciArMVwiLFxuICAgICAgY29tcGxleGl0eTogNzkwMFxuICAgICAgLy8gQHRvZG9cbiAgICB9LFxuICAgIFNxcnQ6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNxdWFyZSBSb290XCIsXG4gICAgICB3aWtpZGF0YTogXCJRMTM0MjM3XCIsXG4gICAgICBjb21wbGV4aXR5OiAzZTMsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IHtcbiAgICAgICAgICBhcmdzID0gY2Fub25pY2FsKGZsYXR0ZW5TZXF1ZW5jZShhcmdzKSk7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAxKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9mbihcIlNxcnRcIiwgYXJncyk7XG4gICAgICAgICAgcmV0dXJuIGNlLnBvdyhhcmdzWzBdLCBjZS5fSEFMRik7XG4gICAgICAgIH0sXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IHByb2Nlc3NTcXJ0KGNlLCBvcHMyWzBdLCBcInNpbXBsaWZ5XCIpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBwcm9jZXNzU3FydChjZSwgb3BzMlswXSwgXCJldmFsdWF0ZVwiKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBwcm9jZXNzU3FydChjZSwgb3BzMlswXSwgXCJOXCIpXG4gICAgICAgIC8vIGV2YWxEb21haW46IFNxdWFyZSByb290IG9mIGEgcHJpbWUgaXMgaXJyYXRpb25hbFxuICAgICAgICAvLyBodHRwczovL3Byb29md2lraS5vcmcvd2lraS9TcXVhcmVfUm9vdF9vZl9QcmltZV9pc19JcnJhdGlvbmFsXG4gICAgICB9XG4gICAgfSxcbiAgICBTcXVhcmU6IHtcbiAgICAgIHdpa2lkYXRhOiBcIlEzMDc1MTc1XCIsXG4gICAgICBjb21wbGV4aXR5OiAzMTAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJOdW1iZXJcIl0sXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBhcmdzKSA9PiB7XG4gICAgICAgICAgYXJncyA9IGNhbm9uaWNhbChmbGF0dGVuU2VxdWVuY2UoYXJncykpO1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJTcXVhcmVcIiwgYXJncyk7XG4gICAgICAgICAgcmV0dXJuIGNlLnBvdyhhcmdzWzBdLCBjZS5udW1iZXIoMikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBTdWJ0cmFjdDoge1xuICAgICAgd2lraWRhdGE6IFwiUTQwNzU0XCIsXG4gICAgICBjb21wbGV4aXR5OiAxMzUwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgW1wiTWF5YmVcIiwgXCJOdW1iZXJcIl0sIFwiTnVtYmVyXCJdLFxuICAgICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4ge1xuICAgICAgICAgIGFyZ3MgPSBjYW5vbmljYWwoZmxhdHRlblNlcXVlbmNlKGFyZ3MpKTtcbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICByZXR1cm4gY2Fub25pY2FsTmVnYXRlKGFyZ3NbMF0pO1xuICAgICAgICAgIGFyZ3MgPSB2YWxpZGF0ZUFyZ3VtZW50Q291bnQoY2UsIGFyZ3MsIDIpO1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMilcbiAgICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJTdWJ0cmFjdFwiLCBhcmdzKTtcbiAgICAgICAgICBpZiAoIWFyZ3MuZXZlcnkoKHgpID0+IHguaXNWYWxpZCkpXG4gICAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiU3VidHJhY3RcIiwgYXJncyk7XG4gICAgICAgICAgcmV0dXJuIGNlLmFkZChbYXJnc1swXSwgY2Fub25pY2FsTmVnYXRlKGFyZ3NbMV0pXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFN1bToge1xuICAgICAgd2lraWRhdGE6IFwiUTIxODAwNVwiLFxuICAgICAgY29tcGxleGl0eTogMWUzLFxuICAgICAgaG9sZDogXCJhbGxcIixcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcbiAgICAgICAgICBcIkZ1bmN0aW9uXCIsXG4gICAgICAgICAgXCJBbnl0aGluZ1wiLFxuICAgICAgICAgIC8vIFtcbiAgICAgICAgICAvLyAgICdNYXliZScsXG4gICAgICAgICAgXCJUdXBsZVwiLFxuICAgICAgICAgIC8vIFsnVHVwbGUnLCAnU3ltYm9sJywgWydNYXliZScsICdJbnRlZ2VyJ10sIFsnTWF5YmUnLCAnSW50ZWdlciddXSxcbiAgICAgICAgICAvLyBdLFxuICAgICAgICAgIFwiTnVtYmVyXCJcbiAgICAgICAgXSxcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIG9wczIpID0+IGNhbm9uaWNhbFN1bW1hdGlvbihjZSwgb3BzMlswXSwgb3BzMlsxXSksXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IGV2YWxTdW1tYXRpb24oY2UsIG9wczJbMF0sIG9wczJbMV0sIFwic2ltcGxpZnlcIiksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxTdW1tYXRpb24oY2UsIG9wczJbMF0sIG9wczJbMV0sIFwiZXZhbHVhdGVcIiksXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gZXZhbFN1bW1hdGlvbihjZSwgb3BzMlswXSwgb3BzMlsxXSwgXCJOXCIpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgLy9cbiAgICAvLyBDb25zdGFudHNcbiAgICAvLyBOb3RlOiBjb25zdGFudHMgYXJlIHB1dCBpbiBhIHNlcGFyYXRlLCBzdWJzZXF1ZW50LCBkaWN0aW9uYXJ5IGJlY2F1c2VcbiAgICAvLyBzb21lIG9mIHRoZSB2YWx1ZXMgKENhdGFsYW5Db25zdGFudCkgcmVmZXJlbmNlIHNvbWUgZnVuY3Rpb24gbmFtZXMgKEFkZC4uLilcbiAgICAvLyB0aGF0IGFyZSBkZWZpbmVkIGFib3ZlLiBUaGlzIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMuXG4gICAgLy9cbiAgICBlOiB7XG4gICAgICBkb21haW46IFwiVHJhbnNjZW5kZW50YWxOdW1iZXJcIixcbiAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgaG9sZFVudGlsOiBcIm5ldmVyXCIsXG4gICAgICB2YWx1ZTogXCJFeHBvbmVudGlhbEVcIlxuICAgIH0sXG4gICAgaToge1xuICAgICAgZG9tYWluOiBcIkltYWdpbmFyeU51bWJlclwiLFxuICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICBob2xkVW50aWw6IFwibmV2ZXJcIixcbiAgICAgIGZsYWdzOiB7IGltYWdpbmFyeTogdHJ1ZSB9LFxuICAgICAgdmFsdWU6IFwiSW1hZ2luYXJ5VW5pdFwiXG4gICAgfSxcbiAgICBNYWNoaW5lRXBzaWxvbjoge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIDEgYW5kIHRoZSBuZXh0IGxhcmdlciBmbG9hdGluZyBwb2ludCBudW1iZXJcbiAgICAgICAqXG4gICAgICAgKiAgICAyXntcdTIyMTI1Mn1cbiAgICAgICAqXG4gICAgICAgKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFjaGluZV9lcHNpbG9uXG4gICAgICAgKi9cbiAgICAgIGRvbWFpbjogXCJSZWFsTnVtYmVyXCIsXG4gICAgICBob2xkVW50aWw6IFwiTlwiLFxuICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICBmbGFnczogeyByZWFsOiB0cnVlIH0sXG4gICAgICB2YWx1ZTogeyBudW06IE51bWJlci5FUFNJTE9OLnRvU3RyaW5nKCkgfVxuICAgIH0sXG4gICAgSGFsZjoge1xuICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICBob2xkVW50aWw6IFwiZXZhbHVhdGVcIixcbiAgICAgIHZhbHVlOiBbXCJSYXRpb25hbFwiLCAxLCAyXVxuICAgIH0sXG4gICAgSW1hZ2luYXJ5VW5pdDoge1xuICAgICAgZG9tYWluOiBcIkltYWdpbmFyeU51bWJlclwiLFxuICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICBob2xkVW50aWw6IFwiZXZhbHVhdGVcIixcbiAgICAgIHdpa2lkYXRhOiBcIlExOTM3OTZcIixcbiAgICAgIGZsYWdzOiB7IGltYWdpbmFyeTogdHJ1ZSB9LFxuICAgICAgdmFsdWU6IFtcIkNvbXBsZXhcIiwgMCwgMV1cbiAgICB9LFxuICAgIEV4cG9uZW50aWFsRToge1xuICAgICAgZG9tYWluOiBcIlRyYW5zY2VuZGVudGFsTnVtYmVyXCIsXG4gICAgICBmbGFnczogeyBhbGdlYnJhaWM6IGZhbHNlLCByZWFsOiB0cnVlIH0sXG4gICAgICB3aWtpZGF0YTogXCJRODI0MzVcIixcbiAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgaG9sZFVudGlsOiBcIk5cIixcbiAgICAgIHZhbHVlOiAoZW5naW5lKSA9PiBiaWdudW1QcmVmZXJyZWQoZW5naW5lKSA/IGVuZ2luZS5fQklHTlVNX09ORS5leHAoKSA6IE1hdGguZXhwKDEpXG4gICAgfSxcbiAgICBHb2xkZW5SYXRpbzoge1xuICAgICAgZG9tYWluOiBcIkFsZ2VicmFpY051bWJlclwiLFxuICAgICAgd2lraWRhdGE6IFwiUTQxNjkwXCIsXG4gICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgIGZsYWdzOiB7IGFsZ2VicmFpYzogdHJ1ZSB9LFxuICAgICAgaG9sZFVudGlsOiBcInNpbXBsaWZ5XCIsXG4gICAgICB2YWx1ZTogW1wiRGl2aWRlXCIsIFtcIkFkZFwiLCAxLCBbXCJTcXJ0XCIsIDVdXSwgMl1cbiAgICB9LFxuICAgIENhdGFsYW5Db25zdGFudDoge1xuICAgICAgZG9tYWluOiBcIlJlYWxOdW1iZXJcIixcbiAgICAgIGZsYWdzOiB7IGFsZ2VicmFpYzogdm9pZCAwIH0sXG4gICAgICAvLyBOb3QgcHJvdmVuIGlycmF0aW9uYWwgb3IgdHJhbnNjZW5kZW50YWxcbiAgICAgIHdpa2lkYXRhOiBcIlE4NTUyODJcIixcbiAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgaG9sZFVudGlsOiBcIk5cIixcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIC8vIEZyb20gaHR0cDovL3d3dy5mdWxsYm9va3MuY29tL01pc2NlbGxhbmVvdXMtTWF0aGVtYXRpY2FsLUNvbnN0YW50czEuaHRtbFxuICAgICAgICBudW06IGAwLjkxNTk2NTU5NDE3NzIxOTAxNTA1NDYwMzUxNDkzMjM4NDExMDc3NDE0OTM3NDI4MTY3XG4gICAgICAgICAgICAgICAgICAyMTM0MjY2NDk4MTE5NjIxNzYzMDE5Nzc2MjU0NzY5NDc5MzU2NTEyOTI2MTE1MTA2MlxuICAgICAgICAgICAgICAgICAgNDg1NzQ0MjI2MTkxOTYxOTk1NzkwMzU4OTg4MDMzMjU4NTkwNTk0MzE1OTQ3Mzc0ODFcbiAgICAgICAgICAgICAgICAgIDE1ODQwNjk5NTMzMjAyODc3MzMxOTQ2MDUxOTAzODcyNzQ3ODE2NDA4Nzg2NTkwOTAyXG4gICAgICAgICAgICAgICAgICA0NzA2NDg0MTUyMTYzMDAwMjI4NzI3NjQwOTQyMzg4MjU5OTU3NzQxNTA4ODE2Mzk3NFxuICAgICAgICAgICAgICAgICAgNzAyNTI0ODIwMTE1NjA3MDc2NDQ4ODM4MDc4NzMzNzA0ODk5MDA4NjQ3NzUxMTMyMjVcbiAgICAgICAgICAgICAgICAgIDk5NzEzNDM0MDc0ODU0MDc1NTMyMzA3Njg1NjUzMzU3NjgwOTU4MzUyNjAyMTkzODIzXG4gICAgICAgICAgICAgICAgICAyMzk1MDgwMDcyMDY4MDM1NTc2MTA0ODIzNTczMzk0MjMxOTE0OTgyOTgzNjE4OTk3N1xuICAgICAgICAgICAgICAgICAgMDY5MDM2NDA0MTgwODYyMTc5NDExMDE5MTc1MzI3NDMxNDk5NzgyMzM5NzYxMDU1MTJcbiAgICAgICAgICAgICAgICAgIDI0Nzc5NTMwMzI0ODc1MzcxODc4NjY1ODI4MDgyMzYwNTcwMjI1NTk0MTk0ODE4MDk3XG4gICAgICAgICAgICAgICAgICA1MzUwOTcxMTMxNTcxMjYxNTgwNDI0MjcyMzYzNjQzOTg1MDAxNzM4Mjg3NTk3Nzk3NlxuICAgICAgICAgICAgICAgICAgNTMwNjgzNzAwOTI5ODA4NzM4ODc0OTU2MTA4OTM2NTk3NzE5NDA5Njg3MjY4NDQ0NDFcbiAgICAgICAgICAgICAgICAgIDY2ODA0NjIxNjI0MzM5ODY0ODM4OTE2MjgwNDQ4MjgxNTA2MjczMDIyNzQyMDczODg0XG4gICAgICAgICAgICAgICAgICAzMTE3MjIxODI3MjE5MDQ3MjI1NTg3MDUzMTkwODY4NTczNTQyMzQ5ODUzOTQ5ODMwOVxuICAgICAgICAgICAgICAgICAgOTE5MTE1OTY3Mzg4NDY0NTA4NjE1MTUyNDk5NjI0MjM3MDQzNzQ1MTc3NzM3MjM1MTdcbiAgICAgICAgICAgICAgICAgIDc1NDQwNzA4NTM4NDY0NDAxMzIxNzQ4MzkyOTk5OTQ3NTcyNDQ2MTk5NzU0OTYxOTc1XG4gICAgICAgICAgICAgICAgICA4NzA2NDAwNzQ3NDg3MDcwMTQ5MDkzNzY3ODg3MzA0NTg2OTk3OTg2MDY0NDg3NDk3NFxuICAgICAgICAgICAgICAgICAgNjQzODcyMDYyMzg1MTM3MTIzOTI3MzYzMDQ5OTg1MDM1MzkyMjM5Mjg3ODc5NzkwNjNcbiAgICAgICAgICAgICAgICAgIDM2NDQwMzIzNTQ3ODQ1MzU4NTE5Mjc3Nzc3ODcyNzA5MDYwODMwMzE5OTQzMDEzMzIzXG4gICAgICAgICAgICAgICAgICAxNjcxMjQ3NjE1ODcwOTc5MjQ1NTQ3OTExOTA5MjEyNjIwMTg1NDgwMzk2MzkzNDI0M1xuICAgICAgICAgICAgICAgICAgYFxuICAgICAgfVxuICAgIH0sXG4gICAgRXVsZXJHYW1tYToge1xuICAgICAgLy8gRnJvbSBodHRwOi8vd3d3LmZ1bGxib29rcy5jb20vTWlzY2VsbGFuZW91cy1NYXRoZW1hdGljYWwtQ29uc3RhbnRzMi5odG1sXG4gICAgICBkb21haW46IFwiUmVhbE51bWJlclwiLFxuICAgICAgZmxhZ3M6IHsgYWxnZWJyYWljOiB2b2lkIDAgfSxcbiAgICAgIC8vIE5vdCBwcm92ZW4gaXJyYXRpb25hbCBvciB0cmFuc2NlbmRlbnRhbFxuICAgICAgd2lraWRhdGE6IFwiUTI3MzAyM1wiLFxuICAgICAgaG9sZFVudGlsOiBcIk5cIixcbiAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgbnVtOiBgMC41NzcyMTU2NjQ5MDE1MzI4NjA2MDY1MTIwOTAwODI0MDI0MzEwNDIxNTkzMzU5Mzk5MjM1OTg4MDU3NjcyMzQ4ODQ4Njc3MjY3Nzc2NlxuICAgICAgICAgIDQ2NzA5MzY5NDcwNjMyOTE3NDY3NDk1MTQ2MzE0NDcyNDk4MDcwODI0ODA5NjA1MDQwMTQ0ODY1NDI4MzYyMjQxNzM5OTc2NDQ5MjM1M1xuICAgICAgICAgIDYyNTM1MDAzMzM3NDI5MzczMzc3Mzc2NzM5NDI3OTI1OTUyNTgyNDcwOTQ5MTYwMDg3MzUyMDM5NDgxNjU2NzA4NTMyMzMxNTE3NzY2MVxuICAgICAgICAgIDE1Mjg2MjExOTk1MDE1MDc5ODQ3OTM3NDUwODU3MDU3NDAwMjk5MjEzNTQ3ODYxNDY2OTQwMjk2MDQzMjU0MjE1MTkwNTg3NzU1MzUyNlxuICAgICAgICAgIDczMzEzOTkyNTQwMTI5Njc0MjA1MTM3NTQxMzk1NDkxMTE2ODUxMDI4MDc5ODQyMzQ4Nzc1ODcyMDUwMzg0MzEwOTM5OTczNjEzNzI1NVxuICAgICAgICAgIDMwNjA4ODkzMzEyNjc2MDAxNzI0Nzk1Mzc4MzY3NTkyNzEzNTE1NzcyMjYxMDI3MzQ5MjkxMzk0MDc5ODQzMDEwMzQxNzc3MTc3ODA4OFxuICAgICAgICAgIDE1NDk1NzA2NjEwNzUwMTAxNjE5MTY2MzM0MDE1MjI3ODkzNTg2Nzk2NTQ5NzI1MjAzNjIxMjg3OTIyNjU1NTk1MzY2OTYyODE3NjM4OFxuICAgICAgICAgIDc5MjcyNjgwMTMyNDMxMDEwNDc2NTA1OTYzNzAzOTQ3Mzk0OTU3NjM4OTA2NTcyOTY3OTI5NjAxMDA5MDE1MTI1MTk1OTUwOTIyMjQzNVxuICAgICAgICAgIDAxNDA5MzQ5ODcxMjI4MjQ3OTQ5NzQ3MTk1NjQ2OTc2MzE4NTA2Njc2MTI5MDYzODExMDUxODI0MTk3NDQ0ODY3ODM2MzgwODYxNzQ5NFxuICAgICAgICAgIDU1MTY5ODkyNzkyMzAxODc3MzkxMDcyOTQ1NzgxNTU0MzE2MDA1MDAyMTgyODQ0MDk2MDUzNzcyNDM0MjAzMjg1NDc4MzY3MDE1MTc3M1xuICAgICAgICAgIDk0Mzk4NzAwMzAyMzcwMzM5NTE4MzI4NjkwMDAxNTU4MTkzOTg4MDQyNzA3NDExNTQyMjI3ODE5NzE2NTIzMDExMDczNTY1ODMzOTY3M2BcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBQcmVJbmNyZW1lbnQ6IHtcbiAgICAgIHNpZ25hdHVyZTogeyBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiTnVtYmVyXCIsIFwiTnVtYmVyXCJdIH1cbiAgICB9LFxuICAgIFByZURlY3JlbWVudDoge1xuICAgICAgc2lnbmF0dXJlOiB7IGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJOdW1iZXJcIl0gfVxuICAgIH1cbiAgfVxuXTtcbmZ1bmN0aW9uIHByb2Nlc3NBYnMoY2UsIGFyZywgbW9kZSkge1xuICBpZiAobW9kZSAhPT0gXCJzaW1wbGlmeVwiKSB7XG4gICAgY29uc3QgbnVtID0gYXJnLm51bWVyaWNWYWx1ZTtcbiAgICBpZiAobnVtICE9PSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIG51bSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgcmV0dXJuIGNlLm51bWJlcihNYXRoLmFicyhudW0pKTtcbiAgICAgIGlmIChudW0gaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpXG4gICAgICAgIHJldHVybiBjZS5udW1iZXIobnVtLmFicygpKTtcbiAgICAgIGlmIChudW0gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDE2LmRlZmF1bHQpXG4gICAgICAgIHJldHVybiBjZS5udW1iZXIobnVtLmFicygpKTtcbiAgICAgIGlmIChpc01hY2hpbmVSYXRpb25hbChudW0pKVxuICAgICAgICByZXR1cm4gY2UubnVtYmVyKFxuICAgICAgICAgIG1vZGUgPT09IFwiTlwiID8gTWF0aC5hYnMobnVtWzBdIC8gbnVtWzFdKSA6IFtNYXRoLmFicyhudW1bMF0pLCBudW1bMV1dXG4gICAgICAgICk7XG4gICAgICBpZiAoaXNCaWdSYXRpb25hbChudW0pKSB7XG4gICAgICAgIGNvbnN0IFtuLCBkXSA9IG51bTtcbiAgICAgICAgcmV0dXJuIGNlLm51bWJlcihcbiAgICAgICAgICBtb2RlID09PSBcIk5cIiA/IGNlLmJpZ251bShuKS5kaXYoY2UuYmlnbnVtKGQpKS5hYnMoKSA6IFtuID4gMCA/IG4gOiAtbiwgZF1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGFyZy5pc05vbk5lZ2F0aXZlKVxuICAgIHJldHVybiBhcmc7XG4gIGlmIChhcmcuaXNOZWdhdGl2ZSlcbiAgICByZXR1cm4gY2UubmVnKGFyZyk7XG4gIHJldHVybiB2b2lkIDA7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9saWJyYXJ5L2NhbGN1bHVzLnRzXG52YXIgQ0FMQ1VMVVNfTElCUkFSWSA9IFtcbiAge1xuICAgIC8vXG4gICAgLy8gRnVuY3Rpb25zXG4gICAgLy9cbiAgICBJbnRlZ3JhdGU6IHtcbiAgICAgIHdpa2lkYXRhOiBcIlE4MDA5MVwiLFxuICAgICAgaG9sZDogXCJhbGxcIixcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcbiAgICAgICAgICBcIkZ1bmN0aW9uXCIsXG4gICAgICAgICAgXCJBbnl0aGluZ1wiLFxuICAgICAgICAgIFtcIlVuaW9uXCIsIFwiTm90aGluZ1wiLCBcIlR1cGxlXCIsIFwiU3ltYm9sXCJdLFxuICAgICAgICAgIC8vIFsnVHVwbGUnLCAnU3ltYm9sJywgWydNYXliZScsICdJbnRlZ2VyJ10sIFsnTWF5YmUnLCAnSW50ZWdlciddXSxcbiAgICAgICAgICBcIk51bWJlclwiXG4gICAgICAgIF0sXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgY29uc3QgYm9keSA9IG9wczJbMF0gPz8gY2UuZXJyb3IoXCJtaXNzaW5nXCIpO1xuICAgICAgICAgIGxldCByYW5nZSA9IG9wczJbMV07XG4gICAgICAgICAgbGV0IGluZGV4ID0gbnVsbDtcbiAgICAgICAgICBsZXQgbG93ZXIgPSBudWxsO1xuICAgICAgICAgIGxldCB1cHBlciA9IG51bGw7XG4gICAgICAgICAgaWYgKHJhbmdlICYmIHJhbmdlLmhlYWQgIT09IFwiVHVwbGVcIiAmJiByYW5nZS5oZWFkICE9PSBcIlRyaXBsZVwiICYmIHJhbmdlLmhlYWQgIT09IFwiUGFpclwiICYmIHJhbmdlLmhlYWQgIT09IFwiU2luZ2xlXCIpIHtcbiAgICAgICAgICAgIGluZGV4ID0gcmFuZ2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgaW5kZXggPSByYW5nZS5vcHM/LlswXSA/PyBudWxsO1xuICAgICAgICAgICAgbG93ZXIgPSByYW5nZS5vcHM/LlsxXT8uY2Fub25pY2FsID8/IG51bGw7XG4gICAgICAgICAgICB1cHBlciA9IHJhbmdlLm9wcz8uWzJdPy5jYW5vbmljYWwgPz8gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4ICYmIGluZGV4LmhlYWQgPT09IFwiSG9sZFwiKVxuICAgICAgICAgICAgaW5kZXggPSBpbmRleC5vcDE7XG4gICAgICAgICAgaWYgKGluZGV4ICYmIGluZGV4LmhlYWQgPT09IFwiUmVsZWFzZUhvbGRcIilcbiAgICAgICAgICAgIGluZGV4ID0gaW5kZXgub3AxLmV2YWx1YXRlKCk7XG4gICAgICAgICAgaW5kZXggPz8gKGluZGV4ID0gY2Uuc3ltYm9sKFwiTm90aGluZ1wiKSk7XG4gICAgICAgICAgaWYgKCFpbmRleC5zeW1ib2wpXG4gICAgICAgICAgICBpbmRleCA9IGNlLmVycm9yKFtcImluY29tcGF0aWJsZS1kb21haW5cIiwgXCJTeW1ib2xcIiwgaW5kZXguZG9tYWluXSk7XG4gICAgICAgICAgaWYgKGxvd2VyKVxuICAgICAgICAgICAgbG93ZXIgPSB2YWxpZGF0ZUFyZ3VtZW50KGNlLCBsb3dlciwgXCJOdW1iZXJcIik7XG4gICAgICAgICAgaWYgKHVwcGVyKVxuICAgICAgICAgICAgdXBwZXIgPSB2YWxpZGF0ZUFyZ3VtZW50KGNlLCB1cHBlciwgXCJOdW1iZXJcIik7XG4gICAgICAgICAgaWYgKGxvd2VyICYmIHVwcGVyKVxuICAgICAgICAgICAgcmFuZ2UgPSBjZS50dXBsZShbaW5kZXgsIGxvd2VyLCB1cHBlcl0pO1xuICAgICAgICAgIGVsc2UgaWYgKHVwcGVyKVxuICAgICAgICAgICAgcmFuZ2UgPSBjZS50dXBsZShbaW5kZXgsIGNlLl9ORUdBVElWRV9JTkZJTklUWSwgdXBwZXJdKTtcbiAgICAgICAgICBlbHNlIGlmIChsb3dlcilcbiAgICAgICAgICAgIHJhbmdlID0gY2UudHVwbGUoW2luZGV4LCBsb3dlcl0pO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJhbmdlID0gaW5kZXg7XG4gICAgICAgICAgcmV0dXJuIGNlLl9mbihcIkludGVncmF0ZVwiLCBbYm9keS5jYW5vbmljYWwsIHJhbmdlXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbl07XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9saWJyYXJ5L2NvbGxlY3Rpb25zLnRzXG52YXIgQ09MTEVDVElPTlNfTElCUkFSWSA9IHtcbiAgU2VxdWVuY2U6IHtcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogXCJGdW5jdGlvblwiXG4gICAgfVxuICB9XG59O1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGlicmFyeS9jb21wbGV4LnRzXG52YXIgQ09NUExFWF9MSUJSQVJZID0gW1xuICB7XG4gICAgUmVhbDoge1xuICAgICAgdGhyZWFkYWJsZTogdHJ1ZSxcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGNvbnN0IG9wMyA9IG9wczJbMF0ubnVtZXJpY1ZhbHVlO1xuICAgICAgICAgIGlmIChvcDMgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIGlmIChjZS5pc0NvbXBsZXgob3AzKSlcbiAgICAgICAgICAgIHJldHVybiBjZS5udW1iZXIob3AzLnJlKTtcbiAgICAgICAgICByZXR1cm4gb3BzMlswXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgSW1hZ2luYXJ5OiB7XG4gICAgICB0aHJlYWRhYmxlOiB0cnVlLFxuICAgICAgY29tcGxleGl0eTogMTIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiTnVtYmVyXCIsIFwiTnVtYmVyXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgY29uc3Qgb3AzID0gb3BzMlswXS5udW1lcmljVmFsdWU7XG4gICAgICAgICAgaWYgKG9wMyA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgaWYgKGNlLmlzQ29tcGxleChvcDMpKVxuICAgICAgICAgICAgcmV0dXJuIGNlLm51bWJlcihvcDMuaW0pO1xuICAgICAgICAgIHJldHVybiBjZS5fWkVSTztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgQXJndW1lbnQ6IHtcbiAgICAgIHRocmVhZGFibGU6IHRydWUsXG4gICAgICBjb21wbGV4aXR5OiAxMjAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJOdW1iZXJcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBjb25zdCBvcDMgPSBvcHMyWzBdLm51bWVyaWNWYWx1ZTtcbiAgICAgICAgICBpZiAob3AzID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICBpZiAoY2UuaXNDb21wbGV4KG9wMykpXG4gICAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKG9wMy5hcmcoKSk7XG4gICAgICAgICAgY29uc3QgZiA9IGFzRmxvYXQob3BzMlswXSk7XG4gICAgICAgICAgaWYgKGYgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIGlmIChmID49IDApXG4gICAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKDApO1xuICAgICAgICAgIHJldHVybiBjZS5udW1iZXIoTWF0aC5QSSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIEFic0FyZzoge1xuICAgICAgdGhyZWFkYWJsZTogdHJ1ZSxcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIlR1cGxlXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgY29uc3Qgb3AzID0gb3BzMlswXS5udW1lcmljVmFsdWU7XG4gICAgICAgICAgaWYgKG9wMyA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgaWYgKGNlLmlzQ29tcGxleChvcDMpKVxuICAgICAgICAgICAgcmV0dXJuIGNlLnR1cGxlKFtjZS5udW1iZXIob3AzLmFicygpKSwgY2UubnVtYmVyKG9wMy5hcmcoKSldKTtcbiAgICAgICAgICBjb25zdCBmID0gYXNGbG9hdChvcHMyWzBdKTtcbiAgICAgICAgICBpZiAoZiA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIGNlLnR1cGxlKFtcbiAgICAgICAgICAgIGNlLm51bWJlcihNYXRoLmFicyhmKSksXG4gICAgICAgICAgICBjZS5udW1iZXIoZiA+PSAwID8gMCA6IE1hdGguUEkpXG4gICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIENvbmp1Z2F0ZToge1xuICAgICAgdGhyZWFkYWJsZTogdHJ1ZSxcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGNvbnN0IG9wMyA9IG9wczJbMF0ubnVtZXJpY1ZhbHVlO1xuICAgICAgICAgIGlmIChvcDMgPT09IG51bGwgfHwgIWNlLmlzQ29tcGxleChvcDMpKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKG9wMy5jb25qdWdhdGUoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIENvbXBsZXhSb290czoge1xuICAgICAgdGhyZWFkYWJsZTogdHJ1ZSxcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiLCBcIkxpc3RcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBjb25zdCB4ID0gYXNGbG9hdChvcHMyWzBdKTtcbiAgICAgICAgICBjb25zdCBuID0gYXNGbG9hdChvcHMyWzFdKTtcbiAgICAgICAgICBpZiAoeCA9PT0gbnVsbCB8fCBuID09PSBudWxsIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG4pIHx8IG4gPD0gMClcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgY29uc3Qgcm9vdHMgPSBbXTtcbiAgICAgICAgICBjb25zdCBbcmUsIGltXSA9IGNlLmlzQ29tcGxleCh4KSA/IFt4LnJlLCB4LmltXSA6IFt4LCAwXTtcbiAgICAgICAgICBjb25zdCBhcmcgPSBNYXRoLmF0YW4yKGltLCByZSk7XG4gICAgICAgICAgY29uc3QgbW9kMiA9IE1hdGguc3FydChyZSAqIHJlICsgaW0gKiBpbSk7XG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBuOyBrKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRoZXRhID0gKGFyZyArIDIgKiBNYXRoLlBJICogaykgLyBuO1xuICAgICAgICAgICAgY29uc3QgciA9IE1hdGgucG93KG1vZDIsIDEgLyBuKTtcbiAgICAgICAgICAgIHJvb3RzLnB1c2goW3IgKiBNYXRoLmNvcyh0aGV0YSksIHIgKiBNYXRoLnNpbih0aGV0YSldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNlLmJveChbXG4gICAgICAgICAgICBcIkxpc3RcIixcbiAgICAgICAgICAgIC4uLnJvb3RzLm1hcChcbiAgICAgICAgICAgICAgKHIpID0+IGNlLm51bWJlcihyWzFdICE9PSAwID8gY2UuY29tcGxleChyWzBdLCByWzFdKSA6IHJbMF0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRm9yIEFicyAobWFnbml0dWRlKSBzZWUgc3JjL2NvbXB1dGUtZW5naW5lL2xpYnJhcnkvcHJvY2Vzc0Fic1xuICB9XG5dO1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGlicmFyeS9yYW5kb20tZXhwcmVzc2lvbi50c1xuZnVuY3Rpb24gb25lT2YoeHMpIHtcbiAgcmV0dXJuIHhzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHhzLmxlbmd0aCldO1xufVxuZnVuY3Rpb24gcmFuZG9tRXhwcmVzc2lvbldpdGhIZWFkKGhlYWQyLCBsZXZlbCkge1xuICBpZiAoaGVhZDIgPT09IFwiQWRkXCIgfHwgaGVhZDIgPT09IFwiTXVsdGlwbHlcIikge1xuICAgIGNvbnN0IG9wczIgPSBbXTtcbiAgICBsZXQgY291bnQgPSAxICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTIpO1xuICAgIHdoaWxlIChjb3VudCA+IDApIHtcbiAgICAgIG9wczIucHVzaChyYW5kb21FeHByZXNzaW9uKGxldmVsICsgMSkpO1xuICAgICAgY291bnQgLT0gMTtcbiAgICB9XG4gICAgcmV0dXJuIFtoZWFkMiwgLi4ub3BzMl07XG4gIH1cbiAgaWYgKGhlYWQyID09PSBcIkRpdmlkZVwiIHx8IGhlYWQyID09PSBcIlBvd2VyXCIpIHtcbiAgICByZXR1cm4gW2hlYWQyLCByYW5kb21FeHByZXNzaW9uKGxldmVsICsgMSksIHJhbmRvbUV4cHJlc3Npb24obGV2ZWwgKyAxKV07XG4gIH1cbiAgaWYgKGhlYWQyID09PSBcIlJvb3RcIikge1xuICAgIHJldHVybiBbaGVhZDIsIHJhbmRvbUV4cHJlc3Npb24obGV2ZWwgKyAxKSwgcmFuZG9tRXhwcmVzc2lvbigxMCldO1xuICB9XG4gIGlmIChoZWFkMiA9PT0gXCJ0cmlnXCIpXG4gICAgcmV0dXJuIHJhbmRvbVRyaWcoKTtcbiAgcmV0dXJuIFtoZWFkMiwgcmFuZG9tRXhwcmVzc2lvbihsZXZlbCArIDEpXTtcbn1cbmZ1bmN0aW9uIHJhbmRvbVRyaWcoKSB7XG4gIHJldHVybiBbXG4gICAgb25lT2YoW1xuICAgICAgXCJDb3NcIixcbiAgICAgIFwiU2luXCIsXG4gICAgICBcIlRhblwiLFxuICAgICAgXCJTaW5oXCIsXG4gICAgICBcIkFyY2Nvc1wiLFxuICAgICAgXCJBcnNpbmhcIixcbiAgICAgIFtcIkludmVyc2VGdW5jdGlvblwiLCBcIkNvc1wiXVxuICAgIF0pLFxuICAgIG9uZU9mKFtcbiAgICAgIFwiUGlcIixcbiAgICAgIFwiLTFcIixcbiAgICAgIFwiMFwiLFxuICAgICAgXCIxXCIsXG4gICAgICBbXCJEaXZpZGVcIiwgXCJQaVwiLCAtNV0sXG4gICAgICBbXCJNdWx0aXBseVwiLCAtMiwgW1wiRGl2aWRlXCIsIFwiUGlcIiwgMTFdXSxcbiAgICAgIFtcIk11bHRpcGx5XCIsIFwiSGFsZlwiLCBcIlBpXCJdLFxuICAgICAgW1wiTXVsdGlwbHlcIiwgNSwgXCJQaVwiXSxcbiAgICAgIFtcIk11bHRpcGx5XCIsIDEyLCBcIlBpXCJdLFxuICAgICAgW1wiRGl2aWRlXCIsIFwiUGlcIiwgNV0sXG4gICAgICBbXCJEaXZpZGVcIiwgXCJQaVwiLCA5XSxcbiAgICAgIFtcIk11bHRpcGx5XCIsIDUsIFtcIkRpdmlkZVwiLCBcIlBpXCIsIDldXSxcbiAgICAgIFtcIk11bHRpcGx5XCIsIDIsIFtcIkRpdmlkZVwiLCBcIlBpXCIsIDExXV0sXG4gICAgICBbXCJNdWx0aXBseVwiLCAyLCBbXCJEaXZpZGVcIiwgXCJQaVwiLCAzXV1cbiAgICBdKVxuICBdO1xufVxuZnVuY3Rpb24gcmFuZG9tRXhwcmVzc2lvbihsZXZlbCkge1xuICBsZXZlbCA/PyAobGV2ZWwgPSAxKTtcbiAgaWYgKGxldmVsID09PSAxKSB7XG4gICAgY29uc3QgaCA9IG9uZU9mKFtcbiAgICAgIFtcbiAgICAgICAgXCJTcXJ0XCIsXG4gICAgICAgIFtcbiAgICAgICAgICBcIk11bHRpcGx5XCIsXG4gICAgICAgICAgNixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcIlN1bVwiLFxuICAgICAgICAgICAgW1wiRGl2aWRlXCIsIDEsIFtcIlBvd2VyXCIsIFwiblwiLCAyXV0sXG4gICAgICAgICAgICBbXCJUcmlwbGVcIiwgW1wiSG9sZFwiLCBcIm5cIl0sIDEsIHsgbnVtOiBcIitJbmZpbml0eVwiIH1dXG4gICAgICAgICAgXVxuICAgICAgICBdXG4gICAgICBdLFxuICAgICAgXCJBZGRcIixcbiAgICAgIFwiQWRkXCIsXG4gICAgICBcIkFkZFwiLFxuICAgICAgXCJBZGRcIixcbiAgICAgIFwiQWRkXCIsXG4gICAgICBcIk11bHRpcGx5XCIsXG4gICAgICBcIk11bHRpcGx5XCIsXG4gICAgICBcIk11bHRpcGx5XCIsXG4gICAgICBcIk11bHRpcGx5XCIsXG4gICAgICBcIkRpdmlkZVwiLFxuICAgICAgXCJEaXZpZGVcIixcbiAgICAgIFwiRGl2aWRlXCIsXG4gICAgICBcIlJvb3RcIixcbiAgICAgIFwiU3FydFwiLFxuICAgICAgXCJTdWJ0cmFjdFwiLFxuICAgICAgXCJOZWdhdGVcIixcbiAgICAgIFwidHJpZ1wiXG4gICAgXSk7XG4gICAgaWYgKHR5cGVvZiBoID09PSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIHJhbmRvbUV4cHJlc3Npb25XaXRoSGVhZChoLCAxKTtcbiAgICByZXR1cm4gaDtcbiAgfVxuICBpZiAobGV2ZWwgPT09IDIpIHtcbiAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKTtcbiAgICBpZiAociA+IDAuNzUpXG4gICAgICByZXR1cm4gcmFuZG9tRXhwcmVzc2lvbigxKTtcbiAgICBpZiAociA+IDAuNSlcbiAgICAgIHJldHVybiByYW5kb21FeHByZXNzaW9uKDMpO1xuICAgIGNvbnN0IGggPSBvbmVPZihbXG4gICAgICBcIk11bHRpcGx5XCIsXG4gICAgICBcIk11bHRpcGx5XCIsXG4gICAgICBcIkFkZFwiLFxuICAgICAgXCJQb3dlclwiLFxuICAgICAgXCJ0cmlnXCIsXG4gICAgICBcIkxuXCIsXG4gICAgICBcIkV4cFwiXG4gICAgXSk7XG4gICAgcmV0dXJuIHJhbmRvbUV4cHJlc3Npb25XaXRoSGVhZChoLCAyKTtcbiAgfVxuICByZXR1cm4gb25lT2YoW1xuICAgIC0xMjM0NWUtOSxcbiAgICAtMixcbiAgICAtMixcbiAgICAtMixcbiAgICAtMyxcbiAgICAtNSxcbiAgICAtNixcbiAgICAtMTIsXG4gICAgLTE2NTRlLTYwLFxuICAgIDAsXG4gICAgMCxcbiAgICAxMjM0NWUtOCxcbiAgICAxNjU0ZS02MCxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAzLFxuICAgIDUsXG4gICAgNSxcbiAgICA2LFxuICAgIDYsXG4gICAgMTIzNC41Njc4LFxuICAgIDU2NzguMTIzNCxcbiAgICAxMCxcbiAgICAxNSxcbiAgICAxOCxcbiAgICAzMCxcbiAgICA2MCxcbiAgICAxMjM0ZTU0LFxuICAgIFwiMTIzNDU2Nzg5LjEyMzQ1Njc4OTEyMzQ1ZTIwMFwiLFxuICAgIFwiOTg3NjU0MzIxLjEyMzQ1Njc4OTEyMzQ1XCIsXG4gICAgW1wiUmF0aW9uYWxcIiwgLTYsIDEwXSxcbiAgICBbXCJSYXRpb25hbFwiLCAtMTIsIDE1XSxcbiAgICBbXCJSYXRpb25hbFwiLCAtMTUsIDEyXSxcbiAgICBbXCJSYXRpb25hbFwiLCAzLCA1XSxcbiAgICBbXCJSYXRpb25hbFwiLCAxMiwgMTVdLFxuICAgIFtcIlJhdGlvbmFsXCIsIDE1LCAxMl0sXG4gICAgXCJFeHBvbmVudGlhbEVcIixcbiAgICAvLyAnSW1hZ2luYXJ5VW5pdCcsXG4gICAgW1wiU3FydFwiLCAzXSxcbiAgICBbXCJTcXJ0XCIsIDVdLFxuICAgIFtcIlNxcnRcIiwgMTVdLFxuICAgIFtcIlNxcnRcIiwgMjVdLFxuICAgIFtcIkNvbXBsZXhcIiwgLTEuMSwgMS4xXSxcbiAgICBbXCJDb21wbGV4XCIsIDQsIDVdLFxuICAgIFwieFwiLFxuICAgIFwieFwiLFxuICAgIFwieFwiLFxuICAgIFwieFwiLFxuICAgIFtcIkFkZFwiLCBcInhcIiwgMV0sXG4gICAgW1wiRGl2aWRlXCIsIFwieFwiLCAzXSxcbiAgICBbXCJTcXVhcmVcIiwgXCJ4XCJdLFxuICAgIFtcIlBvd2VyXCIsIFwieFwiLCAzXSxcbiAgICBbXCJQb3dlclwiLCBcInhcIiwgNF0sXG4gICAgW1wiU3VidHJhY3RcIiwgXCJ4XCIsIDFdLFxuICAgIFtcIkFkZFwiLCBcInhcIiwgMV0sXG4gICAgLy8gJ2EnLFxuICAgIC8vICdiJyxcbiAgICBcIlBpXCJcbiAgXSk7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9saWJyYXJ5L2NvcmUudHNcbnZhciBDT1JFX0xJQlJBUlkgPSBbXG4gIHtcbiAgICBOb3RoaW5nOiB7IGRvbWFpbjogXCJOb3RoaW5nXCIgfVxuICB9LFxuICAvL1xuICAvLyBEYXRhIFN0cnVjdHVyZXNcbiAgLy9cbiAge1xuICAgIExpc3Q6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDgyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBbXCJNYXliZVwiLCBbXCJTZXF1ZW5jZVwiLCBcIkFueXRoaW5nXCJdXSwgXCJMaXN0XCJdXG4gICAgICB9XG4gICAgfSxcbiAgICBLZXlWYWx1ZVBhaXI6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkEga2V5L3ZhbHVlIHBhaXJcIixcbiAgICAgIGNvbXBsZXhpdHk6IDgyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXG4gICAgICAgICAgXCJGdW5jdGlvblwiLFxuICAgICAgICAgIFwiU3RyaW5nXCIsXG4gICAgICAgICAgXCJBbnl0aGluZ1wiLFxuICAgICAgICAgIFtcIlR1cGxlXCIsIFwiU3RyaW5nXCIsIFwiQW55dGhpbmdcIl1cbiAgICAgICAgXSxcbiAgICAgICAgY29kb21haW46IChjZSwgYXJncykgPT4gY2UuZG9tYWluKFtcIlR1cGxlXCIsIFwiU3RyaW5nXCIsIGFyZ3NbMV0uZG9tYWluXSksXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBhcmdzKSA9PiB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gdmFsaWRhdGVBcmd1bWVudChjZSwgYXJnc1swXT8uY2Fub25pY2FsLCBcIlN0cmluZ1wiKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbGlkYXRlQXJndW1lbnQoY2UsIGFyZ3NbMV0/LmNhbm9uaWNhbCwgXCJWYWx1ZVwiKTtcbiAgICAgICAgICByZXR1cm4gY2UudHVwbGUoW2tleSwgdmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgU2luZ2xlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJBIHR1cGxlIHdpdGggYSBzaW5nbGUgZWxlbWVudFwiLFxuICAgICAgY29tcGxleGl0eTogODIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiQW55dGhpbmdcIiwgW1wiVHVwbGVcIiwgXCJBbnl0aGluZ1wiXV0sXG4gICAgICAgIGNvZG9tYWluOiAoY2UsIGFyZ3MpID0+IGNlLmRvbWFpbihbXCJUdXBsZVwiLCBhcmdzWzBdLmRvbWFpbl0pLFxuICAgICAgICBjYW5vbmljYWw6IChjZSwgb3BzMikgPT4gY2UudHVwbGUodmFsaWRhdGVBcmd1bWVudENvdW50KGNlLCBjYW5vbmljYWwob3BzMiksIDEpKVxuICAgICAgfVxuICAgIH0sXG4gICAgUGFpcjoge1xuICAgICAgZGVzY3JpcHRpb246IFwiQSB0dXBsZSBvZiB0d28gZWxlbWVudHNcIixcbiAgICAgIGNvbXBsZXhpdHk6IDgyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXG4gICAgICAgICAgXCJGdW5jdGlvblwiLFxuICAgICAgICAgIFwiQW55dGhpbmdcIixcbiAgICAgICAgICBcIkFueXRoaW5nXCIsXG4gICAgICAgICAgW1wiVHVwbGVcIiwgXCJBbnl0aGluZ1wiLCBcIkFueXRoaW5nXCJdXG4gICAgICAgIF0sXG4gICAgICAgIGNvZG9tYWluOiAoY2UsIGFyZ3MpID0+IGNlLmRvbWFpbihbXCJUdXBsZVwiLCBhcmdzWzBdLmRvbWFpbiwgYXJnc1sxXS5kb21haW5dKSxcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIG9wczIpID0+IGNlLnR1cGxlKHZhbGlkYXRlQXJndW1lbnRDb3VudChjZSwgY2Fub25pY2FsKG9wczIpLCAyKSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFRyaXBsZToge1xuICAgICAgZGVzY3JpcHRpb246IFwiQSB0dXBsZSBvZiB0aHJlZSBlbGVtZW50c1wiLFxuICAgICAgY29tcGxleGl0eTogODIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcbiAgICAgICAgICBcIkZ1bmN0aW9uXCIsXG4gICAgICAgICAgXCJBbnl0aGluZ1wiLFxuICAgICAgICAgIFwiQW55dGhpbmdcIixcbiAgICAgICAgICBcIkFueXRoaW5nXCIsXG4gICAgICAgICAgW1wiVHVwbGVcIiwgXCJBbnl0aGluZ1wiLCBcIkFueXRoaW5nXCIsIFwiQW55dGhpbmdcIl1cbiAgICAgICAgXSxcbiAgICAgICAgY29kb21haW46IChjZSwgYXJncykgPT4gY2UuZG9tYWluKFtcIlR1cGxlXCIsIGFyZ3NbMF0uZG9tYWluLCBhcmdzWzFdLmRvbWFpbiwgYXJnc1syXS5kb21haW5dKSxcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIG9wczIpID0+IGNlLnR1cGxlKHZhbGlkYXRlQXJndW1lbnRDb3VudChjZSwgY2Fub25pY2FsKG9wczIpLCAzKSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFR1cGxlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJBIGZpeGVkIG51bWJlciBvZiBoZXRlcm9nZW5lb3VzIGVsZW1lbnRzXCIsXG4gICAgICBjb21wbGV4aXR5OiA4MjAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1xuICAgICAgICAgIFwiRnVuY3Rpb25cIixcbiAgICAgICAgICBbXCJTZXF1ZW5jZVwiLCBcIkFueXRoaW5nXCJdLFxuICAgICAgICAgIFtcIlR1cGxlXCIsIFtcIlNlcXVlbmNlXCIsIFwiQW55dGhpbmdcIl1dXG4gICAgICAgIF0sXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBvcHMyKSA9PiBjZS50dXBsZShjYW5vbmljYWwob3BzMikpLFxuICAgICAgICBjb2RvbWFpbjogKGNlLCBhcmdzKSA9PiBjZS5kb21haW4oW1wiVHVwbGVcIiwgLi4uYXJncy5tYXAoKHgpID0+IHguZG9tYWluKV0pXG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvL1xuICAvLyBJbmVydCBmdW5jdGlvbnNcbiAgLy9cbiAge1xuICAgIEJhc2VGb3JtOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJgQmFzZUZvcm0oZXhwciwgYmFzZT0xMClgXCIsXG4gICAgICBjb21wbGV4aXR5OiA5ZTMsXG4gICAgICBpbmVydDogdHJ1ZSxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiVmFsdWVcIiwgW1wiTWF5YmVcIiwgXCJJbnRlZ2VyXCJdLCBcIlZhbHVlXCJdLFxuICAgICAgICBjb2RvbWFpbjogKF9jZSwgYXJncykgPT4gYXJnc1swXS5kb21haW5cbiAgICAgIH1cbiAgICB9LFxuICAgIERlbGltaXRlcjoge1xuICAgICAgLy8gVXNlIHRvIHJlcHJlc2VudCBncm91cHMgb2YgZXhwcmVzc2lvbnMuIE5hbWVkIGFmdGVyIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlbGltaXRlclxuICAgICAgY29tcGxleGl0eTogOWUzLFxuICAgICAgaG9sZDogXCJmaXJzdFwiLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1xuICAgICAgICAgIFwiRnVuY3Rpb25cIixcbiAgICAgICAgICBcIkFueXRoaW5nXCIsXG4gICAgICAgICAgW1wiTWF5YmVcIiwgXCJTdHJpbmdcIl0sXG4gICAgICAgICAgW1wiTWF5YmVcIiwgXCJTdHJpbmdcIl0sXG4gICAgICAgICAgXCJBbnl0aGluZ1wiXG4gICAgICAgIF0sXG4gICAgICAgIGNvZG9tYWluOiAoX2NlLCBhcmdzKSA9PiBhcmdzWzBdLmRvbWFpbixcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IGFyZ3NbMF0/LmNhbm9uaWNhbCA/PyBjZS5ib3goW1wiU2VxdWVuY2VcIl0pXG4gICAgICB9XG4gICAgfSxcbiAgICBFcnJvcjoge1xuICAgICAgLyoqXG4gICAgICAgKiAtIFRoZSBmaXJzdCBhcmd1bWVudCBpcyBlaXRoZXIgYSBzdHJpbmcgb3IgYW4gYFtcIkVycm9yQ29kZVwiXWBcbiAgICAgICAqIGV4cHJlc3Npb24gaW5kaWNhdGluZyB0aGUgbmF0dXJlIG9mIHRoZSBlcnJvci5cbiAgICAgICAqIC0gVGhlIHNlY29uZCBhcmd1bWVudCwgaWYgcHJlc2VudCwgaW5kaWNhdGVzIHRoZSBjb250ZXh0L2xvY2F0aW9uXG4gICAgICAgKiBvZiB0aGUgZXJyb3IuIElmIHRoZSBlcnJvciBvY2N1ciB3aGlsZSBwYXJzaW5nIGEgTGFUZVggc3RyaW5nLFxuICAgICAgICogZm9yIGV4YW1wbGUsIHRoZSBhcmd1bWVudCB3aWxsIGJlIGEgYExhdGV4YCBleHByZXNzaW9uLlxuICAgICAgICovXG4gICAgICBjb21wbGV4aXR5OiA1MDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIkFueXRoaW5nXCIsIFtcIk1heWJlXCIsIFwiQW55dGhpbmdcIl0sIFwiVm9pZFwiXSxcbiAgICAgICAgLy8gVG8gbWFrZSBhIGNhbm9uaWNhbCBleHByZXNzaW9uLCBkb24ndCBjYW5vbmljYWxpemUgdGhlIGFyZ3NcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IGNlLl9mbihcIkVycm9yXCIsIGFyZ3MpXG4gICAgICB9XG4gICAgfSxcbiAgICBFcnJvckNvZGU6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDUwMCxcbiAgICAgIGhvbGQ6IFwiYWxsXCIsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXG4gICAgICAgICAgXCJGdW5jdGlvblwiLFxuICAgICAgICAgIFwiU3RyaW5nXCIsXG4gICAgICAgICAgW1wiTWF5YmVcIiwgW1wiU2VxdWVuY2VcIiwgXCJBbnl0aGluZ1wiXV0sXG4gICAgICAgICAgXCJBbnl0aGluZ1wiXG4gICAgICAgIF0sXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBhcmdzKSA9PiB7XG4gICAgICAgICAgY29uc3QgY29kZSA9IHZhbGlkYXRlQXJndW1lbnQoY2UsIGFyZ3NbMF0sIFwiU3RyaW5nXCIpLnN0cmluZztcbiAgICAgICAgICBpZiAoY29kZSA9PT0gXCJpbmNvbXBhdGlibGUtZG9tYWluXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJFcnJvckNvZGVcIiwgW1xuICAgICAgICAgICAgICBjZS5zdHJpbmcoY29kZSksXG4gICAgICAgICAgICAgIGNlLmRvbWFpbihhcmdzWzFdID8/IFwiQW55dGhpbmdcIiksXG4gICAgICAgICAgICAgIGNlLmRvbWFpbihhcmdzWzJdID8/IFwiQW55dGhpbmdcIilcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiRXJyb3JDb2RlXCIsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBIb2xkOiB7XG4gICAgICBob2xkOiBcImFsbFwiLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogXCJGdW5jdGlvblwiLFxuICAgICAgICBjb2RvbWFpbjogKGNlLCBhcmdzKSA9PiBhcmdzWzBdLnN5bWJvbCA/IGNlLmRvbWFpbihcIlN5bWJvbFwiKSA6IGNlLmRvbWFpbihcIkFueXRoaW5nXCIpLFxuICAgICAgICAvLyBUbyBtYWtlIGEgY2Fub25pY2FsIGV4cHJlc3Npb24sIGRvbid0IGNhbm9uaWNhbGl6ZSB0aGUgYXJnc1xuICAgICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gYXJncy5sZW5ndGggIT09IDEgPyBjZS5fZm4oXCJIb2xkXCIsIHZhbGlkYXRlQXJndW1lbnRDb3VudChjZSwgYXJncywgMSkpIDogY2UuX2ZuKFwiSG9sZFwiLCBbdmFsaWRhdGVBcmd1bWVudChjZSwgYXJnc1swXSwgXCJBbnl0aGluZ1wiKV0pXG4gICAgICB9XG4gICAgfSxcbiAgICBIb3Jpem9udGFsU3BhY2luZzoge1xuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogXCJGdW5jdGlvblwiLFxuICAgICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4ge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMilcbiAgICAgICAgICAgIHJldHVybiBhcmdzWzBdLmNhbm9uaWNhbDtcbiAgICAgICAgICByZXR1cm4gY2UuYm94KFtcIlNlcXVlbmNlXCJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgU3R5bGU6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDllMyxcbiAgICAgIGluZXJ0OiB0cnVlLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1xuICAgICAgICAgIFwiRnVuY3Rpb25cIixcbiAgICAgICAgICBcIkFueXRoaW5nXCIsXG4gICAgICAgICAgW1wiTWF5YmVcIiwgXCJEaWN0aW9uYXJ5XCJdLFxuICAgICAgICAgIC8vIEB0b2RvXG4gICAgICAgICAgXCJBbnl0aGluZ1wiXG4gICAgICAgIF1cbiAgICAgIH1cbiAgICAgIC8vIEB0b2RvOiBzaW1wbGlmeTogbWVyZ2UgU3R5bGUoU3R5bGUoeCwgczEpLCBzMiksICBTdHlsZSh4KSAtPiB4XG4gICAgfVxuICB9LFxuICB7XG4gICAgQXBwbHk6IHtcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFwiRnVuY3Rpb25cIixcbiAgICAgICAgZXZhbHVhdGU6IChfY2UsIG9wczIpID0+IGFwcGx5KG9wczJbMF0sIG9wczIuc2xpY2UoMSkpXG4gICAgICB9XG4gICAgfSxcbiAgICBBYm91dDogeyBzaWduYXR1cmU6IHsgZG9tYWluOiBcIkZ1bmN0aW9uXCIgfSB9LFxuICAgIEJsb2NrOiB7XG4gICAgICAvKiogQ3JlYXRlIGEgbG9jYWwgc2NvcGUuIEZpcnN0IGFyZ3VtZW50IGlzIGEgZGljdGlvbmFyeSBvZiBsb2NhbCB2YXJpYWJsZXMuXG4gICAgICAgKiBUaGV5IGFyZSBldmFsdWF0ZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHBhcmVudCBzY29wZS4gVGhlIHNlY29uZCBhcmd1bWVudFxuICAgICAgICogaXMgYW4gZXhwcmVzc2lvbiB0byBiZSBldmFsdWF0ZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlIG5ldyBzY29wZS5cbiAgICAgICAqIFtcIkJsb2NrXCIsIFtcIkxpc3RcIiwgW1wiRXF1YWxcIiwgXCJ4XCIsIDFdXSwgWy4uLl1dXG4gICAgICAgKi9cbiAgICAgIHNpZ25hdHVyZTogeyBkb21haW46IFwiRnVuY3Rpb25cIiB9XG4gICAgfSxcbiAgICBEZXJpdmF0aXZlOiB7XG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIkZ1bmN0aW9uXCIsIFtcIk1heWJlXCIsIFwiTnVtYmVyXCJdLCBcIkZ1bmN0aW9uXCJdXG4gICAgICB9XG4gICAgfSxcbiAgICBEb21haW46IHtcbiAgICAgIC8qKiBSZXR1cm4gdGhlIGRvbWFpbiBvZiBhbiBleHByZXNzaW9uICovXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIkFueXRoaW5nXCIsIFwiRG9tYWluXCJdLFxuICAgICAgICBjYW5vbmljYWw6IChjZSwgb3BzMikgPT4gY2UuZG9tYWluKHZhbGlkYXRlQXJndW1lbnRDb3VudChjZSwgY2Fub25pY2FsKG9wczIpLCAxKVswXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIEV2YWx1YXRlOiB7XG4gICAgICBob2xkOiBcImFsbFwiLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJBbnl0aGluZ1wiLCBcIkFueXRoaW5nXCJdLFxuICAgICAgICBjb2RvbWFpbjogKF9jZSwgYXJncykgPT4gYXJnc1swXS5kb21haW4sXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBvcHMyKSA9PiBjZS5fZm4oXCJFdmFsdWF0ZVwiLCB2YWxpZGF0ZUFyZ3VtZW50Q291bnQoY2UsIGNhbm9uaWNhbChvcHMyKSwgMSkpLFxuICAgICAgICBldmFsdWF0ZTogKF9jZSwgb3BzMikgPT4gb3BzMlswXS5ldmFsdWF0ZSgpXG4gICAgICB9XG4gICAgfSxcbiAgICBIZWFkOiB7XG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBcIkZ1bmN0aW9uXCIsXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBjb25zdCBvcDEyID0gb3BzMlswXTtcbiAgICAgICAgICBpZiAodHlwZW9mIG9wMTI/LmhlYWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKG9wMTIuaGVhZCk7XG4gICAgICAgICAgcmV0dXJuIG9wMTI/LmhlYWQgPz8gY2Uuc3ltYm9sKFwiTm90aGluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgSHRtbDoge1xuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJWYWx1ZVwiLCBcIlN0cmluZ1wiXSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGlmIChvcHMyLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5zdHJpbmcoXCJcIik7XG4gICAgICAgICAgcmV0dXJuIGNlLnN0cmluZyhcIlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgTGFtYmRhOiB7XG4gICAgICB3aWtpZGF0YTogXCJRNTY3NjEyXCIsXG4gICAgICBob2xkOiBcImFsbFwiLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJBbnl0aGluZ1wiLCBcIkZ1bmN0aW9uXCJdLFxuICAgICAgICBjb2RvbWFpbjogKF9jZSwgb3BzMikgPT4gb3BzMlswXS5kb21haW4sXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBvcHMyKSA9PiBjZS5fZm4oXCJMYW1iZGFcIiwgdmFsaWRhdGVBcmd1bWVudENvdW50KGNlLCBvcHMyLCAxKSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFNpZ25hdHVyZXM6IHtcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiU3ltYm9sXCIsIFtcIk1heWJlXCIsIFtcIkxpc3RcIiwgXCJEb21haW5cIl1dXSxcbiAgICAgICAgY2Fub25pY2FsOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBvcHMyID0gdmFsaWRhdGVBcmd1bWVudENvdW50KGNlLCBvcHMyLCAxKTtcbiAgICAgICAgICBpZiAoIW9wczJbMF0uc3ltYm9sKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9mbihcIlNpZ25hdHVyZXNcIiwgW1xuICAgICAgICAgICAgICBjZS5lcnJvcihcbiAgICAgICAgICAgICAgICBbXCJpbmNvbXBhdGlibGUtZG9tYWluXCIsIFwiU3ltYm9sXCIsIG9wczJbMF0uZG9tYWluXSxcbiAgICAgICAgICAgICAgICBvcHMyWzBdXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJTaWduYXR1cmVzXCIsIG9wczIpO1xuICAgICAgICB9LFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgY29uc3QgbmFtZSA9IG9wczJbMF0uc3ltYm9sO1xuICAgICAgICAgIGlmICghbmFtZSlcbiAgICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJOb3RoaW5nXCIpO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNlLmxvb2t1cEZ1bmN0aW9uKG5hbWUpO1xuICAgICAgICAgIGlmICghcmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIk5vdGhpbmdcIik7XG4gICAgICAgICAgcmV0dXJuIGNlLmZuKFwiTGlzdFwiLCBbcmVzdWx0LnNpZ25hdHVyZS5kb21haW5dKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgU3Vic2NyaXB0OiB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBgU3Vic2NyaXB0YCBmdW5jdGlvbiBjYW4gdGFrZSBzZXZlcmFsIGZvcm1zOlxuICAgICAgICpcbiAgICAgICAqIElmIGBvcDFgIGlzIGEgc3RyaW5nLCB0aGUgc3RyaW5nIGlzIGludGVycHJldGVkIGFzIGEgbnVtYmVyIGluXG4gICAgICAgKiBiYXNlIGBvcDJgICgyIHRvIDM2KS5cbiAgICAgICAqXG4gICAgICAgKiBJZiBgb3AxYCBpcyBhbiBpbmRleGFibGUgY29sbGVjdGlvbiwgYHhgOlxuICAgICAgICogLSBgeF8qYCAtPiBgQXQoeCwgKilgXG4gICAgICAgKlxuICAgICAgICogT3RoZXJ3aXNlOlxuICAgICAgICogLSBgeF8wYCAtPiBTeW1ib2wgXCJ4XzBcIlxuICAgICAgICogLSBgeF9uYCAtPiBTeW1ib2wgXCJ4X25cIlxuICAgICAgICogLSBgeF97XFx0ZXh0e21heH19YCAtPiBTeW1ib2wgYHhfbWF4YFxuICAgICAgICogLSBgeF97KG4rMSl9YCAtPiBgQXQoeCwgbisxKWBcbiAgICAgICAqIC0gYHhfe24rMX1gIC0+ICBgU3Vic2NyaXB0KHgsIG4rMSlgXG4gICAgICAgKi9cbiAgICAgIC8vIFRoZSBsYXN0IChzdWJzY3JpcHQpIGFyZ3VtZW50IGNhbiBpbmNsdWRlIGEgZGVsaW1pdGVyIHRoYXRcbiAgICAgIC8vIG5lZWRzIHRvIGJlIGludGVycHJldGVkLiBXaXRob3V0IHRoZSBob2xkLCBpdCB3b3VsZCBnZXRcbiAgICAgIC8vIHJlbW92ZWQgZHVyaW5nIGNhbm9uaWNhbGl6YXRpb24uXG4gICAgICBob2xkOiBcImxhc3RcIixcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiQW55dGhpbmdcIiwgXCJBbnl0aGluZ1wiLCBcIkFueXRoaW5nXCJdLFxuICAgICAgICBjb2RvbWFpbjogKF9jZSwgYXJncykgPT4ge1xuICAgICAgICAgIGlmIChhcmdzWzBdLmlzRnVuY3Rpb24pXG4gICAgICAgICAgICByZXR1cm4gYXJnc1swXS5kb21haW47XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbMF0uZG9tYWluO1xuICAgICAgICB9LFxuICAgICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4ge1xuICAgICAgICAgIGNvbnN0IG9wMTIgPSBhcmdzWzBdO1xuICAgICAgICAgIGNvbnN0IG9wMjIgPSBhcmdzWzFdO1xuICAgICAgICAgIGlmIChvcDEyLnN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgYmFzZSA9IGFzU21hbGxJbnRlZ2VyKG9wMjIpO1xuICAgICAgICAgICAgaWYgKGJhc2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgaWYgKGJhc2UgPiAxICYmIGJhc2UgPD0gMzYpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbdmFsdWUsIHJlc3RdID0gZnJvbURpZ2l0cyhvcDEyLnN0cmluZywgYmFzZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3QpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgW1widW5leHBlY3RlZC1kaWdpdFwiLCB7IHN0cjogcmVzdFswXSB9XSxcbiAgICAgICAgICAgICAgICAgICAgW1wiTGF0ZXhcIiwgY2Uuc3RyaW5nKG9wMTIuc3RyaW5nKV1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjZS5udW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcDEyLnN5bWJvbCkge1xuICAgICAgICAgICAgaWYgKG9wMTIuc3ltYm9sRGVmaW5pdGlvbj8uYXQpXG4gICAgICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJBdFwiLCBbb3AxMiwgb3AyMi5jYW5vbmljYWxdKTtcbiAgICAgICAgICAgIGNvbnN0IHN1YjIgPSBvcDIyLnN0cmluZyA/PyBvcDIyLnN5bWJvbCA/PyBhc1NtYWxsSW50ZWdlcihvcDIyKT8udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmIChzdWIyKVxuICAgICAgICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKG9wMTIuc3ltYm9sICsgXCJfXCIgKyBzdWIyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wMjIuaGVhZCA9PT0gXCJTZXF1ZW5jZVwiKVxuICAgICAgICAgICAgY2UuX2ZuKFwiU3Vic2NyaXB0XCIsIFtvcDEyLCBjZS5fZm4oXCJMaXN0XCIsIG9wMjIub3BzKV0pO1xuICAgICAgICAgIHJldHVybiBjZS5fZm4oXCJTdWJzY3JpcHRcIiwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFN5bWJvbDoge1xuICAgICAgY29tcGxleGl0eTogNTAwLFxuICAgICAgZGVzY3JpcHRpb246IFwiQ29uc3RydWN0IGEgbmV3IHN5bWJvbCB3aXRoIGEgbmFtZSBmb3JtZWQgYnkgY29uY2F0ZW5hdGluZyB0aGUgYXJndW1lbnRzXCIsXG4gICAgICB0aHJlYWRhYmxlOiB0cnVlLFxuICAgICAgaG9sZDogXCJhbGxcIixcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFtcIlNlcXVlbmNlXCIsIFwiQW55dGhpbmdcIl0sIFwiQW55dGhpbmdcIl0sXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgaWYgKG9wczIubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIk5vdGhpbmdcIik7XG4gICAgICAgICAgY29uc3QgYXJnID0gb3BzMi5tYXAoXG4gICAgICAgICAgICAoeCkgPT4geC5zeW1ib2wgPz8geC5zdHJpbmcgPz8gYXNTbWFsbEludGVnZXIoeCk/LnRvU3RyaW5nKCkgPz8gXCJcIlxuICAgICAgICAgICkuam9pbihcIlwiKTtcbiAgICAgICAgICBpZiAoYXJnLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKGFyZyk7XG4gICAgICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIk5vdGhpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm90ZTogYSBgW1wiU3ltYm9sXCJdYCBleHByZXNzaW9uIGlzIG5ldmVyIGV2YWx1YXRlZCwgaXQgZ2V0c1xuICAgICAgICAvLyB0cmFuc2Zvcm1lZCBpbnRvIHNvbWV0aGluZyBlbHNlIChhIHN5bWJvbCkgZHVyaW5nIGNhbm9uaWNhbGl6YXRpb25cbiAgICAgIH1cbiAgICB9LFxuICAgIFRhaWw6IHtcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiVmFsdWVcIiwgW1wiTGlzdFwiLCBcIlZhbHVlXCJdXSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gb3BzMlswXSA/IGNlLl9mbihcIkxpc3RcIiwgb3BzMlswXS5vcHMgPz8gW10pIDogY2UuX2ZuKFwiTGlzdFwiLCBbXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFRpbWluZzoge1xuICAgICAgZGVzY3JpcHRpb246IFwiYFRpbWluZyhleHByKWAgZXZhbHVhdGVzIGBleHByYCBhbmQgcmV0dXJuIGEgYFBhaXJgIG9mIHRoZSBudW1iZXIgb2Ygc2Vjb25kIGVsYXBzZWQgZm9yIHRoZSBldmFsdWF0aW9uLCBhbmQgdGhlIHZhbHVlIG9mIHRoZSBldmFsdWF0aW9uXCIsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXG4gICAgICAgICAgXCJGdW5jdGlvblwiLFxuICAgICAgICAgIFwiVmFsdWVcIixcbiAgICAgICAgICBbXCJNYXliZVwiLCBcIkludGVnZXJcIl0sXG4gICAgICAgICAgW1wiVHVwbGVcIiwgXCJWYWx1ZVwiLCBcIk51bWJlclwiXVxuICAgICAgICBdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgaWYgKG9wczJbMV0uc3ltYm9sID09PSBcIk5vdGhpbmdcIikge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnbG9iYWxUaGlzLnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0MiA9IG9wczJbMF0uZXZhbHVhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWluZyA9IDFlMyAqIChnbG9iYWxUaGlzLnBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGNlLnBhaXIoY2UubnVtYmVyKHRpbWluZyksIHJlc3VsdDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgbiA9IE1hdGgubWF4KDMsIE1hdGgucm91bmQoYXNTbWFsbEludGVnZXIob3BzMlsxXSkgPz8gMykpO1xuICAgICAgICAgIGxldCB0aW1pbmdzID0gW107XG4gICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICB3aGlsZSAobiA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IG9wczJbMF0uZXZhbHVhdGUoKTtcbiAgICAgICAgICAgIHRpbWluZ3MucHVzaCgxZTMgKiAoZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSk7XG4gICAgICAgICAgICBuIC09IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IG1heDIgPSBNYXRoLm1heCguLi50aW1pbmdzKTtcbiAgICAgICAgICBjb25zdCBtaW4yID0gTWF0aC5taW4oLi4udGltaW5ncyk7XG4gICAgICAgICAgdGltaW5ncyA9IHRpbWluZ3MuZmlsdGVyKCh4KSA9PiB4ID4gbWluMiAmJiB4IDwgbWF4Mik7XG4gICAgICAgICAgY29uc3Qgc3VtMiA9IHRpbWluZ3MucmVkdWNlKChhY2MsIHYpID0+IGFjYyArIHYsIDApO1xuICAgICAgICAgIGlmIChzdW0yID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLnBhaXIoY2UubnVtYmVyKG1heDIpLCByZXN1bHQpO1xuICAgICAgICAgIHJldHVybiBjZS5wYWlyKGNlLm51bWJlcihzdW0yIC8gdGltaW5ncy5sZW5ndGgpLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHtuYW1lOiAnUGF0dGVybicsfSxcbiAgfSxcbiAgLy9cbiAgLy8gU3RyaW5nLXJlbGF0ZWRcbiAgLy9cbiAge1xuICAgIEZyb21EaWdpdHM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBgXFxgRnJvbURpZ2l0cyhzLCBiYXNlPTEwKVxcYCAgICAgICByZXR1cm4gYW4gaW50ZWdlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3RyaW5nIFxcYHNcXGAgaW4gYmFzZSBcXGBiYXNlXFxgLmAsXG4gICAgICAvLyBAdG9kbyBjb3VsZCBhY2NlcHQgYDB4Y2FmZWAsIGAwYjAxMDEwYCBvciBgKGRlYWRiZWVmKV8xNmAgYXMgc3RyaW5nIGZvcm1hdHNcbiAgICAgIC8vIEB0b2RvIGNvdWxkIGFjY2VwdCBcInJvbWFuXCIuLi4gYXMgYmFzZVxuICAgICAgLy8gQHRvZG8gY291bGQgYWNjZXB0IG9wdGlvbmFsIHRoaXJkIHBhcmFtZXRlciBhcyB0aGUgKHBhZGRlZCkgbGVuZ3RoIG9mIHRoZSBvdXRwdXRcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiU3RyaW5nXCIsIFtcIk1heWJlXCIsIFtcIlJhbmdlXCIsIDEsIDM2XV0sIFwiSW50ZWdlclwiXSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGNvbnN0IG9wMTIgPSBvcHMyWzBdO1xuICAgICAgICAgIGlmICghb3AxMi5zdHJpbmcpXG4gICAgICAgICAgICByZXR1cm4gY2UuZXJyb3IoW1wiaW5jb21wYXRpYmxlLWRvbWFpblwiLCBcIlN0cmluZ1wiLCBvcDEyLmRvbWFpbl0sIG9wMTIpO1xuICAgICAgICAgIGNvbnN0IG9wMjIgPSBvcHMyWzFdO1xuICAgICAgICAgIGlmIChvcDIyLmlzTm90aGluZylcbiAgICAgICAgICAgIHJldHVybiBjZS5udW1iZXIoTnVtYmVyLnBhcnNlSW50KG9wMTIuc3RyaW5nLCAxMCkpO1xuICAgICAgICAgIGlmIChvcDIyLm51bWVyaWNWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNlLmVycm9yKFtcInVuZXhwZWN0ZWQtYmFzZVwiLCBvcDIyLmxhdGV4XSwgb3AyMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGJhc2UgPSBhc0Zsb2F0KG9wMjIpO1xuICAgICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihiYXNlKSB8fCBiYXNlIDwgMiB8fCBiYXNlID4gMzYpXG4gICAgICAgICAgICByZXR1cm4gY2UuZXJyb3IoW1widW5leHBlY3RlZC1iYXNlXCIsIGJhc2VdLCBvcDIyKTtcbiAgICAgICAgICBjb25zdCBbdmFsdWUsIHJlc3RdID0gZnJvbURpZ2l0cyhvcDEyLnN0cmluZywgYmFzZSk7XG4gICAgICAgICAgaWYgKHJlc3QpXG4gICAgICAgICAgICByZXR1cm4gY2UuZXJyb3IoW1widW5leHBlY3RlZC1kaWdpdFwiLCB7IHN0cjogcmVzdFswXSB9XSwge1xuICAgICAgICAgICAgICBzdHI6IHJlc3RcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBjZS5udW1iZXIodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBJbnRlZ2VyU3RyaW5nOiB7XG4gICAgICBkZXNjcmlwdGlvbjogYFxcYEludGVnZXJTdHJpbmcobiwgYmFzZT0xMClcXGAgICAgICAgcmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbnRlZ2VyIFxcYG5cXGAgaW4gYmFzZSBcXGBiYXNlXFxgLmAsXG4gICAgICAvLyBAdG9kbyBjb3VsZCBhY2NlcHQgYDB4Y2FmZWAsIGAwYjAxMDEwYCBvciBgKGRlYWRiZWVmKV8xNmAgYXMgc3RyaW5nIGZvcm1hdHNcbiAgICAgIC8vIEB0b2RvIGNvdWxkIGFjY2VwdCBcInJvbWFuXCIuLi4gYXMgYmFzZVxuICAgICAgLy8gQHRvZG8gY291bGQgYWNjZXB0IG9wdGlvbmFsIHRoaXJkIHBhcmFtZXRlciBhcyB0aGUgKHBhZGRlZCkgbGVuZ3RoIG9mIHRoZSBvdXRwdXRcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiSW50ZWdlclwiLCBbXCJNYXliZVwiLCBcIkludGVnZXJcIl0sIFwiU3RyaW5nXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgY29uc3Qgb3AxMiA9IG9wczJbMF07XG4gICAgICAgICAgY29uc3QgdmFsID0gYXNGbG9hdChvcDEyKSA/PyBOYU47XG4gICAgICAgICAgaWYgKE51bWJlci5pc05hTih2YWwpIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjZS5lcnJvcihcbiAgICAgICAgICAgICAgW1wiaW5jb21wYXRpYmxlLWRvbWFpblwiLCBcIkludGVnZXJcIiwgb3AxMi5kb21haW5dLFxuICAgICAgICAgICAgICBvcDEyXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBvcDIyID0gb3BzMlsxXTtcbiAgICAgICAgICBpZiAob3AyMi5pc05vdGhpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wMU51bSA9IG9wMTIubnVtZXJpY1ZhbHVlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcDFOdW0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgIHJldHVybiBjZS5zdHJpbmcoTWF0aC5hYnMob3AxTnVtKS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGlmIChvcDFOdW0gaW5zdGFuY2VvZiBkZWNpbWFsX2RlZmF1bHQpXG4gICAgICAgICAgICAgIHJldHVybiBjZS5zdHJpbmcob3AxTnVtLmFicygpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGNlLnN0cmluZyhcbiAgICAgICAgICAgICAgTWF0aC5hYnMoTWF0aC5yb3VuZChhc0Zsb2F0KG9wMTIpID8/IE5hTikpLnRvU3RyaW5nKClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhc1NtYWxsSW50ZWdlcihvcDIyKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNlLmVycm9yKFxuICAgICAgICAgICAgICBbXCJpbmNvbXBhdGlibGUtZG9tYWluXCIsIFwiSW50ZWdlclwiLCBvcDIyLmRvbWFpbl0sXG4gICAgICAgICAgICAgIG9wMjJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGJhc2UgPSBhc1NtYWxsSW50ZWdlcihvcDIyKTtcbiAgICAgICAgICBpZiAoYmFzZSA8IDIgfHwgYmFzZSA+IDM2KVxuICAgICAgICAgICAgcmV0dXJuIGNlLmVycm9yKFtcIm91dC1vZi1yYW5nZVwiLCAyLCAzNiwgYmFzZV0sIG9wMjIpO1xuICAgICAgICAgIHJldHVybiBjZS5zdHJpbmcoTWF0aC5hYnModmFsKS50b1N0cmluZyhiYXNlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFN0cmluZzoge1xuICAgICAgdGhyZWFkYWJsZTogdHJ1ZSxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFtcIk1heWJlXCIsIFwiQW55dGhpbmdcIl0sIFwiU3RyaW5nXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgaWYgKG9wczIubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLnN0cmluZyhcIlwiKTtcbiAgICAgICAgICByZXR1cm4gY2Uuc3RyaW5nKG9wczIubWFwKCh4KSA9PiB4LnN0cmluZyA/PyB4LnRvU3RyaW5nKCkpLmpvaW4oXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvL1xuICAvLyBMYVRlWC1yZWxhdGVkXG4gIC8vXG4gIHtcbiAgICAvLyBKb2luIG9yIG1vcmUgTGF0ZXhUb2tlbnMgaW50byBhIExhVGVYIHN0cmluZ1xuICAgIEpvaW5MYXRleFRva2Vuczoge1xuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgW1wiTWF5YmVcIiwgW1wiU2VxdWVuY2VcIiwgXCJBbnl0aGluZ1wiXV0sIFwiU3RyaW5nXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNlLmZuKFwiTGF0ZXhcIiwgW1xuICAgICAgICAgICAgY2Uuc3RyaW5nKHRva2Vuc1RvU3RyaW5nKG9wczIubWFwKCh4KSA9PiB4LnN0cmluZyA/PyB4LmxhdGV4KSkpXG4gICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIFZhbHVlIHByZXNlcnZpbmcgdHlwZSBjb252ZXJzaW9uL3RhZyBpbmRpY2F0aW5nIHRoZSBzdHJpbmdcbiAgICAvLyBpcyBhIExhVGVYIHN0cmluZ1xuICAgIExhdGV4OiB7XG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBbXCJNYXliZVwiLCBbXCJTZXF1ZW5jZVwiLCBcIkFueXRoaW5nXCJdXSwgXCJTdHJpbmdcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBpZiAob3BzMi5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gY2Uuc3RyaW5nKFwiXCIpO1xuICAgICAgICAgIHJldHVybiBjZS5zdHJpbmcoam9pbkxhdGV4KG9wczIubWFwKCh4KSA9PiB4LnN0cmluZyA/PyB4LnRvU3RyaW5nKCkpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIFNlcmlhbGl6ZSBvbmUgb3IgbW9yZSBleHByZXNzaW9ucyB0byBMYVRlWFxuICAgIFNlcmlhbGl6ZUxhdGV4OiB7XG4gICAgICBob2xkOiBcImFsbFwiLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgW1wiTWF5YmVcIiwgW1wiU2VxdWVuY2VcIiwgXCJBbnl0aGluZ1wiXV0sIFwiU3RyaW5nXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBjZS5mbihcIkxhdGV4XCIsIFtjZS5zdHJpbmcoam9pbkxhdGV4KG9wczIubWFwKCh4KSA9PiB4LmxhdGV4KSkpXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFNwbGl0QXNMYXRleFRva2Vuczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiU3BsaXQgYSBMYVRlWCBzdHJpbmcgaW50byBhIGxpc3Qgb2YgTGFUZVggdG9rZW5zXCIsXG4gICAgICBob2xkOiBcImFsbFwiLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgW1wiTWF5YmVcIiwgXCJBbnl0aGluZ1wiXSwgW1wiTGlzdFwiLCBcIlN0cmluZ1wiXV0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBpZiAob3BzMi5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiTGlzdFwiLCBbXSk7XG4gICAgICAgICAgbGV0IGxhdGV4ID0gXCJcIjtcbiAgICAgICAgICBpZiAob3BzMlswXS5oZWFkID09PSBcIkxhdGV4XCIpXG4gICAgICAgICAgICBsYXRleCA9IG9wczJbMF0ub3AxLnN0cmluZyA/PyBcIlwiO1xuICAgICAgICAgIGVsc2UgaWYgKG9wczJbMF0uaGVhZCA9PT0gXCJMYXRleFN0cmluZ1wiKVxuICAgICAgICAgICAgbGF0ZXggPSBqb2luTGF0ZXgob3BzMlswXS5vcHMubWFwKChvcDMpID0+IG9wMy5sYXRleCkpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGxhdGV4ID0gb3BzMlswXS5sYXRleDtcbiAgICAgICAgICByZXR1cm4gY2UuX2ZuKFxuICAgICAgICAgICAgXCJMaXN0XCIsXG4gICAgICAgICAgICB0b2tlbml6ZShsYXRleCwgW10pLm1hcCgoeCkgPT4gY2Uuc3RyaW5nKHgpKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFBhcnNlTGF0ZXg6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBhcnNlIGEgTGFUZVggc3RyaW5nIGFuZCBldmFsdWF0ZSB0byBhIGNvcnJlc3BvbmRpbmcgZXhwcmVzc2lvblwiLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgW1wiTWF5YmVcIiwgXCJTdHJpbmdcIl0sIFwiQW55dGhpbmdcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBpZiAob3BzMi5sZW5ndGggPT09IDAgfHwgIW9wczJbMF0uc3RyaW5nKVxuICAgICAgICAgICAgcmV0dXJuIGNlLmJveChbXCJTZXF1ZW5jZVwiXSk7XG4gICAgICAgICAgcmV0dXJuIGNlLnBhcnNlKG9wczJbMF0uc3RyaW5nKSA/PyBjZS5ib3goW1wiU2VxdWVuY2VcIl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgUmFuZG9tRXhwcmVzc2lvbjoge1xuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogXCJGdW5jdGlvblwiLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBfb3BzKSA9PiBjZS5ib3gocmFuZG9tRXhwcmVzc2lvbigpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xpYnJhcnkvbG9naWMudHNcbnZhciBMT0dJQ19MSUJSQVJZID0ge1xuICBUcnVlOiB7IHdpa2lkYXRhOiBcIlExNjc1MTc5M1wiLCBkb21haW46IFwiQm9vbGVhblwiLCBjb25zdGFudDogdHJ1ZSB9LFxuICBGYWxzZToge1xuICAgIHdpa2lkYXRhOiBcIlE1NDMyNjE5XCIsXG4gICAgZG9tYWluOiBcIkJvb2xlYW5cIixcbiAgICBjb25zdGFudDogdHJ1ZVxuICB9LFxuICBNYXliZToge1xuICAgIHdpa2lkYXRhOiBcIlE3ODE1NDZcIixcbiAgICBkb21haW46IFwiTWF5YmVCb29sZWFuXCIsXG4gICAgY29uc3RhbnQ6IHRydWVcbiAgfSxcbiAgLy8gQHRvZG86IHNwZWNpZnkgYSBgY2Fub25pY2FsYCBmdW5jdGlvbiB0aGF0IGNvbnZlcnRzIGJvb2xlYW5cbiAgLy8gZXhwcmVzc2lvbnMgaW50byBDTkYgKENvbmp1bmN0aXZlIE5vcm1hbCBGb3JtKVxuICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25qdW5jdGl2ZV9ub3JtYWxfZm9ybVxuICAvLyB1c2luZyBydWxlcyAod2l0aCBhIHJ1bGUgc2V0IHRoYXQncyBraW5kYSB0aGUgaW52ZXJzZSBvZiB0aGVcbiAgLy8gbG9naWMgcnVsZXMgZm9yIHNpbXBsaWZ5KVxuICBBbmQ6IHtcbiAgICB3aWtpZGF0YTogXCJRMTkxMDgxXCIsXG4gICAgdGhyZWFkYWJsZTogdHJ1ZSxcbiAgICBhc3NvY2lhdGl2ZTogdHJ1ZSxcbiAgICBjb21tdXRhdGl2ZTogdHJ1ZSxcbiAgICBpZGVtcG90ZW50OiB0cnVlLFxuICAgIGNvbXBsZXhpdHk6IDFlNCxcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogXCJMb2dpY09wZXJhdG9yXCIsXG4gICAgICBzaW1wbGlmeTogcHJvY2Vzc0FuZCxcbiAgICAgIGV2YWx1YXRlOiBwcm9jZXNzQW5kXG4gICAgfVxuICB9LFxuICBPcjoge1xuICAgIHdpa2lkYXRhOiBcIlExNjUxNzA0XCIsXG4gICAgdGhyZWFkYWJsZTogdHJ1ZSxcbiAgICBhc3NvY2lhdGl2ZTogdHJ1ZSxcbiAgICBjb21tdXRhdGl2ZTogdHJ1ZSxcbiAgICBpZGVtcG90ZW50OiB0cnVlLFxuICAgIGNvbXBsZXhpdHk6IDFlNCxcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogXCJMb2dpY09wZXJhdG9yXCIsXG4gICAgICBzaW1wbGlmeTogcHJvY2Vzc09yLFxuICAgICAgZXZhbHVhdGU6IHByb2Nlc3NPclxuICAgIH1cbiAgfSxcbiAgTm90OiB7XG4gICAgd2lraWRhdGE6IFwiUTE5MDU1OFwiLFxuICAgIGludm9sdXRpb246IHRydWUsXG4gICAgY29tcGxleGl0eTogMTAxMDAsXG4gICAgLy8gQHRvZG86IHRoaXMgbWF5IG5vdCBiZSBuZWVkZWQsIHNpbmNlIHdlIGFsc28gaGF2ZSBydWxlcy5cbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogXCJMb2dpY09wZXJhdG9yXCIsXG4gICAgICBzaW1wbGlmeTogcHJvY2Vzc05vdCxcbiAgICAgIGV2YWx1YXRlOiBwcm9jZXNzTm90XG4gICAgfVxuICB9LFxuICBFcXVpdmFsZW50OiB7XG4gICAgd2lraWRhdGE6IFwiUTIyMDQzM1wiLFxuICAgIGNvbXBsZXhpdHk6IDEwMjAwLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIkxvZ2ljT3BlcmF0b3JcIixcbiAgICAgIHNpbXBsaWZ5OiBwcm9jZXNzRXF1aXZhbGVudCxcbiAgICAgIGV2YWx1YXRlOiBwcm9jZXNzRXF1aXZhbGVudFxuICAgIH1cbiAgfSxcbiAgSW1wbGllczoge1xuICAgIHdpa2lkYXRhOiBcIlE3ODgxMjI5XCIsXG4gICAgY29tcGxleGl0eTogMTAyMDAsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiTG9naWNPcGVyYXRvclwiLFxuICAgICAgc2ltcGxpZnk6IHByb2Nlc3NJbXBsaWVzLFxuICAgICAgZXZhbHVhdGU6IHByb2Nlc3NJbXBsaWVzXG4gICAgfVxuICB9LFxuICBFeGlzdHM6IHsgc2lnbmF0dXJlOiB7IGRvbWFpbjogXCJNYXliZUJvb2xlYW5cIiB9IH0sXG4gIElmOiB7XG4gICAgaG9sZDogXCJyZXN0XCIsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiRnVuY3Rpb25cIixcbiAgICAgIGNvZG9tYWluOiAoY2UsIG9wczIpID0+IGNlLmRvbWFpbihbXCJVbmlvblwiLCBvcHMyWzBdLCBvcHMyWzFdXSksXG4gICAgICBzaW1wbGlmeTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbmQgPSBvcHMyWzBdO1xuICAgICAgICBpZiAoY29uZCAmJiBjb25kLnN5bWJvbCA9PT0gXCJUcnVlXCIpXG4gICAgICAgICAgcmV0dXJuIG9wczJbMV0gPyBvcHMyWzFdLnNpbXBsaWZ5KCkgOiBjZS5ib3goXCJOb3RoaW5nXCIpO1xuICAgICAgICByZXR1cm4gb3BzMlsyXSA/IG9wczJbMl0uc2ltcGxpZnkoKSA6IGNlLmJveChcIk5vdGhpbmdcIik7XG4gICAgICB9LFxuICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICBjb25zdCBjb25kID0gb3BzMlswXTtcbiAgICAgICAgaWYgKGNvbmQgJiYgY29uZC5zeW1ib2wgPT09IFwiVHJ1ZVwiKVxuICAgICAgICAgIHJldHVybiBvcHMyWzFdID8gb3BzMlsxXS5ldmFsdWF0ZSgpIDogY2UuYm94KFwiTm90aGluZ1wiKTtcbiAgICAgICAgcmV0dXJuIG9wczJbMl0gPyBvcHMyWzJdLmV2YWx1YXRlKCkgOiBjZS5ib3goXCJOb3RoaW5nXCIpO1xuICAgICAgfSxcbiAgICAgIC8vIEB0b2RvOiBwcm9iYWJseSBkb24ndCBuZWVkIGEgTigpIGhhbmRsZXIuIERvZXNuJ3QgbWFrZSBhIGRpZmZlcmVuY2VcbiAgICAgIC8vIGZvciB0aGUgZXZhbHVhdGlvbiBvZiBib29sZWFucy4gQWxzbywgZG9uJ3QgbmVlZCB0byBjYWxsIE4oKSBvbiB0aGVcbiAgICAgIC8vIGFyZ3VtZW50cywgdGhlIGNhbGxlciBzaG91bGQgaGF2ZSBkb25lIHRoYXQuIFNhbWUgZm9yIGV2YWx1YXRlKClcbiAgICAgIC8vIGFuZCBzaW1wbGlmeSgpIGFib3ZlXG4gICAgICBOOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgY29uc3QgY29uZCA9IG9wczJbMF07XG4gICAgICAgIGlmIChjb25kICYmIGNvbmQuc3ltYm9sID09PSBcIlRydWVcIilcbiAgICAgICAgICByZXR1cm4gb3BzMlsxXSA/IG9wczJbMV0uTigpIDogY2UuYm94KFwiTm90aGluZ1wiKTtcbiAgICAgICAgcmV0dXJuIG9wczJbMl0gPyBvcHMyWzJdLk4oKSA6IGNlLmJveChcIk5vdGhpbmdcIik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBMb29wOiB7XG4gICAgaG9sZDogXCJhbGxcIixcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogXCJGdW5jdGlvblwiLFxuICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gb3BzMlswXT8uc2ltcGxpZnkoKSA/PyBjZS5ib3goXCJOb3RoaW5nXCIpLFxuICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gb3BzMlswXSA/PyBjZS5ib3goXCJOb3RoaW5nXCIpO1xuICAgICAgICBpZiAoYm9keS5pc05vdGhpbmcpXG4gICAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHJlc3VsdCA9IGJvZHkuZXZhbHVhdGUoKTtcbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH0gd2hpbGUgKHJlc3VsdC5oZWFkICE9PSBcIlJldHVyblwiICYmIGkgPCBjZS5pdGVyYXRpb25MaW1pdCk7XG4gICAgICAgIGlmIChyZXN1bHQuaGVhZCA9PT0gXCJSZXR1cm5cIilcbiAgICAgICAgICByZXR1cm4gcmVzdWx0Lm9wMTtcbiAgICAgICAgcmV0dXJuIGNlLmVycm9yKFwiaXRlcmF0aW9uLWxpbWl0LWV4Y2VlZGVkXCIpO1xuICAgICAgfSxcbiAgICAgIE46IChjZSwgb3BzMikgPT4ge1xuICAgICAgICBjb25zdCBjb25kID0gb3BzMlswXTtcbiAgICAgICAgaWYgKGNvbmQgJiYgY29uZC5zeW1ib2wgPT09IFwiVHJ1ZVwiKVxuICAgICAgICAgIHJldHVybiBvcHMyWzFdID8gb3BzMlsxXS5OKCkgOiBjZS5ib3goXCJOb3RoaW5nXCIpO1xuICAgICAgICByZXR1cm4gb3BzMlsyXSA/IG9wczJbMl0uTigpIDogY2UuYm94KFwiTm90aGluZ1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIFdoaWNoOiB7XG4gICAgaG9sZDogXCJhbGxcIixcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogXCJGdW5jdGlvblwiLFxuICAgICAgY29kb21haW46IChjZSwgb3BzMikgPT4gZG9tYWluV2hpY2goY2UsIG9wczIpLFxuICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gd2hpY2hFdmFsdWF0ZShjZSwgb3BzMiwgXCJldmFsdWF0ZVwiKSxcbiAgICAgIE46IChjZSwgb3BzMikgPT4gd2hpY2hFdmFsdWF0ZShjZSwgb3BzMiwgXCJOXCIpXG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gcHJvY2Vzc0FuZChjZSwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIGNlLnN5bWJvbChcIlRydWVcIik7XG4gIGNvbnN0IG9wczIgPSBbXTtcbiAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgIGlmIChhcmcuc3ltYm9sID09PSBcIkZhbHNlXCIpXG4gICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiRmFsc2VcIik7XG4gICAgaWYgKGFyZy5zeW1ib2wgIT09IFwiVHJ1ZVwiKSB7XG4gICAgICBsZXQgZHVwbGljYXRlID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IHggb2Ygb3BzMikge1xuICAgICAgICBpZiAoeC5pc1NhbWUoYXJnKSkge1xuICAgICAgICAgIGR1cGxpY2F0ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJnLmhlYWQgPT09IFwiTm90XCIgJiYgYXJnLm9wMS5pc1NhbWUoeCkgfHwgeC5oZWFkID09PSBcIk5vdFwiICYmIHgub3AxLmlzU2FtZShhcmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIkZhbHNlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWR1cGxpY2F0ZSlcbiAgICAgICAgb3BzMi5wdXNoKGFyZyk7XG4gICAgfVxuICB9XG4gIGlmIChvcHMyLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgaWYgKG9wczIubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiBvcHMyWzBdO1xuICByZXR1cm4gY2UuX2ZuKFwiQW5kXCIsIG9wczIpO1xufVxuZnVuY3Rpb24gcHJvY2Vzc09yKGNlLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgY29uc3Qgb3BzMiA9IFtdO1xuICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgaWYgKGFyZy5zeW1ib2wgPT09IFwiVHJ1ZVwiKVxuICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIlRydWVcIik7XG4gICAgaWYgKGFyZy5zeW1ib2wgIT09IFwiRmFsc2VcIikge1xuICAgICAgbGV0IGR1cGxpY2F0ZSA9IGZhbHNlO1xuICAgICAgZm9yIChjb25zdCB4IG9mIG9wczIpIHtcbiAgICAgICAgaWYgKHguaXNTYW1lKGFyZykpIHtcbiAgICAgICAgICBkdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZy5oZWFkID09PSBcIk5vdFwiICYmIGFyZy5vcDEuaXNTYW1lKHgpIHx8IHguaGVhZCA9PT0gXCJOb3RcIiAmJiB4Lm9wMS5pc1NhbWUoYXJnKSkge1xuICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJUcnVlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWR1cGxpY2F0ZSlcbiAgICAgICAgb3BzMi5wdXNoKGFyZyk7XG4gICAgfVxuICB9XG4gIGlmIChvcHMyLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgaWYgKG9wczIubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiBvcHMyWzBdO1xuICByZXR1cm4gY2UuX2ZuKFwiT3JcIiwgb3BzMik7XG59XG5mdW5jdGlvbiBwcm9jZXNzTm90KGNlLCBhcmdzKSB7XG4gIGNvbnN0IG9wMTIgPSBhcmdzWzBdLnN5bWJvbDtcbiAgaWYgKG9wMTIgPT09IFwiVHJ1ZVwiKVxuICAgIHJldHVybiBjZS5zeW1ib2woXCJGYWxzZVwiKTtcbiAgaWYgKG9wMTIgPT09IFwiRmFsc2VcIilcbiAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgaWYgKG9wMTIgPT09IFwiTWF5YmVcIilcbiAgICByZXR1cm4gY2Uuc3ltYm9sKFwiTWF5YmVcIik7XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBwcm9jZXNzRXF1aXZhbGVudChjZSwgYXJncykge1xuICBjb25zdCBsaHMgPSBhcmdzWzBdLnN5bWJvbDtcbiAgY29uc3QgcmhzID0gYXJnc1sxXS5zeW1ib2w7XG4gIGlmIChsaHMgPT09IFwiVHJ1ZVwiICYmIHJocyA9PT0gXCJUcnVlXCIgfHwgbGhzID09PSBcIkZhbHNlXCIgJiYgcmhzID09PSBcIkZhbHNlXCIpXG4gICAgcmV0dXJuIGNlLnN5bWJvbChcIlRydWVcIik7XG4gIGlmIChsaHMgPT09IFwiVHJ1ZVwiICYmIHJocyA9PT0gXCJGYWxzZVwiIHx8IGxocyA9PT0gXCJGYWxzZVwiICYmIHJocyA9PT0gXCJUcnVlXCIpXG4gICAgcmV0dXJuIGNlLnN5bWJvbChcIkZhbHNlXCIpO1xuICBpZiAobGhzID09PSBcIk1heWJlXCIgfHwgcmhzID09PSBcIk1heWJlXCIpXG4gICAgcmV0dXJuIGNlLnN5bWJvbChcIk1heWJlXCIpO1xuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gcHJvY2Vzc0ltcGxpZXMoY2UsIGFyZ3MpIHtcbiAgY29uc3QgbGhzID0gYXJnc1swXS5zeW1ib2w7XG4gIGNvbnN0IHJocyA9IGFyZ3NbMV0uc3ltYm9sO1xuICBpZiAobGhzID09PSBcIlRydWVcIiAmJiByaHMgPT09IFwiVHJ1ZVwiIHx8IGxocyA9PT0gXCJGYWxzZVwiICYmIHJocyA9PT0gXCJGYWxzZVwiIHx8IGxocyA9PT0gXCJGYWxzZVwiICYmIHJocyA9PT0gXCJUcnVlXCIpXG4gICAgcmV0dXJuIGNlLnN5bWJvbChcIlRydWVcIik7XG4gIGlmIChsaHMgPT09IFwiVHJ1ZVwiICYmIHJocyA9PT0gXCJGYWxzZVwiKVxuICAgIHJldHVybiBjZS5zeW1ib2woXCJGYWxzZVwiKTtcbiAgaWYgKGxocyA9PT0gXCJNYXliZVwiIHx8IHJocyA9PT0gXCJNYXliZVwiKVxuICAgIHJldHVybiBjZS5zeW1ib2woXCJNYXliZVwiKTtcbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGRvbWFpbldoaWNoKGNlLCBhcmdzKSB7XG4gIGxldCBkb20gPSBudWxsO1xuICBmb3IgKGxldCBpID0gMTsgaSA8PSBhcmdzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIGlmICghZG9tKVxuICAgICAgZG9tID0gYXJnc1tpXS5kb21haW47XG4gICAgZWxzZVxuICAgICAgZG9tID0gc2hhcmVkQW5jZXN0b3JEb21haW4oZG9tLCBhcmdzW2ldLmRvbWFpbik7XG4gIH1cbiAgcmV0dXJuIGRvbSA/PyBjZS5kb21haW4oXCJOb3RoaW5nXCIpO1xufVxuZnVuY3Rpb24gd2hpY2hFdmFsdWF0ZShjZSwgYXJncywgbW9kZSkge1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChpIDwgYXJncy5sZW5ndGggLSAxKSB7XG4gICAgaWYgKGFyZ3NbaV0uZXZhbHVhdGUoKS5zeW1ib2wgPT09IFwiVHJ1ZVwiKSB7XG4gICAgICBpZiAoIWFyZ3NbaSArIDFdKVxuICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVW5kZWZpbmVkXCIpO1xuICAgICAgcmV0dXJuIG1vZGUgPT09IFwiTlwiID8gYXJnc1tpICsgMV0uTigpIDogYXJnc1tpICsgMV0uZXZhbHVhdGUoKTtcbiAgICB9XG4gICAgaSArPSAyO1xuICB9XG4gIHJldHVybiBjZS5zeW1ib2woXCJVbmRlZmluZWRcIik7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9saWJyYXJ5L3BvbHlub21pYWxzLnRzXG52YXIgUE9MWU5PTUlBTFNfTElCUkFSWSA9IFtcbiAge1xuICAgIEV4cGFuZDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiRXhwYW5kIG91dCBwcm9kdWN0cyBhbmQgcG9zaXRpdmUgaW50ZWdlciBwb3dlcnNcIixcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiVmFsdWVcIiwgXCJWYWx1ZVwiXSxcbiAgICAgICAgZXZhbHVhdGU6IChfY2UsIG9wczIpID0+IGV4cGFuZDIob3BzMlswXSkgPz8gb3BzMlswXVxuICAgICAgfVxuICAgIH0sXG4gICAgRGlzdHJpYnV0ZToge1xuICAgICAgZGVzY3JpcHRpb246IFwiRGlzdHJpYnV0ZSBtdWx0aXBsaWNhdGlvbiBvdmVyIGFkZGl0aW9uXCIsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIlZhbHVlXCIsIFwiVmFsdWVcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBjb25zdCBoID0gb3BzMlswXS5oZWFkO1xuICAgICAgICAgIGlmIChoID09PSBcIk11bHRpcGx5XCIpXG4gICAgICAgICAgICByZXR1cm4gZGlzdHJpYnV0ZShvcHMyWzBdLm9wcykgPz8gb3BzMlswXTtcbiAgICAgICAgICBpZiAoaCA9PT0gXCJOZWdhdGVcIilcbiAgICAgICAgICAgIHJldHVybiBkaXN0cmlidXRlKFtjZS5fTkVHQVRJVkVfT05FLCAuLi5vcHMyWzBdLm9wc10pID8/IG9wczJbMF07XG4gICAgICAgICAgaWYgKGggPT09IFwiRGl2aWRlXCIgJiYgb3BzMlswXS5vcHNbMF0uaGVhZCA9PT0gXCJNdWx0aXBseVwiKSB7XG4gICAgICAgICAgICBjb25zdCBudW1lcmF0b3IgPSBkaXN0cmlidXRlKG9wczJbMF0ub3BzKTtcbiAgICAgICAgICAgIGNvbnN0IGRlbm9taW5hdG9yID0gb3BzMlswXS5vcHNbMV07XG4gICAgICAgICAgICBpZiAobnVtZXJhdG9yKSB7XG4gICAgICAgICAgICAgIGlmIChudW1lcmF0b3IuaGVhZCA9PT0gXCJBZGRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gY2UuYWRkKFxuICAgICAgICAgICAgICAgICAgbnVtZXJhdG9yLm9wcy5tYXAoKHgpID0+IGNlLmRpdih4LCBkZW5vbWluYXRvcikpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGNlLmRpdihudW1lcmF0b3IsIGRlbm9taW5hdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG9wczJbMF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbl07XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9saWJyYXJ5L3JlbGF0aW9uYWwtb3BlcmF0b3IudHNcbnZhciBSRUxPUF9MSUJSQVJZID0ge1xuICBFcXVhbDoge1xuICAgIGNvbW11dGF0aXZlOiB0cnVlLFxuICAgIGNvbXBsZXhpdHk6IDExZTMsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICByZXR1cm4gY2UuX2ZuKFxuICAgICAgICAgIFwiRXF1YWxcIixcbiAgICAgICAgICBmbGF0dGVuT3BzKGNhbm9uaWNhbChmbGF0dGVuU2VxdWVuY2Uob3BzMikpLCBcIkVxdWFsXCIpXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICBpZiAob3BzMi5sZW5ndGggPCAyKVxuICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJUcnVlXCIpO1xuICAgICAgICBsZXQgbGhzID0gdm9pZCAwO1xuICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBvcHMyKSB7XG4gICAgICAgICAgaWYgKCFsaHMpXG4gICAgICAgICAgICBsaHMgPSBhcmc7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0ZXN0ID0gbGhzLmlzRXF1YWwoYXJnKTtcbiAgICAgICAgICAgIGlmICh0ZXN0ICE9PSB0cnVlKVxuICAgICAgICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiRmFsc2VcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJUcnVlXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgTm90RXF1YWw6IHtcbiAgICB3aWtpZGF0YTogXCJRMjgxMTMzNTFcIixcbiAgICBjb21tdXRhdGl2ZTogdHJ1ZSxcbiAgICBjb21wbGV4aXR5OiAxMWUzLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlJlbGF0aW9uYWxPcGVyYXRvclwiLFxuICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICBpZiAob3BzMi5sZW5ndGggPCAyKVxuICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJGYWxzZVwiKTtcbiAgICAgICAgbGV0IGxocyA9IHZvaWQgMDtcbiAgICAgICAgZm9yIChjb25zdCBhcmcgb2Ygb3BzMikge1xuICAgICAgICAgIGlmICghbGhzKVxuICAgICAgICAgICAgbGhzID0gYXJnO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGVzdCA9IGxocy5pc0VxdWFsKGFyZyk7XG4gICAgICAgICAgICBpZiAodGVzdCA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIkZhbHNlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIExlc3M6IHtcbiAgICBjb21wbGV4aXR5OiAxMWUzLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlJlbGF0aW9uYWxPcGVyYXRvclwiLFxuICAgICAgY2Fub25pY2FsOiAoY2UsIG9wczIpID0+IGNlLl9mbihcIkxlc3NcIiwgZmxhdHRlbk9wcyhjYW5vbmljYWwoZmxhdHRlblNlcXVlbmNlKG9wczIpKSwgXCJMZXNzXCIpKSxcbiAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgaWYgKG9wczIubGVuZ3RoIDwgMilcbiAgICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgICAgICAgbGV0IGxocyA9IHZvaWQgMDtcbiAgICAgICAgZm9yIChjb25zdCBhcmcgb2Ygb3BzMikge1xuICAgICAgICAgIGlmICghYXJnLmlzTnVtYmVyKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICBpZiAoIWxocylcbiAgICAgICAgICAgIGxocyA9IGFyZztcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRlc3QgPSBjZS5mbihcIlN1YnRyYWN0XCIsIFthcmcsIGxoc10pLk4oKS5zZ247XG4gICAgICAgICAgICBpZiAodGVzdCA9PT0gbnVsbCB8fCB0ZXN0ID09PSB2b2lkIDApXG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICBpZiAodGVzdCA8PSAwKVxuICAgICAgICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiRmFsc2VcIik7XG4gICAgICAgICAgICBsaHMgPSBhcmc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJUcnVlXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgTm90TGVzczoge1xuICAgIGNvbXBsZXhpdHk6IDExZTMsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2UuX2ZuKFwiTm90XCIsIFtjZS5fZm4oXCJMZXNzXCIsIGFyZ3MpXSlcbiAgICB9XG4gIH0sXG4gIEdyZWF0ZXI6IHtcbiAgICBjb21wbGV4aXR5OiAxMWUzLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlJlbGF0aW9uYWxPcGVyYXRvclwiLFxuICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IGNlLl9mbihcIkxlc3NcIiwgYXJncy5yZXZlcnNlKCkpLFxuICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICBpZiAob3BzMi5sZW5ndGggPCAyKVxuICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJUcnVlXCIpO1xuICAgICAgICBsZXQgbGhzID0gdm9pZCAwO1xuICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBvcHMyKSB7XG4gICAgICAgICAgaWYgKCFhcmcuaXNOdW1iZXIpXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIGlmICghbGhzKVxuICAgICAgICAgICAgbGhzID0gYXJnO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGVzdCA9IGNlLmZuKFwiU3VidHJhY3RcIiwgW2FyZywgbGhzXSkuTigpLnNnbjtcbiAgICAgICAgICAgIGlmICh0ZXN0ID09PSBudWxsIHx8IHRlc3QgPT09IHZvaWQgMClcbiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICAgIGlmICh0ZXN0ID49IDApXG4gICAgICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJGYWxzZVwiKTtcbiAgICAgICAgICAgIGxocyA9IGFyZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIlRydWVcIik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBOb3RHcmVhdGVyOiB7XG4gICAgY29tcGxleGl0eTogMTFlMyxcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogXCJSZWxhdGlvbmFsT3BlcmF0b3JcIixcbiAgICAgIGNhbm9uaWNhbDogKGNlLCBhcmdzKSA9PiBjZS5fZm4oXCJOb3RcIiwgW2NlLl9mbihcIkdyZWF0ZXJcIiwgYXJncyldKVxuICAgIH1cbiAgfSxcbiAgTGVzc0VxdWFsOiB7XG4gICAgY29tcGxleGl0eTogMTFlMyxcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogXCJSZWxhdGlvbmFsT3BlcmF0b3JcIixcbiAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgaWYgKG9wczIubGVuZ3RoIDwgMilcbiAgICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgICAgICAgbGV0IGxocyA9IHZvaWQgMDtcbiAgICAgICAgZm9yIChjb25zdCBhcmcgb2Ygb3BzMikge1xuICAgICAgICAgIGlmICghYXJnLmlzTnVtYmVyKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICBpZiAoIWxocylcbiAgICAgICAgICAgIGxocyA9IGFyZztcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRlc3QgPSBjZS5mbihcIlN1YnRyYWN0XCIsIFthcmcsIGxoc10pLk4oKS5zZ247XG4gICAgICAgICAgICBpZiAodGVzdCA9PT0gbnVsbCB8fCB0ZXN0ID09PSB2b2lkIDApXG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICBpZiAodGVzdCA8IDApXG4gICAgICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJGYWxzZVwiKTtcbiAgICAgICAgICAgIGxocyA9IGFyZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIlRydWVcIik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBOb3RMZXNzTm90RXF1YWw6IHtcbiAgICBjb21wbGV4aXR5OiAxMWUzLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlJlbGF0aW9uYWxPcGVyYXRvclwiLFxuICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IGNlLl9mbihcIk5vdFwiLCBbY2UuX2ZuKFwiTGVzc0VxdWFsXCIsIGFyZ3MpXSlcbiAgICB9XG4gIH0sXG4gIEdyZWF0ZXJFcXVhbDoge1xuICAgIGNvbXBsZXhpdHk6IDExZTMsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2UuX2ZuKFwiTGVzc0VxdWFsXCIsIGFyZ3MucmV2ZXJzZSgpKSxcbiAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgaWYgKG9wczIubGVuZ3RoIDwgMilcbiAgICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgICAgICAgbGV0IGxocyA9IHZvaWQgMDtcbiAgICAgICAgZm9yIChjb25zdCBhcmcgb2Ygb3BzMikge1xuICAgICAgICAgIGlmICghYXJnLmlzTnVtYmVyKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICBpZiAoIWxocylcbiAgICAgICAgICAgIGxocyA9IGFyZztcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRlc3QgPSBjZS5mbihcIlN1YnRyYWN0XCIsIFthcmcsIGxoc10pLk4oKS5zZ247XG4gICAgICAgICAgICBpZiAodGVzdCA9PT0gbnVsbCB8fCB0ZXN0ID09PSB2b2lkIDApXG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICBpZiAodGVzdCA+IDApXG4gICAgICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJGYWxzZVwiKTtcbiAgICAgICAgICAgIGxocyA9IGFyZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIlRydWVcIik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBOb3RHcmVhdGVyTm90RXF1YWw6IHtcbiAgICBjb21wbGV4aXR5OiAxMWUzLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlJlbGF0aW9uYWxPcGVyYXRvclwiLFxuICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IGNlLl9mbihcIk5vdFwiLCBbY2UuX2ZuKFwiR3JlYXRlckVxdWFsXCIsIGFyZ3MpXSlcbiAgICB9XG4gIH0sXG4gIFRpbGRlRnVsbEVxdWFsOiB7XG4gICAgZGVzY3JpcHRpb246IFwiSW5kaWNhdGUgaXNvbW9ycGhpc20sIGNvbmdydWVuY2UgYW5kIGhvbW90b3BpYyBlcXVpdmFsZW5jZVwiLFxuICAgIHNpZ25hdHVyZTogeyBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIgfVxuICAgIC8vIEB0b2RvIGV2YWx1YXRlOiAoY2UsIC4uLmFyZ3M6IEJveGVkRXhwcmVzc2lvbltdKSA9PiBTZW1pQm94ZWRFeHByZXNzaW9uIHt9XG4gIH0sXG4gIE5vdFRpbGRlRnVsbEVxdWFsOiB7XG4gICAgY29tcGxleGl0eTogMTExMDAsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2UuX2ZuKFwiTm90XCIsIFtjZS5fZm4oXCJUaWxkZUZ1bGxFcXVhbFwiLCBhcmdzKV0pXG4gICAgfVxuICB9LFxuICBUaWxkZUVxdWFsOiB7XG4gICAgZGVzY3JpcHRpb246IFwiQXBwcm94aW1hdGVseSBvciBhc3ltcHRvdGljYWxseSBlcXVhbFwiLFxuICAgIGNvbXBsZXhpdHk6IDExZTMsXG4gICAgc2lnbmF0dXJlOiB7IGRvbWFpbjogXCJSZWxhdGlvbmFsT3BlcmF0b3JcIiB9XG4gICAgLy8gQHRvZG8gZXZhbHVhdGU6IChjZSwgLi4uYXJnczogQm94ZWRFeHByZXNzaW9uW10pID0+IFNlbWlCb3hlZEV4cHJlc3Npb24ge31cbiAgfSxcbiAgTm90VGlsZGVFcXVhbDoge1xuICAgIGNvbXBsZXhpdHk6IDExMTAwLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlJlbGF0aW9uYWxPcGVyYXRvclwiLFxuICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IGNlLl9mbihcIk5vdFwiLCBbY2UuX2ZuKFwiVGlsZGVFcXVhbFwiLCBhcmdzKV0pXG4gICAgfVxuICB9LFxuICBBcHByb3g6IHtcbiAgICBjb21wbGV4aXR5OiAxMTEwMCxcbiAgICBzaWduYXR1cmU6IHsgZG9tYWluOiBcIlJlbGF0aW9uYWxPcGVyYXRvclwiIH1cbiAgICAvLyBAdG9kbyBldmFsdWF0ZTogKGNlLCAuLi5hcmdzOiBCb3hlZEV4cHJlc3Npb25bXSkgPT4gU2VtaUJveGVkRXhwcmVzc2lvbiB7fVxuICB9LFxuICBOb3RBcHByb3g6IHtcbiAgICBjb21wbGV4aXR5OiAxMTEwMCxcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogXCJSZWxhdGlvbmFsT3BlcmF0b3JcIixcbiAgICAgIGNhbm9uaWNhbDogKGNlLCBhcmdzKSA9PiBjZS5fZm4oXCJOb3RcIiwgW2NlLl9mbihcIkFwcHJveFwiLCBhcmdzKV0pXG4gICAgfVxuICB9LFxuICBBcHByb3hFcXVhbDoge1xuICAgIGNvbXBsZXhpdHk6IDExMTAwLFxuICAgIHNpZ25hdHVyZTogeyBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIgfVxuICAgIC8vIEB0b2RvIGV2YWx1YXRlOiAoY2UsIC4uLmFyZ3M6IEJveGVkRXhwcmVzc2lvbltdKSA9PiBTZW1pQm94ZWRFeHByZXNzaW9uIHt9XG4gIH0sXG4gIE5vdEFwcHJveEVxdWFsOiB7XG4gICAgY29tcGxleGl0eTogMTExMDAsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2UuX2ZuKFwiTm90XCIsIFtjZS5fZm4oXCJBcHByb3hFcXVhbFwiLCBhcmdzKV0pXG4gICAgfVxuICB9LFxuICBBcHByb3hOb3RFcXVhbDoge1xuICAgIGNvbXBsZXhpdHk6IDExMTAwLFxuICAgIHNpZ25hdHVyZTogeyBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIgfVxuICAgIC8vIEB0b2RvIGV2YWx1YXRlOiAoY2UsIC4uLmFyZ3M6IEJveGVkRXhwcmVzc2lvbltdKSA9PiBTZW1pQm94ZWRFeHByZXNzaW9uIHt9XG4gIH0sXG4gIE5vdEFwcHJveE5vdEVxdWFsOiB7XG4gICAgY29tcGxleGl0eTogMTExMDAsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2UuX2ZuKFwiTm90XCIsIFtjZS5fZm4oXCJBcHByb3hOb3RFcXVhbFwiLCBhcmdzKV0pXG4gICAgfVxuICB9LFxuICBQcmVjZWRlczoge1xuICAgIGNvbXBsZXhpdHk6IDExMTAwLFxuICAgIHNpZ25hdHVyZTogeyBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIgfVxuICAgIC8vIEB0b2RvIGV2YWx1YXRlOiAoY2UsIC4uLmFyZ3M6IEJveGVkRXhwcmVzc2lvbltdKSA9PiBTZW1pQm94ZWRFeHByZXNzaW9uIHt9XG4gIH0sXG4gIE5vdFByZWNlZGVzOiB7XG4gICAgY29tcGxleGl0eTogMTExMDAsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2UuX2ZuKFwiTm90XCIsIFtjZS5fZm4oXCJQcmVjZWRlc1wiLCBhcmdzKV0pXG4gICAgfVxuICB9LFxuICBTdWNjZWVkczoge1xuICAgIHNpZ25hdHVyZTogeyBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIgfVxuICAgIC8vIEB0b2RvIGV2YWx1YXRlOiAoY2UsIC4uLmFyZ3M6IEJveGVkRXhwcmVzc2lvbltdKSA9PiBTZW1pQm94ZWRFeHByZXNzaW9uIHt9XG4gIH0sXG4gIE5vdFN1Y2NlZWRzOiB7XG4gICAgY29tcGxleGl0eTogMTExMDAsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUmVsYXRpb25hbE9wZXJhdG9yXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2UuX2ZuKFwiTm90XCIsIFtjZS5fZm4oXCJTdWNjZWVkc1wiLCBhcmdzKV0pXG4gICAgfVxuICB9XG59O1xuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGlicmFyeS9zZXRzLnRzXG52YXIgU0VUU19MSUJSQVJZID0ge1xuICAvL1xuICAvLyBDb25zdGFudHNcbiAgLy9cbiAgRW1wdHlTZXQ6IHtcbiAgICBkb21haW46IFwiU2V0XCIsXG4gICAgY29uc3RhbnQ6IHRydWUsXG4gICAgd2lraWRhdGE6IFwiUTIyNjE4M1wiXG4gICAgLy8gY29udGFpbnM6ICgpID0+IGZhbHNlLCAvLyBAdG9kbyBub3QgcXVpdGUgdHJ1ZS4uLlxuICAgIC8vIGluY2x1ZGVzOiAoKSA9PiB0cnVlLCAvLyBUaGUgZW1wdHkgc2V0IGlzIGEgc3Vic2V0IG9mIGV2ZXJ5IHNldFxuICB9LFxuICAvL1xuICAvLyBQcmVkaWNhdGVzXG4gIC8vXG4gIEVsZW1lbnQ6IHtcbiAgICBjb21wbGV4aXR5OiAxMTIwMCxcbiAgICBob2xkOiBcImFsbFwiLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlByZWRpY2F0ZVwiLFxuICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IHtcbiAgICAgICAgYXJncyA9IHZhbGlkYXRlQXJndW1lbnRDb3VudChjZSwgZmxhdHRlblNlcXVlbmNlKGNhbm9uaWNhbChhcmdzKSksIDIpO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDIgJiYgaXNWYWxpZERvbWFpbihhcmdzWzFdKSlcbiAgICAgICAgICByZXR1cm4gY2UuX2ZuKFwiRWxlbWVudFwiLCBbYXJnc1swXSwgY2UuZG9tYWluKGFyZ3NbMV0pXSk7XG4gICAgICAgIHJldHVybiBjZS5fZm4oXCJFbGVtZW50XCIsIGFyZ3MpO1xuICAgICAgfSxcbiAgICAgIGV2YWx1YXRlOiAoY2UsIGFyZ3MpID0+IGV2YWx1YXRlRWxlbWVudChjZSwgYXJncylcbiAgICB9XG4gIH0sXG4gIE5vdEVsZW1lbnQ6IHtcbiAgICBjb21wbGV4aXR5OiAxMTIwMCxcbiAgICBob2xkOiBcImFsbFwiLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlByZWRpY2F0ZVwiLFxuICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IGNlLmZuKFwiTm90XCIsIFtjZS5mbihcIkVsZW1lbnRcIiwgYXJncyldKVxuICAgIH1cbiAgfSxcbiAgU3Vic2V0OiB7XG4gICAgY29tcGxleGl0eTogMTEyMDAsXG4gICAgc2lnbmF0dXJlOiB7IGRvbWFpbjogXCJQcmVkaWNhdGVcIiB9XG4gIH0sXG4gIE5vdFN1YnNldDoge1xuICAgIGNvbXBsZXhpdHk6IDExMjAwLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlByZWRpY2F0ZVwiLFxuICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IGNlLmZuKFwiTm90XCIsIFtjZS5mbihcIlN1YnNldFwiLCBhcmdzKV0pXG4gICAgfVxuICB9LFxuICBTdXBlcnNldDoge1xuICAgIGNvbXBsZXhpdHk6IDExMjAwLFxuICAgIHNpZ25hdHVyZTogeyBkb21haW46IFwiUHJlZGljYXRlXCIgfVxuICB9LFxuICBTdXBlcnNldEVxdWFsOiB7XG4gICAgY29tcGxleGl0eTogMTEyMDAsXG4gICAgc2lnbmF0dXJlOiB7IGRvbWFpbjogXCJQcmVkaWNhdGVcIiB9XG4gIH0sXG4gIE5vdFN1cGVyc2V0OiB7XG4gICAgY29tcGxleGl0eTogMTEyMDAsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUHJlZGljYXRlXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2UuZm4oXCJOb3RcIiwgW2NlLmZuKFwiU3VwZXJzZXRcIiwgYXJncyldKVxuICAgIH1cbiAgfSxcbiAgTm90U3VwZXJzZXRFcXVhbDoge1xuICAgIGNvbXBsZXhpdHk6IDExMjAwLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBcIlByZWRpY2F0ZVwiLFxuICAgICAgY2Fub25pY2FsOiAoY2UsIGFyZ3MpID0+IGNlLmZuKFwiTm90XCIsIFtjZS5mbihcIlN1cGVyc2V0RXF1YWxcIiwgYXJncyldKVxuICAgIH1cbiAgfSxcbiAgU3Vic2V0RXF1YWw6IHtcbiAgICBjb21wbGV4aXR5OiAxMTIwMCxcbiAgICBzaWduYXR1cmU6IHsgZG9tYWluOiBcIlByZWRpY2F0ZVwiIH1cbiAgICAvLyBldmFsdWF0ZTogc3Vic2V0RXF1YWwsXG4gIH0sXG4gIE5vdFN1YnNldE5vdEVxdWFsOiB7XG4gICAgY29tcGxleGl0eTogMTEyMDAsXG4gICAgc2lnbmF0dXJlOiB7XG4gICAgICBkb21haW46IFwiUHJlZGljYXRlXCIsXG4gICAgICBjYW5vbmljYWw6IChjZSwgYXJncykgPT4gY2UuZm4oXCJOb3RcIiwgW2NlLmZuKFwiU3Vic2V0RXF1YWxcIiwgYXJncyldKVxuICAgIH1cbiAgfSxcbiAgLy9cbiAgLy8gRnVuY3Rpb25zXG4gIC8vXG4gIENhcnRlc2lhblByb2R1Y3Q6IHtcbiAgICAvLyBBa2EgdGhlIHByb2R1Y3Qgc2V0LCB0aGUgc2V0IGRpcmVjdCBwcm9kdWN0IG9yIGNyb3NzIHByb2R1Y3RcbiAgICAvLyBOb3RhdGlvbjogXFx0aW1lc1xuICAgIHdpa2lkYXRhOiBcIlExNzM3NDBcIixcbiAgICBzaWduYXR1cmU6IHsgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIlNldFwiLCBbXCJTZXF1ZW5jZVwiLCBcIlNldFwiXSwgXCJTZXRcIl0gfVxuICAgIC8vIGV2YWx1YXRlOiBjYXJ0ZXNpYW5Qcm9kdWN0LFxuICB9LFxuICBDb21wbGVtZW50OiB7XG4gICAgLy8gUmV0dXJuIHRoZSBlbGVtZW50cyBvZiB0aGUgZmlyc3QgYXJndW1lbnQgdGhhdCBhcmUgbm90IGluIGFueSBvZlxuICAgIC8vIHRoZSBzdWJzZXF1ZW50IGxpc3RzXG4gICAgd2lraWRhdGE6IFwiUTI0Mjc2N1wiLFxuICAgIHNpZ25hdHVyZTogeyBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiU2V0XCIsIFwiU2V0XCJdIH1cbiAgfSxcbiAgSW50ZXJzZWN0aW9uOiB7XG4gICAgLy8gbm90YXRpb246IFxcY2FwXG4gICAgd2lraWRhdGE6IFwiUTE4NTgzN1wiLFxuICAgIHRocmVhZGFibGU6IHRydWUsXG4gICAgYXNzb2NpYXRpdmU6IHRydWUsXG4gICAgY29tbXV0YXRpdmU6IHRydWUsXG4gICAgaW52b2x1dGlvbjogdHJ1ZSxcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJTZXRcIiwgW1wiU2VxdWVuY2VcIiwgXCJTZXRcIl0sIFwiU2V0XCJdLFxuICAgICAgZXZhbHVhdGU6IGludGVyc2VjdGlvblxuICAgIH1cbiAgfSxcbiAgVW5pb246IHtcbiAgICAvLyBXb3JrcyBvbiBzZXQsIGJ1dCBjYW4gYWxzbyB3b3JrIG9uIGxpc3RzXG4gICAgd2lraWRhdGE6IFwiUTE4NTM1OVwiLFxuICAgIHRocmVhZGFibGU6IHRydWUsXG4gICAgYXNzb2NpYXRpdmU6IHRydWUsXG4gICAgY29tbXV0YXRpdmU6IHRydWUsXG4gICAgaW52b2x1dGlvbjogdHJ1ZSxcbiAgICBzaWduYXR1cmU6IHtcbiAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJTZXRcIiwgW1wiU2VxdWVuY2VcIiwgXCJTZXRcIl0sIFwiU2V0XCJdLFxuICAgICAgZXZhbHVhdGU6IHVuaW9uXG4gICAgfVxuICB9LFxuICAvLyB7XG4gIC8vICAgbmFtZTogJ1NldCcsXG4gIC8vICAgZG9tYWluOiBbJ0Z1bmN0aW9uJywgWydTZXF1ZW5jZScsICdBbnl0aGluZyddLCAnU2V0J10sXG4gIC8vICAgLy8gQHRvZG8hIHNldCBoYXMgbXVsdGlwbGUgZm9ybXNcbiAgLy8gICAvLyBTZXQoU2VxdWVuY2UpXG4gIC8vICAgLy8gU2V0KFNlcXVlbmNlLCBDb25kaXRpb24pXG4gIC8vICAgLy8gU2V0KFNldCwgQ29uZGl0aW9uKVxuICAvLyB9LCAvLyBkaXNqb2ludCB1bmlvbiBRODQyNjIwIFx1MjI5NFxuICBTZXRNaW51czoge1xuICAgIHdpa2lkYXRhOiBcIlExODE5MjQ0MlwiLFxuICAgIHNpZ25hdHVyZToge1xuICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIlNldFwiLCBcIlZhbHVlXCIsIFwiU2V0XCJdLFxuICAgICAgZXZhbHVhdGU6IHNldE1pbnVzXG4gICAgfVxuICB9LFxuICBTeW1tZXRyaWNEaWZmZXJlbmNlOiB7XG4gICAgLy8gc3ltbWV0cmljIGRpZmZlcmVuY2UgPSBkaXNqdW5jdGl2ZSB1bmlvbiAgKGNpcmNsZWQgbWludXMpXG4gICAgLyogPSBVbmlvbihDb21wbGVtZW50KGEsIGIpLCBDb21wbGVtZW50KGIsIGEpICovXG4gICAgLyogQ29ycmVzcG9uZHMgdG8gWE9SIGluIGJvb2xlYW4gbG9naWMgKi9cbiAgICB3aWtpZGF0YTogXCJRMTE0NzI0MlwiLFxuICAgIHNpZ25hdHVyZTogeyBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiU2V0XCIsIFtcIlNlcXVlbmNlXCIsIFwiU2V0XCJdLCBcIlNldFwiXSB9XG4gIH1cbn07XG5mdW5jdGlvbiB1bmlvbihjZSwgX29wcykge1xuICByZXR1cm4gY2Uuc3ltYm9sKFwiRmFsc2VcIik7XG59XG5mdW5jdGlvbiBpbnRlcnNlY3Rpb24oY2UsIF9vcHMpIHtcbiAgcmV0dXJuIGNlLnN5bWJvbChcIkVtcHR5U2V0XCIpO1xufVxuZnVuY3Rpb24gc2V0TWludXMoY2UsIF9vcHMpIHtcbiAgcmV0dXJuIGNlLnN5bWJvbChcIkVtcHR5U2V0XCIpO1xufVxuZnVuY3Rpb24gZXZhbHVhdGVFbGVtZW50KGNlLCBvcHMyKSB7XG4gIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChvcHMyLmxlbmd0aCA9PT0gMik7XG4gIGNvbnN0IFtsaHMsIHJoc10gPSBvcHMyO1xuICBpZiAocmhzLnN0cmluZykge1xuICAgIGlmIChsaHMuc3RyaW5nICYmIHJocy5zdHJpbmcuaW5jbHVkZXMobGhzLnN0cmluZykpXG4gICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgICByZXR1cm4gY2Uuc3ltYm9sKFwiRmFsc2VcIik7XG4gIH1cbiAgaWYgKHJocy5rZXlzKSB7XG4gICAgaWYgKGxocy5zdHJpbmcpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIHJocy5rZXlzKVxuICAgICAgICBpZiAoa2V5ID09PSBsaHMuc3RyaW5nKVxuICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJUcnVlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gY2Uuc3ltYm9sKFwiRmFsc2VcIik7XG4gIH1cbiAgaWYgKHJocy5oZWFkID09PSBcIkxpc3RcIikge1xuICAgIGlmIChsaHMuaGVhZCA9PT0gXCJMaXN0XCIpIHtcbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxICsgKHJocy5ub3BzIC0gbGhzLm5vcHMpOyArK2kpIHtcbiAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxocy5ub3BzOyArK2opIHtcbiAgICAgICAgICBpZiAoIXJocy5vcHNbaSArIGpdLmlzRXF1YWwobGhzLm9wc1tqXSkpIHtcbiAgICAgICAgICAgIGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgIHJldHVybiBjZS5zeW1ib2woXCJUcnVlXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNlLnN5bWJvbChcIkZhbHNlXCIpO1xuICAgIH1cbiAgICBjb25zdCB2YWwgPSBsaHMuaGVhZCA9PT0gXCJIb2xkXCIgPyBsaHMub3AxIDogbGhzO1xuICAgIGZvciAoY29uc3QgZWxlbSBvZiByaHMub3BzKVxuICAgICAgaWYgKHZhbC5pc0VxdWFsKGVsZW0pKVxuICAgICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgICByZXR1cm4gY2Uuc3ltYm9sKFwiRmFsc2VcIik7XG4gIH1cbiAgaWYgKGlzVmFsaWREb21haW4ocmhzKSkge1xuICAgIGlmIChsaHMuZG9tYWluLmlzQ29tcGF0aWJsZShjZS5kb21haW4ocmhzKSkpXG4gICAgICByZXR1cm4gY2Uuc3ltYm9sKFwiVHJ1ZVwiKTtcbiAgICByZXR1cm4gY2Uuc3ltYm9sKFwiRmFsc2VcIik7XG4gIH1cbiAgcmV0dXJuIGNlLl9mbihcIkVsZW1lbnRcIiwgW2xocywgcmhzXSk7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9saWJyYXJ5L3N0YXRpc3RpY3MudHNcbnZhciBTVEFUSVNUSUNTX0xJQlJBUlkgPSBbXG4gIHtcbiAgICBNZWFuOiB7XG4gICAgICBjb21wbGV4aXR5OiAxMjAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgW1wiU2VxdWVuY2VcIiwgXCJWYWx1ZVwiXSwgXCJOdW1iZXJcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBsZXQgc3VtMiA9IDA7XG4gICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICBmb3IgKGNvbnN0IG9wMyBvZiBlYWNoKG9wczIpKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gYXNGbG9hdChvcDMpO1xuICAgICAgICAgICAgaWYgKHYgPT09IG51bGwpXG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICBzdW0yICs9IHY7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY291bnQgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gY2UuX05BTjtcbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKHN1bTIgLyBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIE1lZGlhbjoge1xuICAgICAgY29tcGxleGl0eTogMTIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFtcIlNlcXVlbmNlXCIsIFwiVmFsdWVcIl0sIFwiTnVtYmVyXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgICAgZm9yIChjb25zdCBvcDMgb2YgZWFjaChvcHMyKSkge1xuICAgICAgICAgICAgY29uc3QgdiA9IGFzRmxvYXQob3AzKTtcbiAgICAgICAgICAgIGlmICh2ID09PSBudWxsKVxuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9OQU47XG4gICAgICAgICAgdmFsdWVzLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICAgICAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKHZhbHVlcy5sZW5ndGggLyAyKTtcbiAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCAlIDIgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKCh2YWx1ZXNbbWlkIC0gMV0gKyB2YWx1ZXNbbWlkXSkgLyAyKTtcbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKHZhbHVlc1ttaWRdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgVmFyaWFuY2U6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBbXCJTZXF1ZW5jZVwiLCBcIlZhbHVlXCJdLCBcIk51bWJlclwiXSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGxldCBzdW0yID0gMDtcbiAgICAgICAgICBsZXQgc3VtMjIgPSAwO1xuICAgICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgICAgZm9yIChjb25zdCBvcDMgb2YgZWFjaChvcHMyKSkge1xuICAgICAgICAgICAgY29uc3QgdiA9IGFzRmxvYXQob3AzKTtcbiAgICAgICAgICAgIGlmICh2ID09PSBudWxsKVxuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgICAgc3VtMiArPSB2O1xuICAgICAgICAgICAgc3VtMjIgKz0gdiAqIHY7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY291bnQgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gY2UuX05BTjtcbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKChzdW0yMiAtIHN1bTIgKiBzdW0yIC8gY291bnQpIC8gKGNvdW50IC0gMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBTdGFuZGFyZERldmlhdGlvbjoge1xuICAgICAgY29tcGxleGl0eTogMTIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFtcIlNlcXVlbmNlXCIsIFwiVmFsdWVcIl0sIFwiTnVtYmVyXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgbGV0IHN1bTIgPSAwO1xuICAgICAgICAgIGxldCBzdW0yMiA9IDA7XG4gICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICBmb3IgKGNvbnN0IG9wMyBvZiBlYWNoKG9wczIpKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gYXNGbG9hdChvcDMpO1xuICAgICAgICAgICAgaWYgKHYgPT09IG51bGwpXG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICBzdW0yICs9IHY7XG4gICAgICAgICAgICBzdW0yMiArPSB2ICogdjtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb3VudCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgICAgICAgIHJldHVybiBjZS5udW1iZXIoXG4gICAgICAgICAgICBNYXRoLnNxcnQoKHN1bTIyIC0gc3VtMiAqIHN1bTIgLyBjb3VudCkgLyAoY291bnQgLSAxKSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBLdXJ0b3Npczoge1xuICAgICAgY29tcGxleGl0eTogMTIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFtcIlNlcXVlbmNlXCIsIFwiVmFsdWVcIl0sIFwiTnVtYmVyXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgbGV0IHN1bTIgPSAwO1xuICAgICAgICAgIGxldCBzdW0yMiA9IDA7XG4gICAgICAgICAgbGV0IHN1bTQgPSAwO1xuICAgICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgICAgZm9yIChjb25zdCBvcDMgb2YgZWFjaChvcHMyKSkge1xuICAgICAgICAgICAgY29uc3QgdiA9IGFzRmxvYXQob3AzKTtcbiAgICAgICAgICAgIGlmICh2ID09PSBudWxsKVxuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgICAgc3VtMiArPSB2O1xuICAgICAgICAgICAgc3VtMjIgKz0gdiAqIHY7XG4gICAgICAgICAgICBzdW00ICs9IHYgKiB2ICogdiAqIHY7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY291bnQgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gY2UuX05BTjtcbiAgICAgICAgICBjb25zdCBzMiA9IChzdW0yMiAtIHN1bTIgKiBzdW0yIC8gY291bnQpIC8gKGNvdW50IC0gMSk7XG4gICAgICAgICAgY29uc3QgczQgPSAoc3VtNCAtIHN1bTIyICogc3VtMjIgLyBjb3VudCkgLyAoY291bnQgLSAxKTtcbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKChzNCAvIChzMiAqIHMyKSAtIDMpICogKGNvdW50ICogKGNvdW50ICsgMSkpIC8gNik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFNrZXduZXNzOiB7XG4gICAgICBjb21wbGV4aXR5OiAxMjAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgW1wiU2VxdWVuY2VcIiwgXCJWYWx1ZVwiXSwgXCJOdW1iZXJcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBsZXQgc3VtMiA9IDA7XG4gICAgICAgICAgbGV0IHN1bTIyID0gMDtcbiAgICAgICAgICBsZXQgc3VtMyA9IDA7XG4gICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICBmb3IgKGNvbnN0IG9wMyBvZiBlYWNoKG9wczIpKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gYXNGbG9hdChvcDMpO1xuICAgICAgICAgICAgaWYgKHYgPT09IG51bGwpXG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICBzdW0yICs9IHY7XG4gICAgICAgICAgICBzdW0yMiArPSB2ICogdjtcbiAgICAgICAgICAgIHN1bTMgKz0gdiAqIHYgKiB2O1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvdW50ID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9OQU47XG4gICAgICAgICAgY29uc3QgczIgPSAoc3VtMjIgLSBzdW0yICogc3VtMiAvIGNvdW50KSAvIChjb3VudCAtIDEpO1xuICAgICAgICAgIGNvbnN0IHMzID0gKHN1bTMgLSBzdW0yMiAqIHN1bTIgLyBjb3VudCkgLyAoY291bnQgLSAxKTtcbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKHMzIC8gTWF0aC5wb3coczIsIDMgLyAyKSAqIE1hdGguc3FydChjb3VudCAqIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgTW9kZToge1xuICAgICAgY29tcGxleGl0eTogMTIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFtcIlNlcXVlbmNlXCIsIFwiVmFsdWVcIl0sIFwiTnVtYmVyXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgICAgZm9yIChjb25zdCBvcDMgb2YgZWFjaChvcHMyKSkge1xuICAgICAgICAgICAgY29uc3QgdiA9IGFzRmxvYXQob3AzKTtcbiAgICAgICAgICAgIGlmICh2ID09PSBudWxsKVxuICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGNlLl9OQU47XG4gICAgICAgICAgdmFsdWVzLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICAgICAgICBjb25zdCBjb3VudHMgPSB7fTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgdmFsdWVzKSB7XG4gICAgICAgICAgICBjb3VudHNbdl0gPSAoY291bnRzW3ZdID8/IDApICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IG1heDIgPSAwO1xuICAgICAgICAgIGxldCBtb2RlID0gdmFsdWVzWzBdO1xuICAgICAgICAgIGZvciAoY29uc3QgdiBvZiB2YWx1ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBjb3VudHNbdl07XG4gICAgICAgICAgICBpZiAoYyA+IG1heDIpIHtcbiAgICAgICAgICAgICAgbWF4MiA9IGM7XG4gICAgICAgICAgICAgIG1vZGUgPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKG1vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBRdWFydGlsZXM6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBbXCJTZXF1ZW5jZVwiLCBcIlZhbHVlXCJdLCBcIkxpc3RcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICBmb3IgKGNvbnN0IG9wMyBvZiBlYWNoKG9wczIpKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gYXNGbG9hdChvcDMpO1xuICAgICAgICAgICAgaWYgKHYgPT09IG51bGwpXG4gICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaCh2KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gY2UuX05BTjtcbiAgICAgICAgICB2YWx1ZXMuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgICAgIGNvbnN0IG1pZCA9IE1hdGguZmxvb3IodmFsdWVzLmxlbmd0aCAvIDIpO1xuICAgICAgICAgIGNvbnN0IGxvd2VyID0gdmFsdWVzLnNsaWNlKDAsIG1pZCk7XG4gICAgICAgICAgY29uc3QgdXBwZXIgPSB2YWx1ZXMuc2xpY2UobWlkICsgMSk7XG4gICAgICAgICAgcmV0dXJuIGNlLmJveChbXG4gICAgICAgICAgICBcIkxpc3RcIixcbiAgICAgICAgICAgIGNlLm51bWJlcih2YWx1ZXNbbWlkXSksXG4gICAgICAgICAgICBjZS5udW1iZXIobG93ZXJbTWF0aC5mbG9vcihsb3dlci5sZW5ndGggLyAyKV0pLFxuICAgICAgICAgICAgY2UubnVtYmVyKHVwcGVyW01hdGguZmxvb3IodXBwZXIubGVuZ3RoIC8gMildKVxuICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBJbnRlcnF1YXJ0aWxlUmFuZ2U6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDEyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBbXCJTZXF1ZW5jZVwiLCBcIlZhbHVlXCJdLCBcIk51bWJlclwiXSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICAgIGZvciAoY29uc3Qgb3AzIG9mIGVhY2gob3BzMikpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBhc0Zsb2F0KG9wMyk7XG4gICAgICAgICAgICBpZiAodiA9PT0gbnVsbClcbiAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHYpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBjZS5fTkFOO1xuICAgICAgICAgIHZhbHVlcy5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgICAgICAgY29uc3QgbWlkID0gTWF0aC5mbG9vcih2YWx1ZXMubGVuZ3RoIC8gMik7XG4gICAgICAgICAgY29uc3QgbG93ZXIgPSB2YWx1ZXMuc2xpY2UoMCwgbWlkKTtcbiAgICAgICAgICBjb25zdCB1cHBlciA9IHZhbHVlcy5zbGljZShtaWQgKyAxKTtcbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKFxuICAgICAgICAgICAgdXBwZXJbTWF0aC5mbG9vcih1cHBlci5sZW5ndGggLyAyKV0gLSBsb3dlcltNYXRoLmZsb29yKGxvd2VyLmxlbmd0aCAvIDIpXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIENvdW50OiB7XG4gICAgICB0aHJlYWRhYmxlOiB0cnVlLFxuICAgICAgY29tcGxleGl0eTogMTIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFtcIlNlcXVlbmNlXCIsIFwiVmFsdWVcIl0sIFwiTnVtYmVyXCJdLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICBmb3IgKGNvbnN0IF9vcCBvZiBlYWNoKG9wczIpKVxuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICByZXR1cm4gY2UubnVtYmVyKGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgRXJmOiB7XG4gICAgICBjb21wbGV4aXR5OiA3NTAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJOdW1iZXJcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBjb25zdCB4ID0gYXNGbG9hdChvcHMyWzBdKTtcbiAgICAgICAgICBpZiAoeCA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIGNlLm51bWJlcihlcmYoeCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBFcmZjOiB7XG4gICAgICBjb21wbGV4aXR5OiA3NTAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJOdW1iZXJcIl0sXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IHtcbiAgICAgICAgICBjb25zdCB4ID0gYXNGbG9hdChvcHMyWzBdKTtcbiAgICAgICAgICBpZiAoeCA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIGNlLm51bWJlcigxIC0gZXJmKHgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXTtcbmZ1bmN0aW9uKiBlYWNoKG9wczIpIHtcbiAgaWYgKG9wczIubGVuZ3RoID09PSAwKVxuICAgIHJldHVybjtcbiAgY29uc3QgY2UgPSBvcHMyWzBdLmVuZ2luZTtcbiAgZm9yIChjb25zdCBvcDMgb2Ygb3BzMikge1xuICAgIGNvbnN0IGggPSBvcDMuaGVhZDtcbiAgICBpZiAoaCA9PT0gXCJSYW5nZVwiKSB7XG4gICAgICBsZXQgbG93ZXIgPSBhc0Zsb2F0KG9wM1sxXSk7XG4gICAgICBpZiAobG93ZXIgPT09IG51bGwpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGxldCB1cHBlciA9IGFzRmxvYXQob3AzWzJdKTtcbiAgICAgIGlmICh1cHBlciA9PT0gbnVsbCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IDE7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICBjb25zdCBzdGVwMiA9IGFzRmxvYXQob3AzWzNdID8/IC0xKSA/PyAtMTtcbiAgICAgICAgaWYgKHN0ZXAyID49IDApXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3IgKGxldCBpID0gbG93ZXI7IGkgPD0gdXBwZXI7IGkgKz0gc3RlcDIpXG4gICAgICAgICAgeWllbGQgY2UubnVtYmVyKGkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBzdGVwID0gYXNGbG9hdChvcDNbM10gPz8gMSkgPz8gMTtcbiAgICAgIGlmIChzdGVwIDw9IDApXG4gICAgICAgIHJldHVybjtcbiAgICAgIGZvciAobGV0IGkgPSBsb3dlcjsgaSA8PSB1cHBlcjsgaSArPSBzdGVwKVxuICAgICAgICB5aWVsZCBjZS5udW1iZXIoaSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChoID09PSBcIkxpbnNwYWNlXCIpIHtcbiAgICAgIGxldCBzdGFydCA9IGFzRmxvYXQob3AzWzFdKTtcbiAgICAgIGlmIChzdGFydCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgbGV0IHN0b3AgPSBhc0Zsb2F0KG9wM1syXSk7XG4gICAgICBpZiAoc3RvcCA9PT0gbnVsbCkge1xuICAgICAgICBzdG9wID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG51bSA9IGFzRmxvYXQob3AzWzNdKSA/PyA1MDtcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihudW0pKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAobnVtIDw9IDApXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIChudW0gLSAxKTtcbiAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8PSBzdG9wOyBpICs9IHN0ZXApXG4gICAgICAgIHlpZWxkIGNlLm51bWJlcihpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBoID09PSBcInN0cmluZ1wiICYmIC9eKExpc3R8U2VxdWVuY2V8VHVwbGV8U2luZ2xlfFBhaXJ8VHJpcGxlKSQvLnRlc3QoaCkpIHtcbiAgICAgIHlpZWxkKiBlYWNoKG9wMy5vcHMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB5aWVsZCBvcDM7XG4gIH1cbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2xpYnJhcnkvdHJpZ29ub21ldHJ5LnRzXG52YXIgZG9tYWluTnVtYmVyVG9SZWFsTnVtYmVyID0gKF9oZWFkKSA9PiB7XG4gIHJldHVybiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIkV4dGVuZGVkUmVhbE51bWJlclwiXTtcbn07XG52YXIgdHJpZ0Z1bmN0aW9uID0gKF9oZWFkKSA9PiB7XG4gIHJldHVybiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXTtcbn07XG52YXIgaHlwZXJib2xpY0Z1bmN0aW9uID0gKF9oZWFkKSA9PiB7XG4gIHJldHVybiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXTtcbn07XG52YXIgVFJJR09OT01FVFJZX0xJQlJBUlkgPSBbXG4gIHtcbiAgICAvL1xuICAgIC8vIENvbnN0YW50c1xuICAgIC8vXG4gICAgUGk6IHtcbiAgICAgIGRvbWFpbjogXCJUcmFuc2NlbmRlbnRhbE51bWJlclwiLFxuICAgICAgZmxhZ3M6IHsgYWxnZWJyYWljOiBmYWxzZSB9LFxuICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICBob2xkVW50aWw6IFwiTlwiLFxuICAgICAgd2lraWRhdGE6IFwiUTE2N1wiLFxuICAgICAgdmFsdWU6IChlbmdpbmUpID0+IGJpZ251bVByZWZlcnJlZChlbmdpbmUpID8gZW5naW5lLl9CSUdOVU1fUEkgOiBNYXRoLlBJXG4gICAgfVxuICB9LFxuICB7XG4gICAgLy8gc3FydCh4KnggKyB5KnkpXG4gICAgRGVncmVlczoge1xuICAgICAgLyogPSBQaSAvIDE4MCAqL1xuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgXCJOdW1iZXJcIl0sXG4gICAgICAgIGNhbm9uaWNhbDogKGNlLCBvcHMyKSA9PiB7XG4gICAgICAgICAgb3BzMiA9IHZhbGlkYXRlQXJndW1lbnRzKGNlLCBmbGF0dGVuU2VxdWVuY2UoY2Fub25pY2FsKG9wczIpKSwgW1xuICAgICAgICAgICAgXCJOdW1iZXJcIlxuICAgICAgICAgIF0pO1xuICAgICAgICAgIGlmIChvcHMyLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgICAgIHJldHVybiBjZS5mbihcIkRlZ3JlZXNcIiwgb3BzMiwgeyBjYW5vbmljYWw6IGZhbHNlIH0pO1xuICAgICAgICAgIGNvbnN0IGFyZyA9IG9wczJbMF07XG4gICAgICAgICAgaWYgKGFyZy5udW1lcmljVmFsdWUgPT09IG51bGwgfHwgIWFyZy5pc1ZhbGlkKVxuICAgICAgICAgICAgcmV0dXJuIGNlLmZuKFwiRGVncmVlc1wiLCBvcHMyLCB7IGNhbm9uaWNhbDogZmFsc2UgfSk7XG4gICAgICAgICAgcmV0dXJuIGNlLmRpdihjZS5tdWwoW2FyZywgY2Uuc3ltYm9sKFwiUGlcIildKSwgY2UubnVtYmVyKDE4MCkpO1xuICAgICAgICB9LFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBjZS5tdWwoW29wczJbMF0sIGNlLmRpdihjZS5zeW1ib2woXCJQaVwiKSwgY2UubnVtYmVyKDE4MCkpXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIEh5cG90OiB7XG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiLCBcIk5vbk5lZ2F0aXZlTnVtYmVyXCJdLFxuICAgICAgICBzaW1wbGlmeTogKGNlLCBvcHMyKSA9PiBjZS5ib3goW1wiU3FydFwiLCBbXCJBZGRcIiwgW1wiU3F1YXJlXCIsIG9wczJbMF1dLCBbXCJTcXVhcmVcIiwgb3BzMlsxXV1dXSkuc2ltcGxpZnkoKSxcbiAgICAgICAgZXZhbHVhdGU6IFtcbiAgICAgICAgICBcIkxhbWJkYVwiLFxuICAgICAgICAgIFtcIlNxcnRcIiwgW1wiQWRkXCIsIFtcIlNxdWFyZVwiLCBcIl8xXCJdLCBbXCJTcXVhcmVcIiwgXCJfMlwiXV1dXG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9LFxuICAgIFNpbjoge1xuICAgICAgY29tcGxleGl0eTogNWUzLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJOdW1iZXJcIiwgW1wiSW50ZXJ2YWxcIiwgLTEsIDFdXSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgXCJTaW5cIiwgb3BzMlswXSk/LnNpbXBsaWZ5KCkgPz8gKGNvbXBsZXhBbGxvd2VkKGNlKSA/IGNlLmJveChbXG4gICAgICAgICAgXCJEaXZpZGVcIixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcIlN1YnRyYWN0XCIsXG4gICAgICAgICAgICBbXCJFeHBcIiwgW1wiTXVsdGlwbHlcIiwgXCJJbWFnaW5hcnlVbml0XCIsIG9wczJbMF1dXSxcbiAgICAgICAgICAgIFtcIkV4cFwiLCBbXCJNdWx0aXBseVwiLCBcIkltYWdpbmFyeVVuaXRcIiwgW1wiTmVnYXRlXCIsIG9wczJbMF1dXV1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFtcIkNvbXBsZXhcIiwgMCwgMl1cbiAgICAgICAgXSkuc2ltcGxpZnkoKSA6IHZvaWQgMCksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiU2luXCIsIG9wczJbMF0pLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcIk5cIiwgXCJTaW5cIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICAvL1xuICAgIC8vIEJhc2ljIHRyaWdvbm9tZXRyaWMgZnVuY3Rpb25cbiAgICAvLyAobWF5IGJlIHVzZWQgaW4gdGhlIGRlZmluaXRpb24gb2Ygb3RoZXIgZnVuY3Rpb25zIGJlbG93KVxuICAgIC8vXG4gICAgQXJjdGFuOiB7XG4gICAgICB3aWtpZGF0YTogXCJRMjI1NzI0MlwiLFxuICAgICAgY29tcGxleGl0eTogNTIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IGRvbWFpbk51bWJlclRvUmVhbE51bWJlcihcIkFyY3RhblwiKSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgXCJBcmN0YW5cIiwgb3BzMlswXSk/LnNpbXBsaWZ5KCksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiQXJjdGFuXCIsIG9wczJbMF0pLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcIk5cIiwgXCJBcmN0YW5cIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIEFyY3RhbjI6IHtcbiAgICAgIHdpa2lkYXRhOiBcIlE3NzY1OThcIixcbiAgICAgIGNvbXBsZXhpdHk6IDUyMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBbXCJGdW5jdGlvblwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiLCBcIk51bWJlclwiXSxcbiAgICAgICAgTjogKF9jZSwgb3BzMikgPT4gYXBwbHkyTihvcHMyWzBdLCBvcHMyWzFdLCBNYXRoLmF0YW4yLCAoYSwgYikgPT4gRGVjaW1hbC5hdGFuMihhLCBiKSlcbiAgICAgIH1cbiAgICB9LFxuICAgIENvczoge1xuICAgICAgY29tcGxleGl0eTogNTA1MCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiTnVtYmVyXCIsIFtcIkludGVydmFsXCIsIC0xLCAxXV0sXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IGNvbnN0cnVjdGlibGVWYWx1ZXMoY2UsIFwiQ29zXCIsIG9wczJbMF0pPy5zaW1wbGlmeSgpID8/IGNlLmJveChbXCJTaW5cIiwgW1wiQWRkXCIsIG9wczJbMF0sIFtcIk11bHRpcGx5XCIsIFwiSGFsZlwiLCBcIlBpXCJdXV0pLnNpbXBsaWZ5KCksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiQ29zXCIsIG9wczJbMF0pLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcIk5cIiwgXCJDb3NcIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFRhbjoge1xuICAgICAgLy8gUmFuZ2U6ICdSZWFsTnVtYmVyJyxcbiAgICAgIGNvbXBsZXhpdHk6IDUxMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiB0cmlnRnVuY3Rpb24oXCJUYW5cIiksXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IGNvbnN0cnVjdGlibGVWYWx1ZXMoY2UsIFwiVGFuXCIsIG9wczJbMF0pPy5zaW1wbGlmeSgpID8/IGNlLmJveChbXCJEaXZpZGVcIiwgW1wiU2luXCIsIG9wczJbMF1dLCBbXCJDb3NcIiwgb3BzMlswXV1dKS5zaW1wbGlmeSgpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJldmFsdWF0ZVwiLCBcIlRhblwiLCBvcHMyWzBdKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJOXCIsIFwiVGFuXCIsIG9wczJbMF0pXG4gICAgICB9XG4gICAgfVxuICAgIC8qIGNvbnZlcnRzICh4LCB5KSAtPiAocmFkaXVzLCBhbmdsZSkgKi9cbiAgICAvLyBUb1BvbGFyQ29vcmRpbmF0ZXM6IHtcbiAgICAvLyAgIGRvbWFpbjogJ0Z1bmN0aW9uJyxcbiAgICAvLyAgIG91dHB1dERvbWFpbjogWydUdXBsZU9mJywgJ1JlYWxOdW1iZXInLCAnUmVhbE51bWJlciddLFxuICAgIC8vIH1cbiAgfSxcbiAgLy9cbiAgLy8gRnVuY3Rpb25zIGRlZmluZWQgdXNpbmcgYXJpdGhtZXRpYyBmdW5jdGlvbnMgb3IgYmFzaWNcbiAgLy8gdHJpZ29ub21ldHJpYyBmdW5jdGlvbnMgYWJvdmVcbiAgLy9cbiAge1xuICAgIEFyY29zaDoge1xuICAgICAgY29tcGxleGl0eTogNjIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IGh5cGVyYm9saWNGdW5jdGlvbihcIkFyY29zaFwiKSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgXCJBcmNvc2hcIiwgb3BzMlswXSk/LnNpbXBsaWZ5KCkgPz8gY2UuYm94KFtcbiAgICAgICAgICBcIkxuXCIsXG4gICAgICAgICAgW1wiQWRkXCIsIG9wczJbMF0sIFtcIlNxcnRcIiwgW1wiU3VidHJhY3RcIiwgW1wiU3F1YXJlXCIsIG9wczJbMF1dLCAxXV1dXG4gICAgICAgIF0pLnNpbXBsaWZ5KCksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiQXJjb3NoXCIsIG9wczJbMF0pLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcIk5cIiwgXCJBcmNvc2hcIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIEFyY3Npbjoge1xuICAgICAgY29tcGxleGl0eTogNTUwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IGh5cGVyYm9saWNGdW5jdGlvbihcIkFyY3NpblwiKSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgXCJBcmNzaW5cIiwgb3BzMlswXSk/LnNpbXBsaWZ5KCkgPz8gY2UuYm94KFtcbiAgICAgICAgICBcIk11bHRpcGx5XCIsXG4gICAgICAgICAgMixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBcIkFyY3RhbjJcIixcbiAgICAgICAgICAgIG9wczJbMF0sXG4gICAgICAgICAgICBbXCJBZGRcIiwgMSwgW1wiU3FydFwiLCBbXCJTdWJ0cmFjdFwiLCAxLCBbXCJTcXVhcmVcIiwgb3BzMlswXV1dXV1cbiAgICAgICAgICBdXG4gICAgICAgIF0pLnNpbXBsaWZ5KCksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiQXJjc2luXCIsIG9wczJbMF0pLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcIk5cIiwgXCJBcmNzaW5cIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vTm90ZTogQXJzaW5oLCBub3QgQXJDc2luaFxuICAgIEFyc2luaDoge1xuICAgICAgY29tcGxleGl0eTogNjEwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IGh5cGVyYm9saWNGdW5jdGlvbihcIkFyc2luaFwiKSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgXCJBcnNpbmhcIiwgb3BzMlswXSk/LnNpbXBsaWZ5KCkgPz8gY2UuYm94KFtcbiAgICAgICAgICBcIkxuXCIsXG4gICAgICAgICAgW1wiQWRkXCIsIG9wczJbMF0sIFtcIlNxcnRcIiwgW1wiQWRkXCIsIFtcIlNxdWFyZVwiLCBvcHMyWzBdXSwgMV1dXVxuICAgICAgICBdKS5zaW1wbGlmeSgpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJldmFsdWF0ZVwiLCBcIkFyc2luaFwiLCBvcHMyWzBdKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJOXCIsIFwiQXJzaW5oXCIsIG9wczJbMF0pXG4gICAgICB9XG4gICAgfSxcbiAgICBBcnRhbmg6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDYzMDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBoeXBlcmJvbGljRnVuY3Rpb24oXCJBcnRhbmhcIiksXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IGNvbnN0cnVjdGlibGVWYWx1ZXMoY2UsIFwiQXJ0YW5oXCIsIG9wczJbMF0pPy5zaW1wbGlmeSgpID8/IGNlLmJveChbXG4gICAgICAgICAgXCJNdWx0aXBseVwiLFxuICAgICAgICAgIFwiSGFsZlwiLFxuICAgICAgICAgIFtcIkxuXCIsIFtcIkRpdmlkZVwiLCBbXCJBZGRcIiwgMSwgb3BzMlswXV0sIFtcIlN1YnRyYWN0XCIsIDEsIG9wczJbMF1dXV1cbiAgICAgICAgXSkuc2ltcGxpZnkoKSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiZXZhbHVhdGVcIiwgXCJBcnRhbmhcIiwgb3BzMlswXSksXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiTlwiLCBcIkFydGFuaFwiLCBvcHMyWzBdKVxuICAgICAgfVxuICAgIH0sXG4gICAgQ29zaDoge1xuICAgICAgY29tcGxleGl0eTogNjA1MCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IGh5cGVyYm9saWNGdW5jdGlvbihcIkNvc2hcIiksXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IGNvbnN0cnVjdGlibGVWYWx1ZXMoY2UsIFwiQ29zaFwiLCBvcHMyWzBdKT8uc2ltcGxpZnkoKSA/PyBjZS5ib3goW1xuICAgICAgICAgIFwiTXVsdGlwbHlcIixcbiAgICAgICAgICBcIkhhbGZcIixcbiAgICAgICAgICBbXCJBZGRcIiwgW1wiRXhwXCIsIG9wczJbMF1dLCBbXCJFeHBcIiwgW1wiTmVnYXRlXCIsIG9wczJbMF1dXV1cbiAgICAgICAgXSkuc2ltcGxpZnkoKSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiZXZhbHVhdGVcIiwgXCJDb3NoXCIsIG9wczJbMF0pLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcIk5cIiwgXCJDb3NoXCIsIG9wczJbMF0pXG4gICAgICB9XG4gICAgfSxcbiAgICBDb3Q6IHtcbiAgICAgIGNvbXBsZXhpdHk6IDU2MDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiB0cmlnRnVuY3Rpb24oXCJDb3RcIiksXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IGNvbnN0cnVjdGlibGVWYWx1ZXMoY2UsIFwiQ290XCIsIG9wczJbMF0pPy5zaW1wbGlmeSgpID8/IGNlLmJveChbXCJEaXZpZGVcIiwgW1wiQ29zXCIsIG9wczJbMF1dLCBbXCJTaW5cIiwgb3BzMlswXV1dKS5zaW1wbGlmeSgpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJldmFsdWF0ZVwiLCBcIkNvdFwiLCBvcHMyWzBdKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJOXCIsIFwiQ290XCIsIG9wczJbMF0pXG4gICAgICB9XG4gICAgfSxcbiAgICBDc2M6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkNvc2VjYW50XCIsXG4gICAgICBjb21wbGV4aXR5OiA1NjAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogdHJpZ0Z1bmN0aW9uKFwiQ3NjXCIpLFxuICAgICAgICBzaW1wbGlmeTogKGNlLCBvcHMyKSA9PiBjb25zdHJ1Y3RpYmxlVmFsdWVzKGNlLCBcIkNzY1wiLCBvcHMyWzBdKT8uc2ltcGxpZnkoKSA/PyBjZS5ib3goW1wiRGl2aWRlXCIsIDEsIFtcIlNpblwiLCBvcHMyWzBdXV0pLnNpbXBsaWZ5KCksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiQ3NjXCIsIG9wczJbMF0pLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcIk5cIiwgXCJDc2NcIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiA9IHNpbih6LzIpXjIgPSAoMSAtIGNvcyB6KSAvIDIqL1xuICAgIEhhdmVyc2luZToge1xuICAgICAgd2lraWRhdGE6IFwiUTI1MjgzODBcIixcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCIsIFtcIkludGVydmFsXCIsIDAsIDFdXSxcbiAgICAgICAgZXZhbHVhdGU6IFtcIkxhbWJkYVwiLCBbXCJEaXZpZGVcIiwgW1wiU3VidHJhY3RcIiwgMSwgW1wiQ29zXCIsIFwiXzFcIl1dLCAyXV1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKiA9IDIgKiBBcmNzaW4oU3FydCh6KSkgKi9cbiAgICBJbnZlcnNlSGF2ZXJzaW5lOiB7XG4gICAgICAvLyAgUmFuZ2UgWydJbnRlcnZhbCcsIFtbJ05lZ2F0ZScsICdQaSddLCAnUGknXSxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiRXh0ZW5kZWRSZWFsTnVtYmVyXCIsIFwiUmVhbE51bWJlclwiXSxcbiAgICAgICAgZXZhbHVhdGU6IFtcIkxhbWJkYVwiLCBbXCJNdWx0aXBseVwiLCAyLCBbXCJBcmNzaW5cIiwgW1wiU3FydFwiLCBcIl8xXCJdXV1dXG4gICAgICB9XG4gICAgfSxcbiAgICBTZWM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNlY2FudCwgaW52ZXJzZSBvZiBjb3NpbmVcIixcbiAgICAgIGNvbXBsZXhpdHk6IDU1MDAsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiB0cmlnRnVuY3Rpb24oXCJTZWNcIiksXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IGNvbnN0cnVjdGlibGVWYWx1ZXMoY2UsIFwiU2VjXCIsIG9wczJbMF0pPy5zaW1wbGlmeSgpID8/IGNlLmJveChbXCJEaXZpZGVcIiwgMSwgW1wiQ29zXCIsIG9wczJbMF1dXSkuc2ltcGxpZnkoKSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiZXZhbHVhdGVcIiwgXCJTZWNcIiwgb3BzMlswXSksXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiTlwiLCBcIlNlY1wiLCBvcHMyWzBdKVxuICAgICAgfVxuICAgIH0sXG4gICAgU2luaDoge1xuICAgICAgLy8gUmFuZ2U6IFsnSW50ZXJ2YWwnLCAtSW5maW5pdHksIEluZmluaXR5XSxcbiAgICAgIGNvbXBsZXhpdHk6IDZlMyxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IGh5cGVyYm9saWNGdW5jdGlvbihcIlNpbmhcIiksXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IGNvbnN0cnVjdGlibGVWYWx1ZXMoY2UsIFwiU2luaFwiLCBvcHMyWzBdKT8uc2ltcGxpZnkoKSA/PyBjZS5ib3goW1xuICAgICAgICAgIFwiTXVsdGlwbHlcIixcbiAgICAgICAgICBcIkhhbGZcIixcbiAgICAgICAgICBbXCJTdWJ0cmFjdFwiLCBbXCJFeHBcIiwgb3BzMlswXV0sIFtcIkV4cFwiLCBbXCJOZWdhdGVcIiwgb3BzMlswXV1dXVxuICAgICAgICBdKS5zaW1wbGlmeSgpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJldmFsdWF0ZVwiLCBcIlNpbmhcIiwgb3BzMlswXSksXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiTlwiLCBcIlNpbmhcIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBDc2NoOiB7XG4gICAgICBjb21wbGV4aXR5OiA2MjAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogZG9tYWluTnVtYmVyVG9SZWFsTnVtYmVyKFwiQ3NjaFwiKSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgXCJDc2NoXCIsIG9wczJbMF0pPy5zaW1wbGlmeSgpID8/IGNlLmJveChbXCJEaXZpZGVcIiwgMSwgW1wiU2luaFwiLCBvcHMyWzBdXV0pLnNpbXBsaWZ5KCksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiQ3NjaFwiLCBvcHMyWzBdKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJOXCIsIFwiQ3NjaFwiLCBvcHMyWzBdKVxuICAgICAgfVxuICAgIH0sXG4gICAgU2VjaDoge1xuICAgICAgY29tcGxleGl0eTogNjIwMCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IFtcIkZ1bmN0aW9uXCIsIFwiTnVtYmVyXCIsIFtcIkludGVydmFsXCIsIC0xLCAxXV0sXG4gICAgICAgIHNpbXBsaWZ5OiAoY2UsIG9wczIpID0+IGNvbnN0cnVjdGlibGVWYWx1ZXMoY2UsIFwiU2VjaFwiLCBvcHMyWzBdKT8uc2ltcGxpZnkoKSA/PyBjZS5ib3goW1wiRGl2aWRlXCIsIDEsIFtcIkNvc2hcIiwgb3BzMlswXV1dKS5zaW1wbGlmeSgpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJldmFsdWF0ZVwiLCBcIlNlY2hcIiwgb3BzMlswXSksXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiTlwiLCBcIlNlY2hcIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFRhbmg6IHtcbiAgICAgIC8vIFJhbmdlOiBbJ0ludGVydmFsJywgLUluZmluaXR5LCBJbmZpbml0eV0sXG4gICAgICBjb21wbGV4aXR5OiA2MjAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogaHlwZXJib2xpY0Z1bmN0aW9uKFwiVGFuaFwiKSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgXCJUYW5oXCIsIG9wczJbMF0pPy5zaW1wbGlmeSgpID8/IGNlLmJveChbXCJEaXZpZGVcIiwgW1wiU2luaFwiLCBvcHMyWzBdXSwgW1wiQ29zaFwiLCBvcHMyWzBdXV0pLnNpbXBsaWZ5KCksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiVGFuaFwiLCBvcHMyWzBdKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJOXCIsIFwiVGFuaFwiLCBvcHMyWzBdKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIEFyY2Nvczoge1xuICAgICAgY29tcGxleGl0eTogNTU1MCxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IGRvbWFpbk51bWJlclRvUmVhbE51bWJlcihcIkFyY2Nvc1wiKSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgXCJBcmNjb3NcIiwgb3BzMlswXSk/LnNpbXBsaWZ5KCkgPz8gY2UuYm94KFtcIlN1YnRyYWN0XCIsIFtcIkRpdmlkZVwiLCBcIlBpXCIsIDJdLCBbXCJBcmNzaW5cIiwgb3BzMlswXV1dKS5zaW1wbGlmeSgpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJldmFsdWF0ZVwiLCBcIkFyY2Nvc1wiLCBvcHMyWzBdKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJOXCIsIFwiQXJjY29zXCIsIG9wczJbMF0pXG4gICAgICB9XG4gICAgfSxcbiAgICBBcmNjb3Q6IHtcbiAgICAgIG51bWVyaWM6IHRydWUsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBkb21haW5OdW1iZXJUb1JlYWxOdW1iZXIoXCJBcmNjb3RcIiksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiQXJjY290XCIsIG9wczJbMF0pLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcIk5cIiwgXCJBcmNjb3RcIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIEFyY290aDoge1xuICAgICAgbnVtZXJpYzogdHJ1ZSxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IGRvbWFpbk51bWJlclRvUmVhbE51bWJlcihcIkFyY290aFwiKSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiZXZhbHVhdGVcIiwgXCJBcmNvdGhcIiwgb3BzMlswXSksXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiTlwiLCBcIkFyY290aFwiLCBvcHMyWzBdKVxuICAgICAgfVxuICAgIH0sXG4gICAgQXJjc2NoOiB7XG4gICAgICBudW1lcmljOiB0cnVlLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogZG9tYWluTnVtYmVyVG9SZWFsTnVtYmVyKFwiQXJjc2NoXCIpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJldmFsdWF0ZVwiLCBcIkFyY3NjaFwiLCBvcHMyWzBdKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJOXCIsIFwiQXJjc2NoXCIsIG9wczJbMF0pXG4gICAgICB9XG4gICAgfSxcbiAgICBBcmNzZWM6IHtcbiAgICAgIG51bWVyaWM6IHRydWUsXG4gICAgICBzaWduYXR1cmU6IHtcbiAgICAgICAgZG9tYWluOiBkb21haW5OdW1iZXJUb1JlYWxOdW1iZXIoXCJBcmNzZWNcIiksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiQXJjc2VjXCIsIG9wczJbMF0pLFxuICAgICAgICBOOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcIk5cIiwgXCJBcmNzZWNcIiwgb3BzMlswXSlcbiAgICAgIH1cbiAgICB9LFxuICAgIEFyc2VjaDoge1xuICAgICAgbnVtZXJpYzogdHJ1ZSxcbiAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICBkb21haW46IGRvbWFpbk51bWJlclRvUmVhbE51bWJlcihcIkFyc2VjaFwiKSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiZXZhbHVhdGVcIiwgXCJBcnNlY2hcIiwgb3BzMlswXSksXG4gICAgICAgIE46IChjZSwgb3BzMikgPT4gZXZhbFRyaWcoY2UsIFwiTlwiLCBcIkFyc2VjaFwiLCBvcHMyWzBdKVxuICAgICAgfVxuICAgIH0sXG4gICAgQXJjY3NjOiB7XG4gICAgICBudW1lcmljOiB0cnVlLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogZG9tYWluTnVtYmVyVG9SZWFsTnVtYmVyKFwiQXJjY3NjXCIpLFxuICAgICAgICBldmFsdWF0ZTogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJldmFsdWF0ZVwiLCBcIkFyY2NzY1wiLCBvcHMyWzBdKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJOXCIsIFwiQXJjY3NjXCIsIG9wczJbMF0pXG4gICAgICB9XG4gICAgfSxcbiAgICBDb3RoOiB7XG4gICAgICBjb21wbGV4aXR5OiA2MzAwLFxuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogaHlwZXJib2xpY0Z1bmN0aW9uKFwiQ290aFwiKSxcbiAgICAgICAgc2ltcGxpZnk6IChjZSwgb3BzMikgPT4gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgXCJDb3RoXCIsIG9wczJbMF0pPy5zaW1wbGlmeSgpID8/IGNlLmJveChbXCJEaXZpZGVcIiwgMSwgW1wiVGFuaFwiLCBvcHMyWzBdXV0pLnNpbXBsaWZ5KCksXG4gICAgICAgIGV2YWx1YXRlOiAoY2UsIG9wczIpID0+IGV2YWxUcmlnKGNlLCBcImV2YWx1YXRlXCIsIFwiQ290aFwiLCBvcHMyWzBdKSxcbiAgICAgICAgTjogKGNlLCBvcHMyKSA9PiBldmFsVHJpZyhjZSwgXCJOXCIsIFwiQ290aFwiLCBvcHMyWzBdKVxuICAgICAgfVxuICAgIH0sXG4gICAgLyogY29udmVydHMgKHJhZGl1cywgYW5nbGUpIC0+ICh4LCB5KSAqL1xuICAgIC8vIEZyb21Qb2xhckNvb3JkaW5hdGVzOiB7XG4gICAgLy8gICBkb21haW46ICdGdW5jdGlvbicsXG4gICAgLy8gICBvdXRwdXREb21haW46IFsnVHVwbGVPZicsICdSZWFsTnVtYmVyJywgJ1JlYWxOdW1iZXInXSxcbiAgICAvLyB9LFxuICAgIEludmVyc2VGdW5jdGlvbjoge1xuICAgICAgc2lnbmF0dXJlOiB7XG4gICAgICAgIGRvbWFpbjogW1wiRnVuY3Rpb25cIiwgXCJGdW5jdGlvblwiLCBcIkZ1bmN0aW9uXCJdLFxuICAgICAgICBjYW5vbmljYWw6IChjZSwgb3BzMikgPT4ge1xuICAgICAgICAgIG9wczIgPSB2YWxpZGF0ZUFyZ3VtZW50Q291bnQoY2UsIGZsYXR0ZW5TZXF1ZW5jZShjYW5vbmljYWwob3BzMikpLCAxKTtcbiAgICAgICAgICByZXR1cm4gcHJvY2Vzc0ludmVyc2VGdW5jdGlvbihjZSwgb3BzMikgPz8gY2UuX2ZuKFwiSW52ZXJzZUZ1bmN0aW9uXCIsIG9wczIpO1xuICAgICAgICB9LFxuICAgICAgICBzaW1wbGlmeTogKGNlLCBvcHMyKSA9PiBwcm9jZXNzSW52ZXJzZUZ1bmN0aW9uKGNlLCBvcHMyKSxcbiAgICAgICAgZXZhbHVhdGU6IChjZSwgb3BzMikgPT4gcHJvY2Vzc0ludmVyc2VGdW5jdGlvbihjZSwgb3BzMilcbiAgICAgIH1cbiAgICB9XG4gIH1cbl07XG52YXIgUzIgPSBbXCJTcXJ0XCIsIDJdO1xudmFyIFMzID0gW1wiU3FydFwiLCAzXTtcbnZhciBTNSA9IFtcIlNxcnRcIiwgNV07XG52YXIgUzYgPSBbXCJTcXJ0XCIsIDZdO1xudmFyIENPTlNUUlVDVElCTEVfVkFMVUVTID0gW1xuICBbXG4gICAgWzAsIDFdLFxuICAgIHtcbiAgICAgIFNpbjogMCxcbiAgICAgIENvczogMSxcbiAgICAgIFRhbjogMCxcbiAgICAgIENvdDogTmFOLFxuICAgICAgU2VjOiAxLFxuICAgICAgQ3NjOiBOYU5cbiAgICB9XG4gIF0sXG4gIFtcbiAgICBbMSwgMTJdLFxuICAgIHtcbiAgICAgIFNpbjogW1wiRGl2aWRlXCIsIFtcIlN1YnRyYWN0XCIsIFM2LCBTMl0sIDRdLFxuICAgICAgQ29zOiBbXCJEaXZpZGVcIiwgW1wiQWRkXCIsIFM2LCBTMl0sIDRdLFxuICAgICAgVGFuOiBbXCJTdWJ0cmFjdFwiLCAyLCBTM10sXG4gICAgICBDb3Q6IFtcIkFkZFwiLCAyLCBTM10sXG4gICAgICBTZWM6IFtcIlN1YnRyYWN0XCIsIFM2LCBTMl0sXG4gICAgICBDc2M6IFtcIkFkZFwiLCBTNiwgUzJdXG4gICAgfVxuICBdLFxuICBbXG4gICAgWzEsIDEwXSxcbiAgICB7XG4gICAgICBTaW46IFtcIkRpdmlkZVwiLCBbXCJTdWJ0cmFjdFwiLCBTNSwgMV0sIDRdLFxuICAgICAgQ29zOiBbXCJEaXZpZGVcIiwgW1wiU3FydFwiLCBbXCJBZGRcIiwgMTAsIFtcIk11bHRpcGx5XCIsIDIsIFM1XV1dLCA0XSxcbiAgICAgIFRhbjogW1wiRGl2aWRlXCIsIFtcIlNxcnRcIiwgW1wiU3VidHJhY3RcIiwgMjUsIFtcIk11bHRpcGx5XCIsIDEwLCBTNV1dXSwgNF0sXG4gICAgICBDb3Q6IFtcIlNxcnRcIiwgW1wiQWRkXCIsIDUsIFtcIk11bHRpcGx5XCIsIDIsIFM1XV1dLFxuICAgICAgU2VjOiBbXCJEaXZpZGVcIiwgW1wiU3FydFwiLCBbXCJTdWJ0cmFjdFwiLCA1MCwgW1wiTXVsdGlwbHlcIiwgMTAsIFM1XV1dLCA1XSxcbiAgICAgIENzYzogW1wiQWRkXCIsIDEsIFM1XVxuICAgIH1cbiAgXSxcbiAgW1xuICAgIFsxLCA4XSxcbiAgICB7XG4gICAgICBTaW46IFwiJFxcXFxmcmFje1xcXFxzcXJ0ezItXFxcXHNxcnQyfX17Mn0kXCIsXG4gICAgICBDb3M6IFwiJFxcXFxmcmFje1xcXFxzcXJ0IHsyK3tcXFxcc3FydCB7Mn19fX17Mn0kXCIsXG4gICAgICBUYW46IFwiJFxcXFxzcXJ0ezJ9IC0gMSRcIixcbiAgICAgIENvdDogXCIkXFxcXHNxcnR7Mn0gKyAxJFwiLFxuICAgICAgU2VjOiBcIiRcXFxcc3FydHsgNCAtIDJcXFxcc3FydHsyfX0kXCIsXG4gICAgICBDc2M6IFwiJFxcXFxzcXJ0eyA0ICsgMlxcXFxzcXJ0ezJ9fSRcIlxuICAgIH1cbiAgXSxcbiAgW1xuICAgIFsxLCA2XSxcbiAgICB7XG4gICAgICBTaW46IFwiJFxcXFxmcmFjezF9ezJ9JFwiLFxuICAgICAgQ29zOiBcIiRcXFxcZnJhY3tcXFxcc3FydHszfX17Mn0kXCIsXG4gICAgICBUYW46IFwiJFxcXFxmcmFje1xcXFxzcXJ0ezN9fXszfSRcIixcbiAgICAgIENvdDogXCIkXFxcXGZyYWN7MlxcXFxzcXJ0ezN9fXszfSRcIixcbiAgICAgIFNlYzogXCIkXFxcXHNxcnR7M30kXCIsXG4gICAgICBDc2M6IDJcbiAgICB9XG4gIF0sXG4gIFtcbiAgICBbMSwgNV0sXG4gICAge1xuICAgICAgU2luOiBcIiRcXFxcZnJhY3tcXFxcc3FydHsxMC0gMlxcXFxzcXJ0ezV9fX0gezR9JFwiLFxuICAgICAgQ29zOiBcIiRcXFxcZnJhY3sxKyBcXFxcc3FydHs1fX0gezR9JFwiLFxuICAgICAgVGFuOiBcIiRcXFxcc3FydHs1LTJcXFxcc3FydDV9JFwiLFxuICAgICAgQ290OiBcIiRcXFxcZnJhY3tcXFxcc3FydHsyNSsxMFxcXFxzcXJ0NX19IHs1fSRcIixcbiAgICAgIFNlYzogXCIkXFxcXHNxcnR7NX0gLSAxJFwiLFxuICAgICAgQ3NjOiBcIiRcXFxcZnJhY3tcXFxcc3FydHs1MCsxMFxcXFxzcXJ0ezV9fX0gezV9JFwiXG4gICAgfVxuICBdLFxuICBbXG4gICAgWzEsIDRdLFxuICAgIHtcbiAgICAgIFNpbjogW1wiRGl2aWRlXCIsIFMyLCAyXSxcbiAgICAgIENvczogW1wiRGl2aWRlXCIsIFMyLCAyXSxcbiAgICAgIFRhbjogMSxcbiAgICAgIENvdDogMSxcbiAgICAgIFNlYzogUzIsXG4gICAgICBDc2M6IFMyXG4gICAgfVxuICBdLFxuICBbXG4gICAgWzMsIDEwXSxcbiAgICB7XG4gICAgICBTaW46IFwiJFxcXFxmcmFjezErIFxcXFxzcXJ0ezV9fSB7NH0kXCIsXG4gICAgICBDb3M6IFwiJFxcXFxmcmFje1xcXFxzcXJ0ezEwLSAyXFxcXHNxcnR7NX19fSB7NH0kXCIsXG4gICAgICBUYW46IFwiJFxcXFxmcmFje1xcXFxzcXJ0ezI1KzEwXFxcXHNxcnQ1fX0gezV9JFwiLFxuICAgICAgQ290OiBcIiRcXFxcc3FydHs1LTJcXFxcc3FydDV9JFwiLFxuICAgICAgU2VjOiBcIiQkXCIsXG4gICAgICBDc2M6IFwiJFxcXFxmcmFje1xcXFxzcXJ0ezUwKzEwXFxcXHNxcnR7NX19fSB7NX0kXCJcbiAgICB9XG4gIF0sXG4gIFtcbiAgICBbMSwgM10sXG4gICAge1xuICAgICAgU2luOiBbXCJEaXZpZGVcIiwgUzMsIDJdLFxuICAgICAgLy8gJyRcXFxcZnJhY3tcXFxcc3FydHszfX17Mn0kJ1xuICAgICAgQ29zOiBcIkhhbGZcIixcbiAgICAgIC8vICckXFxcXGZyYWN7MX17Mn0kJ1xuICAgICAgVGFuOiBTMyxcbiAgICAgIC8vICckXFxcXHNxcnR7M30kJ1xuICAgICAgQ290OiBbXCJEaXZpZGVcIiwgUzMsIDNdLFxuICAgICAgLy8gJyRcXFxcZnJhY3tcXFxcc3FydHszfX17M30kJ1xuICAgICAgU2VjOiAyLFxuICAgICAgQ3NjOiBbXCJEaXZpZGVcIiwgW1wiTXVsdGlwbHlcIiwgMiwgUzNdLCAzXVxuICAgICAgLy8gJyRcXFxcZnJhY3syXFxcXHNxcnR7M319ezN9JCdcbiAgICB9XG4gIF0sXG4gIFtcbiAgICBbMywgOF0sXG4gICAge1xuICAgICAgU2luOiBcIiRcXFxcZnJhY3sgXFxcXHNxcnR7MiArIFxcXFxzcXJ0ezJ9fSB9IHsyfSRcIixcbiAgICAgIENvczogXCIkXFxcXGZyYWN7IFxcXFxzcXJ0ezIgLSBcXFxcc3FydHsyfX0gfSB7Mn0kXCIsXG4gICAgICBUYW46IFwiJFxcXFxzcXJ0ezJ9ICsgMSRcIixcbiAgICAgIENvdDogXCIkXFxcXHNxcnR7Mn0gLSAxJFwiLFxuICAgICAgU2VjOiBcIiRcXFxcc3FydHsgNCArIDIgXFxcXHNxcnR7Mn0gfSRcIixcbiAgICAgIENzYzogXCIkXFxcXHNxcnR7IDQgLSAyIFxcXFxzcXJ0ezJ9IH0kXCJcbiAgICB9XG4gIF0sXG4gIFtcbiAgICBbMiwgNV0sXG4gICAge1xuICAgICAgU2luOiBcIiRcXFxcZnJhY3tcXFxcc3FydHsxMCsgMlxcXFxzcXJ0ezV9fX0gezR9JFwiLFxuICAgICAgQ29zOiBcIiRcXFxcZnJhY3tcXFxcc3FydHs1fS0xfSB7NH0kXCIsXG4gICAgICBUYW46IFwiJFxcXFxzcXJ0ezUrMlxcXFxzcXJ0ezV9fSRcIixcbiAgICAgIENvdDogXCIkXFxcXGZyYWN7XFxcXHNxcnR7MjUtMTBcXFxcc3FydHs1fX19IHs1fSRcIixcbiAgICAgIFNlYzogXCIkMSArIFxcXFxzcXJ0ezV9JFwiLFxuICAgICAgQ3NjOiBcIiRcXFxcZnJhY3tcXFxcc3FydHs1MC0xMFxcXFxzcXJ0ezV9fX0gezV9JFwiXG4gICAgfVxuICBdLFxuICBbXG4gICAgWzUsIDEyXSxcbiAgICB7XG4gICAgICBTaW46IFwiJFxcXFxmcmFje1xcXFxzcXJ0ezZ9ICsgXFxcXHNxcnR7Mn19IHs0fSRcIixcbiAgICAgIENvczogXCIkXFxcXGZyYWN7IFxcXFxzcXJ0ezZ9IC0gXFxcXHNxcnR7Mn19IHs0fSRcIixcbiAgICAgIFRhbjogXCIkMitcXFxcc3FydHszfSRcIixcbiAgICAgIENvdDogXCIkMi1cXFxcc3FydHszfSRcIixcbiAgICAgIFNlYzogXCIkXFxcXHNxcnR7Nn0rXFxcXHNxcnR7Mn0kXCIsXG4gICAgICBDc2M6IFwiJFxcXFxzcXJ0ezZ9IC0gXFxcXHNxcnR7Mn0kXCJcbiAgICB9XG4gIF0sXG4gIFtcbiAgICBbMSwgMl0sXG4gICAge1xuICAgICAgU2luOiAxLFxuICAgICAgQ29zOiAwLFxuICAgICAgVGFuOiBOYU4sXG4gICAgICBDb3Q6IDAsXG4gICAgICBTZWM6IE5hTixcbiAgICAgIENzYzogMVxuICAgIH1cbiAgXVxuXTtcbnZhciBUUklHX0lERU5USVRJRVMgPSB7XG4gIFNpbjogW1xuICAgIFsxLCBcIlNpblwiXSxcbiAgICBbMSwgXCJDb3NcIl0sXG4gICAgWy0xLCBcIlNpblwiXSxcbiAgICBbLTEsIFwiQ29zXCJdXG4gIF0sXG4gIENvczogW1xuICAgIFsxLCBcIkNvc1wiXSxcbiAgICBbLTEsIFwiU2luXCJdLFxuICAgIFstMSwgXCJDb3NcIl0sXG4gICAgWzEsIFwiU2luXCJdXG4gIF0sXG4gIFNlYzogW1xuICAgIFsxLCBcIlNlY1wiXSxcbiAgICBbLTEsIFwiQ3NjXCJdLFxuICAgIFstMSwgXCJTZWNcIl0sXG4gICAgWzEsIFwiQ3NjXCJdXG4gIF0sXG4gIENzYzogW1xuICAgIFsxLCBcIkNzY1wiXSxcbiAgICBbMSwgXCJTZWNcIl0sXG4gICAgWy0xLCBcIkNzY1wiXSxcbiAgICBbLTEsIFwiU2VjXCJdXG4gIF0sXG4gIFRhbjogW1xuICAgIFsxLCBcIlRhblwiXSxcbiAgICBbLTEsIFwiQ290XCJdLFxuICAgIFsxLCBcIlRhblwiXSxcbiAgICBbLTEsIFwiQ290XCJdXG4gIF0sXG4gIENvdDogW1xuICAgIFsxLCBcIkNvdFwiXSxcbiAgICBbLTEsIFwiVGFuXCJdLFxuICAgIFsxLCBcIkNvdFwiXSxcbiAgICBbLTEsIFwiVGFuXCJdXG4gIF1cbn07XG5mdW5jdGlvbiBjb25zdHJ1Y3RpYmxlVmFsdWVzKGNlLCBoZWFkMiwgeCkge1xuICBpZiAoIXgpXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgY29uc3Qgc3BlY2lhbFZhbHVlcyA9IGNlLmNhY2hlKFxuICAgIFwiY29uc3RydWN0aWJsZS10cmlnb25vbWV0cmljLXZhbHVlc1wiLFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgZm9yIChjb25zdCBbdmFsLCByZXN1bHRzXSBvZiBDT05TVFJVQ1RJQkxFX1ZBTFVFUykge1xuICAgICAgICBjb25zdCBib3hlZFJlc3VsdHMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBoZWFkMyBvZiBPYmplY3Qua2V5cyhyZXN1bHRzKSlcbiAgICAgICAgICBib3hlZFJlc3VsdHNbaGVhZDNdID0gY2UucGFyc2UobGF0ZXhTdHJpbmcocmVzdWx0c1toZWFkM10pKSA/PyBjZS5ib3gocmVzdWx0c1toZWFkM10pO1xuICAgICAgICB2YWx1ZXMucHVzaChbdmFsLCBib3hlZFJlc3VsdHNdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSxcbiAgICAoY2FjaGUpID0+IHtcbiAgICAgIGZvciAoY29uc3QgW19rLCB2XSBvZiBjYWNoZSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYyIG9mIE9iamVjdC52YWx1ZXModikpXG4gICAgICAgICAgdjIudW5iaW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuICApO1xuICB4ID0geC5OKCk7XG4gIGlmICh4Lm51bWVyaWNWYWx1ZSA9PT0gbnVsbClcbiAgICByZXR1cm4gdm9pZCAwO1xuICBsZXQgdGhldGEgPSBhc0Zsb2F0KHgpID8/IG51bGw7XG4gIGlmICh0aGV0YSA9PT0gbnVsbClcbiAgICByZXR1cm4gdm9pZCAwO1xuICB0aGV0YSA9IHRoZXRhICUgKDIgKiBNYXRoLlBJKTtcbiAgY29uc3QgaWRlbnRpdHlTaWduID0gaGVhZDIgIT09IFwiQ29zXCIgJiYgaGVhZDIgIT09IFwiU2VjXCIgPyBNYXRoLnNpZ24odGhldGEpIDogMTtcbiAgdGhldGEgPSBNYXRoLmFicyh0aGV0YSk7XG4gIGNvbnN0IHF1YWRyYW50MiA9IE1hdGguZmxvb3IodGhldGEgKiAyIC8gTWF0aC5QSSk7XG4gIHRoZXRhID0gdGhldGEgJSAoTWF0aC5QSSAvIDIpO1xuICBsZXQgc2lnbjI7XG4gIFtzaWduMiwgaGVhZDJdID0gVFJJR19JREVOVElUSUVTW2hlYWQyXT8uW3F1YWRyYW50Ml0gPz8gWzEsIGhlYWQyXTtcbiAgc2lnbjIgPSBzaWduMiAqIGlkZW50aXR5U2lnbjtcbiAgZm9yIChjb25zdCBbW24sIGRdLCByZXN1bHRdIG9mIHNwZWNpYWxWYWx1ZXMpIHtcbiAgICBpZiAocmVzdWx0W2hlYWQyXSAmJiBjZS5jaG9wKHRoZXRhIC0gTWF0aC5QSSAqIG4gLyBkKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHNpZ24yIDwgMCA/IGNhbm9uaWNhbE5lZ2F0ZShyZXN1bHRbaGVhZDJdKSA6IHJlc3VsdFtoZWFkMl07XG4gICAgfVxuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBwcm9jZXNzSW52ZXJzZUZ1bmN0aW9uKGNlLCB4cykge1xuICBpZiAoeHMubGVuZ3RoICE9PSAxKVxuICAgIHJldHVybiB2b2lkIDA7XG4gIGNvbnN0IGV4cHIgPSB4c1swXTtcbiAgY29uc3QgaGVhZDIgPSBleHByLnN5bWJvbDtcbiAgaWYgKHR5cGVvZiBoZWFkMiAhPT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gdm9pZCAwO1xuICBpZiAoaGVhZDIgPT09IFwiSW52ZXJzZUZ1bmN0aW9uXCIpXG4gICAgcmV0dXJuIGV4cHIub3AxO1xuICBjb25zdCBuZXdIZWFkID0ge1xuICAgIFNpbjogXCJBcmNzaW5cIixcbiAgICBDb3M6IFwiQXJjY29zXCIsXG4gICAgVGFuOiBcIkFyY3RhblwiLFxuICAgIFNlYzogXCJBcmNzZWNcIixcbiAgICBDc2M6IFwiIEFyY2NzY1wiLFxuICAgIFNpbmg6IFwiQXJzaW5oXCIsXG4gICAgQ29zaDogXCJBcmNvc2hcIixcbiAgICBUYW5oOiBcIkFydGFuaFwiLFxuICAgIFNlY2g6IFwiQXJjc2VjaFwiLFxuICAgIENzY2g6IFwiQXJjc2NoXCIsXG4gICAgQXJjb3NoOiBcIkNvc2hcIixcbiAgICBBcmNjb3M6IFwiQ29zXCIsXG4gICAgQXJjY3NjOiBcIkNzY1wiLFxuICAgIEFyY3NjaDogXCJDc2NoXCIsXG4gICAgLy8gJz8/JzogJ0NvdCcsXG4gICAgLy8gJz8/JzogJ0NvdGgnLFxuICAgIEFyY3NlYzogXCJTZWNcIixcbiAgICBBcmNzaW46IFwiU2luXCIsXG4gICAgQXJzaW5oOiBcIlNpbmhcIixcbiAgICBBcmN0YW46IFwiVGFuXCIsXG4gICAgQXJ0YW5oOiBcIlRhbmhcIlxuICB9W2hlYWQyXTtcbiAgcmV0dXJuIG5ld0hlYWQgPyBjZS5zeW1ib2wobmV3SGVhZCkgOiB2b2lkIDA7XG59XG5mdW5jdGlvbiBldmFsVHJpZyhjZSwgbW9kZSwgaGVhZDIsIG9wMykge1xuICBpZiAoIW9wMylcbiAgICByZXR1cm4gdm9pZCAwO1xuICBpZiAobW9kZSA9PT0gXCJldmFsdWF0ZVwiKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gY29uc3RydWN0aWJsZVZhbHVlcyhjZSwgaGVhZDIsIG9wMyk/LmV2YWx1YXRlKCk7XG4gICAgaWYgKHJlc3VsdClcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgaWYgKG9wMy5pc0V4YWN0KVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBzd2l0Y2ggKGhlYWQyKSB7XG4gICAgY2FzZSBcIkFyY2Nvc1wiOlxuICAgICAgcmV0dXJuIGFwcGx5TihcbiAgICAgICAgb3AzLFxuICAgICAgICBNYXRoLmFjb3MsXG4gICAgICAgICh4KSA9PiB4LmFjb3MoKSxcbiAgICAgICAgKHgpID0+IHguYWNvcygpXG4gICAgICApO1xuICAgIGNhc2UgXCJBcmNjb3RcIjpcbiAgICAgIHJldHVybiBhcHBseU4oXG4gICAgICAgIG9wMyxcbiAgICAgICAgKHgpID0+IE1hdGguYXRhbjIoMSwgeCksXG4gICAgICAgICh4KSA9PiBEZWNpbWFsLmF0YW4yKGNlLl9CSUdOVU1fT05FLCB4KSxcbiAgICAgICAgKHgpID0+IHguaW52ZXJzZSgpLmF0YW4oKVxuICAgICAgKTtcbiAgICBjYXNlIFwiQXJjY3NjXCI6XG4gICAgICByZXR1cm4gYXBwbHlOKFxuICAgICAgICBvcDMsXG4gICAgICAgICh4KSA9PiBNYXRoLmFzaW4oMSAvIHgpLFxuICAgICAgICAoeCkgPT4gY2UuX0JJR05VTV9PTkUuZGl2KHgpLmFzaW4oKSxcbiAgICAgICAgKHgpID0+IHguaW52ZXJzZSgpLmFzaW4oKVxuICAgICAgKTtcbiAgICBjYXNlIFwiQXJjb3NoXCI6XG4gICAgICByZXR1cm4gYXBwbHlOKFxuICAgICAgICBvcDMsXG4gICAgICAgIE1hdGguYWNvc2gsXG4gICAgICAgICh4KSA9PiB4LmFjb3NoKCksXG4gICAgICAgICh4KSA9PiB4LmFjb3NoKClcbiAgICAgICk7XG4gICAgY2FzZSBcIkFyY290aFwiOlxuICAgICAgcmV0dXJuIGFwcGx5TihcbiAgICAgICAgb3AzLFxuICAgICAgICAoeCkgPT4geCxcbiAgICAgICAgKHgpID0+IHguYWNvc2goKSxcbiAgICAgICAgKHgpID0+IHguYWNvc2goKVxuICAgICAgKTtcbiAgICBjYXNlIFwiQXJjc2NoXCI6XG4gICAgICByZXR1cm4gYXBwbHlOKFxuICAgICAgICBvcDMsXG4gICAgICAgICh4KSA9PiBNYXRoLmxvZygxIC8geCArIE1hdGguc3FydCgxIC8gKHggKiB4KSArIDEpKSxcbiAgICAgICAgKHgpID0+IGNlLl9CSUdOVU1fT05FLmRpdih4Lm11bCh4KSkuYWRkKGNlLl9CSUdOVU1fT05FKS5zcXJ0KCkuYWRkKGNlLl9CSUdOVU1fT05FLmRpdih4KSkubG9nKCksXG4gICAgICAgICh4KSA9PiB4Lm11bCh4KS5pbnZlcnNlKCkuYWRkKDEpLnNxcnQoKS5hZGQoeC5pbnZlcnNlKCkpLmxvZygpXG4gICAgICApO1xuICAgIGNhc2UgXCJBcmNzZWNcIjpcbiAgICAgIHJldHVybiBhcHBseU4oXG4gICAgICAgIG9wMyxcbiAgICAgICAgKHgpID0+IE1hdGguYWNvcygxIC8geCksXG4gICAgICAgICh4KSA9PiBjZS5fQklHTlVNX09ORS5kaXYoeCkuYWNvcygpLFxuICAgICAgICAoeCkgPT4geC5pbnZlcnNlKCkuYWNvcygpXG4gICAgICApO1xuICAgIGNhc2UgXCJBcmNzaW5cIjpcbiAgICAgIHJldHVybiBhcHBseU4oXG4gICAgICAgIG9wMyxcbiAgICAgICAgTWF0aC5hc2luLFxuICAgICAgICAoeCkgPT4geC5hc2luKCksXG4gICAgICAgICh4KSA9PiB4LmFzaW4oKVxuICAgICAgKTtcbiAgICBjYXNlIFwiQXJzZWNoXCI6XG4gICAgICByZXR1cm4gYXBwbHlOKFxuICAgICAgICBvcDMsXG4gICAgICAgICh4KSA9PiBNYXRoLmxvZygoMSArIE1hdGguc3FydCgxIC0geCAqIHgpKSAvIHgpLFxuICAgICAgICAoeCkgPT4gY2UuX0JJR05VTV9PTkUuc3ViKHgubXVsKHgpLmFkZChjZS5fQklHTlVNX09ORSkuZGl2KHgpKS5sb2coKSxcbiAgICAgICAgKHgpID0+IGNlLmNvbXBsZXgoMSkuc3ViKHgubXVsKHgpKS5hZGQoMSkuZGl2KHgpLmxvZygpXG4gICAgICApO1xuICAgIGNhc2UgXCJBcnNpbmhcIjpcbiAgICAgIHJldHVybiBhcHBseU4oXG4gICAgICAgIG9wMyxcbiAgICAgICAgTWF0aC5hc2luaCxcbiAgICAgICAgKHgpID0+IHguYXNpbmgoKSxcbiAgICAgICAgKHgpID0+IHguYXNpbmgoKVxuICAgICAgKTtcbiAgICBjYXNlIFwiQXJjdGFuXCI6XG4gICAgICByZXR1cm4gYXBwbHlOKFxuICAgICAgICBvcDMsXG4gICAgICAgIE1hdGguYXRhbixcbiAgICAgICAgKHgpID0+IHguYXRhbigpLFxuICAgICAgICAoeCkgPT4geC5hdGFuKClcbiAgICAgICk7XG4gICAgY2FzZSBcIkFydGFuaFwiOlxuICAgICAgcmV0dXJuIGFwcGx5TihcbiAgICAgICAgb3AzLFxuICAgICAgICBNYXRoLmF0YW5oLFxuICAgICAgICAoeCkgPT4geC5hdGFuaCgpLFxuICAgICAgICAoeCkgPT4geC5hdGFuaCgpXG4gICAgICApO1xuICAgIGNhc2UgXCJDb3NcIjpcbiAgICAgIHJldHVybiBhcHBseU4oXG4gICAgICAgIG9wMyxcbiAgICAgICAgTWF0aC5jb3MsXG4gICAgICAgICh4KSA9PiB4LnRvU2lnbmlmaWNhbnREaWdpdHMoY2UucHJlY2lzaW9uICsgNCkuY29zKCkudG9TaWduaWZpY2FudERpZ2l0cyhjZS5wcmVjaXNpb24pLFxuICAgICAgICAoeCkgPT4geC5jb3MoKVxuICAgICAgKTtcbiAgICBjYXNlIFwiQ29zaFwiOlxuICAgICAgcmV0dXJuIGFwcGx5TihcbiAgICAgICAgb3AzLFxuICAgICAgICBNYXRoLmNvc2gsXG4gICAgICAgICh4KSA9PiB4LmNvc2goKSxcbiAgICAgICAgKHgpID0+IHguY29zaCgpXG4gICAgICApO1xuICAgIGNhc2UgXCJDb3RcIjpcbiAgICAgIHJldHVybiBhcHBseU4oXG4gICAgICAgIG9wMyxcbiAgICAgICAgKHgpID0+IDEgLyBNYXRoLnRhbih4KSxcbiAgICAgICAgKHgpID0+IGNlLl9CSUdOVU1fT05FLmRpdih4LnRhbigpKSxcbiAgICAgICAgKHgpID0+IHgudGFuKCkuaW52ZXJzZSgpXG4gICAgICApO1xuICAgIGNhc2UgXCJDb3RoXCI6XG4gICAgICByZXR1cm4gYXBwbHlOKFxuICAgICAgICBvcDMsXG4gICAgICAgICh4KSA9PiAxIC8gTWF0aC50YW5oKHgpLFxuICAgICAgICAoeCkgPT4gY2UuX0JJR05VTV9PTkUuZGl2KHgudGFuaCgpKSxcbiAgICAgICAgKHgpID0+IHgudGFuaCgpLmludmVyc2UoKVxuICAgICAgKTtcbiAgICBjYXNlIFwiQ3NjXCI6XG4gICAgICByZXR1cm4gYXBwbHlOKFxuICAgICAgICBvcDMsXG4gICAgICAgICh4KSA9PiAxIC8gTWF0aC5zaW4oeCksXG4gICAgICAgICh4KSA9PiBjZS5fQklHTlVNX09ORS5kaXYoeC5zaW4oKSksXG4gICAgICAgICh4KSA9PiB4LnNpbigpLmludmVyc2UoKVxuICAgICAgKTtcbiAgICBjYXNlIFwiQ3NjaFwiOlxuICAgICAgcmV0dXJuIGFwcGx5TihcbiAgICAgICAgb3AzLFxuICAgICAgICAoeCkgPT4gMSAvIE1hdGguc2luaCh4KSxcbiAgICAgICAgKHgpID0+IGNlLl9CSUdOVU1fT05FLmRpdih4LnNpbmgoKSksXG4gICAgICAgICh4KSA9PiB4LnNpbmgoKS5pbnZlcnNlKClcbiAgICAgICk7XG4gICAgY2FzZSBcIlNlY1wiOlxuICAgICAgcmV0dXJuIGFwcGx5TihcbiAgICAgICAgb3AzLFxuICAgICAgICAoeCkgPT4gMSAvIE1hdGguY29zKHgpLFxuICAgICAgICAoeCkgPT4gY2UuX0JJR05VTV9PTkUuZGl2KHguY29zKCkpLFxuICAgICAgICAoeCkgPT4geC5jb3MoKS5pbnZlcnNlKClcbiAgICAgICk7XG4gICAgY2FzZSBcIlNlY2hcIjpcbiAgICAgIHJldHVybiBhcHBseU4oXG4gICAgICAgIG9wMyxcbiAgICAgICAgKHgpID0+IDEgLyBNYXRoLmNvc2goeCksXG4gICAgICAgICh4KSA9PiBjZS5fQklHTlVNX09ORS5kaXYoeC5jb3NoKCkpLFxuICAgICAgICAoeCkgPT4geC5jb3NoKCkuaW52ZXJzZSgpXG4gICAgICApO1xuICAgIGNhc2UgXCJTaW5cIjpcbiAgICAgIHJldHVybiBhcHBseU4oXG4gICAgICAgIG9wMyxcbiAgICAgICAgTWF0aC5zaW4sXG4gICAgICAgICh4KSA9PiB4LnRvU2lnbmlmaWNhbnREaWdpdHMoY2UucHJlY2lzaW9uICsgNCkuc2luKCkudG9TaWduaWZpY2FudERpZ2l0cyhjZS5wcmVjaXNpb24pLFxuICAgICAgICAoeCkgPT4geC5zaW4oKVxuICAgICAgKTtcbiAgICBjYXNlIFwiU2luaFwiOlxuICAgICAgcmV0dXJuIGFwcGx5TihcbiAgICAgICAgb3AzLFxuICAgICAgICBNYXRoLnNpbmgsXG4gICAgICAgICh4KSA9PiB4LnNpbmgoKSxcbiAgICAgICAgKHgpID0+IHguc2luaCgpXG4gICAgICApO1xuICAgIGNhc2UgXCJUYW5cIjpcbiAgICAgIHJldHVybiBhcHBseU4oXG4gICAgICAgIG9wMyxcbiAgICAgICAgTWF0aC50YW4sXG4gICAgICAgICh4KSA9PiB4LnRvU2lnbmlmaWNhbnREaWdpdHMoY2UucHJlY2lzaW9uICsgNCkudGFuKCkudG9TaWduaWZpY2FudERpZ2l0cyhjZS5wcmVjaXNpb24pLFxuICAgICAgICAoeCkgPT4geC50YW4oKVxuICAgICAgKTtcbiAgICBjYXNlIFwiVGFuaFwiOlxuICAgICAgcmV0dXJuIGFwcGx5TihcbiAgICAgICAgb3AzLFxuICAgICAgICBNYXRoLnRhbmgsXG4gICAgICAgICh4KSA9PiB4LnRhbmgoKSxcbiAgICAgICAgKHgpID0+IHgudGFuaCgpXG4gICAgICApO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL2JveGVkLXN5bWJvbC1kZWZpbml0aW9uLnRzXG52YXIgaW1wb3J0X2NvbXBsZXgxNyA9IF9fdG9FU00ocmVxdWlyZV9jb21wbGV4KCkpO1xudmFyIEJveGVkU3ltYm9sRGVmaW5pdGlvbkltcGwgPSBjbGFzcyB7XG4gIC8vIEB0b2RvXG4gIGNvbnN0cnVjdG9yKGNlLCBuYW1lLCBkZWYpIHtcbiAgICBpZiAoIWNlLmNvbnRleHQpXG4gICAgICB0aHJvdyBFcnJvcihcIk5vIGNvbnRleHQgYXZhaWxhYmxlXCIpO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy53aWtpZGF0YSA9IGRlZi53aWtpZGF0YTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVmLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMudXJsID0gZGVmLnVybDtcbiAgICB0aGlzLl9lbmdpbmUgPSBjZTtcbiAgICB0aGlzLnNjb3BlID0gY2UuY29udGV4dDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuX2ZsYWdzID0gZGVmLmZsYWdzID8gbm9ybWFsaXplRmxhZ3MoZGVmLmZsYWdzKSA6IHZvaWQgMDtcbiAgICB0aGlzLl9kb21haW4gPSBkZWYuZG9tYWluID8gY2UuZG9tYWluKGRlZi5kb21haW4pIDogdm9pZCAwO1xuICAgIHRoaXMuY29uc3RhbnQgPSBkZWYuY29uc3RhbnQgPz8gZmFsc2U7XG4gICAgdGhpcy5ob2xkVW50aWwgPSBkZWYuaG9sZFVudGlsID8/IFwiZXZhbHVhdGVcIjtcbiAgICBpZiAodGhpcy5jb25zdGFudCkge1xuICAgICAgdGhpcy5fZGVmVmFsdWUgPSBkZWYudmFsdWU7XG4gICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChkZWYudmFsdWUpIHtcbiAgICAgICAgaWYgKGlzTGF0ZXhTdHJpbmcoZGVmLnZhbHVlKSlcbiAgICAgICAgICB0aGlzLl92YWx1ZSA9IGNlLnBhcnNlKGRlZi52YWx1ZSkgPz8gY2Uuc3ltYm9sKFwiVW5kZWZpbmVkXCIpO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgZGVmLnZhbHVlID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgdGhpcy5fdmFsdWUgPSBjZS5ib3goZGVmLnZhbHVlKGNlKSA/PyBcIlVuZGVmaW5lZFwiKTtcbiAgICAgICAgZWxzZSBpZiAoZGVmLnZhbHVlIGluc3RhbmNlb2YgQWJzdHJhY3RCb3hlZEV4cHJlc3Npb24pXG4gICAgICAgICAgdGhpcy5fdmFsdWUgPSBkZWYudmFsdWU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aGlzLl92YWx1ZSA9IGNlLmJveChkZWYudmFsdWUpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICAgICAgaWYgKCF0aGlzLl92YWx1ZSAmJiB0aGlzLl9kb21haW4gJiYgIWRlZi5mbGFncylcbiAgICAgICAgdGhpcy5fZmxhZ3MgPSBkb21haW5Ub0ZsYWdzKHRoaXMuX2RvbWFpbik7XG4gICAgfVxuICB9XG4gIHJlc2V0KCkge1xuICAgIGlmICh0aGlzLmNvbnN0YW50KVxuICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuICB9XG4gIC8vIHVuYmluZCgpIHtcbiAgLy8gICB0aGlzLl92YWx1ZSA9IG51bGw7XG4gIC8vICAgdGhpcy5fZG9tYWluID0gbnVsbDtcbiAgLy8gfVxuICBnZXQgdmFsdWUoKSB7XG4gICAgaWYgKHRoaXMuX3ZhbHVlID09PSBudWxsKSB7XG4gICAgICBjb25zdCBjZSA9IHRoaXMuX2VuZ2luZTtcbiAgICAgIGlmIChpc0xhdGV4U3RyaW5nKHRoaXMuX2RlZlZhbHVlKSlcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBjZS5wYXJzZSh0aGlzLl9kZWZWYWx1ZSkgPz8gY2Uuc3ltYm9sKFwiVW5kZWZpbmVkXCIpO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIHRoaXMuX2RlZlZhbHVlID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gY2UuYm94KHRoaXMuX2RlZlZhbHVlKGNlKSA/PyBcIlVuZGVmaW5lZFwiKTtcbiAgICAgIGVsc2UgaWYgKHRoaXMuX2RlZlZhbHVlKVxuICAgICAgICB0aGlzLl92YWx1ZSA9IGNlLmJveCh0aGlzLl9kZWZWYWx1ZSk7XG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICAgICAgaWYgKHRoaXMuX3ZhbHVlPy5udW1lcmljVmFsdWUpIHtcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5fdmFsdWUubnVtZXJpY1ZhbHVlO1xuICAgICAgICBpZiAoIWJpZ251bVByZWZlcnJlZChjZSkgJiYgdmFsIGluc3RhbmNlb2YgZGVjaW1hbF9kZWZhdWx0KVxuICAgICAgICAgIHRoaXMuX3ZhbHVlID0gY2UubnVtYmVyKHZhbC50b051bWJlcigpKTtcbiAgICAgICAgZWxzZSBpZiAoIWNvbXBsZXhBbGxvd2VkKGNlKSAmJiB2YWwgaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDE3LmRlZmF1bHQpXG4gICAgICAgICAgdGhpcy5fdmFsdWUgPSBjZS5fTkFOO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPz8gdm9pZCAwO1xuICB9XG4gIHNldCB2YWx1ZSh2YWwpIHtcbiAgICBpZiAodGhpcy5jb25zdGFudClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRoZSB2YWx1ZSBvZiB0aGUgY29uc3RhbnQgXCIke3RoaXMubmFtZX1cIiBjYW5ub3QgYmUgY2hhbmdlZGBcbiAgICAgICk7XG4gICAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KHRoaXMuX2RlZlZhbHVlID09PSB2b2lkIDApO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX2VuZ2luZS5udW1iZXIodmFsKTtcbiAgICB9IGVsc2UgaWYgKHZhbCkge1xuICAgICAgY29uc3QgbmV3VmFsID0gdGhpcy5fZW5naW5lLmJveCh2YWwpO1xuICAgICAgaWYgKCF0aGlzLl9kb21haW4gfHwgbmV3VmFsLmRvbWFpbi5pc0NvbXBhdGlibGUodGhpcy5fZG9tYWluKSlcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBuZXdWYWw7XG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICAgIH0gZWxzZVxuICAgICAgdGhpcy5fdmFsdWUgPSB2b2lkIDA7XG4gICAgaWYgKHRoaXMuX3ZhbHVlICE9PSB2b2lkIDApXG4gICAgICB0aGlzLl9mbGFncyA9IHZvaWQgMDtcbiAgICBlbHNlXG4gICAgICB0aGlzLl9mbGFncyA9IGRvbWFpblRvRmxhZ3ModGhpcy5kb21haW4pO1xuICB9XG4gIGdldCBkb21haW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RvbWFpbiA/PyB0aGlzLl92YWx1ZT8uZG9tYWluID8/IHZvaWQgMDtcbiAgfVxuICBzZXQgZG9tYWluKGRvbWFpbikge1xuICAgIGlmICh0aGlzLmNvbnN0YW50KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGhlIGRvbWFpbiBvZiB0aGUgY29uc3RhbnQgXCIke3RoaXMubmFtZX1cIiBjYW5ub3QgYmUgY2hhbmdlZGBcbiAgICAgICk7XG4gICAgaWYgKCFkb21haW4pIHtcbiAgICAgIHRoaXMuX2RlZlZhbHVlID0gdm9pZCAwO1xuICAgICAgdGhpcy5fdmFsdWUgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9mbGFncyA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX2RvbWFpbiA9IHZvaWQgMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZG9tYWluID0gdGhpcy5fZW5naW5lLmRvbWFpbihkb21haW4pO1xuICAgIGlmICh0aGlzLl9kb21haW4/LmlzTnVtZXJpYykge1xuICAgICAgaWYgKCFkb21haW4uaXNOdW1lcmljKVxuICAgICAgICB0aHJvdyBFcnJvcihcIkNhbid0IGNoYW5nZSBmcm9tIGEgbnVtZXJpYyBkb21haW4gdG8gYSBub24tbnVtZXJpYyBvbmVcIik7XG4gICAgICB0aGlzLl9kb21haW4gPSBkb21haW47XG4gICAgICBpZiAoIXRoaXMuX3ZhbHVlKVxuICAgICAgICB0aGlzLl9mbGFncyA9IHsgLi4udGhpcy5fZmxhZ3MgPz8ge30sIC4uLmRvbWFpblRvRmxhZ3MoZG9tYWluKSB9O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZG9tYWluKVxuICAgICAgdGhyb3cgRXJyb3IoXCJDYW4ndCBjaGFuZ2UgYSBub24tbnVtZXJpYyBkb21haW5cIik7XG4gICAgdGhpcy5fZmxhZ3MgPSB2b2lkIDA7XG4gICAgdGhpcy5fZG9tYWluID0gZG9tYWluO1xuICAgIGlmICghdGhpcy5fdmFsdWUgJiYgZG9tYWluLmlzTnVtZXJpYylcbiAgICAgIHRoaXMuX2ZsYWdzID0geyAuLi50aGlzLl9mbGFncyA/PyB7fSwgLi4uZG9tYWluVG9GbGFncyhkb21haW4pIH07XG4gIH1cbiAgLy9cbiAgLy8gRmxhZ3NcbiAgLy9cbiAgZ2V0IG51bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNOdW1iZXIgPz8gdGhpcy5fZmxhZ3M/Lm51bWJlcjtcbiAgfVxuICBzZXQgbnVtYmVyKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBudW1iZXI6IHZhbCB9KTtcbiAgfVxuICBnZXQgaW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNJbnRlZ2VyID8/IHRoaXMuX2ZsYWdzPy5pbnRlZ2VyO1xuICB9XG4gIHNldCBpbnRlZ2VyKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBpbnRlZ2VyOiB2YWwgfSk7XG4gIH1cbiAgZ2V0IHJhdGlvbmFsKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlPy5pc1JhdGlvbmFsID8/IHRoaXMuX2ZsYWdzPy5yYXRpb25hbDtcbiAgfVxuICBzZXQgcmF0aW9uYWwodmFsKSB7XG4gICAgdGhpcy51cGRhdGVGbGFncyh7IHJhdGlvbmFsOiB2YWwgfSk7XG4gIH1cbiAgZ2V0IGFsZ2VicmFpYygpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNBbGdlYnJhaWMgPz8gdGhpcy5fZmxhZ3M/LmFsZ2VicmFpYztcbiAgfVxuICBzZXQgYWxnZWJyYWljKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBhbGdlYnJhaWM6IHZhbCB9KTtcbiAgfVxuICBnZXQgcmVhbCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNSZWFsID8/IHRoaXMuX2ZsYWdzPy5yZWFsO1xuICB9XG4gIHNldCByZWFsKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyByZWFsOiB2YWwgfSk7XG4gIH1cbiAgZ2V0IGV4dGVuZGVkUmVhbCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNFeHRlbmRlZFJlYWwgPz8gdGhpcy5fZmxhZ3M/LmV4dGVuZGVkUmVhbDtcbiAgfVxuICBzZXQgZXh0ZW5kZWRSZWFsKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBleHRlbmRlZFJlYWw6IHZhbCB9KTtcbiAgfVxuICBnZXQgY29tcGxleCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNDb21wbGV4ID8/IHRoaXMuX2ZsYWdzPy5jb21wbGV4O1xuICB9XG4gIHNldCBjb21wbGV4KHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBjb21wbGV4OiB2YWwgfSk7XG4gIH1cbiAgZ2V0IGV4dGVuZGVkQ29tcGxleCgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNFeHRlbmRlZENvbXBsZXggPz8gdGhpcy5fZmxhZ3M/LmV4dGVuZGVkQ29tcGxleDtcbiAgfVxuICBzZXQgZXh0ZW5kZWRDb21wbGV4KHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBleHRlbmRlZENvbXBsZXg6IHZhbCB9KTtcbiAgfVxuICBnZXQgaW1hZ2luYXJ5KCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlPy5pc0ltYWdpbmFyeSA/PyB0aGlzLl9mbGFncz8uaW1hZ2luYXJ5O1xuICB9XG4gIHNldCBpbWFnaW5hcnkodmFsKSB7XG4gICAgdGhpcy51cGRhdGVGbGFncyh7IGltYWdpbmFyeTogdmFsIH0pO1xuICB9XG4gIGdldCBwb3NpdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNQb3NpdGl2ZSA/PyB0aGlzLl9mbGFncz8ucG9zaXRpdmU7XG4gIH1cbiAgc2V0IHBvc2l0aXZlKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBwb3NpdGl2ZTogdmFsIH0pO1xuICB9XG4gIGdldCBub25Qb3NpdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNOb25Qb3NpdGl2ZSA/PyB0aGlzLl9mbGFncz8ubm9uUG9zaXRpdmU7XG4gIH1cbiAgc2V0IG5vblBvc2l0aXZlKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBub25Qb3NpdGl2ZTogdmFsIH0pO1xuICB9XG4gIGdldCBuZWdhdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNOZWdhdGl2ZSA/PyB0aGlzLl9mbGFncz8ubmVnYXRpdmU7XG4gIH1cbiAgc2V0IG5lZ2F0aXZlKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBuZWdhdGl2ZTogdmFsIH0pO1xuICB9XG4gIGdldCBub25OZWdhdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNOb25OZWdhdGl2ZSA/PyB0aGlzLl9mbGFncz8ubm9uTmVnYXRpdmU7XG4gIH1cbiAgc2V0IG5vbk5lZ2F0aXZlKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBub25OZWdhdGl2ZTogdmFsIH0pO1xuICB9XG4gIGdldCB6ZXJvKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlPy5pc1plcm8gPz8gdGhpcy5fZmxhZ3M/Lnplcm87XG4gIH1cbiAgc2V0IHplcm8odmFsKSB7XG4gICAgdGhpcy51cGRhdGVGbGFncyh7IHplcm86IHZhbCB9KTtcbiAgfVxuICBnZXQgbm90WmVybygpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNOb3RaZXJvID8/IHRoaXMuX2ZsYWdzPy5ub3RaZXJvO1xuICB9XG4gIHNldCBub3RaZXJvKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBub3RaZXJvOiB2YWwgfSk7XG4gIH1cbiAgZ2V0IG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZT8uaXNPbmUgPz8gdGhpcy5fZmxhZ3M/Lm9uZTtcbiAgfVxuICBzZXQgb25lKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBvbmU6IHZhbCB9KTtcbiAgfVxuICBnZXQgbmVnYXRpdmVPbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU/LmlzTmVnYXRpdmVPbmUgPz8gdGhpcy5fZmxhZ3M/Lm5lZ2F0aXZlT25lO1xuICB9XG4gIHNldCBuZWdhdGl2ZU9uZSh2YWwpIHtcbiAgICB0aGlzLnVwZGF0ZUZsYWdzKHsgbmVnYXRpdmVPbmU6IHZhbCB9KTtcbiAgfVxuICBnZXQgaW5maW5pdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU/LmlzSW5maW5pdHkgPz8gdGhpcy5fZmxhZ3M/LmluZmluaXR5O1xuICB9XG4gIHNldCBpbmZpbml0eSh2YWwpIHtcbiAgICB0aGlzLnVwZGF0ZUZsYWdzKHsgaW5maW5pdHk6IHZhbCB9KTtcbiAgfVxuICBnZXQgZmluaXRlKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlPy5pc0Zpbml0ZSA/PyB0aGlzLl9mbGFncz8uZmluaXRlO1xuICB9XG4gIHNldCBmaW5pdGUodmFsKSB7XG4gICAgdGhpcy51cGRhdGVGbGFncyh7IGZpbml0ZTogdmFsIH0pO1xuICB9XG4gIGdldCBOYU4oKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU/LmlzTmFOID8/IHRoaXMuX2ZsYWdzPy5OYU47XG4gIH1cbiAgc2V0IE5hTih2YWwpIHtcbiAgICB0aGlzLnVwZGF0ZUZsYWdzKHsgTmFOOiB2YWwgfSk7XG4gIH1cbiAgZ2V0IGV2ZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU/LmlzRXZlbiA/PyB0aGlzLl9mbGFncz8uZXZlbjtcbiAgfVxuICBzZXQgZXZlbih2YWwpIHtcbiAgICB0aGlzLnVwZGF0ZUZsYWdzKHsgZXZlbjogdmFsIH0pO1xuICB9XG4gIGdldCBvZGQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU/LmlzT2RkID8/IHRoaXMuX2ZsYWdzPy5vZGQ7XG4gIH1cbiAgc2V0IG9kZCh2YWwpIHtcbiAgICB0aGlzLnVwZGF0ZUZsYWdzKHsgb2RkOiB2YWwgfSk7XG4gIH1cbiAgZ2V0IHByaW1lKCkge1xuICAgIGNvbnN0IHZhbCA9IHRoaXMuX3ZhbHVlO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIGlmICghdmFsLmlzSW50ZWdlciB8fCB2YWwuaXNOb25Qb3NpdGl2ZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIGlzUHJpbWUoYXNGbG9hdCh2YWwpID8/IE5hTik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9mbGFncz8ucHJpbWU7XG4gIH1cbiAgc2V0IHByaW1lKHZhbCkge1xuICAgIHRoaXMudXBkYXRlRmxhZ3MoeyBwcmltZTogdmFsIH0pO1xuICB9XG4gIGdldCBjb21wb3NpdGUoKSB7XG4gICAgY29uc3QgdmFsID0gdGhpcy5fdmFsdWU7XG4gICAgaWYgKHZhbCkge1xuICAgICAgaWYgKCF2YWwuaXNJbnRlZ2VyIHx8IHZhbC5pc05vblBvc2l0aXZlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gIWlzUHJpbWUoYXNGbG9hdCh2YWwpID8/IE5hTik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9mbGFncz8uY29tcG9zaXRlO1xuICB9XG4gIHNldCBjb21wb3NpdGUodmFsKSB7XG4gICAgdGhpcy51cGRhdGVGbGFncyh7IGNvbXBvc2l0ZTogdmFsIH0pO1xuICB9XG4gIHVwZGF0ZUZsYWdzKGZsYWdzKSB7XG4gICAgaWYgKHRoaXMuY29uc3RhbnQpXG4gICAgICB0aHJvdyBFcnJvcihcIlRoZSBmbGFncyBvZiBjb25zdGFudCBjYW5ub3QgYmUgY2hhbmdlZFwiKTtcbiAgICBpZiAodGhpcy5kb21haW4/LmlzTnVtZXJpYyA9PT0gZmFsc2UpXG4gICAgICB0aHJvdyBFcnJvcihcIkZsYWdzIG9ubHkgYXBwbHkgdG8gbnVtZXJpYyBkb21haW5zXCIpO1xuICAgIGxldCBmbGFnQ291bnQgPSAwO1xuICAgIGxldCBjb25zaXN0ZW50ID0gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IGZsYWcgaW4gT2JqZWN0LmtleXMoZmxhZ3MpKSB7XG4gICAgICBmbGFnQ291bnQgKz0gMTtcbiAgICAgIGlmICh0aGlzLl92YWx1ZSAmJiBmbGFnc1tmbGFnXSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHN3aXRjaCAoZmxhZykge1xuICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc051bWJlciA9PT0gZmxhZ3MubnVtYmVyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImludGVnZXJcIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc0ludGVnZXIgPT09IGZsYWdzLmludGVnZXI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwicmF0aW9uYWxcIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc1JhdGlvbmFsID09PSBmbGFncy5yYXRpb25hbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJhbGdlYnJhaWNcIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc0FsZ2VicmFpYyA9PT0gZmxhZ3MuYWxnZWJyYWljO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInJlYWxcIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc1JlYWwgPT09IGZsYWdzLnJlYWw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZXh0ZW5kZWRSZWFsXCI6XG4gICAgICAgICAgICBjb25zaXN0ZW50ID0gdGhpcy5fdmFsdWUuaXNFeHRlbmRlZFJlYWwgPT09IGZsYWdzLmV4dGVuZGVkUmVhbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjb21wbGV4XCI6XG4gICAgICAgICAgICBjb25zaXN0ZW50ID0gdGhpcy5fdmFsdWUuaXNDb21wbGV4ID09PSBmbGFncy5jb21wbGV4O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImV4dGVuZGVkQ29tcGxleFwiOlxuICAgICAgICAgICAgY29uc2lzdGVudCA9IHRoaXMuX3ZhbHVlLmlzRXh0ZW5kZWRDb21wbGV4ID09PSBmbGFncy5leHRlbmRlZENvbXBsZXg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiaW1hZ2luYXJ5XCI6XG4gICAgICAgICAgICBjb25zaXN0ZW50ID0gdGhpcy5fdmFsdWUuaXNJbWFnaW5hcnkgPT09IGZsYWdzLmltYWdpbmFyeTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJwb3NpdGl2ZVwiOlxuICAgICAgICAgICAgY29uc2lzdGVudCA9IHRoaXMuX3ZhbHVlLmlzUG9zaXRpdmUgPT09IGZsYWdzLnBvc2l0aXZlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm5vblBvc2l0aXZlXCI6XG4gICAgICAgICAgICBjb25zaXN0ZW50ID0gdGhpcy5fdmFsdWUuaXNOb25Qb3NpdGl2ZSA9PT0gZmxhZ3Mubm9uUG9zaXRpdmU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwibmVnYXRpdmVcIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc05lZ2F0aXZlID09PSBmbGFncy5uZWdhdGl2ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJub25OZWdhdGl2ZVwiOlxuICAgICAgICAgICAgY29uc2lzdGVudCA9IHRoaXMuX3ZhbHVlLmlzTm9uTmVnYXRpdmUgPT09IGZsYWdzLm5vbk5lZ2F0aXZlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInplcm9cIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc1plcm8gPT09IGZsYWdzLnplcm87XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwibm90WmVyb1wiOlxuICAgICAgICAgICAgY29uc2lzdGVudCA9IHRoaXMuX3ZhbHVlLmlzTm90WmVybyA9PT0gZmxhZ3Mubm90WmVybztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJvbmVcIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc09uZSA9PT0gZmxhZ3Mub25lO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm5lZ2F0aXZlT25lXCI6XG4gICAgICAgICAgICBjb25zaXN0ZW50ID0gdGhpcy5fdmFsdWUuaXNOZWdhdGl2ZU9uZSA9PT0gZmxhZ3MubmVnYXRpdmVPbmU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiaW5maW5pdHlcIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc0luZmluaXR5ID09PSBmbGFncy5pbmZpbml0eTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJOYU5cIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc05hTiA9PT0gZmxhZ3MuTmFOO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImZpbml0ZVwiOlxuICAgICAgICAgICAgY29uc2lzdGVudCA9IHRoaXMuX3ZhbHVlLmlzRmluaXRlID09PSBmbGFncy5maW5pdGU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZXZlblwiOlxuICAgICAgICAgICAgY29uc2lzdGVudCA9IHRoaXMuX3ZhbHVlLmlzRXZlbiA9PT0gZmxhZ3MuZXZlbjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJvZGRcIjpcbiAgICAgICAgICAgIGNvbnNpc3RlbnQgPSB0aGlzLl92YWx1ZS5pc09kZCA9PT0gZmxhZ3Mub2RkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInByaW1lXCI6XG4gICAgICAgICAgICBjb25zaXN0ZW50ID0gdGhpcy5fdmFsdWUuaXNQcmltZSA9PT0gZmxhZ3MucHJpbWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY29tcG9zaXRlXCI6XG4gICAgICAgICAgICBjb25zaXN0ZW50ID0gdGhpcy5fdmFsdWUuaXNDb21wb3NpdGUgPT09IGZsYWdzLmNvbXBvc2l0ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmbGFnQ291bnQgPiAwKSB7XG4gICAgICBpZiAoIWNvbnNpc3RlbnQpIHtcbiAgICAgICAgdGhpcy5fZGVmVmFsdWUgPSB2b2lkIDA7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICAgICAgfVxuICAgICAgdGhpcy5fZG9tYWluID0gdGhpcy5fZW5naW5lLmRvbWFpbihcIk51bWJlclwiKTtcbiAgICAgIGlmICghdGhpcy5fZmxhZ3MpXG4gICAgICAgIHRoaXMuX2ZsYWdzID0gbm9ybWFsaXplRmxhZ3MoZmxhZ3MpO1xuICAgICAgZWxzZVxuICAgICAgICB0aGlzLl9mbGFncyA9IHsgLi4udGhpcy5fZmxhZ3MsIC4uLm5vcm1hbGl6ZUZsYWdzKGZsYWdzKSB9O1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIGRlZmluZWRLZXlzKHhzKSB7XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgT2JqZWN0LmVudHJpZXMoeHMpLmZpbHRlcigoW19rLCB2XSkgPT4gdiAhPT0gdm9pZCAwKVxuICApO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplRmxhZ3MoZmxhZ3MpIHtcbiAgY29uc3QgcmVzdWx0ID0geyAuLi5mbGFncyB9O1xuICBpZiAoZmxhZ3MuemVybyB8fCBmbGFncy5vbmUgfHwgZmxhZ3MubmVnYXRpdmVPbmUpIHtcbiAgICByZXN1bHQuemVybyA9IGZsYWdzLnplcm8gJiYgIWZsYWdzLm9uZSAmJiAhZmxhZ3MubmVnYXRpdmVPbmU7XG4gICAgcmVzdWx0Lm5vdFplcm8gPSAhZmxhZ3MuemVybyB8fCBmbGFncy5vbmUgfHwgZmxhZ3MubmVnYXRpdmVPbmU7XG4gICAgcmVzdWx0Lm9uZSA9IGZsYWdzLm9uZSAmJiAhZmxhZ3MuemVybyAmJiAhZmxhZ3MubmVnYXRpdmVPbmU7XG4gICAgcmVzdWx0Lm5lZ2F0aXZlT25lID0gZmxhZ3MubmVnYXRpdmVPbmUgJiYgIWZsYWdzLnplcm8gJiYgIWZsYWdzLm9uZTtcbiAgICByZXN1bHQuaW5maW5pdHkgPSBmYWxzZTtcbiAgICByZXN1bHQuTmFOID0gZmFsc2U7XG4gICAgcmVzdWx0LmZpbml0ZSA9IHRydWU7XG4gICAgcmVzdWx0LmludGVnZXIgPSB0cnVlO1xuICAgIHJlc3VsdC5maW5pdGUgPSB0cnVlO1xuICAgIHJlc3VsdC5pbmZpbml0eSA9IGZhbHNlO1xuICAgIHJlc3VsdC5OYU4gPSBmYWxzZTtcbiAgICByZXN1bHQuZXZlbiA9IGZsYWdzLm9uZTtcbiAgICByZXN1bHQub2RkID0gIWZsYWdzLm9uZTtcbiAgICByZXN1bHQucHJpbWUgPSBmYWxzZTtcbiAgICByZXN1bHQuY29tcG9zaXRlID0gZmFsc2U7XG4gIH1cbiAgaWYgKHJlc3VsdC56ZXJvKSB7XG4gICAgcmVzdWx0LnBvc2l0aXZlID0gZmFsc2U7XG4gICAgcmVzdWx0Lm5lZ2F0aXZlID0gZmFsc2U7XG4gICAgcmVzdWx0Lm5vblBvc2l0aXZlID0gdHJ1ZTtcbiAgICByZXN1bHQubm9uTmVnYXRpdmUgPSB0cnVlO1xuICB9XG4gIGlmIChyZXN1bHQubm90WmVybyA9PT0gdHJ1ZSkge1xuICAgIGlmICghcmVzdWx0LmltYWdpbmFyeSlcbiAgICAgIHJlc3VsdC5yZWFsID0gdHJ1ZTtcbiAgICByZXN1bHQuemVybyA9IGZhbHNlO1xuICB9XG4gIGlmIChyZXN1bHQub25lKSB7XG4gICAgcmVzdWx0LnBvc2l0aXZlID0gdHJ1ZTtcbiAgfVxuICBpZiAocmVzdWx0Lm5lZ2F0aXZlT25lKSB7XG4gICAgcmVzdWx0Lm5vblBvc2l0aXZlID0gdHJ1ZTtcbiAgfVxuICBpZiAocmVzdWx0LnBvc2l0aXZlIHx8IHJlc3VsdC5ub25OZWdhdGl2ZSkge1xuICAgIHJlc3VsdC5uZWdhdGl2ZU9uZSA9IGZhbHNlO1xuICB9XG4gIGlmIChyZXN1bHQucG9zaXRpdmUpIHtcbiAgICByZXN1bHQubm9uUG9zaXRpdmUgPSBmYWxzZTtcbiAgICByZXN1bHQubmVnYXRpdmUgPSBmYWxzZTtcbiAgICByZXN1bHQubm9uTmVnYXRpdmUgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHJlc3VsdC5ub25Qb3NpdGl2ZSkge1xuICAgIHJlc3VsdC5wb3NpdGl2ZSA9IGZhbHNlO1xuICAgIHJlc3VsdC5uZWdhdGl2ZSA9IHJlc3VsdC5ub3RaZXJvO1xuICAgIHJlc3VsdC5ub25OZWdhdGl2ZSA9ICFyZXN1bHQuemVybztcbiAgfSBlbHNlIGlmIChyZXN1bHQubmVnYXRpdmUpIHtcbiAgICByZXN1bHQucG9zaXRpdmUgPSBmYWxzZTtcbiAgICByZXN1bHQubm9uUG9zaXRpdmUgPSByZXN1bHQubm90WmVybztcbiAgICByZXN1bHQubm9uTmVnYXRpdmUgPSBmYWxzZTtcbiAgfSBlbHNlIGlmIChyZXN1bHQubm9uTmVnYXRpdmUpIHtcbiAgICByZXN1bHQucG9zaXRpdmUgPSByZXN1bHQubm90WmVybztcbiAgICByZXN1bHQubm9uUG9zaXRpdmUgPSAhcmVzdWx0Lnplcm87XG4gICAgcmVzdWx0Lm5lZ2F0aXZlID0gZmFsc2U7XG4gIH1cbiAgaWYgKHJlc3VsdC5wb3NpdGl2ZSB8fCByZXN1bHQubmVnYXRpdmUgfHwgcmVzdWx0Lm5vblBvc2l0aXZlIHx8IHJlc3VsdC5ub25OZWdhdGl2ZSkge1xuICAgIHJlc3VsdC5udW1iZXIgPSB0cnVlO1xuICAgIGlmIChyZXN1bHQuZmluaXRlKVxuICAgICAgcmVzdWx0LnJlYWwgPSB0cnVlO1xuICAgIGVsc2UgaWYgKCFyZXN1bHQuZmluaXRlKVxuICAgICAgcmVzdWx0LmNvbXBsZXggPSB0cnVlO1xuICAgIHJlc3VsdC5pbWFnaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBpZiAocmVzdWx0LmZpbml0ZSkge1xuICAgIHJlc3VsdC5udW1iZXIgPSB0cnVlO1xuICAgIHJlc3VsdC5jb21wbGV4ID0gdHJ1ZTtcbiAgICByZXN1bHQuaW5maW5pdHkgPSBmYWxzZTtcbiAgICByZXN1bHQuTmFOID0gZmFsc2U7XG4gIH1cbiAgaWYgKHJlc3VsdC5pbmZpbml0eSkge1xuICAgIHJlc3VsdC5maW5pdGUgPSBmYWxzZTtcbiAgICByZXN1bHQuTmFOID0gZmFsc2U7XG4gIH1cbiAgaWYgKHJlc3VsdC5pbmZpbml0eSA9PT0gZmFsc2UpIHtcbiAgICByZXN1bHQuZXh0ZW5kZWRDb21wbGV4ID0gZmFsc2U7XG4gICAgcmVzdWx0LmV4dGVuZGVkUmVhbCA9IGZhbHNlO1xuICB9XG4gIGlmIChmbGFncy5ldmVuKVxuICAgIHJlc3VsdC5vZGQgPSBmYWxzZTtcbiAgaWYgKGZsYWdzLm9kZClcbiAgICByZXN1bHQuZXZlbiA9IGZhbHNlO1xuICBpZiAocmVzdWx0LmludGVnZXIpXG4gICAgcmVzdWx0LnJhdGlvbmFsID0gdHJ1ZTtcbiAgaWYgKHJlc3VsdC5yYXRpb25hbClcbiAgICByZXN1bHQuYWxnZWJyYWljID0gdHJ1ZTtcbiAgaWYgKHJlc3VsdC5hbGdlYnJhaWMpXG4gICAgcmVzdWx0LnJlYWwgPSB0cnVlO1xuICBpZiAocmVzdWx0LnJlYWwpXG4gICAgcmVzdWx0LmNvbXBsZXggPSB0cnVlO1xuICBpZiAocmVzdWx0LmltYWdpbmFyeSlcbiAgICByZXN1bHQuY29tcGxleCA9IHRydWU7XG4gIGlmIChyZXN1bHQuY29tcGxleClcbiAgICByZXN1bHQubnVtYmVyID0gdHJ1ZTtcbiAgaWYgKHJlc3VsdC5yZWFsICYmIHJlc3VsdC5pbmZpbml0eSAhPT0gZmFsc2UpXG4gICAgcmVzdWx0LmV4dGVuZGVkUmVhbCA9IHRydWU7XG4gIGlmIChyZXN1bHQuY29tcGxleCAmJiByZXN1bHQuaW5maW5pdHkgIT09IGZhbHNlKVxuICAgIHJlc3VsdC5leHRlbmRlZENvbXBsZXggPSB0cnVlO1xuICBpZiAocmVzdWx0LmV2ZW4gfHwgcmVzdWx0LmluZmluaXR5IHx8IHJlc3VsdC5OYU4gfHwgcmVzdWx0Lm5lZ2F0aXZlIHx8IHJlc3VsdC5pbWFnaW5hcnkgfHwgcmVzdWx0LmludGVnZXIgPT09IGZhbHNlKVxuICAgIHJlc3VsdC5wcmltZSA9IGZhbHNlO1xuICBpZiAocmVzdWx0Lm51bWJlciAmJiByZXN1bHQucHJpbWUpXG4gICAgcmVzdWx0LmNvbXBvc2l0ZSA9IGZhbHNlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZG9tYWluVG9GbGFncyhkb20pIHtcbiAgaWYgKCFkb20pXG4gICAgcmV0dXJuIHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgaWYgKGRvbS5pc051bWVyaWMpIHtcbiAgICBjb25zdCBkb21haW4gPSBkb20ubGl0ZXJhbDtcbiAgICByZXN1bHQubnVtYmVyID0gdHJ1ZTtcbiAgICBpZiAoZG9tYWluID09PSBcIkludGVnZXJcIilcbiAgICAgIHJlc3VsdC5pbnRlZ2VyID0gdHJ1ZTtcbiAgICBpZiAoZG9tYWluID09PSBcIlJhdGlvbmFsTnVtYmVyXCIpXG4gICAgICByZXN1bHQucmF0aW9uYWwgPSB0cnVlO1xuICAgIGlmIChkb21haW4gPT09IFwiQWxnZWJyYWljTnVtYmVyXCIpXG4gICAgICByZXN1bHQuYWxnZWJyYWljID0gdHJ1ZTtcbiAgICBpZiAoZG9tYWluID09PSBcIlRyYW5zY2VuZGVudGFsTnVtYmVyXCIpIHtcbiAgICAgIHJlc3VsdC5hbGdlYnJhaWMgPSBmYWxzZTtcbiAgICAgIHJlc3VsdC5yZWFsID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGRvbWFpbiA9PT0gXCJFeHRlbmRlZFJlYWxOdW1iZXJcIilcbiAgICAgIHJlc3VsdC5leHRlbmRlZFJlYWwgPSB0cnVlO1xuICAgIGlmIChkb21haW4gPT09IFwiUmVhbE51bWJlclwiKVxuICAgICAgcmVzdWx0LnJlYWwgPSB0cnVlO1xuICAgIGlmIChkb21haW4gPT09IFwiSW1hZ2luYXJ5TnVtYmVyXCIpXG4gICAgICByZXN1bHQuaW1hZ2luYXJ5ID0gdHJ1ZTtcbiAgICBpZiAoZG9tYWluID09PSBcIkV4dGVuZGVkQ29tcGxleE51bWJlclwiKVxuICAgICAgcmVzdWx0LmV4dGVuZGVkQ29tcGxleCA9IHRydWU7XG4gICAgaWYgKGRvbWFpbiA9PT0gXCJDb21wbGV4TnVtYmVyXCIpXG4gICAgICByZXN1bHQuY29tcGxleCA9IHRydWU7XG4gICAgaWYgKGRvbWFpbiA9PT0gXCJQb3NpdGl2ZU51bWJlclwiKSB7XG4gICAgICByZXN1bHQubm90WmVybyA9IHRydWU7XG4gICAgICByZXN1bHQucmVhbCA9IHRydWU7XG4gICAgICByZXN1bHQucG9zaXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoZG9tYWluID09PSBcIk5lZ2F0aXZlTnVtYmVyXCIpIHtcbiAgICAgIHJlc3VsdC5ub3RaZXJvID0gdHJ1ZTtcbiAgICAgIHJlc3VsdC5yZWFsID0gdHJ1ZTtcbiAgICAgIHJlc3VsdC5uZWdhdGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChkb21haW4gPT09IFwiTm9uTmVnYXRpdmVOdW1iZXJcIikge1xuICAgICAgcmVzdWx0LnJlYWwgPSB0cnVlO1xuICAgICAgcmVzdWx0LnBvc2l0aXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGRvbWFpbiA9PT0gXCJOb25Qb3NpdGl2ZU51bWJlclwiKSB7XG4gICAgICByZXN1bHQucmVhbCA9IHRydWU7XG4gICAgICByZXN1bHQubmVnYXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoZG9tYWluID09PSBcIlBvc2l0aXZlSW50ZWdlclwiKSB7XG4gICAgICByZXN1bHQubm90WmVybyA9IHRydWU7XG4gICAgICByZXN1bHQuaW50ZWdlciA9IHRydWU7XG4gICAgICByZXN1bHQucG9zaXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoZG9tYWluID09PSBcIk5lZ2F0aXZlTnVtYmVyXCIpIHtcbiAgICAgIHJlc3VsdC5ub3RaZXJvID0gdHJ1ZTtcbiAgICAgIHJlc3VsdC5pbnRlZ2VyID0gdHJ1ZTtcbiAgICAgIHJlc3VsdC5uZWdhdGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChkb21haW4gPT09IFwiTm9uTmVnYXRpdmVOdW1iZXJcIikge1xuICAgICAgcmVzdWx0LmludGVnZXIgPSB0cnVlO1xuICAgICAgcmVzdWx0LnBvc2l0aXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGRvbWFpbiA9PT0gXCJOb25Qb3NpdGl2ZU51bWJlclwiKSB7XG4gICAgICByZXN1bHQuaW50ZWdlciA9IHRydWU7XG4gICAgICByZXN1bHQubmVnYXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXN1bHQubnVtYmVyID0gZmFsc2U7XG4gICAgcmVzdWx0LmludGVnZXIgPSBmYWxzZTtcbiAgICByZXN1bHQucmF0aW9uYWwgPSBmYWxzZTtcbiAgICByZXN1bHQuYWxnZWJyYWljID0gZmFsc2U7XG4gICAgcmVzdWx0LnJlYWwgPSBmYWxzZTtcbiAgICByZXN1bHQuZXh0ZW5kZWRSZWFsID0gZmFsc2U7XG4gICAgcmVzdWx0LmNvbXBsZXggPSBmYWxzZTtcbiAgICByZXN1bHQuZXh0ZW5kZWRDb21wbGV4ID0gZmFsc2U7XG4gICAgcmVzdWx0LmltYWdpbmFyeSA9IGZhbHNlO1xuICAgIHJlc3VsdC5wb3NpdGl2ZSA9IGZhbHNlO1xuICAgIHJlc3VsdC5ub25Qb3NpdGl2ZSA9IGZhbHNlO1xuICAgIHJlc3VsdC5uZWdhdGl2ZSA9IGZhbHNlO1xuICAgIHJlc3VsdC5ub25OZWdhdGl2ZSA9IGZhbHNlO1xuICAgIHJlc3VsdC56ZXJvID0gZmFsc2U7XG4gICAgcmVzdWx0Lm5vdFplcm8gPSBmYWxzZTtcbiAgICByZXN1bHQub25lID0gZmFsc2U7XG4gICAgcmVzdWx0Lm5lZ2F0aXZlT25lID0gZmFsc2U7XG4gICAgcmVzdWx0LmluZmluaXR5ID0gZmFsc2U7XG4gICAgcmVzdWx0Lk5hTiA9IGZhbHNlO1xuICAgIHJlc3VsdC5vZGQgPSBmYWxzZTtcbiAgICByZXN1bHQuZXZlbiA9IGZhbHNlO1xuICAgIHJlc3VsdC5wcmltZSA9IGZhbHNlO1xuICAgIHJlc3VsdC5jb21wb3NpdGUgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gZGVmaW5lZEtleXMobm9ybWFsaXplRmxhZ3MocmVzdWx0KSk7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL2JveGVkLWZ1bmN0aW9uLWRlZmluaXRpb24udHNcbnZhciBCb3hlZEZ1bmN0aW9uRGVmaW5pdGlvbkltcGwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNlLCBuYW1lLCBkZWYpIHtcbiAgICBpZiAoIWNlLmNvbnRleHQpXG4gICAgICB0aHJvdyBFcnJvcihcIk5vIGNvbnRleHQgYXZhaWxhYmxlXCIpO1xuICAgIHRoaXMuZW5naW5lID0gY2U7XG4gICAgdGhpcy5zY29wZSA9IGNlLmNvbnRleHQ7XG4gICAgY29uc3QgaWRlbXBvdGVudCA9IGRlZi5pZGVtcG90ZW50ID8/IGZhbHNlO1xuICAgIGNvbnN0IGludm9sdXRpb24gPSBkZWYuaW52b2x1dGlvbiA/PyBmYWxzZTtcbiAgICBpZiAoaWRlbXBvdGVudCAmJiBpbnZvbHV0aW9uKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRnVuY3Rpb24gRGVmaW5pdGlvbiBcIiR7bmFtZX1cIjogdGhlICdpZGVtcG90ZW50JyBhbmQgJ2ludm9sdXRpb24nIGZsYWdzIGFyZSBtdXR1YWxseSBleGNsdXNpdmVgXG4gICAgICApO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlZi5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLndpa2lkYXRhID0gZGVmLndpa2lkYXRhO1xuICAgIHRoaXMudGhyZWFkYWJsZSA9IGRlZi50aHJlYWRhYmxlID8/IGZhbHNlO1xuICAgIHRoaXMuYXNzb2NpYXRpdmUgPSBkZWYuYXNzb2NpYXRpdmUgPz8gZmFsc2U7XG4gICAgdGhpcy5jb21tdXRhdGl2ZSA9IGRlZi5jb21tdXRhdGl2ZSA/PyBmYWxzZTtcbiAgICB0aGlzLmlkZW1wb3RlbnQgPSBpZGVtcG90ZW50O1xuICAgIHRoaXMuaW52b2x1dGlvbiA9IGludm9sdXRpb247XG4gICAgdGhpcy5pbmVydCA9IGRlZi5pbmVydCA/PyBmYWxzZTtcbiAgICB0aGlzLm51bWVyaWMgPSBkZWYubnVtZXJpYyA/PyBmYWxzZTtcbiAgICB0aGlzLnB1cmUgPSBkZWYucHVyZSA/PyB0cnVlO1xuICAgIHRoaXMuY29tcGxleGl0eSA9IGRlZi5jb21wbGV4aXR5ID8/IERFRkFVTFRfQ09NUExFWElUWTtcbiAgICB0aGlzLmhvbGQgPSBkZWYuaG9sZCA/PyBcIm5vbmVcIjtcbiAgICBpZiAodGhpcy5pbmVydCkge1xuICAgICAgaWYgKGRlZi5ob2xkKVxuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBgRnVuY3Rpb24gRGVmaW5pdGlvbiBcIiR7bmFtZX1cIjogYW4gaW5lcnQgZnVuY3Rpb24gc2hvdWxkIG5vdCBoYXZlIGEgaG9sZGBcbiAgICAgICAgKTtcbiAgICAgIHRoaXMuaG9sZCA9IFwicmVzdFwiO1xuICAgICAgaWYgKGRlZi5zaWduYXR1cmUpIHtcbiAgICAgICAgY29uc3Qgc2lnID0gZGVmLnNpZ25hdHVyZTtcbiAgICAgICAgaWYgKFwic2ltcGxpZnlcIiBpbiBzaWcgfHwgXCJldmFsdWF0ZVwiIGluIHNpZyB8fCBcIk5cIiBpbiBzaWcgfHwgXCJldmFsRGltZW5zaW9uXCIgaW4gc2lnIHx8IFwic2duXCIgaW4gc2lnIHx8IFwiY29tcGlsZVwiIGluIHNpZylcbiAgICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgIGBGdW5jdGlvbiBEZWZpbml0aW9uIFwiJHtuYW1lfVwiOiBhbiBpbmVydCBmdW5jdGlvbiBzaG91bGQgb25seSBoYXZlICdjYW5vbmljYWwnIG9yICdjb2RvbWFpbicgaGFuZGxlcnNgXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnRocmVhZGFibGUpXG4gICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgIGBGdW5jdGlvbiBEZWZpbml0aW9uIFwiJHtuYW1lfVwiOiBhbiBpbmVydCBmdW5jdGlvbiBzaG91bGQgbm90IGJlIHRocmVhZGFibGVgXG4gICAgICAgICk7XG4gICAgICBpZiAodGhpcy5hc3NvY2lhdGl2ZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgYEZ1bmN0aW9uIERlZmluaXRpb24gXCIke25hbWV9XCI6IGFuIGluZXJ0IGZ1bmN0aW9uIHNob3VsZCBub3QgYmUgYXNzb2NpYXRpdmVgXG4gICAgICAgICk7XG4gICAgICBpZiAodGhpcy5jb21tdXRhdGl2ZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgYEZ1bmN0aW9uIERlZmluaXRpb24gXCIke25hbWV9XCI6IGFuIGluZXJ0IGZ1bmN0aW9uIHNob3VsZCBub3QgYmUgY29tbXV0YXRpdmVgXG4gICAgICAgICk7XG4gICAgICBpZiAodGhpcy5pZGVtcG90ZW50KVxuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBgRnVuY3Rpb24gRGVmaW5pdGlvbiBcIiR7bmFtZX1cIjogYW4gaW5lcnQgZnVuY3Rpb24gc2hvdWxkIG5vdCBiZSBpZGVtcG90ZW50YFxuICAgICAgICApO1xuICAgICAgaWYgKHRoaXMuaW52b2x1dGlvbilcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgYEZ1bmN0aW9uIERlZmluaXRpb24gXCIke25hbWV9XCI6IGFuIGluZXJ0IGZ1bmN0aW9uIHNob3VsZCBub3QgYmUgaW52b2x1dGlvbmBcbiAgICAgICAgKTtcbiAgICAgIGlmICghdGhpcy5wdXJlKVxuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBgRnVuY3Rpb24gRGVmaW5pdGlvbiBcIiR7bmFtZX1cIjogYW4gaW5lcnQgZnVuY3Rpb24gc2hvdWxkIGJlIHB1cmVgXG4gICAgICAgICk7XG4gICAgfVxuICAgIGlmIChkZWYuc2lnbmF0dXJlKSB7XG4gICAgICBjb25zdCBzaWcgPSBkZWYuc2lnbmF0dXJlO1xuICAgICAgY29uc3QgZG9tYWluID0gc2lnLmRvbWFpbiA/IGNlLmRvbWFpbihzaWcuZG9tYWluKSA6IGRlZi5udW1lcmljID8gY2UuZG9tYWluKFwiTnVtZXJpY0Z1bmN0aW9uXCIpIDogY2UuZG9tYWluKFwiRnVuY3Rpb25cIik7XG4gICAgICBpZiAoIWRvbWFpbi5pc1ZhbGlkKVxuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBgRnVuY3Rpb24gRGVmaW5pdGlvbiBcIiR7bmFtZX1cIjogaW52YWxpZCBkb21haW4gJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIHNpZy5kb21haW5cbiAgICAgICAgICApfWBcbiAgICAgICAgKTtcbiAgICAgIGNvbnN0IGNvZG9tYWluID0gc2lnLmNvZG9tYWluID8/IGRvbWFpbi5jb2RvbWFpbiA/PyAoZGVmLm51bWVyaWMgPyBjZS5kb21haW4oXCJOdW1iZXJcIikgOiBjZS5kb21haW4oXCJBbnl0aGluZ1wiKSk7XG4gICAgICB0aGlzLnNpZ25hdHVyZSA9IHtcbiAgICAgICAgZG9tYWluLFxuICAgICAgICBjb2RvbWFpbixcbiAgICAgICAgY2Fub25pY2FsOiBzaWcuY2Fub25pY2FsLFxuICAgICAgICBzaW1wbGlmeTogc2lnLnNpbXBsaWZ5LFxuICAgICAgICBldmFsdWF0ZTogIXNpZy5ldmFsdWF0ZSA/IHZvaWQgMCA6IHR5cGVvZiBzaWcuZXZhbHVhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHNpZy5ldmFsdWF0ZSA6IGNlLmJveChzaWcuZXZhbHVhdGUsIHsgY2Fub25pY2FsOiBmYWxzZSB9KSxcbiAgICAgICAgTjogc2lnLk4sXG4gICAgICAgIGV2YWxEaW1lbnNpb246IHNpZy5ldmFsRGltZW5zaW9uLFxuICAgICAgICBzZ246IHNpZy5zZ24sXG4gICAgICAgIGNvbXBpbGU6IHNpZy5jb21waWxlXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZGVmLm51bWVyaWMpIHtcbiAgICAgIHRoaXMuc2lnbmF0dXJlID0ge1xuICAgICAgICBkb21haW46IGNlLmRvbWFpbihcIk51bWVyaWNGdW5jdGlvblwiKSxcbiAgICAgICAgY29kb21haW46IGNlLmRvbWFpbihcIk51bWJlclwiKVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaWduYXR1cmUgPSB7XG4gICAgICAgIGRvbWFpbjogY2UuZG9tYWluKFwiRnVuY3Rpb25cIiksXG4gICAgICAgIGNvZG9tYWluOiBjZS5kb21haW4oXCJBbnl0aGluZ1wiKVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgcmV0dXJuO1xuICB9XG59O1xuZnVuY3Rpb24gbWFrZUZ1bmN0aW9uRGVmaW5pdGlvbihlbmdpbmUsIG5hbWUsIGRlZikge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgQm94ZWRGdW5jdGlvbkRlZmluaXRpb25JbXBsKVxuICAgIHJldHVybiBkZWY7XG4gIHJldHVybiBuZXcgQm94ZWRGdW5jdGlvbkRlZmluaXRpb25JbXBsKFxuICAgIGVuZ2luZSxcbiAgICBuYW1lLFxuICAgIGRlZlxuICApO1xufVxuXG4vLyBzcmMvY29tcHV0ZS1lbmdpbmUvbGlicmFyeS9saWJyYXJ5LnRzXG5mdW5jdGlvbiBnZXRTdGFuZGFyZExpYnJhcnkoY2F0ZWdvcmllcykge1xuICBpZiAoY2F0ZWdvcmllcyA9PT0gXCJhbGxcIikge1xuICAgIHJldHVybiBnZXRTdGFuZGFyZExpYnJhcnkoW1xuICAgICAgXCJkb21haW5zXCIsXG4gICAgICBcImNvcmVcIixcbiAgICAgIFwiY29udHJvbC1zdHJ1Y3R1cmVzXCIsXG4gICAgICAvLyBJZiwgQmxvY2ssIExvb3BcbiAgICAgIFwibG9naWNcIixcbiAgICAgIFwiY29sbGVjdGlvbnNcIixcbiAgICAgIC8vIERpY3Rpb25hcnksIExpc3QsIFNldHNcbiAgICAgIFwicmVsb3BcIixcbiAgICAgIFwibnVtZXJpY1wiLFxuICAgICAgXCJhcml0aG1ldGljXCIsXG4gICAgICBcImFsZ2VicmFcIixcbiAgICAgIFwiY2FsY3VsdXNcIixcbiAgICAgIFwiY29tYmluYXRvcmljc1wiLFxuICAgICAgXCJsaW5lYXItYWxnZWJyYVwiLFxuICAgICAgXCJvdGhlclwiLFxuICAgICAgXCJwaHlzaWNzXCIsXG4gICAgICBcInBvbHlub21pYWxzXCIsXG4gICAgICBcInN0YXRpc3RpY3NcIixcbiAgICAgIFwidHJpZ29ub21ldHJ5XCIsXG4gICAgICBcImRpbWVuc2lvbnNcIixcbiAgICAgIFwidW5pdHNcIlxuICAgIF0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjYXRlZ29yaWVzID09PSBcInN0cmluZ1wiKVxuICAgIGNhdGVnb3JpZXMgPSBbY2F0ZWdvcmllc107XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGNvbnN0IGNhdGVnb3J5IG9mIGNhdGVnb3JpZXMpIHtcbiAgICBjb25zdCBkaWN0ID0gTElCUkFSSUVTW2NhdGVnb3J5XTtcbiAgICBpZiAoIWRpY3QpXG4gICAgICB0aHJvdyBFcnJvcihgVW5rbm93biBsaWJyYXJ5IGNhdGVnb3J5ICR7Y2F0ZWdvcnl9YCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGljdCkpXG4gICAgICByZXN1bHQucHVzaCguLi5kaWN0KTtcbiAgICBlbHNlXG4gICAgICByZXN1bHQucHVzaChkaWN0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxudmFyIExJQlJBUklFUyA9IHtcbiAgXCJhbGdlYnJhXCI6IFtdLFxuICAvLyAnYWxnZWJyYSc6IFtcbiAgLy8gICAvLyBwb2x5bm9taWFsKFswLCAyLCAwLCA0XTpsaXN0LCB4OnN5bWJvbCkgLT4gMnggKyA0eF4zXG4gIC8vICAgLy8gcG9seW5vbWlhbCgyeCArIDR4XjMsIHgpIC0+IHswLCAyLCAwLCA0fVxuICAvLyAgIC8vIHJhdGlvbmFsKDJ4ICsgNHheMywgezMsIDF9LCB4KSAtPiAoMnggKyA0eF4zKS8oMyt4KVxuICAvLyAgIC8vIGh0dHBzOi8vcmVmZXJlbmNlLndvbGZyYW0uY29tL2xhbmd1YWdlL3R1dG9yaWFsL0FsZ2VicmFpY0NhbGN1bGF0aW9ucy5odG1sXG4gIC8vICAgLy8gc2ltcGxpZnktdHJpZyAobWFjc3ltYSlcbiAgLy8gICAvLyAgLSB0cmlnUmVkdWNlLCB0cmlnRXhwYW5kLCB0cmlnRmFjdG9yLCB0cmlnVG9FeHAgKG1hdGhlbWF0aWNhKVxuICAvLyAgIC8vIE1hdGhlbWF0aWNhOlxuICAvLyAgIC8vIC0gZGlzdHJpYnV0ZSAtPiAoYStiKShjK2QpIC0+IGFjKyBhZCsgYmMrIGJkIChkb2Vzbid0IGhhdmUgdG8gYmUgbXVsdGlwbHksXG4gIC8vICAgLy8gZihhK2IsIGMrZCkgLT4gZihhLCBjKSArIGYoYSwgZCkgKyBmKGIsIGMpICsgZihiLCBkKVxuICAvLyAgIC8vIC0tIGRpc3RyaWJ1dGUoZXhwciwgb3Zlcj1hZGQsIHdpdGg9bXVsdGlwbHkpXG4gIC8vICAgLy8gaHR0cHM6Ly9yZWZlcmVuY2Uud29sZnJhbS5jb20vbGFuZ3VhZ2UvcmVmL0Rpc3RyaWJ1dGUuaHRtbFxuICAvLyAgIC8vIC0gZXhwYW5kLCBleHBhbmQtYWxsXG4gIC8vICAgLy8gLSBmYWN0b3JcbiAgLy8gICAvLyAtIHNpbXBsaWZ5XG4gIC8vIF0sXG4gIFwiYXJpdGhtZXRpY1wiOiBbLi4uQVJJVEhNRVRJQ19MSUJSQVJZLCAuLi5DT01QTEVYX0xJQlJBUlldLFxuICBcImNhbGN1bHVzXCI6IENBTENVTFVTX0xJQlJBUlksXG4gIFwiY29tYmluYXRvcmljc1wiOiBbXSxcbiAgLy8gQHRvZG8gZmlib25hY2NpLCBiaW5vbWlhbCwgZXRjLi4uXG4gIFwiY29udHJvbC1zdHJ1Y3R1cmVzXCI6IFtdLFxuICAvLyAgIC8vIERcbiAgLy8gICAvLyBEZXJpdmF0aXZlIChtYXRoZW1hdGljYSlcbiAgLy8gICAvLyBkaWZmIChtYWNzeW1hKVxuICAvLyAgIC8vIG50aC1kaWZmXG4gIC8vICAgLy8gaW50XG4gIC8vICAgLy8gLSBpbnRlZ3JhdGUoZXhwcmVzc2lvbiwgc3ltYm9sKSAgLS0gaW5kZWZpbml0ZSBpbnRlZ3JhbFxuICAvLyAgIC8vIC0gaW50ZWdyYXRlKGV4cHJlc3Npb24sIHJhbmdlKSA8cmFuZ2U+ID0ge3N5bWJvbCwgbWluLCBtYXh9IC0tIGRlZmluaXRlIGludGVncmFsXG4gIC8vICAgLy8gLSBpbnRlZ3JhdGUoZXhwcmVzc2lvbiwgcmFuZ2UxLCByYW5nZTIpIC0tIG11bHRpcGxlIGludGVncmFsXG4gIC8vICAgLy8gZGVmLWludFxuICAvLyBdLFxuICBcImRpbWVuc2lvbnNcIjogW10sXG4gIC8vIEB0b2RvIC8vIHZvbHVtZSwgc3BlZWQsIGFyZWFcbiAgXCJkb21haW5zXCI6IFtdLFxuICBcImNvcmVcIjogQ09SRV9MSUJSQVJZLFxuICBcImNvbGxlY3Rpb25zXCI6IFtTRVRTX0xJQlJBUlksIENPTExFQ1RJT05TX0xJQlJBUlksIGRvbWFpblNldHNMaWJyYXJ5KCldLFxuICAvLyAnZG9tYWlucyc6IGdldERvbWFpbnNEaWN0aW9uYXJ5KCksXG4gIFwibGluZWFyLWFsZ2VicmFcIjogW10sXG4gIC8vQHRvZG8gICAvLyAnbGluZWFyLWFsZ2VicmEnOiBbXG4gIC8vICAgLy8gbWF0cml4XG4gIC8vICAgLy8gdHJhbnNwb3NlXG4gIC8vICAgLy8gY3Jvc3MtcHJvZHVjdFxuICAvLyAgIC8vIG91dGVyLXByb2R1Y3RcbiAgLy8gICAvLyBkZXRlcm1pbmFudFxuICAvLyAgIC8vIHZlY3RvclxuICAvLyAgIC8vIG1hdHJpeFxuICAvLyAgIC8vIHJhbmtcbiAgLy8gICAvLyBzY2FsYXItbWF0cml4XG4gIC8vICAgLy8gY29uc3RhbnQtbWF0cml4XG4gIC8vICAgLy8gaWRlbnRpdHktbWF0cml4XG4gIC8vIF0sXG4gIFwibG9naWNcIjogTE9HSUNfTElCUkFSWSxcbiAgXCJudW1lcmljXCI6IFtdLFxuICAvLyBAdG9kbyAgIC8vICdudW1lcmljJzogW1xuICAvLyAgIC8vIEdhbW1hIGZ1bmN0aW9uXG4gIC8vICAgLy8gWmV0YSBmdW5jdGlvblxuICAvLyAgIC8vIGVyZiBmdW5jdGlvblxuICAvLyAgIC8vIG51bWVyYXRvcihmcmFjdGlvbilcbiAgLy8gICAvLyBkZW5vbWluYXRvcihmcmFjdGlvbilcbiAgLy8gICAvLyBleGFjdEZsb2F0VG9SYXRpb25hbFxuICAvLyAgIC8vIE4gLT4gZXZhbCBhcyBhIG51bWJlclxuICAvLyAgIC8vIHJhbmRvbVxuICAvLyAgIC8vIGhhc2hcbiAgLy8gXSxcbiAgXCJvdGhlclwiOiBbXSxcbiAgXCJyZWxvcFwiOiBSRUxPUF9MSUJSQVJZLFxuICBcInBvbHlub21pYWxzXCI6IFBPTFlOT01JQUxTX0xJQlJBUlksXG4gIFwicGh5c2ljc1wiOiB7XG4gICAgTXUwOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJWYWNjdW0gcGVybWVhYmlsaXR5XCIsXG4gICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgIHdpa2lkYXRhOiBcIlExNTE1MjYxXCIsXG4gICAgICBkb21haW46IFwiUmVhbE51bWJlclwiLFxuICAgICAgdmFsdWU6IDEyNTY2MzcwNjIxMmUtMTdcbiAgICAgIC8vIHVuaXQ6IFsnRGl2aWRlJywgJ04nLCBbJ1NxdWFyZScsICdBJ11dLFxuICAgIH1cbiAgfSxcbiAgXCJzdGF0aXN0aWNzXCI6IFNUQVRJU1RJQ1NfTElCUkFSWSxcbiAgXCJ0cmlnb25vbWV0cnlcIjogVFJJR09OT01FVFJZX0xJQlJBUlksXG4gIFwidW5pdHNcIjogW11cbn07XG5mdW5jdGlvbiB2YWxpZGF0ZURlZmluaXRpb25OYW1lKG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUubm9ybWFsaXplKCk7XG4gIGlmIChpc1ZhbGlkSWRlbnRpZmllcihuYW1lKSlcbiAgICByZXR1cm4gbmFtZTtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGBJbnZhbGlkIGRlZmluaXRpb24gbmFtZSBcIiR7bmFtZX1cIjogJHt2YWxpZGF0ZUlkZW50aWZpZXIobmFtZSl9YFxuICApO1xufVxuZnVuY3Rpb24gc2V0Q3VycmVudENvbnRleHRTeW1ib2xUYWJsZShlbmdpbmUsIHRhYmxlKSB7XG4gIHZhciBfYTtcbiAgaWYgKCFlbmdpbmUuY29udGV4dClcbiAgICB0aHJvdyBFcnJvcihcIk5vIGNvbnRleHQgYXZhaWxhYmxlXCIpO1xuICAoX2EgPSBlbmdpbmUuY29udGV4dCkuaWRUYWJsZSA/PyAoX2EuaWRUYWJsZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICBjb25zdCBpZFRhYmxlID0gZW5naW5lLmNvbnRleHQuaWRUYWJsZTtcbiAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh0YWJsZSkpIHtcbiAgICBjb25zdCBlbnRyeSA9IHRhYmxlW25hbWVdO1xuICAgIG5hbWUgPSB2YWxpZGF0ZURlZmluaXRpb25OYW1lKG5hbWUpO1xuICAgIGlmIChpc0Z1bmN0aW9uRGVmaW5pdGlvbihlbnRyeSkpIHtcbiAgICAgIGNvbnN0IGRlZiA9IG1ha2VGdW5jdGlvbkRlZmluaXRpb24oZW5naW5lLCBuYW1lLCBlbnRyeSk7XG4gICAgICBpZiAoaWRUYWJsZS5oYXMobmFtZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgRHVwbGljYXRlIGZ1bmN0aW9uIGRlZmluaXRpb24gJHtuYW1lfTpcbiR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICBpZFRhYmxlLmdldChuYW1lKVxuICAgICAgICAgICl9XG4ke0pTT04uc3RyaW5naWZ5KGVudHJ5KX1gXG4gICAgICAgICk7XG4gICAgICBpZFRhYmxlLnNldChuYW1lLCBkZWYpO1xuICAgIH0gZWxzZSBpZiAoaXNTeW1ib2xEZWZpbml0aW9uKGVudHJ5KSkge1xuICAgICAgY29uc3QgZGVmID0gbmV3IEJveGVkU3ltYm9sRGVmaW5pdGlvbkltcGwoZW5naW5lLCBuYW1lLCBlbnRyeSk7XG4gICAgICBpZiAoZW5naW5lLnN0cmljdCAmJiBlbnRyeS53aWtpZGF0YSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtfLCBkXSBvZiBpZFRhYmxlKSB7XG4gICAgICAgICAgaWYgKGQud2lraWRhdGEgPT09IGVudHJ5Lndpa2lkYXRhKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgRHVwbGljYXRlIGVudHJpZXMgd2l0aCB3aWtpZGF0YSBcIiR7ZW50cnkud2lraWRhdGF9XCI6IFwiJHtuYW1lfVwiIGFuZCBcIiR7ZC5uYW1lfVwiYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlkVGFibGUuaGFzKG5hbWUpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZSBzeW1ib2wgZGVmaW5pdGlvbiBcIiR7bmFtZX1cImApO1xuICAgICAgaWRUYWJsZS5zZXQobmFtZSwgZGVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGVmID0gbmV3IEJveGVkU3ltYm9sRGVmaW5pdGlvbkltcGwoZW5naW5lLCBuYW1lLCB7XG4gICAgICAgIHZhbHVlOiBlbmdpbmUuYm94KGVudHJ5KVxuICAgICAgfSk7XG4gICAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQoZGVmKTtcbiAgICAgIGlkVGFibGUuc2V0KG5hbWUsIGRlZik7XG4gICAgfVxuICB9XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9jb3N0LWZ1bmN0aW9uLnRzXG52YXIgaW1wb3J0X2NvbXBsZXgxOSA9IF9fdG9FU00ocmVxdWlyZV9jb21wbGV4KCkpO1xuZnVuY3Rpb24gbnVtZXJpY0Nvc3RGdW5jdGlvbihuKSB7XG4gIGlmIChOdW1iZXIuaXNJbnRlZ2VyKG4pICYmIG4gIT09IDApIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLmxvZzIoTWF0aC5hYnMobikpIC8gTWF0aC5sb2cyKDEwKSkgKyAobiA+IDAgPyAxIDogMik7XG4gIH1cbiAgcmV0dXJuIDI7XG59XG5mdW5jdGlvbiBjb3N0RnVuY3Rpb24oZXhwcikge1xuICBpZiAoZXhwci5zeW1ib2wpXG4gICAgcmV0dXJuIDE7XG4gIGNvbnN0IG51bSA9IGV4cHIubnVtZXJpY1ZhbHVlO1xuICBpZiAobnVtICE9PSBudWxsKSB7XG4gICAgaWYgKGV4cHIuaXNaZXJvKVxuICAgICAgcmV0dXJuIDE7XG4gICAgaWYgKGV4cHIuaXNJbnRlZ2VyKVxuICAgICAgcmV0dXJuIG51bWVyaWNDb3N0RnVuY3Rpb24oYXNGbG9hdChleHByKSk7XG4gICAgaWYgKGlzUmF0aW9uYWwobnVtKSkge1xuICAgICAgaWYgKGlzTWFjaGluZVJhdGlvbmFsKG51bSkpXG4gICAgICAgIHJldHVybiBudW1lcmljQ29zdEZ1bmN0aW9uKG51bVswXSkgKyBudW1lcmljQ29zdEZ1bmN0aW9uKG51bVsxXSkgKyAxO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gbnVtZXJpY0Nvc3RGdW5jdGlvbihOdW1iZXIobnVtWzBdKSkgKyBudW1lcmljQ29zdEZ1bmN0aW9uKE51bWJlcihudW1bMV0pKSArIDE7XG4gICAgfVxuICAgIGlmIChudW0gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDE5LmRlZmF1bHQpXG4gICAgICByZXR1cm4gbnVtZXJpY0Nvc3RGdW5jdGlvbihudW0ucmUpICsgbnVtZXJpY0Nvc3RGdW5jdGlvbihudW0uaW0pICsgMTtcbiAgICBpZiAoZXhwci5pc051bWJlcilcbiAgICAgIHJldHVybiAyO1xuICB9XG4gIGNvbnN0IGhlYWQyID0gZXhwci5oZWFkO1xuICBsZXQgaGVhZENvc3QgPSAyO1xuICBpZiAodHlwZW9mIGhlYWQyID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKFtcIkFkZFwiLCBcIkRpdmlkZVwiXS5pbmNsdWRlcyhoZWFkMikpXG4gICAgICBoZWFkQ29zdCA9IDM7XG4gICAgZWxzZSBpZiAoW1wiU3VidHJhY3RcIiwgXCJOZWdhdGVcIl0uaW5jbHVkZXMoaGVhZDIpKVxuICAgICAgaGVhZENvc3QgPSA0O1xuICAgIGVsc2UgaWYgKFtcIlNxdWFyZVwiLCBcIlNxcnRcIiwgXCJNdWx0aXBseVwiLCBcIlJvb3RcIl0uaW5jbHVkZXMoaGVhZDIpKVxuICAgICAgaGVhZENvc3QgPSA1O1xuICAgIGVsc2UgaWYgKFtcIlBvd2VyXCJdLmluY2x1ZGVzKGhlYWQyKSlcbiAgICAgIGhlYWRDb3N0ID0gNjtcbiAgICBlbHNlIGlmIChbXCJMblwiLCBcIkV4cFwiLCBcIkxvZ1wiXS5pbmNsdWRlcyhoZWFkMikpXG4gICAgICBoZWFkQ29zdCA9IDc7XG4gICAgZWxzZSBpZiAoW1xuICAgICAgXCJBcmNzaW5cIixcbiAgICAgIFwiQXJjY29zXCIsXG4gICAgICBcIkFyY3RhblwiLFxuICAgICAgXCJBcmNzZWNcIixcbiAgICAgIFwiIEFyY2NzY1wiLFxuICAgICAgXCJBcnNpbmhcIixcbiAgICAgIFwiQXJjb3NoXCIsXG4gICAgICBcIkFydGFuaFwiLFxuICAgICAgXCJBcmNzZWNoXCIsXG4gICAgICBcIkFyY3NjaFwiLFxuICAgICAgXCJDb3NoXCIsXG4gICAgICBcIkNvc1wiLFxuICAgICAgXCJDc2NcIixcbiAgICAgIFwiQ3NjaFwiLFxuICAgICAgLy8gJz8/JzogJ0NvdCcsXG4gICAgICAvLyAnPz8nOiAnQ290aCcsXG4gICAgICBcIlNlY1wiLFxuICAgICAgXCJTaW5cIixcbiAgICAgIFwiU2luaFwiLFxuICAgICAgXCJUYW5cIixcbiAgICAgIFwiVGFuaFwiXG4gICAgXS5pbmNsdWRlcyhoZWFkMikpXG4gICAgICBoZWFkQ29zdCA9IDk7XG4gICAgZWxzZVxuICAgICAgaGVhZENvc3QgPSAxMDtcbiAgfSBlbHNlXG4gICAgaGVhZENvc3QgPSBjb3N0RnVuY3Rpb24oaGVhZDIpO1xuICByZXR1cm4gaGVhZENvc3QgKyAoZXhwci5vcHM/LnJlZHVjZSgoYWNjLCB4KSA9PiBhY2MgKyBjb3N0RnVuY3Rpb24oeCksIDApID8/IDApO1xufVxudmFyIERFRkFVTFRfQ09TVF9GVU5DVElPTiA9IGNvc3RGdW5jdGlvbjtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2JveGVkLWV4cHJlc3Npb24vZXhwcmVzc2lvbi1tYXAudHNcbnZhciBFeHByZXNzaW9uTWFwID0gY2xhc3MgX0V4cHJlc3Npb25NYXAge1xuICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgdGhpcy5faXRlbXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIH0gZWxzZSBpZiAoc291cmNlIGluc3RhbmNlb2YgX0V4cHJlc3Npb25NYXApIHtcbiAgICAgIHRoaXMuX2l0ZW1zID0gbmV3IE1hcChzb3VyY2UuX2l0ZW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faXRlbXMgPSBuZXcgTWFwKFxuICAgICAgICBzb3VyY2VcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGhhcyhleHByKSB7XG4gICAgZm9yIChjb25zdCB4IG9mIHRoaXMuX2l0ZW1zLmtleXMoKSlcbiAgICAgIGlmICh4LmlzU2FtZShleHByKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldChleHByKSB7XG4gICAgZm9yIChjb25zdCBbeCwgdl0gb2YgdGhpcy5faXRlbXMpXG4gICAgICBpZiAoeC5pc1NhbWUoZXhwcikpXG4gICAgICAgIHJldHVybiB2O1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5faXRlbXMuY2xlYXIoKTtcbiAgfVxuICBzZXQoZXhwciwgdmFsdWUpIHtcbiAgICBmb3IgKGNvbnN0IHggb2YgdGhpcy5faXRlbXMua2V5cygpKSB7XG4gICAgICBpZiAoeC5pc1NhbWUoZXhwcikpIHtcbiAgICAgICAgdGhpcy5faXRlbXMuc2V0KHgsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9pdGVtcy5zZXQoZXhwciwgdmFsdWUpO1xuICB9XG4gIGRlbGV0ZShleHByKSB7XG4gICAgdGhpcy5faXRlbXMuZGVsZXRlKGV4cHIpO1xuICB9XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLl9pdGVtcy5lbnRyaWVzKCk7XG4gIH1cbiAgZW50cmllcygpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbXMuZW50cmllcygpO1xuICB9XG59O1xuXG4vLyBzcmMvY29tbW9uL3V0aWxzLnRzXG5mdW5jdGlvbiBwZXJtdXRhdGlvbnMoeHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IHBlcm11dGUgPSAoYXJyLCBtID0gW10pID0+IHtcbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzdWx0LnB1c2gobSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnIgPSBhcnIuc2xpY2UoKTtcbiAgICAgICAgY29uc3QgbmV4dCA9IGN1cnIuc3BsaWNlKGksIDEpO1xuICAgICAgICBwZXJtdXRlKGN1cnIuc2xpY2UoKSwgbS5jb25jYXQobmV4dCkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcGVybXV0ZSh4cyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL2JveGVkLXBhdHRlcm5zLnRzXG52YXIgQm94ZWRQYXR0ZXJuID0gY2xhc3MgX0JveGVkUGF0dGVybiBleHRlbmRzIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY2UsIHBhdHRlcm4sIG1ldGFkYXRhKSB7XG4gICAgc3VwZXIoY2UsIG1ldGFkYXRhKTtcbiAgICB0aGlzLl9wYXR0ZXJuID0gaXNMYXRleFN0cmluZyhwYXR0ZXJuKSA/IGNlLnBhcnNlKHBhdHRlcm4sIHsgY2Fub25pY2FsOiBmYWxzZSB9KSA6IGNlLmJveChwYXR0ZXJuLCB7IGNhbm9uaWNhbDogZmFsc2UgfSk7XG4gIH1cbiAgZ2V0IGhhc2goKSB7XG4gICAgcmV0dXJuIGhhc2hDb2RlKFwiUGF0dGVyblwiKSBeIHRoaXMuX3BhdHRlcm4uaGFzaDtcbiAgfVxuICB1bmJpbmQoKSB7XG4gICAgdGhpcy5fcGF0dGVybi51bmJpbmQoKTtcbiAgfVxuICBnZXQganNvbigpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplSnNvbkZ1bmN0aW9uKHRoaXMuZW5naW5lLCBcIlBhdHRlcm5cIiwgW3RoaXMuX3BhdHRlcm5dKTtcbiAgfVxuICBnZXQgaGVhZCgpIHtcbiAgICByZXR1cm4gXCJQYXR0ZXJuXCI7XG4gIH1cbiAgZ2V0IGRvbWFpbigpIHtcbiAgICByZXR1cm4gdGhpcy5lbmdpbmUuZG9tYWluKFwiUGF0dGVyblwiKTtcbiAgfVxuICBnZXQgaXNDYW5vbmljYWwoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc2V0IGlzQ2Fub25pY2FsKF92YWwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaXNTYW1lKHJocykge1xuICAgIGlmICh0aGlzID09PSByaHMpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gcmhzIGluc3RhbmNlb2YgX0JveGVkUGF0dGVybiAmJiB0aGlzLl9wYXR0ZXJuLmlzU2FtZShyaHMuX3BhdHRlcm4pO1xuICB9XG4gIGlzRXF1YWwocmhzKSB7XG4gICAgcmV0dXJuIHJocyBpbnN0YW5jZW9mIF9Cb3hlZFBhdHRlcm4gJiYgdGhpcy5fcGF0dGVybi5pc0VxdWFsKHJocy5fcGF0dGVybik7XG4gIH1cbiAgbWF0Y2goZXhwciwgb3B0aW9ucykge1xuICAgIHJldHVybiBtYXRjaChleHByLCB0aGlzLl9wYXR0ZXJuLCB7XG4gICAgICByZWN1cnNpdmU6IG9wdGlvbnM/LnJlY3Vyc2l2ZSA/PyBmYWxzZSxcbiAgICAgIG51bWVyaWNUb2xlcmFuY2U6IG9wdGlvbnM/Lm51bWVyaWNUb2xlcmFuY2UgPz8gMCxcbiAgICAgIHN1YnN0aXR1dGlvbjogb3B0aW9ucz8uc3Vic3RpdHV0aW9uID8/IHt9XG4gICAgfSk7XG4gIH1cbiAgdGVzdChleHByLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2goZXhwciwgb3B0aW9ucykgIT09IG51bGw7XG4gIH1cbiAgY291bnQoZXhwcnMsIG9wdGlvbnMpIHtcbiAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICBmb3IgKGNvbnN0IGV4cHIgb2YgZXhwcnMpIHtcbiAgICAgIGlmICh0aGlzLm1hdGNoKGV4cHIsIG9wdGlvbnMpICE9PSBudWxsKVxuICAgICAgICByZXN1bHQgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBzdWJzKHN1YjIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fcGF0dGVybi5zdWJzKHN1YjIsIG9wdGlvbnMpO1xuICB9XG59O1xuZnVuY3Rpb24gaGFzV2lsZGNhcmRzKGV4cHIpIHtcbiAgaWYgKHR5cGVvZiBleHByID09PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBleHByLnN0YXJ0c1dpdGgoXCJfXCIpO1xuICBpZiAoZXhwci5zeW1ib2w/LnN0YXJ0c1dpdGgoXCJfXCIpKVxuICAgIHJldHVybiB0cnVlO1xuICBpZiAoZXhwci5vcHMpXG4gICAgcmV0dXJuIGhhc1dpbGRjYXJkcyhleHByLmhlYWQpIHx8IGV4cHIub3BzLnNvbWUoaGFzV2lsZGNhcmRzKTtcbiAgaWYgKGV4cHIua2V5cykge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGV4cHIua2V5cylcbiAgICAgIGlmIChoYXNXaWxkY2FyZHMoZXhwci5nZXRLZXkoa2V5KSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNhcHR1cmVXaWxkY2FyZCh3aWxkY2FyZCwgZXhwciwgc3Vic3RpdHV0aW9uKSB7XG4gIGNvbnN0IG5hbWUgPSBnZXRXaWxkY2FyZE5hbWUod2lsZGNhcmQpO1xuICBpZiAobmFtZSA9PT0gXCJcIilcbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICBpZiAoc3Vic3RpdHV0aW9uW25hbWVdICE9PSB2b2lkIDApIHtcbiAgICBpZiAoIWV4cHIuaXNTYW1lKHN1YnN0aXR1dGlvbltuYW1lXSkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICB9XG4gIGlmIChoYXNXaWxkY2FyZHMoZXhwcikpXG4gICAgcmV0dXJuIG51bGw7XG4gIHJldHVybiB7IC4uLnN1YnN0aXR1dGlvbiwgW25hbWVdOiBleHByIH07XG59XG5mdW5jdGlvbiBtYXRjaE9uY2UoZXhwciwgcGF0dGVybiwgc3Vic3RpdHV0aW9uLCBvcHRpb25zKSB7XG4gIGNvbnN0IGNlID0gZXhwci5lbmdpbmU7XG4gIGlmIChwYXR0ZXJuLmhlYWQgPT09IFwiUGF0dGVyblwiKVxuICAgIHJldHVybiBwYXR0ZXJuLm1hdGNoKGV4cHIsIHsgc3Vic3RpdHV0aW9uLCAuLi5vcHRpb25zIH0pO1xuICBpZiAocGF0dGVybiBpbnN0YW5jZW9mIEJveGVkTnVtYmVyKSB7XG4gICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIEJveGVkTnVtYmVyKSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChvcHRpb25zLm51bWVyaWNUb2xlcmFuY2UgPT09IDApXG4gICAgICByZXR1cm4gcGF0dGVybi5pc1NhbWUoZXhwcikgPyBzdWJzdGl0dXRpb24gOiBudWxsO1xuICAgIHJldHVybiBwYXR0ZXJuLmlzRXF1YWxXaXRoVG9sZXJhbmNlKGV4cHIsIG9wdGlvbnMubnVtZXJpY1RvbGVyYW5jZSkgPyBzdWJzdGl0dXRpb24gOiBudWxsO1xuICB9XG4gIGNvbnN0IHN0ciA9IHBhdHRlcm4uc3RyaW5nO1xuICBpZiAoc3RyICE9PSBudWxsKVxuICAgIHJldHVybiBleHByLnN0cmluZyA9PT0gc3RyID8gc3Vic3RpdHV0aW9uIDogbnVsbDtcbiAgY29uc3Qgc3ltYm9sMiA9IHBhdHRlcm4uc3ltYm9sO1xuICBpZiAoc3ltYm9sMiAhPT0gbnVsbCkge1xuICAgIGlmIChzeW1ib2wyLnN0YXJ0c1dpdGgoXCJfXCIpKVxuICAgICAgcmV0dXJuIGNhcHR1cmVXaWxkY2FyZChzeW1ib2wyLCBleHByLCBzdWJzdGl0dXRpb24pO1xuICAgIHJldHVybiBzeW1ib2wyID09PSBleHByLnN5bWJvbCA/IHN1YnN0aXR1dGlvbiA6IG51bGw7XG4gIH1cbiAgaWYgKHBhdHRlcm4ubm9wcyAhPT0gZXhwci5ub3BzKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCBrZXlzID0gcGF0dGVybi5rZXlzO1xuICBpZiAoa2V5cyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGV4cHJLZXlzID0gZXhwci5rZXlzO1xuICAgIGlmIChleHByS2V5cyA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgIGNvbnN0IHIgPSBtYXRjaE9uY2UoZXhwcktleXNba2V5XSwga2V5c1trZXldLCBzdWJzdGl0dXRpb24sIG9wdGlvbnMpO1xuICAgICAgaWYgKHIgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgc3Vic3RpdHV0aW9uID0gcjtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgfVxuICBpZiAocGF0dGVybi5vcHMpIHtcbiAgICBjb25zdCBoZWFkMiA9IHBhdHRlcm4uaGVhZDtcbiAgICBpZiAodHlwZW9mIGhlYWQyID09PSBcInN0cmluZ1wiICYmIGhlYWQyLnN0YXJ0c1dpdGgoXCJfXCIpKVxuICAgICAgcmV0dXJuIGNhcHR1cmVXaWxkY2FyZChoZWFkMiwgY2UuYm94KGV4cHIuaGVhZCksIHN1YnN0aXR1dGlvbik7XG4gICAgbGV0IGRlZiA9IHZvaWQgMDtcbiAgICBpZiAodHlwZW9mIGhlYWQyID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBleHByLmhlYWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmIChoZWFkMiAhPT0gZXhwci5oZWFkKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGRlZiA9IGNlLmxvb2t1cEZ1bmN0aW9uKGhlYWQyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgciA9IG1hdGNoT25jZShcbiAgICAgICAgY2UuYm94KGV4cHIuaGVhZCwgeyBjYW5vbmljYWw6IGZhbHNlIH0pLFxuICAgICAgICBjZS5ib3goaGVhZDIsIHsgY2Fub25pY2FsOiBmYWxzZSB9KSxcbiAgICAgICAgc3Vic3RpdHV0aW9uLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgICAgaWYgKHIgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgc3Vic3RpdHV0aW9uID0gcjtcbiAgICB9XG4gICAgcmV0dXJuIGRlZj8uY29tbXV0YXRpdmUgPyBtYXRjaENvbW11dGF0aXZlQXJndW1lbnRzKGV4cHIsIHBhdHRlcm4sIHN1YnN0aXR1dGlvbiwgb3B0aW9ucykgOiBtYXRjaE5vbkNvbW11dGF0aXZlQXJndW1lbnRzKGV4cHIsIHBhdHRlcm4sIHN1YnN0aXR1dGlvbiwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBtYXRjaFBlcm11dGF0aW9uKGNlLCBvcHMyLCBwYXR0ZXJucywgc3Vic3RpdHV0aW9uLCBvcHRpb25zKSB7XG4gIGxldCByZXN1bHQgPSB7IC4uLnN1YnN0aXR1dGlvbiB9O1xuICBvcHMyID0gWy4uLm9wczJdO1xuICBsZXQgaGFzUmVzdCA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IGFyZyBvZiBwYXR0ZXJucykge1xuICAgIGlmIChhcmcuc3ltYm9sID09PSBcIl9fXCIpXG4gICAgICBoYXNSZXN0ID0gdHJ1ZTtcbiAgICBlbHNlIHtcbiAgICAgIGxldCByID0gbnVsbDtcbiAgICAgIGlmIChhcmcuc3ltYm9sPy5zdGFydHNXaXRoKFwiX1wiKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBvcHMyLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgIHIgPSBjYXB0dXJlV2lsZGNhcmQoYXJnLnN5bWJvbCwgb3BzMltpXSwgcmVzdWx0KTtcbiAgICAgICAgICBpZiAociAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb3BzMi5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG9wczIubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgciA9IG1hdGNoT25jZShvcHMyW2ldLCBhcmcsIHJlc3VsdCwgb3B0aW9ucyk7XG4gICAgICAgICAgaWYgKHIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG9wczIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAociA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXN1bHQgPSByO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc1Jlc3QgJiYgb3BzMi5sZW5ndGggPiAwKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAocmVzdWx0ICE9PSBudWxsICYmIGhhc1Jlc3QpXG4gICAgcmVzdWx0W1wiX19cIl0gPSBjZS5fZm4oXCJTZXF1ZW5jZVwiLCBvcHMyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1hdGNoQ29tbXV0YXRpdmVBcmd1bWVudHMoZXhwciwgcGF0dGVybiwgc3Vic3RpdHV0aW9uLCBvcHRpb25zKSB7XG4gIGNvbnN0IHBhdHRlcm5zID0gcGVybXV0YXRpb25zKHBhdHRlcm4ub3BzKTtcbiAgZm9yIChjb25zdCBwYXQgb2YgcGF0dGVybnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBtYXRjaFBlcm11dGF0aW9uKFxuICAgICAgZXhwci5lbmdpbmUsXG4gICAgICBleHByLm9wcyxcbiAgICAgIHBhdCxcbiAgICAgIHN1YnN0aXR1dGlvbixcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICAgIGlmIChyZXN1bHQgIT09IG51bGwpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbWF0Y2hOb25Db21tdXRhdGl2ZUFyZ3VtZW50cyhleHByLCBwYXR0ZXJuLCBzdWJzdGl0dXRpb24sIG9wdGlvbnMpIHtcbiAgY29uc3QgY2UgPSBleHByLmVuZ2luZTtcbiAgY29uc3Qgb3BzMiA9IFsuLi5leHByLm9wc107XG4gIGxldCByZXN1bHQgPSB7IC4uLnN1YnN0aXR1dGlvbiB9O1xuICBsZXQgaSA9IDA7XG4gIGNvbnN0IHBhdHRlcm5zID0gcGF0dGVybi5vcHM7XG4gIHdoaWxlIChpIDwgcGF0dGVybi5ub3BzKSB7XG4gICAgY29uc3QgcGF0ID0gcGF0dGVybnNbaV07XG4gICAgY29uc3QgYXJnTmFtZSA9IHBhdC5zeW1ib2w7XG4gICAgaWYgKGFyZ05hbWUgIT09IG51bGwpIHtcbiAgICAgIGlmIChhcmdOYW1lLnN0YXJ0c1dpdGgoXCJfX1wiKSkge1xuICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgIGlmIChwYXR0ZXJuc1tpICsgMV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgIGogPSBvcHMyLmxlbmd0aCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgd2hpbGUgKCFmb3VuZCAmJiBqIDwgb3BzMi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvdW5kID0gbWF0Y2hPbmNlKG9wczJbal0sIHBhdHRlcm5zW2kgKyAxXSwgcmVzdWx0LCBvcHRpb25zKSAhPT0gbnVsbDtcbiAgICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFmb3VuZClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXJnTmFtZS5zdGFydHNXaXRoKFwiX19fXCIpICYmIGogPD0gMSlcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmVzdWx0ID0gY2FwdHVyZVdpbGRjYXJkKFxuICAgICAgICAgIGFyZ05hbWUsXG4gICAgICAgICAgY2UuZm4oXCJTZXF1ZW5jZVwiLCBvcHMyLnNwbGljZSgwLCBqIC0gMSkpLFxuICAgICAgICAgIHJlc3VsdFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChhcmdOYW1lLnN0YXJ0c1dpdGgoXCJfXCIpKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhcHR1cmVXaWxkY2FyZChhcmdOYW1lLCBvcHMyLnNoaWZ0KCksIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzdWIyID0gbWF0Y2hPbmNlKG9wczIuc2hpZnQoKSwgcGF0LCByZXN1bHQsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoc3ViMiA9PT0gbnVsbClcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmVzdWx0ID0gc3ViMjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3ViMiA9IG1hdGNoT25jZShvcHMyLnNoaWZ0KCksIHBhdCwgcmVzdWx0LCBvcHRpb25zKTtcbiAgICAgIGlmIChzdWIyID09PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIHJlc3VsdCA9IHN1YjI7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgPT09IG51bGwpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpICs9IDE7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1hdGNoKHN1YmplY3QsIHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3Vic3RpdHV0aW9uID0gbWF0Y2hPbmNlKHN1YmplY3QsIHBhdHRlcm4sIG9wdGlvbnMuc3Vic3RpdHV0aW9uID8/IHt9LCB7XG4gICAgbnVtZXJpY1RvbGVyYW5jZTogb3B0aW9ucz8ubnVtZXJpY1RvbGVyYW5jZSA/PyBOVU1FUklDX1RPTEVSQU5DRVxuICB9KTtcbiAgaWYgKHN1YnN0aXR1dGlvbikge1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmxvZyhcIm1hdGNoXCIsIHN1YmplY3QudG9TdHJpbmcoKSwgcGF0dGVybi50b1N0cmluZygpLCBzdWJzdGl0dXRpb24pO1xuICAgIHJldHVybiBzdWJzdGl0dXRpb247XG4gIH1cbiAgaWYgKCFvcHRpb25zLnJlY3Vyc2l2ZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIHNyYy9jb21wdXRlLWVuZ2luZS9ib3hlZC1leHByZXNzaW9uL2JveGVkLXN5bWJvbC50c1xuZnVuY3Rpb24gaXNTeW1ib2xEZWZpbml0aW9uMihkZWYpIHtcbiAgaWYgKGRlZiA9PT0gbnVsbCB8fCBkZWYgPT09IHZvaWQgMClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChcImNvbnN0YW50XCIgaW4gZGVmKVxuICAgIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uRGVmaW5pdGlvbjIoZGVmKSB7XG4gIGlmIChkZWYgPT09IG51bGwgfHwgZGVmID09PSB2b2lkIDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoXCJzaWduYXR1cmVcIiBpbiBkZWYpXG4gICAgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn1cbnZhciBCb3hlZFN5bWJvbCA9IGNsYXNzIF9Cb3hlZFN5bWJvbCBleHRlbmRzIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY2UsIG5hbWUsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihjZSwgb3B0aW9ucz8ubWV0YWRhdGEpO1xuICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydChcbiAgICAgIG5hbWUgPT09IG5hbWUubm9ybWFsaXplKCksXG4gICAgICBgU3ltYm9sIFwiJHtuYW1lfVwiIG11c3QgYmUgaW4gVW5pY29kZSBORkMgY2Fub25pY2FsIG9yZGVyYFxuICAgICk7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KFxuICAgICAgaXNWYWxpZElkZW50aWZpZXIodGhpcy5fbmFtZSksXG4gICAgICBgSW52YWxpZCBzeW1ib2wgXCIke25hbWV9XCI6ICR7dmFsaWRhdGVJZGVudGlmaWVyKHRoaXMuX25hbWUpfWBcbiAgICApO1xuICAgIHRoaXMuX3Njb3BlID0gb3B0aW9ucz8uY2Fub25pY2FsID8gY2UuY29udGV4dCA6IG51bGw7XG4gICAgdGhpcy5fZGVmID0gb3B0aW9ucz8uZGVmID8/IG51bGw7XG4gIH1cbiAgZ2V0IGhhc2goKSB7XG4gICAgaWYgKHRoaXMuX2hhc2ggPT09IHZvaWQgMClcbiAgICAgIHRoaXMuX2hhc2ggPSBoYXNoQ29kZSh0aGlzLl9uYW1lKTtcbiAgICByZXR1cm4gdGhpcy5faGFzaDtcbiAgfVxuICB1bmJpbmQoKSB7XG4gICAgdGhpcy5fZGVmPy5yZXNldCgpO1xuICAgIHRoaXMuX2RlZiA9IG51bGw7XG4gIH1cbiAgZ2V0IGlzUHVyZSgpIHtcbiAgICByZXR1cm4gKHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8uY29uc3RhbnQgJiYgdGhpcy5zeW1ib2xEZWZpbml0aW9uLnZhbHVlPy5pc1B1cmUpID8/IHRoaXMuZnVuY3Rpb25EZWZpbml0aW9uPy5wdXJlID8/IGZhbHNlO1xuICB9XG4gIGdldCBqc29uKCkge1xuICAgIHJldHVybiBzZXJpYWxpemVKc29uU3ltYm9sKHRoaXMuZW5naW5lLCB0aGlzLl9uYW1lLCB7XG4gICAgICBsYXRleDogdGhpcy5fbGF0ZXgsXG4gICAgICB3aWtpZGF0YTogdGhpcy5fd2lraWRhdGFcbiAgICB9KTtcbiAgfVxuICBnZXQgc2NvcGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xuICB9XG4gIC8qKiBBIGZyZWUgdmFyaWFibGUgZWl0aGVyIGhhcyBubyBkZWZpbml0aW9uLCBvciBpdCBoYXMgYSBkZWZpbml0aW9uLCBidXQgbm8gdmFsdWUgKi9cbiAgZ2V0IGlzRnJlZSgpIHtcbiAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWYgPz8gdGhpcy5lbmdpbmUubG9va3VwU3ltYm9sKHRoaXMuX25hbWUsIHRoaXMuX3dpa2lkYXRhKTtcbiAgICByZXR1cm4gIWlzU3ltYm9sRGVmaW5pdGlvbjIoZGVmKSB8fCBkZWYudmFsdWUgPT09IHZvaWQgMDtcbiAgfVxuICBnZXQgaXNDb25zdGFudCgpIHtcbiAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWYgPz8gdGhpcy5lbmdpbmUubG9va3VwU3ltYm9sKHRoaXMuX25hbWUsIHRoaXMuX3dpa2lkYXRhKTtcbiAgICByZXR1cm4gIWlzU3ltYm9sRGVmaW5pdGlvbjIoZGVmKSB8fCBkZWYuY29uc3RhbnQ7XG4gIH1cbiAgZ2V0IGlzQ2Fub25pY2FsKCkge1xuICAgIHJldHVybiB0aGlzLl9zY29wZSAhPT0gbnVsbDtcbiAgfVxuICBzZXQgaXNDYW5vbmljYWwodmFsKSB7XG4gICAgdGhpcy5fc2NvcGUgPSB2YWwgPyB0aGlzLmVuZ2luZS5jb250ZXh0IDogbnVsbDtcbiAgICB0aGlzLl9kZWYgPSBudWxsO1xuICB9XG4gIGdldCBjYW5vbmljYWwoKSB7XG4gICAgaWYgKHRoaXMuX3Njb3BlKVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lLmJveCh0aGlzLl9uYW1lKTtcbiAgfVxuICBnZXQgd2lraWRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dpa2lkYXRhID8/IHRoaXMuYmFzZURlZmluaXRpb24/Lndpa2lkYXRhID8/IHZvaWQgMDtcbiAgfVxuICBnZXQgZGVzY3JpcHRpb24oKSB7XG4gICAgaWYgKCF0aGlzLmJhc2VEZWZpbml0aW9uKVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAoIXRoaXMuYmFzZURlZmluaXRpb24uZGVzY3JpcHRpb24pXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIGlmICh0eXBlb2YgdGhpcy5iYXNlRGVmaW5pdGlvbi5kZXNjcmlwdGlvbiA9PT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiBbdGhpcy5iYXNlRGVmaW5pdGlvbi5kZXNjcmlwdGlvbl07XG4gICAgcmV0dXJuIHRoaXMuYmFzZURlZmluaXRpb24uZGVzY3JpcHRpb247XG4gIH1cbiAgZ2V0IHVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5iYXNlRGVmaW5pdGlvbj8udXJsID8/IHZvaWQgMDtcbiAgfVxuICBnZXQgY29tcGxleGl0eSgpIHtcbiAgICByZXR1cm4gNztcbiAgfVxuICBnZXQgaGVhZCgpIHtcbiAgICByZXR1cm4gXCJTeW1ib2xcIjtcbiAgfVxuICBnZXQgc3ltYm9sKCkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICB9XG4gIGdldCBpc05vdGhpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWUgPT09IFwiTm90aGluZ1wiO1xuICB9XG4gIC8vICBBIGJhc2UgZGVmaW5pdGlvbiBpcyB0aGUgYmFzZSBjbGFzcyBvZiBib3RoIHN5bWJvbCBhbmQgZnVuY3Rpb24gZGVmaW5pdGlvblxuICBnZXQgYmFzZURlZmluaXRpb24oKSB7XG4gICAgaWYgKHRoaXMuX2RlZiA9PT0gbnVsbClcbiAgICAgIHRoaXMuYmluZCh0aGlzLl9zY29wZSk7XG4gICAgcmV0dXJuIHRoaXMuX2RlZiA/PyB2b2lkIDA7XG4gIH1cbiAgZ2V0IHN5bWJvbERlZmluaXRpb24oKSB7XG4gICAgaWYgKHRoaXMuX2RlZiA9PT0gbnVsbClcbiAgICAgIHRoaXMuYmluZCh0aGlzLl9zY29wZSk7XG4gICAgcmV0dXJuIGlzU3ltYm9sRGVmaW5pdGlvbjIodGhpcy5fZGVmKSA/IHRoaXMuX2RlZiA6IHZvaWQgMDtcbiAgfVxuICBnZXQgZnVuY3Rpb25EZWZpbml0aW9uKCkge1xuICAgIGlmICh0aGlzLl9kZWYgPT09IG51bGwpXG4gICAgICB0aGlzLmJpbmQodGhpcy5fc2NvcGUpO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uRGVmaW5pdGlvbjIodGhpcy5fZGVmKSA/IHRoaXMuX2RlZiA6IHZvaWQgMDtcbiAgfVxuICBiaW5kKHNjb3BlKSB7XG4gICAgaWYgKHNjb3BlID09PSBudWxsKSB7XG4gICAgICB0aGlzLl9kZWYgPSB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBkZWY7XG4gICAgZGVmID0gdGhpcy5lbmdpbmUubG9va3VwU3ltYm9sKHRoaXMuX25hbWUsIHRoaXMuX3dpa2lkYXRhLCBzY29wZSk7XG4gICAgaWYgKGRlZj8ud2lraWRhdGEgJiYgdGhpcy5fd2lraWRhdGEgJiYgZGVmLndpa2lkYXRhICE9PSB0aGlzLl93aWtpZGF0YSlcbiAgICAgIGRlZiA9IHZvaWQgMDtcbiAgICBpZiAoZGVmKSB7XG4gICAgICB0aGlzLl9uYW1lID0gZGVmLm5hbWU7XG4gICAgICB0aGlzLl9kZWYgPSBkZWY7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlZiA9IHRoaXMuZW5naW5lLmxvb2t1cEZ1bmN0aW9uKHRoaXMuX25hbWUsIHNjb3BlKTtcbiAgICBpZiAoZGVmKSB7XG4gICAgICB0aGlzLl9kZWYgPSBkZWY7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmVuZ2luZS5kZWZhdWx0RG9tYWluICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9kZWYgPSB0aGlzLmVuZ2luZS5kZWZpbmVTeW1ib2wodGhpcy5fbmFtZSwge1xuICAgICAgICB3aWtpZGF0YTogdGhpcy5fd2lraWRhdGEsXG4gICAgICAgIGRvbWFpbjogdGhpcy5lbmdpbmUuZGVmYXVsdERvbWFpblxuICAgICAgfSk7XG4gICAgICB0aGlzLl9uYW1lID0gdGhpcy5fZGVmLm5hbWU7XG4gICAgfVxuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zeW1ib2xEZWZpbml0aW9uPy52YWx1ZTtcbiAgfVxuICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICBpZiAodGhpcy5fbmFtZVswXSA9PT0gXCJfXCIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUaGUgdmFsdWUgb2YgdGhlIHdpbGRjYXJkIFwiJHt0aGlzLl9uYW1lfVwiIGNhbm5vdCBiZSBjaGFuZ2VkYFxuICAgICAgKTtcbiAgICB0aGlzLmVuZ2luZS5mb3JnZXQodGhpcy5fbmFtZSk7XG4gICAgbGV0IHY7XG4gICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IGJveGVkVmFsdWUgPSB0aGlzLmVuZ2luZS5ib3godmFsdWUpO1xuICAgICAgdiA9IGJveGVkVmFsdWUudmFsdWUgPz8gYm94ZWRWYWx1ZS5ldmFsdWF0ZSgpO1xuICAgIH1cbiAgICBpZiAodj8uZG9tYWluLmlzQ29tcGF0aWJsZShcIkZ1bmN0aW9uXCIpKSB7XG4gICAgICB0aGlzLl9kZWYgPSB0aGlzLmVuZ2luZS5kZWZpbmVGdW5jdGlvbih0aGlzLl9uYW1lLCB7XG4gICAgICAgIHNpZ25hdHVyZToge1xuICAgICAgICAgIGRvbWFpbjogdi5kb21haW4sXG4gICAgICAgICAgZXZhbHVhdGU6IHZcbiAgICAgICAgICAvLyBFdmFsdWF0ZSBhcyBhIGxhbWJkYVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2RlZiAmJiBpc1N5bWJvbERlZmluaXRpb24yKHRoaXMuX2RlZikpIHtcbiAgICAgIHRoaXMuX2RlZi52YWx1ZSA9IHY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb20gPSB2Py5kb21haW47XG4gICAgICBpZiAoZG9tPy5pc051bWVyaWMpXG4gICAgICAgIGRvbSA9IHRoaXMuZW5naW5lLmRvbWFpbihcIk51bWJlclwiKTtcbiAgICAgIHRoaXMuX2RlZiA9IHRoaXMuZW5naW5lLmRlZmluZVN5bWJvbCh0aGlzLl9uYW1lLCB7XG4gICAgICAgIHZhbHVlOiB2LFxuICAgICAgICBkb21haW46IGRvbSA/PyB2b2lkIDBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBnZXQgZG9tYWluKCkge1xuICAgIGlmICh0aGlzLmZ1bmN0aW9uRGVmaW5pdGlvbilcbiAgICAgIHJldHVybiB0aGlzLmVuZ2luZS5kb21haW4oXCJGdW5jdGlvblwiKTtcbiAgICByZXR1cm4gdGhpcy5zeW1ib2xEZWZpbml0aW9uPy5kb21haW4gPz8gdGhpcy5lbmdpbmUuZGVmYXVsdERvbWFpbiA/PyB0aGlzLmVuZ2luZS5kb21haW4oXCJWYWx1ZVwiKTtcbiAgfVxuICBzZXQgZG9tYWluKGluRG9tYWluKSB7XG4gICAgaWYgKHRoaXMuX25hbWVbMF0gPT09IFwiX1wiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGhlIGRvbWFpbiBvZiB0aGUgd2lsZGNhcmQgXCIke3RoaXMuX25hbWV9XCIgY2Fubm90IGJlIGNoYW5nZWRgXG4gICAgICApO1xuICAgIGNvbnN0IGQgPSB0aGlzLmVuZ2luZS5kb21haW4oaW5Eb21haW4pO1xuICAgIGlmIChkLmlzQ29tcGF0aWJsZShcIkZ1bmN0aW9uXCIpKSB7XG4gICAgICB0aGlzLmVuZ2luZS5mb3JnZXQodGhpcy5fbmFtZSk7XG4gICAgICB0aGlzLl9kZWYgPSB0aGlzLmVuZ2luZS5kZWZpbmVGdW5jdGlvbih0aGlzLl9uYW1lLCB7XG4gICAgICAgIHNpZ25hdHVyZTogeyBkb21haW46IGQgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc1N5bWJvbERlZmluaXRpb24yKHRoaXMuX2RlZikpIHtcbiAgICAgIHRoaXMuX2RlZi5kb21haW4gPSBkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVuZ2luZS5mb3JnZXQodGhpcy5fbmFtZSk7XG4gICAgICB0aGlzLl9kZWYgPSB0aGlzLmVuZ2luZS5kZWZpbmVTeW1ib2wodGhpcy5fbmFtZSwgeyBkb21haW46IGQgfSk7XG4gICAgfVxuICB9XG4gIGdldCBleHBsaWNpdERvbWFpbigpIHtcbiAgICBpZiAodGhpcy5mdW5jdGlvbkRlZmluaXRpb24pXG4gICAgICByZXR1cm4gdGhpcy5lbmdpbmUuZG9tYWluKFwiRnVuY3Rpb25cIik7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8uZG9tYWluID8/IHZvaWQgMDtcbiAgfVxuICBnZXQgc2duKCkge1xuICAgIGNvbnN0IHYgPSB0aGlzLnZhbHVlO1xuICAgIGlmICh2ICYmIHYgIT09IHRoaXMpIHtcbiAgICAgIGNvbnN0IHMgPSB2LnNnbjtcbiAgICAgIGlmIChzICE9PSB2b2lkIDApXG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBjb25zdCBkZWYgPSB0aGlzLnN5bWJvbERlZmluaXRpb247XG4gICAgaWYgKGRlZikge1xuICAgICAgaWYgKGRlZi56ZXJvID09PSB0cnVlKVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGlmIChkZWYucG9zaXRpdmUgPT09IHRydWUpXG4gICAgICAgIHJldHVybiAxO1xuICAgICAgaWYgKGRlZi5uZWdhdGl2ZSA9PT0gdHJ1ZSlcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBoYXMoeCkge1xuICAgIGlmICh0eXBlb2YgeCA9PT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiB0aGlzLl9uYW1lID09PSB4O1xuICAgIHJldHVybiB4LmluY2x1ZGVzKHRoaXMuX25hbWUpO1xuICB9XG4gIGlzU2FtZShyaHMpIHtcbiAgICBpZiAodGhpcyA9PT0gcmhzKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKCEocmhzIGluc3RhbmNlb2YgX0JveGVkU3ltYm9sKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5fbmFtZSA9PT0gcmhzLl9uYW1lO1xuICB9XG4gIG1hdGNoKHJocywgX29wdGlvbnMpIHtcbiAgICBpZiAoIShyaHMgaW5zdGFuY2VvZiBfQm94ZWRTeW1ib2wpKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKHRoaXMuX25hbWUgPT09IHJocy5fbmFtZSlcbiAgICAgIHJldHVybiB7fTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpc0VxdWFsKHJocykge1xuICAgIGlmICghdGhpcy5pc0Nhbm9uaWNhbClcbiAgICAgIHJldHVybiB0aGlzLmNhbm9uaWNhbC5pc0VxdWFsKHJocyk7XG4gICAgcmhzID0gcmhzLmNhbm9uaWNhbDtcbiAgICBpZiAodGhpcyA9PT0gcmhzKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHJocy5zeW1ib2wgIT09IG51bGwpXG4gICAgICByZXR1cm4gcmhzLnN5bWJvbCA9PT0gdGhpcy5fbmFtZTtcbiAgICBjb25zdCBsaHNWYWwgPSB0aGlzLnN5bWJvbERlZmluaXRpb24/LnZhbHVlPy5OKCk7XG4gICAgaWYgKGxoc1ZhbClcbiAgICAgIHJldHVybiBsaHNWYWwuaXNFcXVhbChyaHMuTigpKTtcbiAgICBpZiAocmhzLmlzWmVybykge1xuICAgICAgaWYgKHRoaXMuaXNaZXJvKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzLmlzTm90WmVybylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc1plcm8gJiYgcmhzLmlzTm90WmVybylcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5lbmdpbmUuYXNrKFtcIkVxdWFsXCIsIHRoaXMsIHJoc10pLmxlbmd0aCA+IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAodGhpcy5lbmdpbmUuYXNrKFtcIk5vdEVxdWFsXCIsIHRoaXMsIHJoc10pLmxlbmd0aCA+IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlzTGVzcyhyaHMpIHtcbiAgICBpZiAocmhzLnN5bWJvbCAhPT0gbnVsbCAmJiByaHMuc3ltYm9sID09PSB0aGlzLl9uYW1lKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGxoc1ZhbCA9IHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8udmFsdWU/Lk4oKTtcbiAgICBpZiAobGhzVmFsKVxuICAgICAgcmV0dXJuIGxoc1ZhbC5pc0xlc3MocmhzLk4oKSk7XG4gICAgaWYgKHJocy5pc1plcm8pIHtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLnNnbjtcbiAgICAgIGlmIChzID09PSBudWxsKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAocyAhPT0gdm9pZCAwKVxuICAgICAgICByZXR1cm4gcyA8IDA7XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaXNMZXNzRXF1YWwocmhzKSB7XG4gICAgaWYgKHJocy5zeW1ib2wgIT09IG51bGwgJiYgcmhzLnN5bWJvbCA9PT0gdGhpcy5fbmFtZSlcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNvbnN0IGxoc1ZhbCA9IHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8udmFsdWU/Lk4oKTtcbiAgICBpZiAobGhzVmFsKVxuICAgICAgcmV0dXJuIGxoc1ZhbC5pc0xlc3NFcXVhbChyaHMuTigpKTtcbiAgICBpZiAocmhzLmlzWmVybykge1xuICAgICAgY29uc3QgcyA9IHRoaXMuc2duO1xuICAgICAgaWYgKHMgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChzICE9PSB2b2lkIDApXG4gICAgICAgIHJldHVybiBzIDw9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmlzTGVzcyhyaHMpIHx8IHRoaXMuaXNFcXVhbChyaHMpO1xuICB9XG4gIGlzR3JlYXRlcihyaHMpIHtcbiAgICBpZiAocmhzLnN5bWJvbCAhPT0gbnVsbCAmJiByaHMuc3ltYm9sID09PSB0aGlzLl9uYW1lKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGxoc1ZhbCA9IHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8udmFsdWU/Lk4oKTtcbiAgICBpZiAobGhzVmFsKVxuICAgICAgcmV0dXJuIGxoc1ZhbC5pc0dyZWF0ZXIocmhzLk4oKSk7XG4gICAgaWYgKHJocy5pc1plcm8pIHtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLnNnbjtcbiAgICAgIGlmIChzID09PSBudWxsKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAocyAhPT0gdm9pZCAwKVxuICAgICAgICByZXR1cm4gcyA+IDA7XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaXNHcmVhdGVyRXF1YWwocmhzKSB7XG4gICAgaWYgKHJocy5zeW1ib2wgIT09IG51bGwgJiYgcmhzLnN5bWJvbCA9PT0gdGhpcy5fbmFtZSlcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNvbnN0IGxoc1ZhbCA9IHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8udmFsdWU/Lk4oKTtcbiAgICBpZiAobGhzVmFsKVxuICAgICAgcmV0dXJuIGxoc1ZhbC5pc0dyZWF0ZXJFcXVhbChyaHMuTigpKTtcbiAgICBpZiAocmhzLmlzWmVybykge1xuICAgICAgY29uc3QgcyA9IHRoaXMuc2duO1xuICAgICAgaWYgKHMgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChzICE9PSB2b2lkIDApXG4gICAgICAgIHJldHVybiBzID49IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmlzR3JlYXRlcihyaHMpIHx8IHRoaXMuaXNFcXVhbChyaHMpO1xuICB9XG4gIGdldCBpc0Z1bmN0aW9uKCkge1xuICAgIHJldHVybiAhIXRoaXMuZnVuY3Rpb25EZWZpbml0aW9uO1xuICB9XG4gIGdldCBpc1plcm8oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8uemVybztcbiAgfVxuICBnZXQgaXNOb3RaZXJvKCkge1xuICAgIHJldHVybiB0aGlzLnN5bWJvbERlZmluaXRpb24/Lm5vdFplcm87XG4gIH1cbiAgZ2V0IGlzT25lKCkge1xuICAgIHJldHVybiB0aGlzLnN5bWJvbERlZmluaXRpb24/Lm9uZTtcbiAgfVxuICBnZXQgaXNOZWdhdGl2ZU9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zeW1ib2xEZWZpbml0aW9uPy5uZWdhdGl2ZU9uZTtcbiAgfVxuICBnZXQgaXNPZGQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8ub2RkO1xuICB9XG4gIGdldCBpc0V2ZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8uZXZlbjtcbiAgfVxuICBnZXQgaXNQcmltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zeW1ib2xEZWZpbml0aW9uPy5wcmltZTtcbiAgfVxuICBnZXQgaXNDb21wb3NpdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8uY29tcG9zaXRlO1xuICB9XG4gIGdldCBpc0luZmluaXR5KCkge1xuICAgIHJldHVybiB0aGlzLnN5bWJvbERlZmluaXRpb24/LmluZmluaXR5O1xuICB9XG4gIGdldCBpc05hTigpIHtcbiAgICByZXR1cm4gdGhpcy5zeW1ib2xEZWZpbml0aW9uPy5OYU47XG4gIH1cbiAgLy8geCA+IDBcbiAgZ2V0IGlzUG9zaXRpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8ucG9zaXRpdmU7XG4gIH1cbiAgZ2V0IGlzTm9uUG9zaXRpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8ubm9uUG9zaXRpdmU7XG4gIH1cbiAgZ2V0IGlzTmVnYXRpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8ubmVnYXRpdmU7XG4gIH1cbiAgZ2V0IGlzTm9uTmVnYXRpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8ubm9uTmVnYXRpdmU7XG4gIH1cbiAgZ2V0IGlzTnVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLnN5bWJvbERlZmluaXRpb24/Lm51bWJlcjtcbiAgfVxuICBnZXQgaXNJbnRlZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLnN5bWJvbERlZmluaXRpb24/LmludGVnZXI7XG4gIH1cbiAgZ2V0IGlzUmF0aW9uYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8ucmF0aW9uYWw7XG4gIH1cbiAgZ2V0IGlzQWxnZWJyYWljKCkge1xuICAgIHJldHVybiB0aGlzLnN5bWJvbERlZmluaXRpb24/LnJhdGlvbmFsO1xuICB9XG4gIGdldCBpc1JlYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8ucmVhbDtcbiAgfVxuICBnZXQgaXNFeHRlbmRlZFJlYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8uZXh0ZW5kZWRSZWFsO1xuICB9XG4gIGdldCBpc0NvbXBsZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8uY29tcGxleDtcbiAgfVxuICBnZXQgaXNJbWFnaW5hcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8uaW1hZ2luYXJ5O1xuICB9XG4gIHNpbXBsaWZ5KG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWYgPSB0aGlzLnN5bWJvbERlZmluaXRpb247XG4gICAgaWYgKGRlZj8uaG9sZFVudGlsID09PSBcInNpbXBsaWZ5XCIgJiYgZGVmLnZhbHVlKVxuICAgICAgcmV0dXJuIGRlZi52YWx1ZS5zaW1wbGlmeShvcHRpb25zKTtcbiAgICByZXR1cm4gb3B0aW9ucz8ucnVsZXMgPyB0aGlzLnJlcGxhY2Uob3B0aW9ucy5ydWxlcykgPz8gdGhpcyA6IHRoaXM7XG4gIH1cbiAgZXZhbHVhdGUob3B0aW9ucykge1xuICAgIGNvbnN0IGRlZiA9IHRoaXMuc3ltYm9sRGVmaW5pdGlvbjtcbiAgICBpZiAoZGVmICYmIChkZWYuaG9sZFVudGlsID09PSBcInNpbXBsaWZ5XCIgfHwgZGVmLmhvbGRVbnRpbCA9PT0gXCJldmFsdWF0ZVwiKSlcbiAgICAgIHJldHVybiBkZWYudmFsdWU/LmV2YWx1YXRlKG9wdGlvbnMpID8/IHRoaXM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgTihvcHRpb25zKSB7XG4gICAgY29uc3QgZGVmID0gdGhpcy5zeW1ib2xEZWZpbml0aW9uO1xuICAgIGlmIChkZWYgJiYgZGVmLmhvbGRVbnRpbCA9PT0gXCJuZXZlclwiKVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgcmV0dXJuIHRoaXMuc3ltYm9sRGVmaW5pdGlvbj8udmFsdWU/Lk4ob3B0aW9ucykgPz8gdGhpcztcbiAgfVxuICByZXBsYWNlKHJ1bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHJlcGxhY2UodGhpcywgcnVsZXMsIG9wdGlvbnMpO1xuICB9XG4gIHN1YnMoc3ViMiwgb3B0aW9ucykge1xuICAgIGlmIChzdWIyW3RoaXMuX25hbWVdID09PSB2b2lkIDApXG4gICAgICByZXR1cm4gb3B0aW9ucz8uY2Fub25pY2FsID8gdGhpcy5jYW5vbmljYWwgOiB0aGlzO1xuICAgIHJldHVybiB0aGlzLmVuZ2luZS5ib3goc3ViMlt0aGlzLl9uYW1lXSwgb3B0aW9ucyk7XG4gIH1cbn07XG5mdW5jdGlvbiBtYWtlQ2Fub25pY2FsU3ltYm9sKGNlLCBuYW1lKSB7XG4gIGNvbnN0IGRlZiA9IGNlLmxvb2t1cFN5bWJvbChuYW1lLCB2b2lkIDAsIGNlLmNvbnRleHQpO1xuICBpZiAoZGVmPy5ob2xkVW50aWwgPT09IFwibmV2ZXJcIiAmJiBkZWYudmFsdWUpXG4gICAgcmV0dXJuIGRlZi52YWx1ZTtcbiAgcmV0dXJuIG5ldyBCb3hlZFN5bWJvbChjZSwgbmFtZSwgeyBjYW5vbmljYWw6IHRydWUsIGRlZiB9KTtcbn1cblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lL2NvbXB1dGUtZW5naW5lLnRzXG52YXIgQ29tcHV0ZUVuZ2luZSA9IGNsYXNzIF9Db21wdXRlRW5naW5lIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBgQ29tcHV0ZUVuZ2luZWAgaW5zdGFuY2UuXG4gICAqXG4gICAqIElkZW50aWZpZXIgdGFibGVzIGRlZmluZSBmdW5jdGlvbnMgYW5kIHN5bWJvbHMgKGluIGBvcHRpb25zLmlkc2ApLlxuICAgKiBJZiBubyB0YWJsZSBpcyBwcm92aWRlZCB0aGUgc3RhbmRhcmQgbGlicmFyeSBpcyB1c2VkIChgQ29tcHV0ZUVuZ2luZS5nZXRTdGFuZGFyZExpYnJhcnkoKWApXG4gICAqXG4gICAqIFRoZSBMYVRlWCBzeW50YXggZGljdGlvbmFyeSBpcyBkZWZpbmVkIGluIGBvcHRpb25zLmxhdGV4RGljdGlvbmFyeWAuXG4gICAqXG4gICAqIFRoZSBvcmRlciBvZiB0aGUgZGljdGlvbmFyaWVzIG1hdHRlcjogdGhlIGRlZmluaXRpb25zIGZyb20gdGhlIGxhdGVyIG9uZXNcbiAgICogb3ZlcnJpZGUgdGhlIGRlZmluaXRpb25zIGZyb20gZWFybGllciBvbmVzLiBUaGUgZmlyc3QgZGljdGlvbmFyeSBzaG91bGRcbiAgICogYmUgdGhlIGAnY29yZSdgIGRpY3Rpb25hcnkgd2hpY2ggaW5jbHVkZSBzb21lIGJhc2ljIGRlZmluaXRpb25zIHN1Y2hcbiAgICogYXMgZG9tYWlucyAoYEJvb2xlYW5gLCBgTnVtYmVyYCwgZXRjLi4uKSB0aGF0IGFyZSB1c2VkIGJ5IGxhdGVyIGRpY3Rpb25hcmllcy5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMubnVtZXJpY01vZGUgVGhlIGRlZmF1bHQgbW9kZSBpcyBgXCJhdXRvXCJgLiBVc2UgYFwibWFjaGluZVwiYFxuICAgKiB0byBwZXJmb3JtIG51bWVyaWMgY2FsY3VsYXRpb25zIHVzaW5nIDY0LWJpdCBmbG9hdHMuIFVzZSBgXCJiaWdudW1cImAgdG9cbiAgICogcGVyZm9ybSBjYWxjdWxhdGlvbnMgdXNpbmcgYXJiaXRyYXJ5IHByZWNpc2lvbiBmbG9hdGluZyBwb2ludCBudW1iZXJzLlxuICAgKiBVc2UgYFwiYXV0b1wiYCBvciBgXCJjb21wbGV4XCJgIHRvIGFsbG93IGNhbGN1bGF0aW9ucyBvbiBjb21wbGV4IG51bWJlcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zLm51bWVyaWNQcmVjaXNpb24gU3BlY2lmaWMgaG93IG1hbnkgZGlnaXRzIG9mIHByZWNpc2lvblxuICAgKiBmb3IgdGhlIG51bWVyaWMgY2FsY3VsYXRpb25zLiBEZWZhdWx0IGlzIDEwMC5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMudG9sZXJhbmNlIElmIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGUgZGlmZmVyZW5jZSBvZiB0d29cbiAgICogbnVtYmVycyBpcyBsZXNzIHRoYW4gYHRvbGVyYW5jZWAsIHRoZXkgYXJlIGNvbnNpZGVyZWQgZXF1YWwuIFVzZWQgYnlcbiAgICogYGNob3AoKWAgYXMgd2VsbC5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMuZGVmYXVsdERvbWFpbiBJZiBhbiB1bmtub3duIHN5bWJvbCBpcyBlbmNvdW50ZXJlZCwgYXNzdW1lXG4gICAqIHRoaXMgaXMgaXRzIGRvbWFpbi4gKipEZWZhdWx0KiogYEV4dGVuZGVkUmVhbE51bWJlcmBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fY29tbW9uU3ltYm9scyA9IHtcbiAgICAgIFRydWU6IG51bGwsXG4gICAgICBGYWxzZTogbnVsbCxcbiAgICAgIE1heWJlOiBudWxsLFxuICAgICAgQWxsOiBudWxsLFxuICAgICAgTm90aGluZzogbnVsbCxcbiAgICAgIE5vbmU6IG51bGwsXG4gICAgICBVbmRlZmluZWQ6IG51bGwsXG4gICAgICBGdW5jdGlvbjogbnVsbCxcbiAgICAgIFBpOiBudWxsLFxuICAgICAgSW1hZ2luYXJ5VW5pdDogbnVsbFxuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX2NvbW1vbk51bWJlcnMgPSB7XG4gICAgICBcIi01XCI6IG51bGwsXG4gICAgICBcIi00XCI6IG51bGwsXG4gICAgICBcIi0zXCI6IG51bGwsXG4gICAgICBcIi0yXCI6IG51bGwsXG4gICAgICAyOiBudWxsLFxuICAgICAgMzogbnVsbCxcbiAgICAgIDQ6IG51bGwsXG4gICAgICA1OiBudWxsLFxuICAgICAgNjogbnVsbCxcbiAgICAgIDc6IG51bGwsXG4gICAgICA4OiBudWxsLFxuICAgICAgOTogbnVsbCxcbiAgICAgIDEwOiBudWxsLFxuICAgICAgMTE6IG51bGwsXG4gICAgICAxMjogbnVsbCxcbiAgICAgIDM2OiBudWxsXG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fY29tbW9uRG9tYWlucyA9IHtcbiAgICAgIEFueXRoaW5nOiBudWxsLFxuICAgICAgTm90aGluZzogbnVsbCxcbiAgICAgIEJvb2xlYW46IG51bGwsXG4gICAgICBNYXliZUJvb2xlYW46IG51bGwsXG4gICAgICBTdHJpbmc6IG51bGwsXG4gICAgICBEb21haW46IG51bGwsXG4gICAgICBTeW1ib2w6IG51bGwsXG4gICAgICBJbnRlZ2VyOiBudWxsLFxuICAgICAgUmF0aW9uYWxOdW1iZXI6IG51bGwsXG4gICAgICBBbGdlYnJhaWNOdW1iZXI6IG51bGwsXG4gICAgICBSZWFsTnVtYmVyOiBudWxsLFxuICAgICAgRXh0ZW5kZWRSZWFsTnVtYmVyOiBudWxsLFxuICAgICAgSW1hZ2luYXJ5TnVtYmVyOiBudWxsLFxuICAgICAgQ29tcGxleE51bWJlcjogbnVsbCxcbiAgICAgIEV4dGVuZGVkQ29tcGxleE51bWJlcjogbnVsbCxcbiAgICAgIE51bWJlcjogbnVsbCxcbiAgICAgIFBvc2l0aXZlSW50ZWdlcjogbnVsbCxcbiAgICAgIFRyYW5zY2VuZGVudGFsTnVtYmVyOiBudWxsLFxuICAgICAgUG9zaXRpdmVOdW1iZXI6IG51bGwsXG4gICAgICBGdW5jdGlvbjogbnVsbCxcbiAgICAgIC8vIChBbnl0aGluZ15uKSAtPiBBbnl0aGluZ1xuICAgICAgTnVtZXJpY0Z1bmN0aW9uOiBudWxsLFxuICAgICAgLy8gKE51bWJlcl5uKSAtPiBOdW1iZXJcbiAgICAgIFJlYWxGdW5jdGlvbjogbnVsbCxcbiAgICAgIC8vIChFeHRlbmRlZFJlYWxOdW1iZXJebikgLT4gRXh0ZW5kUmVhbE51bWJlclxuICAgICAgVHJpZ29ub21ldHJpY0Z1bmN0aW9uOiBudWxsLFxuICAgICAgLy8gKENvbXBsZXhOdW1iZXIpIC0+IENvbXBsZXhOdW1iZXJcbiAgICAgIExvZ2ljT3BlcmF0b3I6IG51bGwsXG4gICAgICAvLyAoQm9vbGVhbiwgQm9vbGVhbikgLT4gQm9vbGVhblxuICAgICAgUHJlZGljYXRlOiBudWxsLFxuICAgICAgLy8gKEFueXRoaW5nXm4pIC0+IE1heWJlQm9vbGVhblxuICAgICAgUmVsYXRpb25hbE9wZXJhdG9yOiBudWxsXG4gICAgICAvLyAoQW55dGhpbmcsIEFueXRoaW5nKSAtPiBNYXliZUJvb2xlYW5cbiAgICB9O1xuICAgIGlmIChvcHRpb25zICE9PSB2b2lkIDAgJiYgdHlwZW9mIG9wdGlvbnMgIT09IFwib2JqZWN0XCIpXG4gICAgICB0aHJvdyBFcnJvcihcIlVuZXhwZWN0ZWQgYXJndW1lbnRcIik7XG4gICAgdGhpcy5zdHJpY3QgPSB0cnVlO1xuICAgIHRoaXMuX2xhdGV4RGljdGlvbmFyeSA9IG9wdGlvbnM/LmxhdGV4RGljdGlvbmFyeTtcbiAgICB0aGlzLl9qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMgPSB7XG4gICAgICBleGNsdWRlOiBbXSxcbiAgICAgIHNob3J0aGFuZHM6IFtcImZ1bmN0aW9uXCIsIFwic3ltYm9sXCIsIFwic3RyaW5nXCIsIFwiZGljdGlvbmFyeVwiLCBcIm51bWJlclwiXSxcbiAgICAgIG1ldGFkYXRhOiBbXSxcbiAgICAgIHByZWNpc2lvbjogXCJtYXhcIixcbiAgICAgIHJlcGVhdGluZ0RlY2ltYWxzOiB0cnVlXG4gICAgfTtcbiAgICB0aGlzLl91c2VSYXdKc29uU2VyaWFsaXphdGlvbk9wdGlvbnMgPSBmYWxzZTtcbiAgICB0aGlzLl9yYXdKc29uU2VyaWFsaXphdGlvbk9wdGlvbnMgPSB7XG4gICAgICBleGNsdWRlOiBbXSxcbiAgICAgIHNob3J0aGFuZHM6IFtcImZ1bmN0aW9uXCIsIFwic3ltYm9sXCIsIFwic3RyaW5nXCIsIFwiZGljdGlvbmFyeVwiLCBcIm51bWJlclwiXSxcbiAgICAgIG1ldGFkYXRhOiBbXSxcbiAgICAgIHByZWNpc2lvbjogXCJtYXhcIixcbiAgICAgIHJlcGVhdGluZ0RlY2ltYWxzOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5fc3RhdHMgPSB7XG4gICAgICBoaWdod2F0ZXJNYXJrOiAwLFxuICAgICAgc3ltYm9sczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICAgIGV4cHJlc3Npb25zOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpXG4gICAgfTtcbiAgICB0aGlzLl9kZWZhdWx0RG9tYWluID0gbnVsbDtcbiAgICB0aGlzLl9udW1lcmljTW9kZSA9IG9wdGlvbnM/Lm51bWVyaWNNb2RlID8/IFwiYXV0b1wiO1xuICAgIHRoaXMuX3ByZWNpc2lvbiA9IE1hdGgubWF4KFxuICAgICAgb3B0aW9ucz8ubnVtZXJpY1ByZWNpc2lvbiA/PyAxMDAsXG4gICAgICBNYXRoLmZsb29yKE1BQ0hJTkVfUFJFQ0lTSU9OKVxuICAgICk7XG4gICAgdGhpcy5fYmlnbnVtID0gRGVjaW1hbC5jbG9uZSh7IHByZWNpc2lvbjogdGhpcy5fcHJlY2lzaW9uIH0pO1xuICAgIHRoaXMudG9sZXJhbmNlID0gb3B0aW9ucz8udG9sZXJhbmNlID8/IE5VTUVSSUNfVE9MRVJBTkNFO1xuICAgIHRoaXMuX1pFUk8gPSBuZXcgQm94ZWROdW1iZXIodGhpcywgMCk7XG4gICAgdGhpcy5fT05FID0gbmV3IEJveGVkTnVtYmVyKHRoaXMsIDEpO1xuICAgIHRoaXMuX0hBTEYgPSBuZXcgQm94ZWROdW1iZXIodGhpcywgWzEsIDJdKTtcbiAgICB0aGlzLl9ORUdBVElWRV9PTkUgPSBuZXcgQm94ZWROdW1iZXIodGhpcywgLTEpO1xuICAgIHRoaXMuX0kgPSBuZXcgQm94ZWROdW1iZXIodGhpcywgaW1wb3J0X2NvbXBsZXgyMC5Db21wbGV4LkkpO1xuICAgIHRoaXMuX05BTiA9IG5ldyBCb3hlZE51bWJlcih0aGlzLCBOdW1iZXIuTmFOKTtcbiAgICB0aGlzLl9QT1NJVElWRV9JTkZJTklUWSA9IG5ldyBCb3hlZE51bWJlcih0aGlzLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIHRoaXMuX05FR0FUSVZFX0lORklOSVRZID0gbmV3IEJveGVkTnVtYmVyKHRoaXMsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgdGhpcy5fQ09NUExFWF9JTkZJTklUWSA9IG5ldyBCb3hlZE51bWJlcih0aGlzLCBpbXBvcnRfY29tcGxleDIwLkNvbXBsZXguSU5GSU5JVFkpO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgICB0aGlzLmNvbnRleHQgPSB7XG4gICAgICBhc3N1bXB0aW9uczogbmV3IEV4cHJlc3Npb25NYXAoKSxcbiAgICAgIHRpbWVMaW1pdDogMixcbiAgICAgIC8vIGV4ZWN1dGlvbiB0aW1lIGxpbWl0OiAyLjAgc2Vjb25kc1xuICAgICAgbWVtb3J5TGltaXQ6IDEsXG4gICAgICAvLyBtZW1vcnkgbGltaXQ6IDEuMCBtZWdhYnl0ZVxuICAgICAgcmVjdXJzaW9uTGltaXQ6IDEwMjQsXG4gICAgICBpdGVyYXRpb25MaW1pdDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgfTtcbiAgICBjb25zdCB0YWJsZXMgPSBvcHRpb25zPy5pZHMgPz8gX0NvbXB1dGVFbmdpbmUuZ2V0U3RhbmRhcmRMaWJyYXJ5KCk7XG4gICAgZm9yIChjb25zdCB0YWJsZSBvZiB0YWJsZXMpXG4gICAgICBzZXRDdXJyZW50Q29udGV4dFN5bWJvbFRhYmxlKHRoaXMsIHRhYmxlKTtcbiAgICBmb3IgKGNvbnN0IGQgb2YgT2JqZWN0LmtleXModGhpcy5fY29tbW9uRG9tYWlucykpIHtcbiAgICAgIGlmICh0aGlzLl9jb21tb25Eb21haW5zW2RdICYmICF0aGlzLl9jb21tb25Eb21haW5zW2RdLnN5bWJvbERlZmluaXRpb24pXG4gICAgICAgIHRoaXMuX2NvbW1vbkRvbWFpbnNbZF0uYmluZCh0aGlzLmNvbnRleHQpO1xuICAgICAgZWxzZVxuICAgICAgICB0aGlzLl9jb21tb25Eb21haW5zW2RdID0gYm94RG9tYWluKHRoaXMsIGQpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHN5bSBvZiBPYmplY3Qua2V5cyh0aGlzLl9jb21tb25TeW1ib2xzKSkge1xuICAgICAgdGhpcy5fY29tbW9uU3ltYm9sc1tzeW1dID0gbmV3IEJveGVkU3ltYm9sKHRoaXMsIHN5bSwge1xuICAgICAgICBjYW5vbmljYWw6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fY29tbW9uU3ltYm9sc1tzeW1dLmJpbmQodGhpcy5jb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnM/LmRlZmF1bHREb21haW4pIHtcbiAgICAgIGNvbnN0IGRlZmF1bHREb21haW4gPSB0aGlzLmRvbWFpbihvcHRpb25zLmRlZmF1bHREb21haW4pO1xuICAgICAgaWYgKGRlZmF1bHREb21haW4uaXNWYWxpZClcbiAgICAgICAgdGhpcy5fZGVmYXVsdERvbWFpbiA9IGRlZmF1bHREb21haW47XG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuX2RlZmF1bHREb21haW4gPSB0aGlzLmRvbWFpbihcIkV4dGVuZGVkUmVhbE51bWJlclwiKTtcbiAgICB9IGVsc2VcbiAgICAgIHRoaXMuX2RlZmF1bHREb21haW4gPSB0aGlzLmRvbWFpbihcIkV4dGVuZGVkUmVhbE51bWJlclwiKTtcbiAgICB0aGlzLnB1c2hTY29wZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gaWRlbnRpZmllciB0YWJsZXMgc3VpdGFibGUgZm9yIHRoZSBzcGVjaWZpZWQgY2F0ZWdvcmllcywgb3IgYFwiYWxsXCJgXG4gICAqIGZvciBhbGwgY2F0ZWdvcmllcyAoYFwiYXJpdGhtZXRpY1wiYCwgYFwiYWxnZWJyYVwiYCwgZXRjLi4uKS5cbiAgICpcbiAgICogQW4gaWRlbnRpZmllciB0YWJsZSBkZWZpbmVzIGhvdyB0aGUgc3ltYm9scyBhbmQgZnVuY3Rpb24gbmFtZXMgaW4gYVxuICAgKiBNYXRoSlNPTiBleHByZXNzaW9uIHNob3VsZCBiZSBpbnRlcnByZXRlZCwgaS5lLiBob3cgdG8gZXZhbHVhdGUgYW5kXG4gICAqIG1hbmlwdWxhdGUgdGhlbS5cbiAgICpcbiAgICovXG4gIHN0YXRpYyBnZXRTdGFuZGFyZExpYnJhcnkoY2F0ZWdvcmllcyA9IFwiYWxsXCIpIHtcbiAgICByZXR1cm4gZ2V0U3RhbmRhcmRMaWJyYXJ5KGNhdGVnb3JpZXMpO1xuICB9XG4gIGdldCBsYXRleERpY3Rpb25hcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMubGF0ZXhTeW50YXguZGljdGlvbmFyeTtcbiAgfVxuICBzZXQgbGF0ZXhEaWN0aW9uYXJ5KGRpYykge1xuICAgIHRoaXMubGF0ZXhTeW50YXguZGljdGlvbmFyeSA9IGRpYztcbiAgfVxuICAvKiogQWZ0ZXIgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGVuZ2luZSBoYXMgY2hhbmdlZCwgY2xlYXIgdGhlIGNhY2hlc1xuICAgKiBzbyB0aGF0IG5ldyB2YWx1ZXMgY2FuIGJlIHJlY2FsY3VsYXRlZC5cbiAgICpcbiAgICogVGhpcyBuZWVkcyB0byBoYXBwZW4gZm9yIGV4YW1wbGUgd2hlbiB0aGUgbnVtZXJpYyBwcmVjaXNpb24gY2hhbmdlcy5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZXNldCgpIHtcbiAgICAvKiBAX19QVVJFX18gKi8gY29uc29sZS5hc3NlcnQodGhpcy5fYmlnbnVtKTtcbiAgICB0aGlzLl9CSUdOVU1fTkVHQVRJVkVfT05FID0gdGhpcy5iaWdudW0oLTEpO1xuICAgIHRoaXMuX0JJR05VTV9OQU4gPSB0aGlzLmJpZ251bShOYU4pO1xuICAgIHRoaXMuX0JJR05VTV9aRVJPID0gdGhpcy5iaWdudW0oMCk7XG4gICAgdGhpcy5fQklHTlVNX09ORSA9IHRoaXMuYmlnbnVtKDEpO1xuICAgIHRoaXMuX0JJR05VTV9UV08gPSB0aGlzLmJpZ251bSgyKTtcbiAgICB0aGlzLl9CSUdOVU1fSEFMRiA9IHRoaXMuX0JJR05VTV9PTkUuZGl2KHRoaXMuX0JJR05VTV9UV08pO1xuICAgIHRoaXMuX0JJR05VTV9QSSA9IHRoaXMuX0JJR05VTV9ORUdBVElWRV9PTkUuYWNvcygpO1xuICAgIGNvbnN0IHN5bWJvbHMgPSB0aGlzLl9zdGF0cy5zeW1ib2xzLnZhbHVlcygpO1xuICAgIGNvbnN0IGV4cHJlc3Npb25zID0gdGhpcy5fc3RhdHMuZXhwcmVzc2lvbnMudmFsdWVzKCk7XG4gICAgdGhpcy5fc3RhdHMuc3ltYm9scyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgdGhpcy5fc3RhdHMuZXhwcmVzc2lvbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3QgcyBvZiBzeW1ib2xzKVxuICAgICAgcy51bmJpbmQoKTtcbiAgICBmb3IgKGNvbnN0IHMgb2YgZXhwcmVzc2lvbnMpXG4gICAgICBzLnVuYmluZCgpO1xuICAgIGZvciAoY29uc3QgZCBvZiBPYmplY3QudmFsdWVzKHRoaXMuX2NvbW1vbkRvbWFpbnMpKVxuICAgICAgZD8udW5iaW5kKCk7XG4gICAgZm9yIChjb25zdCBkIG9mIE9iamVjdC52YWx1ZXModGhpcy5fY29tbW9uU3ltYm9scykpXG4gICAgICBkPy51bmJpbmQoKTtcbiAgICBsZXQgc2NvcGUgPSB0aGlzLmNvbnRleHQ7XG4gICAgd2hpbGUgKHNjb3BlKSB7XG4gICAgICBpZiAoc2NvcGUuaWRUYWJsZSlcbiAgICAgICAgZm9yIChjb25zdCBbX2ssIHZdIG9mIHNjb3BlLmlkVGFibGUpXG4gICAgICAgICAgdi5yZXNldCgpO1xuICAgICAgc2NvcGUgPSBzY29wZS5wYXJlbnRTY29wZSA/PyBudWxsO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModGhpcy5fY2FjaGUpKVxuICAgICAgaWYgKHRoaXMuX2NhY2hlW2tdLnZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FjaGVba10ucHVyZ2UpXG4gICAgICAgICAgZGVsZXRlIHRoaXMuX2NhY2hlW2tdO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhpcy5fY2FjaGVba10udmFsdWUgPSB0aGlzLl9jYWNoZVtrXS5wdXJnZSh0aGlzLl9jYWNoZVtrXS52YWx1ZSk7XG4gICAgICB9XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfcmVnaXN0ZXIoX2V4cHIpIHtcbiAgICB0aGlzLl9zdGF0cy5oaWdod2F0ZXJNYXJrICs9IDE7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfdW5yZWdpc3RlcihfZXhwcikge1xuICB9XG4gIGdldCBzdGF0cygpIHtcbiAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuX3N0YXRzLmV4cHJlc3Npb25zO1xuICAgIHRoaXMuX3N0YXRzLmV4cHJlc3Npb25zID0gbnVsbDtcbiAgICB0aGlzLl9zdGF0cy5leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLl9zdGF0c1xuICAgICAgLy8gX2R1cGVTeW1ib2xzOiB0b3BEdXBlcyxcbiAgICAgIC8vIF9wb3B1bGFyRXhwcmVzc2lvbnM6IHRvcDEwLFxuICAgIH07XG4gIH1cbiAgLyoqIFRoZSBwcmVjaXNpb24sIG9yIG51bWJlciBvZiBzaWduaWZpY2FudCBkaWdpdHMsIG9mIG51bWVyaWNcbiAgICogY2FsY3VsYXRpb25zIHdoZW4gdGhlIG51bWVyaWMgbW9kZSBpcyBgXCJhdXRvXCJgIG9yIGBcImJpZ251bVwiYC5cbiAgICpcbiAgICogVG8gbWFrZSBjYWxjdWxhdGlvbnMgdXNpbmcgbW9yZSBkaWdpdHMsIGF0IHRoZSBjb3N0IG9mIGV4cGFuZGVkIG1lbW9yeVxuICAgKiB1c2FnZSBhbmQgc2xvd2VyIGNvbXB1dGF0aW9ucywgc2V0IHRoZSBgcHJlY2lzaW9uYCBoaWdoZXIuXG4gICAqXG4gICAqIElmIHRoZSBudW1lcmljIG1vZGUgaXMgbm90IGBcImF1dG9cImAgb3IgYFwiYmlnbnVtXCJgLCBpdCBpcyBzZXQgdG8gYFwiYXV0b1wiYC5cbiAgICpcbiAgICogVHJpZ29ub21ldHJpYyBvcGVyYXRpb25zIGFyZSBhY2N1cmF0ZSBmb3IgcHJlY2lzaW9uIHVwIHRvIDEsMDAwLlxuICAgKlxuICAgKi9cbiAgZ2V0IHByZWNpc2lvbigpIHtcbiAgICBpZiAodGhpcy5fbnVtZXJpY01vZGUgPT09IFwibWFjaGluZVwiIHx8IHRoaXMuX251bWVyaWNNb2RlID09PSBcImNvbXBsZXhcIilcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1BQ0hJTkVfUFJFQ0lTSU9OKTtcbiAgICByZXR1cm4gdGhpcy5fcHJlY2lzaW9uO1xuICB9XG4gIHNldCBwcmVjaXNpb24ocCkge1xuICAgIGlmIChwID09PSBcIm1hY2hpbmVcIilcbiAgICAgIHAgPSBNYXRoLmZsb29yKE1BQ0hJTkVfUFJFQ0lTSU9OKTtcbiAgICBjb25zdCBjdXJyZW50UHJlY2lzaW9uID0gdGhpcy5fcHJlY2lzaW9uO1xuICAgIGlmIChwID09PSBjdXJyZW50UHJlY2lzaW9uKVxuICAgICAgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgcCAhPT0gXCJudW1iZXJcIiB8fCBwIDw9IDApXG4gICAgICB0aHJvdyBFcnJvcignRXhwZWN0ZWQgXCJtYWNoaW5lXCIgb3IgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgICB0aGlzLl9sYXRleFN5bnRheD8udXBkYXRlT3B0aW9ucyh7XG4gICAgICBwcmVjaXNpb246IHAsXG4gICAgICBhdm9pZEV4cG9uZW50c0luUmFuZ2U6IFstNiwgcF1cbiAgICB9KTtcbiAgICB0aGlzLl9wcmVjaXNpb24gPSBNYXRoLm1heChwLCBNYXRoLmZsb29yKE1BQ0hJTkVfUFJFQ0lTSU9OKSk7XG4gICAgaWYgKHRoaXMuanNvblNlcmlhbGl6YXRpb25PcHRpb25zLnByZWNpc2lvbiA+IHRoaXMuX3ByZWNpc2lvbilcbiAgICAgIHRoaXMuanNvblNlcmlhbGl6YXRpb25PcHRpb25zID0geyBwcmVjaXNpb246IHRoaXMuX3ByZWNpc2lvbiB9O1xuICAgIGlmICh0aGlzLl9udW1lcmljTW9kZSAhPT0gXCJhdXRvXCIgJiYgdGhpcy5fbnVtZXJpY01vZGUgIT09IFwiYmlnbnVtXCIgJiYgdGhpcy5fcHJlY2lzaW9uID4gTWF0aC5mbG9vcihNQUNISU5FX1BSRUNJU0lPTikpXG4gICAgICB0aGlzLl9udW1lcmljTW9kZSA9IFwiYXV0b1wiO1xuICAgIHRoaXMuX2JpZ251bSA9IHRoaXMuX2JpZ251bS5jb25maWcoeyBwcmVjaXNpb246IHRoaXMuX3ByZWNpc2lvbiB9KTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cbiAgZ2V0IG51bWVyaWNNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLl9udW1lcmljTW9kZTtcbiAgfVxuICBzZXQgbnVtZXJpY01vZGUoZikge1xuICAgIGlmIChmID09PSB0aGlzLl9udW1lcmljTW9kZSlcbiAgICAgIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGYgIT09IFwic3RyaW5nXCIpXG4gICAgICB0aHJvdyBFcnJvcihcIkV4cGVjdGVkIGEgc3RyaW5nXCIpO1xuICAgIHRoaXMuX251bWVyaWNNb2RlID0gZjtcbiAgICBpZiAoZiA9PT0gXCJjb21wbGV4XCIgfHwgZiA9PT0gXCJtYWNoaW5lXCIpXG4gICAgICB0aGlzLl9wcmVjaXNpb24gPSBNYXRoLmZsb29yKE1BQ0hJTkVfUFJFQ0lTSU9OKTtcbiAgICBpZiAodGhpcy5fbGF0ZXhTeW50YXggJiYgdGhpcy5sYXRleFN5bnRheC5vcHRpb25zLnByZWNpc2lvbiA+IHRoaXMuX3ByZWNpc2lvbilcbiAgICAgIHRoaXMubGF0ZXhTeW50YXgudXBkYXRlT3B0aW9ucyh7IHByZWNpc2lvbjogdGhpcy5fcHJlY2lzaW9uIH0pO1xuICAgIGlmICh0aGlzLmpzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5wcmVjaXNpb24gPiB0aGlzLl9wcmVjaXNpb24pXG4gICAgICB0aGlzLmpzb25TZXJpYWxpemF0aW9uT3B0aW9ucyA9IHsgcHJlY2lzaW9uOiB0aGlzLl9wcmVjaXNpb24gfTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cbiAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgZ2V0IHRpbWVMaW1pdCgpIHtcbiAgICBsZXQgc2NvcGUgPSB0aGlzLmNvbnRleHQ7XG4gICAgd2hpbGUgKHNjb3BlKSB7XG4gICAgICBpZiAoc2NvcGUudGltZUxpbWl0ICE9PSB2b2lkIDApXG4gICAgICAgIHJldHVybiBzY29wZS50aW1lTGltaXQ7XG4gICAgICBzY29wZSA9IHNjb3BlLnBhcmVudFNjb3BlID8/IG51bGw7XG4gICAgfVxuICAgIHJldHVybiAyO1xuICB9XG4gIC8qKiBAZXhwZXJpbWVudGFsICovXG4gIGdldCBpdGVyYXRpb25MaW1pdCgpIHtcbiAgICBsZXQgc2NvcGUgPSB0aGlzLmNvbnRleHQ7XG4gICAgd2hpbGUgKHNjb3BlKSB7XG4gICAgICBpZiAoc2NvcGUuaXRlcmF0aW9uTGltaXQgIT09IHZvaWQgMClcbiAgICAgICAgcmV0dXJuIHNjb3BlLml0ZXJhdGlvbkxpbWl0O1xuICAgICAgc2NvcGUgPSBzY29wZS5wYXJlbnRTY29wZSA/PyBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gMTAyNDtcbiAgfVxuICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICBnZXQgcmVjdXJzaW9uTGltaXQoKSB7XG4gICAgbGV0IHNjb3BlID0gdGhpcy5jb250ZXh0O1xuICAgIHdoaWxlIChzY29wZSkge1xuICAgICAgaWYgKHNjb3BlLnJlY3Vyc2lvbkxpbWl0ICE9PSB2b2lkIDApXG4gICAgICAgIHJldHVybiBzY29wZS5yZWN1cnNpb25MaW1pdDtcbiAgICAgIHNjb3BlID0gc2NvcGUucGFyZW50U2NvcGUgPz8gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIDEwMjQ7XG4gIH1cbiAgLyoqXG4gICAqIElmIGFuIHVua25vd24gc3ltYm9sIGlzIGVuY291bnRlcmVkLCBhc3N1bWUgaXQgc2hvdWxkXG4gICAqIGJlIGEgdmFyaWFibGUgaW4gdGhpcyBkb21haW4uXG4gICAqXG4gICAqIElmIHNldCB0byBgbnVsbGAsIHVua25vd24gc3ltYm9scyB3aWxsIHRyaWdnZXIgYW4gZXJyb3IuXG4gICAqXG4gICAqICoqRGVmYXVsdDoqKiBgXCJFeHRlbmRlZFJlYWxOdW1iZXJcImBcbiAgICovXG4gIGdldCBkZWZhdWx0RG9tYWluKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0RG9tYWluO1xuICB9XG4gIHNldCBkZWZhdWx0RG9tYWluKGRvbWFpbikge1xuICAgIGlmIChkb21haW4gPT09IG51bGwpXG4gICAgICB0aGlzLl9kZWZhdWx0RG9tYWluID0gbnVsbDtcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IGRlZmF1bHREb21haW4gPSB0aGlzLmRvbWFpbihkb21haW4pO1xuICAgICAgaWYgKCFkZWZhdWx0RG9tYWluLmlzVmFsaWQpXG4gICAgICAgIHRocm93IEVycm9yKGBJbnZhbGlkIGRvbWFpbiAke2RvbWFpbn1gKTtcbiAgICAgIHRoaXMuX2RlZmF1bHREb21haW4gPSBkZWZhdWx0RG9tYWluO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVmFsdWVzIHNtYWxsZXIgdGhhbiB0aGUgdG9sZXJhbmNlIGFyZSBjb25zaWRlcmVkIHRvIGJlIHplcm8gZm9yIHRoZVxuICAgKiBwdXJwb3NlIG9mIGNvbXBhcmlzb24sIGkuZS4gaWYgYHxiIC0gYXwgPD0gdG9sZXJhbmNlYCwgYGJgIGlzIGNvbnNpZGVyZWRcbiAgICogZXF1YWwgdG8gYGFgLlxuICAgKi9cbiAgZ2V0IHRvbGVyYW5jZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9sZXJhbmNlO1xuICB9XG4gIHNldCB0b2xlcmFuY2UodmFsKSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzRmluaXRlKHZhbCkpXG4gICAgICB0aGlzLl90b2xlcmFuY2UgPSBNYXRoLm1heCh2YWwsIDApO1xuICAgIGVsc2VcbiAgICAgIHRoaXMuX3RvbGVyYW5jZSA9IE5VTUVSSUNfVE9MRVJBTkNFO1xuICAgIHRoaXMuX2JpZ251bVRvbGVyYW5jZSA9IHRoaXMuYmlnbnVtKHRoaXMuX3RvbGVyYW5jZSk7XG4gIH1cbiAgY2hvcChuKSB7XG4gICAgaWYgKHR5cGVvZiBuID09PSBcIm51bWJlclwiICYmIE1hdGguYWJzKG4pIDw9IHRoaXMuX3RvbGVyYW5jZSlcbiAgICAgIHJldHVybiAwO1xuICAgIGlmIChuIGluc3RhbmNlb2YgRGVjaW1hbCAmJiBuLmFicygpLmx0ZSh0aGlzLl9iaWdudW1Ub2xlcmFuY2UpKVxuICAgICAgcmV0dXJuIDA7XG4gICAgaWYgKG4gaW5zdGFuY2VvZiBpbXBvcnRfY29tcGxleDIwLkNvbXBsZXggJiYgTWF0aC5hYnMobi5yZSkgPD0gdGhpcy5fdG9sZXJhbmNlICYmIE1hdGguYWJzKG4uaW0pIDw9IHRoaXMuX3RvbGVyYW5jZSlcbiAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiBuO1xuICB9XG4gIGJpZ251bShhKSB7XG4gICAgaWYgKHR5cGVvZiBhID09PSBcImJpZ2ludFwiKVxuICAgICAgcmV0dXJuIG5ldyB0aGlzLl9iaWdudW0oYS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gbmV3IHRoaXMuX2JpZ251bShhKTtcbiAgfVxuICBjb21wbGV4KGEsIGIpIHtcbiAgICBpZiAoYSBpbnN0YW5jZW9mIERlY2ltYWwpXG4gICAgICBhID0gYS50b051bWJlcigpO1xuICAgIGlmIChiIGluc3RhbmNlb2YgRGVjaW1hbClcbiAgICAgIGIgPSBiLnRvTnVtYmVyKCk7XG4gICAgcmV0dXJuIG5ldyBpbXBvcnRfY29tcGxleDIwLkNvbXBsZXgoYSwgYik7XG4gIH1cbiAgaXNCaWdudW0oYSkge1xuICAgIHJldHVybiBhIGluc3RhbmNlb2YgRGVjaW1hbDtcbiAgfVxuICBpc0NvbXBsZXgoYSkge1xuICAgIHJldHVybiBhIGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgyMC5Db21wbGV4O1xuICB9XG4gIGdldCBsYXRleFN5bnRheCgpIHtcbiAgICBpZiAoIXRoaXMuX2xhdGV4U3ludGF4KVxuICAgICAgdGhpcy5fbGF0ZXhTeW50YXggPSBuZXcgTGF0ZXhTeW50YXgoe1xuICAgICAgICBjb21wdXRlRW5naW5lOiB0aGlzLFxuICAgICAgICBkaWN0aW9uYXJ5OiB0aGlzLl9sYXRleERpY3Rpb25hcnksXG4gICAgICAgIHByZWNpc2lvbjogdGhpcy5wcmVjaXNpb24sXG4gICAgICAgIGF2b2lkRXhwb25lbnRzSW5SYW5nZTogWy02LCB0aGlzLnByZWNpc2lvbl0sXG4gICAgICAgIG9uRXJyb3I6IChlcnIpID0+IHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyWzBdLm1lc3NhZ2UpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2xhdGV4U3ludGF4O1xuICB9XG4gIHN0YXRpYyBnZXRMYXRleERpY3Rpb25hcnkoZG9tYWluID0gXCJhbGxcIikge1xuICAgIHJldHVybiBMYXRleFN5bnRheC5nZXREaWN0aW9uYXJ5KGRvbWFpbik7XG4gIH1cbiAgc2V0IGNvc3RGdW5jdGlvbihmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIilcbiAgICAgIHRoaXMuX2Nvc3QgPSBERUZBVUxUX0NPU1RfRlVOQ1RJT047XG4gICAgdGhpcy5fY29zdCA9IGZuO1xuICB9XG4gIGdldCBjb3N0RnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvc3QgPz8gREVGQVVMVF9DT1NUX0ZVTkNUSU9OO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYSBtYXRjaGluZyBzeW1ib2wgZGVmaW5pdGlvbiwgc3RhcnRpbmcgd2l0aCB0aGUgY3VycmVudFxuICAgKiBzY29wZSBhbmQgZ29pbmcgdXAgdGhlIHNjb3BlIGNoYWluLiBQcmlvcml0aXplIGZpbmRpbmcgYSBtYXRjaCBieVxuICAgKiB3aWtpZGF0YSwgaWYgcHJvdmlkZWQuXG4gICAqL1xuICBsb29rdXBTeW1ib2woc3ltYm9sMiwgd2lraWRhdGEsIHNjb3BlKSB7XG4gICAgaWYgKCF0aGlzLnN0cmljdCkge1xuICAgICAgc2NvcGUgPz8gKHNjb3BlID0gdGhpcy5jb250ZXh0ID8/IHZvaWQgMCk7XG4gICAgICB3aGlsZSAoc2NvcGUpIHtcbiAgICAgICAgY29uc3QgZGVmID0gc2NvcGUuaWRUYWJsZT8uZ2V0KHN5bWJvbDIpO1xuICAgICAgICBpZiAoaXNTeW1ib2xEZWZpbml0aW9uKGRlZikpXG4gICAgICAgICAgcmV0dXJuIGRlZjtcbiAgICAgICAgc2NvcGUgPSBzY29wZS5wYXJlbnRTY29wZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3ltYm9sMiAhPT0gXCJzdHJpbmdcIilcbiAgICAgIHRocm93IEVycm9yKFwiRXhwZWN0ZWQgYSBzdHJpbmdcIik7XG4gICAgaWYgKHN5bWJvbDIubGVuZ3RoID09PSAwIHx8ICF0aGlzLmNvbnRleHQpXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIGNvbnN0IHJvb3RTY29wZSA9IHNjb3BlID8/IHRoaXMuY29udGV4dDtcbiAgICBpZiAod2lraWRhdGEpIHtcbiAgICAgIHNjb3BlID0gcm9vdFNjb3BlO1xuICAgICAgd2hpbGUgKHNjb3BlKSB7XG4gICAgICAgIGlmIChzY29wZS5pZFRhYmxlKVxuICAgICAgICAgIGZvciAoY29uc3QgW18sIGRdIG9mIHNjb3BlLmlkVGFibGUpIHtcbiAgICAgICAgICAgIGlmIChpc1N5bWJvbERlZmluaXRpb24oZCkgJiYgZC53aWtpZGF0YSA9PT0gd2lraWRhdGEpXG4gICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgIH1cbiAgICAgICAgc2NvcGUgPSBzY29wZS5wYXJlbnRTY29wZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2NvcGUgPSByb290U2NvcGU7XG4gICAgd2hpbGUgKHNjb3BlKSB7XG4gICAgICBjb25zdCBkZWYgPSBzY29wZS5pZFRhYmxlPy5nZXQoc3ltYm9sMik7XG4gICAgICBpZiAoaXNTeW1ib2xEZWZpbml0aW9uKGRlZikpXG4gICAgICAgIHJldHVybiBkZWY7XG4gICAgICBzY29wZSA9IHNjb3BlLnBhcmVudFNjb3BlO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGRlZmluaXRpb24gZm9yIGEgZnVuY3Rpb24gbWF0Y2hpbmcgdGhpcyBoZWFkLlxuICAgKlxuICAgKiBTdGFydCBsb29raW5nIGluIHRoZSBjdXJyZW50IGNvbnRleHQsIHRoYW4gdXAgdGhlIHNjb3BlIGNoYWluLlxuICAgKlxuICAgKiBUaGlzIGlzIGEgdmVyeSByb3VnaCBsb29rdXAsIHNpbmNlIGl0IGRvZXNuJ3QgYWNjb3VudCBmb3IgdGhlIGRvbWFpblxuICAgKiBvZiB0aGUgYXJndW1lbnQgb3IgdGhlIGNvZG9tYWluLiBIb3dldmVyLCBpdCBpcyB1c2VmdWwgZHVyaW5nIHBhcnNpbmdcbiAgICogdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHN5bWJvbHMgdGhhdCBtaWdodCByZXByZXNlbnQgYSBmdW5jdGlvbiBhcHBsaWNhdGlvbiwgZS5nLiBgZmAgdnMgYHhgLlxuICAgKi9cbiAgbG9va3VwRnVuY3Rpb24oaGVhZDIsIHNjb3BlKSB7XG4gICAgaWYgKHR5cGVvZiBoZWFkMiAhPT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgaWYgKCF0aGlzLmNvbnRleHQpXG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIHNjb3BlID8/IChzY29wZSA9IHRoaXMuY29udGV4dCk7XG4gICAgd2hpbGUgKHNjb3BlKSB7XG4gICAgICBjb25zdCBkZWYgPSBzY29wZS5pZFRhYmxlPy5nZXQoaGVhZDIpO1xuICAgICAgaWYgKGlzRnVuY3Rpb25EZWZpbml0aW9uKGRlZikpXG4gICAgICAgIHJldHVybiBkZWY7XG4gICAgICBzY29wZSA9IHNjb3BlLnBhcmVudFNjb3BlO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgKG9yIHJlcGxhY2UpIGEgZGVmaW5pdGlvbiBmb3IgYSBzeW1ib2wgaW4gdGhlIGN1cnJlbnQgc2NvcGUuXG4gICAqL1xuICBkZWZpbmVTeW1ib2wobmFtZSwgZGVmKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRleHQpXG4gICAgICB0aHJvdyBFcnJvcihcIlN5bWJvbCBjYW5ub3QgYmUgZGVmaW5lZDogbm8gc2NvcGUgYXZhaWxhYmxlXCIpO1xuICAgIGlmIChuYW1lLmxlbmd0aCA9PT0gMCB8fCAhaXNWYWxpZElkZW50aWZpZXIobmFtZSkpXG4gICAgICB0aHJvdyBFcnJvcihgSW52YWxpZCBpZGVudGlmaWVyIFwiJHtuYW1lfVwiOiAke3ZhbGlkYXRlSWRlbnRpZmllcihuYW1lKX19YCk7XG4gICAgaWYgKCF0aGlzLmNvbnRleHQuaWRUYWJsZSlcbiAgICAgIHRoaXMuY29udGV4dC5pZFRhYmxlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBjb25zdCBib3hlZERlZiA9IG5ldyBCb3hlZFN5bWJvbERlZmluaXRpb25JbXBsKHRoaXMsIG5hbWUsIGRlZik7XG4gICAgaWYgKGJveGVkRGVmLm5hbWUpXG4gICAgICB0aGlzLmNvbnRleHQuaWRUYWJsZS5zZXQoYm94ZWREZWYubmFtZSwgYm94ZWREZWYpO1xuICAgIHJldHVybiBib3hlZERlZjtcbiAgfVxuICBkZWZpbmVGdW5jdGlvbihuYW1lLCBkZWYpIHtcbiAgICBpZiAoIXRoaXMuY29udGV4dClcbiAgICAgIHRocm93IEVycm9yKFwiRnVuY3Rpb24gY2Fubm90IGJlIGRlZmluZWQ6IG5vIHNjb3BlIGF2YWlsYWJsZVwiKTtcbiAgICBpZiAobmFtZS5sZW5ndGggPT09IDAgfHwgIWlzVmFsaWRJZGVudGlmaWVyKG5hbWUpKVxuICAgICAgdGhyb3cgRXJyb3IoYEludmFsaWQgaWRlbnRpZmllciBcIiR7bmFtZX1cIjogJHt2YWxpZGF0ZUlkZW50aWZpZXIobmFtZSl9fWApO1xuICAgIGlmICghdGhpcy5jb250ZXh0LmlkVGFibGUpXG4gICAgICB0aGlzLmNvbnRleHQuaWRUYWJsZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgY29uc3QgYm94ZWREZWYgPSBtYWtlRnVuY3Rpb25EZWZpbml0aW9uKHRoaXMsIG5hbWUsIGRlZik7XG4gICAgaWYgKGJveGVkRGVmLm5hbWUpXG4gICAgICB0aGlzLmNvbnRleHQuaWRUYWJsZS5zZXQobmFtZSwgYm94ZWREZWYpO1xuICAgIHJldHVybiBib3hlZERlZjtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQ3JlYXRlIGEgbmV3IHNjb3BlIGFuZCBhZGQgaXQgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgc3RhY2tcbiAgICpcbiAgICogVGhlIGBvcHRpb25zLnNjb3BlYCBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBzcGVjaWZ5IGN1c3RvbSBwcmVjaXNpb24sXG4gICAqIGV0Yy4uLiBmb3IgdGhpcyBzY29wZVxuICAgKlxuICAgKi9cbiAgcHVzaFNjb3BlKGlkcywgc2NvcGUpIHtcbiAgICBpZiAodGhpcy5jb250ZXh0ID09PSBudWxsKVxuICAgICAgdGhyb3cgRXJyb3IoXCJObyBwYXJlbnQgc2NvcGUgYXZhaWxhYmxlXCIpO1xuICAgIHRoaXMuY29udGV4dCA9IHtcbiAgICAgIHRpbWVMaW1pdDogdGhpcy5jb250ZXh0LnRpbWVMaW1pdCxcbiAgICAgIG1lbW9yeUxpbWl0OiB0aGlzLmNvbnRleHQubWVtb3J5TGltaXQsXG4gICAgICByZWN1cnNpb25MaW1pdDogdGhpcy5jb250ZXh0LnJlY3Vyc2lvbkxpbWl0LFxuICAgICAgaXRlcmF0aW9uTGltaXQ6IHRoaXMuY29udGV4dC5pdGVyYXRpb25MaW1pdCxcbiAgICAgIC4uLnNjb3BlID8/IHt9LFxuICAgICAgcGFyZW50U2NvcGU6IHRoaXMuY29udGV4dCxcbiAgICAgIC8vIFdlIGFsd2F5cyBjb3B5IHRoZSBjdXJyZW50IGFzc3VtcHRpb25zIGluIHRoZSBuZXcgc2NvcGUuXG4gICAgICAvLyBUaGlzIG1ha2UgaXMgbXVjaCBlYXNpZXIgdG8gZGVhbCB3aXRoICdpbmhlcml0ZWQnIGFzc3VtcHRpb25zXG4gICAgICAvLyAoYW5kIHBvdGVudGlhbGx5IG1vZGlmeWluZyB0aGVtIGxhdGVyKSB3aXRob3V0IGhhdmluZyB0byB3YWxrIGJhY2tcbiAgICAgIC8vIGludG8gcGFyZW50IGNvbnRleHRzLiBJbiBvdGhlciB3b3JkcywgY2FsbGluZyBgY2UuZm9yZ2V0KClgIHdpbGxcbiAgICAgIC8vIGZvcmdldCBldmVyeXRoaW5nICoqaW4gdGhlIGN1cnJlbnQgc2NvcGUqKi4gV2hlbiBleGl0aW5nIHRoZSBzY29wZSxcbiAgICAgIC8vIHRoZSBwcmV2aW91cyBhc3N1bXB0aW9ucyBhcmUgcmVzdG9yZWQuXG4gICAgICBhc3N1bXB0aW9uczogbmV3IEV4cHJlc3Npb25NYXAodGhpcy5jb250ZXh0LmFzc3VtcHRpb25zKVxuICAgIH07XG4gICAgaWYgKGlkcykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaWRzKSlcbiAgICAgICAgZm9yIChjb25zdCB0YWJsZSBvZiBpZHMpXG4gICAgICAgICAgc2V0Q3VycmVudENvbnRleHRTeW1ib2xUYWJsZSh0aGlzLCB0YWJsZSk7XG4gICAgICBlbHNlXG4gICAgICAgIHNldEN1cnJlbnRDb250ZXh0U3ltYm9sVGFibGUodGhpcywgaWRzKTtcbiAgICB9XG4gIH1cbiAgLyoqIFJlbW92ZSB0aGUgdG9wbW9zdCBzY29wZSBmcm9tIHRoZSBzY29wZSBzdGFjay5cbiAgICovXG4gIHBvcFNjb3BlKCkge1xuICAgIGlmICghdGhpcy5jb250ZXh0KVxuICAgICAgdGhyb3cgRXJyb3IoXCJObyBzY29wZSBhdmFpbGFibGVcIik7XG4gICAgY29uc3QgcGFyZW50U2NvcGUgPSB0aGlzLmNvbnRleHQ/LnBhcmVudFNjb3BlO1xuICAgIHRoaXMuY29udGV4dCA9IHBhcmVudFNjb3BlID8/IG51bGw7XG4gICAgLyogQF9fUFVSRV9fICovIGNvbnNvbGUuYXNzZXJ0KHRoaXMuY29udGV4dCAhPT0gbnVsbCk7XG4gIH1cbiAgc2V0KGlkZW50aWZpZXJzKSB7XG4gICAgaWYgKCF0aGlzLnN0cmljdCkge1xuICAgICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKGlkZW50aWZpZXJzKSkge1xuICAgICAgICBpZiAoayAhPT0gXCJOb3RoaW5nXCIpIHtcbiAgICAgICAgICBjb25zdCBkZWYgPSB0aGlzLmxvb2t1cFN5bWJvbChrKTtcbiAgICAgICAgICBjb25zdCBpZGsgPSBpZGVudGlmaWVyc1trXTtcbiAgICAgICAgICBpZiAoZGVmKVxuICAgICAgICAgICAgZGVmLnZhbHVlID0gaWRrID8/IHZvaWQgMDtcbiAgICAgICAgICBlbHNlIGlmIChpZGsgIT09IHZvaWQgMCAmJiBpZGsgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuYm94KGlkayk7XG4gICAgICAgICAgICBpZiAodmFsLmRvbWFpbi5pc051bWVyaWMpXG4gICAgICAgICAgICAgIHRoaXMuZGVmaW5lU3ltYm9sKGssIHsgdmFsdWU6IHZhbCwgZG9tYWluOiBcIk51bWJlclwiIH0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB0aGlzLmRlZmluZVN5bWJvbChrLCB7IHZhbHVlOiB2YWwgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhpZGVudGlmaWVycykpIHtcbiAgICAgIGlmIChrICE9PSBcIk5vdGhpbmdcIikge1xuICAgICAgICBjb25zdCBkZWYgPSB0aGlzLmxvb2t1cFN5bWJvbChrKTtcbiAgICAgICAgY29uc3QgaWRrID0gaWRlbnRpZmllcnNba107XG4gICAgICAgIGlmIChpZGsgPT09IHZvaWQgMCB8fCBpZGsgPT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoZGVmKVxuICAgICAgICAgICAgZGVmLnZhbHVlID0gdm9pZCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuYm94KGlkayk7XG4gICAgICAgICAgaWYgKGRlZikge1xuICAgICAgICAgICAgaWYgKGRlZi5kb21haW4gJiYgIXZhbC5kb21haW4uaXNDb21wYXRpYmxlKGRlZi5kb21haW4pKVxuICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgICAgICBgRXhwZWN0ZWQgdmFsdWUgd2l0aCBkb21haW4gJHtkZWYuZG9tYWluLnRvU3RyaW5nKCl9IGZvciBcIiR7a31cImBcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRlZi52YWx1ZSA9IHZhbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHZhbC5kb21haW4uaXNOdW1lcmljKVxuICAgICAgICAgICAgICB0aGlzLmRlZmluZVN5bWJvbChrLCB7IHZhbHVlOiB2YWwsIGRvbWFpbjogXCJOdW1iZXJcIiB9KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgdGhpcy5kZWZpbmVTeW1ib2woaywgeyB2YWx1ZTogdmFsIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBsZXQoaWRlbnRpZmllcnMpIHtcbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXMoaWRlbnRpZmllcnMpKSB7XG4gICAgICBpZiAoayAhPT0gXCJOb3RoaW5nXCIpIHtcbiAgICAgICAgY29uc3QgZGVmID0gaWRlbnRpZmllcnNba107XG4gICAgICAgIGlmIChpc1N5bWJvbERlZmluaXRpb24oZGVmKSlcbiAgICAgICAgICB0aGlzLmRlZmluZVN5bWJvbChrLCBkZWYpO1xuICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uRGVmaW5pdGlvbihkZWYpKVxuICAgICAgICAgIHRoaXMuZGVmaW5lRnVuY3Rpb24oaywgZGVmKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXMuc2V0KHsgW2tdOiBpZGVudGlmaWVyc1trXSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0IGFzc3VtcHRpb25zKCkge1xuICAgIGlmICghdGhpcy5jb250ZXh0KVxuICAgICAgdGhyb3cgRXJyb3IoXCJObyBzY29wZSBhdmFpbGFibGVcIik7XG4gICAgaWYgKHRoaXMuY29udGV4dC5hc3N1bXB0aW9ucylcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuYXNzdW1wdGlvbnM7XG4gICAgdGhpcy5jb250ZXh0LmFzc3VtcHRpb25zID0gbmV3IEV4cHJlc3Npb25NYXAoKTtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LmFzc3VtcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gZmFsc2UgaWYgdGhlIGV4ZWN1dGlvbiBzaG91bGQgc3RvcC5cbiAgICpcbiAgICogVGhpcyBjYW4gb2NjdXIgaWY6XG4gICAqIC0gYW4gZXJyb3IgaGFzIGJlZW4gc2lnbmFsZWRcbiAgICogLSB0aGUgdGltZSBsaW1pdCBvciBtZW1vcnkgbGltaXQgaGFzIGJlZW4gZXhjZWVkZWRcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzaG91bGRDb250aW51ZUV4ZWN1dGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kZWFkbGluZSA9PT0gdm9pZCAwIHx8IHRoaXMuZGVhZGxpbmUgPj0gRGF0ZS5ub3coKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGNoZWNrQ29udGludWVFeGVjdXRpb24oKSB7XG4gICAgaWYgKCF0aGlzLnNob3VsZENvbnRpbnVlRXhlY3V0aW9uKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInRpbWVvdXRcIik7XG4gICAgfVxuICB9XG4gIC8vIGFzc2VydChcbiAgLy8gICBjb25kaXRpb246IGJvb2xlYW4sXG4gIC8vICAgZXhwcjogQm94ZWRFeHByZXNzaW9uLFxuICAvLyAgIG1zZzogc3RyaW5nLFxuICAvLyAgIGNvZGU/OiBTaWduYWxNZXNzYWdlXG4gIC8vICkge1xuICAvLyAgIGlmICghY29uZGl0aW9uKSB0aGlzLnNpZ25hbChleHByLCBtc2csIGNvZGUpO1xuICAvLyB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgY2FjaGUoY2FjaGVOYW1lLCBidWlsZCwgcHVyZ2UpIHtcbiAgICBpZiAodGhpcy5fY2FjaGVbY2FjaGVOYW1lXSA9PT0gdm9pZCAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9jYWNoZVtjYWNoZU5hbWVdID0geyBidWlsZCwgcHVyZ2UsIHZhbHVlOiBidWlsZCgpIH07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYEZhdGFsIGVycm9yIGJ1aWxkaW5nIGNhY2hlIFwiJHtjYWNoZU5hbWV9XCI6XG5cdCAke2UudG9TdHJpbmcoKX1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jYWNoZVtjYWNoZU5hbWVdPy52YWx1ZTtcbiAgfVxuICBib3goZXhwciwgb3B0aW9ucykge1xuICAgIHJldHVybiBib3godGhpcywgZXhwciwgb3B0aW9ucyk7XG4gIH1cbiAgY2Fub25pY2FsKHhzKSB7XG4gICAgaWYgKCF4cy5ldmVyeSgoeCkgPT4geCBpbnN0YW5jZW9mIEFic3RyYWN0Qm94ZWRFeHByZXNzaW9uKSlcbiAgICAgIHJldHVybiB4cy5tYXAoKHgpID0+IHRoaXMuYm94KHgpKTtcbiAgICBjb25zdCBieHMgPSB4cztcbiAgICByZXR1cm4gYnhzLmV2ZXJ5KCh4KSA9PiB4LmlzQ2Fub25pY2FsKSA/IGJ4cyA6IGJ4cy5tYXAoKHgpID0+IHguY2Fub25pY2FsKTtcbiAgfVxuICBmbihoZWFkMiwgb3BzMiwgb3B0aW9ucykge1xuICAgIHJldHVybiBib3hGdW5jdGlvbih0aGlzLCBoZWFkMiwgb3BzMiwgb3B0aW9ucyA/PyB7IGNhbm9uaWNhbDogdHJ1ZSB9KTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIF9mbihoZWFkMiwgb3BzMiwgbWV0YWRhdGEpIHtcbiAgICByZXR1cm4gbmV3IEJveGVkRnVuY3Rpb24odGhpcywgaGVhZDIsIG9wczIsIHtcbiAgICAgIG1ldGFkYXRhLFxuICAgICAgY2Fub25pY2FsOiB0cnVlLFxuICAgICAgZGVmOiB0aGlzLmxvb2t1cEZ1bmN0aW9uKGhlYWQyLCB0aGlzLmNvbnRleHQpXG4gICAgfSk7XG4gIH1cbiAgZXJyb3IobWVzc2FnZSwgd2hlcmUpIHtcbiAgICBpZiAod2hlcmUgaW5zdGFuY2VvZiBBYnN0cmFjdEJveGVkRXhwcmVzc2lvbikge1xuICAgICAgd2hlcmUgPSB0aGlzLnJhd0pzb24od2hlcmUpO1xuICAgIH0gZWxzZSBpZiAod2hlcmUgJiYgQXJyYXkuaXNBcnJheSh3aGVyZSkgJiYgd2hlcmVbMF0gPT09IFwiTGF0ZXhcIikge1xuICAgICAgaWYgKHdoZXJlWzFdID09PSB2b2lkIDAgfHwgIXdoZXJlWzFdKVxuICAgICAgICB3aGVyZSA9IFwiXCI7XG4gICAgICBpZiAodHlwZW9mIHdoZXJlWzFdID09PSBcIm9iamVjdFwiICYmIFwic3RyXCIgaW4gd2hlcmVbMV0gJiYgIXdoZXJlWzFdLnN0cilcbiAgICAgICAgd2hlcmUgPSBcIlwiO1xuICAgIH1cbiAgICBsZXQgbXNnID0gdm9pZCAwO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2UpICYmIG1lc3NhZ2VbMF0gPT09IFwiaW5jb21wYXRpYmxlLWRvbWFpblwiKSB7XG4gICAgICBtc2cgPSBuZXcgQm94ZWRGdW5jdGlvbih0aGlzLCBcIkVycm9yQ29kZVwiLCBbXG4gICAgICAgIHRoaXMuc3RyaW5nKFwiaW5jb21wYXRpYmxlLWRvbWFpblwiKSxcbiAgICAgICAgYm94RG9tYWluKHRoaXMsIG1lc3NhZ2VbMV0pLFxuICAgICAgICBib3hEb21haW4odGhpcywgbWVzc2FnZVsyXSlcbiAgICAgIF0pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIpXG4gICAgICBtc2cgPSB0aGlzLnN0cmluZyhtZXNzYWdlKTtcbiAgICBpZiAoIW1zZyAmJiB0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIilcbiAgICAgIG1zZyA9IG5ldyBCb3hlZEZ1bmN0aW9uKHRoaXMsIFwiRXJyb3JDb2RlXCIsIFtcbiAgICAgICAgdGhpcy5zdHJpbmcobWVzc2FnZVswXSksXG4gICAgICAgIC4uLm1lc3NhZ2Uuc2xpY2UoMSkubWFwKCh4KSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB4ID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgO1xuICAgICAgICAgIC8qIEBfX1BVUkVfXyAqLyBjb25zb2xlLmFzc2VydCh0eXBlb2YgeCAhPT0gXCJzdHJpbmdcIik7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYm94KHgsIHsgY2Fub25pY2FsOiBmYWxzZSB9KTtcbiAgICAgICAgfSlcbiAgICAgIF0pO1xuICAgIGlmICghd2hlcmUpXG4gICAgICByZXR1cm4gbmV3IEJveGVkRnVuY3Rpb24odGhpcywgXCJFcnJvclwiLCBbbXNnXSwgeyBjYW5vbmljYWw6IGZhbHNlIH0pO1xuICAgIHJldHVybiBuZXcgQm94ZWRGdW5jdGlvbihcbiAgICAgIHRoaXMsXG4gICAgICBcIkVycm9yXCIsXG4gICAgICBbbXNnLCB0aGlzLmJveCh3aGVyZSwgeyBjYW5vbmljYWw6IGZhbHNlIH0pXSxcbiAgICAgIHsgY2Fub25pY2FsOiBmYWxzZSB9XG4gICAgKTtcbiAgfVxuICBob2xkKGV4cHIpIHtcbiAgICByZXR1cm4gdGhpcy5fZm4oXCJIb2xkXCIsIFt0aGlzLmJveChleHByLCB7IGNhbm9uaWNhbDogZmFsc2UgfSldKTtcbiAgfVxuICBhZGQob3BzMiwgbWV0YWRhdGEpIHtcbiAgICBjb25zdCByZXN1bHQgPSBjYW5vbmljYWxBZGQodGhpcywgZmxhdHRlbk9wcyhmbGF0dGVuU2VxdWVuY2Uob3BzMiksIFwiQWRkXCIpKTtcbiAgICBpZiAobWV0YWRhdGE/LmxhdGV4ICE9PSB2b2lkIDApXG4gICAgICByZXN1bHQubGF0ZXggPSBtZXRhZGF0YS5sYXRleDtcbiAgICBpZiAobWV0YWRhdGE/Lndpa2lkYXRhICE9PSB2b2lkIDApXG4gICAgICByZXN1bHQud2lraWRhdGEgPSBtZXRhZGF0YS53aWtpZGF0YTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIG5lZyhleHByLCBtZXRhZGF0YSkge1xuICAgIHJldHVybiBjYW5vbmljYWxOZWdhdGUoZXhwciwgbWV0YWRhdGEpO1xuICB9XG4gIG11bChvcHMyLCBtZXRhZGF0YSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGNhbm9uaWNhbE11bHRpcGx5KFxuICAgICAgdGhpcyxcbiAgICAgIGZsYXR0ZW5PcHMoZmxhdHRlblNlcXVlbmNlKG9wczIpLCBcIiBNdWx0aXBseVwiKVxuICAgICk7XG4gICAgaWYgKG1ldGFkYXRhPy5sYXRleCAhPT0gdm9pZCAwKVxuICAgICAgcmVzdWx0LmxhdGV4ID0gbWV0YWRhdGEubGF0ZXg7XG4gICAgaWYgKG1ldGFkYXRhPy53aWtpZGF0YSAhPT0gdm9pZCAwKVxuICAgICAgcmVzdWx0Lndpa2lkYXRhID0gbWV0YWRhdGEud2lraWRhdGE7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkaXYobnVtLCBkZW5vbSwgbWV0YWRhdGEpIHtcbiAgICBjb25zdCByZXN1bHQgPSBjYW5vbmljYWxEaXZpZGUodGhpcywgbnVtLCBkZW5vbSk7XG4gICAgaWYgKG1ldGFkYXRhPy5sYXRleCAhPT0gdm9pZCAwKVxuICAgICAgcmVzdWx0LmxhdGV4ID0gbWV0YWRhdGEubGF0ZXg7XG4gICAgaWYgKG1ldGFkYXRhPy53aWtpZGF0YSAhPT0gdm9pZCAwKVxuICAgICAgcmVzdWx0Lndpa2lkYXRhID0gbWV0YWRhdGEud2lraWRhdGE7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBzcXJ0KGJhc2UsIG1ldGFkYXRhKSB7XG4gICAgcmV0dXJuIGNhbm9uaWNhbFBvd2VyKHRoaXMsIGJhc2UsIHRoaXMuX0hBTEYsIG1ldGFkYXRhKTtcbiAgfVxuICBwb3coYmFzZSwgZXhwb25lbnQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGJhc2Uuc3ltYm9sID09PSBcIkV4cG9uZW50aWFsRVwiICYmIGV4cG9uZW50IGluc3RhbmNlb2YgaW1wb3J0X2NvbXBsZXgyMC5Db21wbGV4ICYmIGV4cG9uZW50LnJlID09PSAwKSB7XG4gICAgICBjb25zdCBpbSA9IGV4cG9uZW50LmltO1xuICAgICAgcmV0dXJuIHRoaXMubnVtYmVyKHRoaXMuY29tcGxleChNYXRoLmNvcyhpbSksIE1hdGguc2luKGltKSkpO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgaW5zdGFuY2VvZiBBYnN0cmFjdEJveGVkRXhwcmVzc2lvbikge1xuICAgICAgY29uc3QgbnVtID0gZXhwb25lbnQubnVtZXJpY1ZhbHVlO1xuICAgICAgaWYgKG51bSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIG51bSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICBleHBvbmVudCA9IG51bTtcbiAgICAgICAgaWYgKGlzUmF0aW9uYWwobnVtKSlcbiAgICAgICAgICBleHBvbmVudCA9IG51bTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGUgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgZXhwb25lbnQgPT09IFwibnVtYmVyXCIpXG4gICAgICBlID0gZXhwb25lbnQ7XG4gICAgZWxzZSBpZiAoaXNSYXRpb25hbChleHBvbmVudCkpIHtcbiAgICAgIGlmIChpc01hY2hpbmVSYXRpb25hbChleHBvbmVudCkgJiYgZXhwb25lbnRbMV0gPT09IDEpXG4gICAgICAgIGUgPSBleHBvbmVudFswXTtcbiAgICAgIGVsc2UgaWYgKGlzQmlnUmF0aW9uYWwoZXhwb25lbnQpICYmIGV4cG9uZW50WzFdID09PSBCaWdJbnQoMSkpXG4gICAgICAgIGUgPSBOdW1iZXIoZXhwb25lbnRbMF0pO1xuICAgIH1cbiAgICBpZiAoZSA9PT0gMSlcbiAgICAgIHJldHVybiBiYXNlO1xuICAgIGNvbnN0IHIgPSBiYXNlLm51bWVyaWNWYWx1ZTtcbiAgICBpZiAoZSA9PT0gLTEgJiYgciAhPT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiByID09PSBcIm51bWJlclwiICYmIE51bWJlci5pc0ludGVnZXIocikpXG4gICAgICAgIHJldHVybiB0aGlzLm51bWJlcihbMSwgcl0pO1xuICAgICAgZWxzZSBpZiAociBpbnN0YW5jZW9mIERlY2ltYWwgJiYgci5pc0ludGVnZXIoKSlcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtYmVyKFtCaWdJbnQoMSksIGJpZ2ludChyKV0pO1xuICAgICAgZWxzZSBpZiAoaXNSYXRpb25hbChyKSlcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtYmVyKFtyWzFdLCByWzBdXSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZXhwb25lbnQgPT09IFwibnVtYmVyXCIgfHwgaXNSYXRpb25hbChleHBvbmVudCkpXG4gICAgICBleHBvbmVudCA9IHRoaXMubnVtYmVyKGV4cG9uZW50KTtcbiAgICByZXR1cm4gY2Fub25pY2FsUG93ZXIodGhpcywgYmFzZSwgZXhwb25lbnQsIG1ldGFkYXRhKTtcbiAgfVxuICBpbnYoZXhwciwgbWV0YWRhdGEpIHtcbiAgICBpZiAoZXhwci5pc09uZSlcbiAgICAgIHJldHVybiB0aGlzLl9PTkU7XG4gICAgaWYgKGV4cHIuaXNOZWdhdGl2ZU9uZSlcbiAgICAgIHJldHVybiB0aGlzLl9ORUdBVElWRV9PTkU7XG4gICAgaWYgKGV4cHIuaXNJbmZpbml0eSlcbiAgICAgIHJldHVybiB0aGlzLl9aRVJPO1xuICAgIGNvbnN0IG4gPSBleHByLm51bWVyaWNWYWx1ZTtcbiAgICBpZiAobiAhPT0gbnVsbCkge1xuICAgICAgaWYgKGlzUmF0aW9uYWwobikpXG4gICAgICAgIHJldHVybiB0aGlzLm51bWJlcihpbnZlcnNlKG4pLCB7IG1ldGFkYXRhIH0pO1xuICAgICAgaWYgKHR5cGVvZiBuID09PSBcIm51bWJlclwiICYmIE51bWJlci5pc0ludGVnZXIobikpXG4gICAgICAgIHJldHVybiB0aGlzLm51bWJlcihbMSwgbl0sIHsgbWV0YWRhdGEgfSk7XG4gICAgICBpZiAobiBpbnN0YW5jZW9mIERlY2ltYWwgJiYgbi5pc0ludGVnZXIoKSlcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtYmVyKFtCaWdJbnQoMSksIGJpZ2ludChuKV0sIHsgbWV0YWRhdGEgfSk7XG4gICAgICByZXR1cm4gdGhpcy5fZm4oXCJEaXZpZGVcIiwgW3RoaXMuX09ORSwgZXhwcl0sIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgaWYgKGV4cHIuaGVhZCA9PT0gXCJTcXJ0XCIpXG4gICAgICByZXR1cm4gdGhpcy5fZm4oXCJTcXJ0XCIsIFt0aGlzLmludihleHByLm9wMSldLCBtZXRhZGF0YSk7XG4gICAgaWYgKGV4cHIuaGVhZCA9PT0gXCJEaXZpZGVcIilcbiAgICAgIHJldHVybiB0aGlzLl9mbihcIkRpdmlkZVwiLCBbZXhwclsxXSwgZXhwclswXV0sIG1ldGFkYXRhKTtcbiAgICBsZXQgZSA9IHRoaXMuX05FR0FUSVZFX09ORTtcbiAgICBpZiAoZXhwci5oZWFkID09PSBcIlBvd2VyXCIpIHtcbiAgICAgIGlmIChleHByLm9wMi5pc05lZ2F0aXZlT25lKVxuICAgICAgICByZXR1cm4gZXhwci5vcDE7XG4gICAgICBlID0gY2Fub25pY2FsTmVnYXRlKGV4cHIub3AyKTtcbiAgICAgIGV4cHIgPSBleHByLm9wMTtcbiAgICB9XG4gICAgaWYgKGUuaXNOZWdhdGl2ZU9uZSlcbiAgICAgIHJldHVybiB0aGlzLl9mbihcIkRpdmlkZVwiLCBbdGhpcy5fT05FLCBleHByXSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiB0aGlzLl9mbihcIlBvd2VyXCIsIFtleHByLCBlXSwgbWV0YWRhdGEpO1xuICB9XG4gIHBhaXIoZmlyc3QsIHNlY29uZCwgbWV0YWRhdGEpIHtcbiAgICByZXR1cm4gbmV3IEJveGVkRnVuY3Rpb24odGhpcywgXCJUdXBsZVwiLCBbZmlyc3QsIHNlY29uZF0sIHtcbiAgICAgIG1ldGFkYXRhLFxuICAgICAgY2Fub25pY2FsOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgdHVwbGUoZWxlbWVudHMsIG1ldGFkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBCb3hlZEZ1bmN0aW9uKHRoaXMsIFwiVHVwbGVcIiwgY2Fub25pY2FsKGVsZW1lbnRzKSwge1xuICAgICAgbWV0YWRhdGEsXG4gICAgICBjYW5vbmljYWw6IHRydWVcbiAgICB9KTtcbiAgfVxuICBzdHJpbmcocywgbWV0YWRhdGEpIHtcbiAgICByZXR1cm4gbmV3IEJveGVkU3RyaW5nKHRoaXMsIHMsIG1ldGFkYXRhKTtcbiAgfVxuICBzeW1ib2wobmFtZSwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zID8geyAuLi5vcHRpb25zIH0gOiB7fTtcbiAgICBpZiAoIShcImNhbm9uaWNhbFwiIGluIG9wdGlvbnMpKVxuICAgICAgb3B0aW9ucy5jYW5vbmljYWwgPSB0cnVlO1xuICAgIG5hbWUgPSBuYW1lLm5vcm1hbGl6ZSgpO1xuICAgIGlmIChuYW1lID09PSBcIk5hTlwiKVxuICAgICAgcmV0dXJuIHRoaXMuX05BTjtcbiAgICBpZiAobmFtZSA9PT0gXCJJbmZpbml0eVwiKVxuICAgICAgcmV0dXJuIHRoaXMuX1BPU0lUSVZFX0lORklOSVRZO1xuICAgIGlmIChuYW1lID09PSBcIitJbmZpbml0eVwiKVxuICAgICAgcmV0dXJuIHRoaXMuX1BPU0lUSVZFX0lORklOSVRZO1xuICAgIGlmIChuYW1lID09PSBcIi1JbmZpbml0eVwiKVxuICAgICAgcmV0dXJuIHRoaXMuX05FR0FUSVZFX0lORklOSVRZO1xuICAgIGlmIChuYW1lID09PSBcIkhhbGZcIilcbiAgICAgIHJldHVybiB0aGlzLl9IQUxGO1xuICAgIGlmICh0aGlzLnN0cmljdCAmJiAhaXNWYWxpZElkZW50aWZpZXIobmFtZSkpIHtcbiAgICAgIGNvbnN0IHdoZXJlID0gb3B0aW9ucz8ubWV0YWRhdGE/LmxhdGV4O1xuICAgICAgY29uc3QgbmFtZVN0ciA9IGAnJHtuYW1lfSdgO1xuICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoXG4gICAgICAgIFtcImludmFsaWQtaWRlbnRpZmllclwiLCB7IHN0cjogdmFsaWRhdGVJZGVudGlmaWVyKG5hbWUpIH1dLFxuICAgICAgICB3aGVyZSA/IFtcIkxhdGV4XCIsIGAnJHt3aGVyZX0nYF0gOiBuYW1lU3RyXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucz8ubWV0YWRhdGE/LmxhdGV4ICE9PSB2b2lkIDAgJiYgIW9wdGlvbnMuY2Fub25pY2FsKVxuICAgICAgcmV0dXJuIG5ldyBCb3hlZFN5bWJvbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9jb21tb25TeW1ib2xzW25hbWVdO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGlmICghb3B0aW9ucz8ubWV0YWRhdGE/Lndpa2lkYXRhIHx8ICFyZXN1bHQud2lraWRhdGEgfHwgcmVzdWx0Lndpa2lkYXRhID09PSBvcHRpb25zLm1ldGFkYXRhLndpa2lkYXRhKVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgaWYgKG9wdGlvbnMuY2Fub25pY2FsKVxuICAgICAgICByZXR1cm4gbWFrZUNhbm9uaWNhbFN5bWJvbCh0aGlzLCBuYW1lKTtcbiAgICAgIHJldHVybiBuZXcgQm94ZWRTeW1ib2wodGhpcywgbmFtZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmNhbm9uaWNhbClcbiAgICAgIHJldHVybiBtYWtlQ2Fub25pY2FsU3ltYm9sKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBuZXcgQm94ZWRTeW1ib2wodGhpcywgbmFtZSwgb3B0aW9ucyk7XG4gIH1cbiAgZG9tYWluKGRvbWFpbiwgbWV0YWRhdGEpIHtcbiAgICBpZiAoZG9tYWluIGluc3RhbmNlb2YgX0JveGVkRG9tYWluKVxuICAgICAgcmV0dXJuIGRvbWFpbjtcbiAgICBpZiAoZG9tYWluIGluc3RhbmNlb2YgQWJzdHJhY3RCb3hlZEV4cHJlc3Npb24gJiYgZG9tYWluLnN5bWJvbClcbiAgICAgIGRvbWFpbiA9IGRvbWFpbi5zeW1ib2w7XG4gICAgaWYgKHR5cGVvZiBkb21haW4gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGV4cHIgPSB0aGlzLl9jb21tb25Eb21haW5zW2RvbWFpbl07XG4gICAgICBpZiAoZXhwcilcbiAgICAgICAgcmV0dXJuIGV4cHI7XG4gICAgfVxuICAgIHJldHVybiBib3hEb21haW4odGhpcywgZG9tYWluLCBtZXRhZGF0YSk7XG4gIH1cbiAgLypcbiAgICogVGhpcyBmdW5jdGlvbiB0cmllcyB0byBhdm9pZCBjcmVhdGluZyBhIGJveGVkIG51bWJlciBpZiBgbnVtYCBjb3JyZXNwb25kc1xuICAgKiB0byBhIGNvbW1vbiB2YWx1ZSBmb3Igd2hpY2ggd2UgaGF2ZSBhIHNoYXJlZCBpbnN0YW5jZSAoLTEsIDAsIE5hTiwgZXRjLi4uKVxuICAgKi9cbiAgbnVtYmVyKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgPyB7IC4uLm9wdGlvbnMgfSA6IHt9O1xuICAgIGlmICghKFwiY2Fub25pY2FsXCIgaW4gb3B0aW9ucykpXG4gICAgICBvcHRpb25zLmNhbm9uaWNhbCA9IHRydWU7XG4gICAgaWYgKG9wdGlvbnMubWV0YWRhdGEgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICBpZiAodmFsdWUgPT09IEJpZ0ludCgxKSlcbiAgICAgICAgICByZXR1cm4gdGhpcy5fT05FO1xuICAgICAgICBpZiAodmFsdWUgPT09IEJpZ0ludCgwKSlcbiAgICAgICAgICByZXR1cm4gdGhpcy5fWkVSTztcbiAgICAgICAgaWYgKHZhbHVlID09PSBCaWdJbnQoLTEpKVxuICAgICAgICAgIHJldHVybiB0aGlzLl9ORUdBVElWRV9PTkU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGNvbnN0IG4gPSB2YWx1ZTtcbiAgICAgICAgaWYgKG4gPT09IDEpXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX09ORTtcbiAgICAgICAgaWYgKG4gPT09IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX1pFUk87XG4gICAgICAgIGlmIChuID09PSAtMSlcbiAgICAgICAgICByZXR1cm4gdGhpcy5fTkVHQVRJVkVfT05FO1xuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihuKSAmJiB0aGlzLl9jb21tb25OdW1iZXJzW25dICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBpZiAodGhpcy5fY29tbW9uTnVtYmVyc1tuXSA9PT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMuX2NvbW1vbk51bWJlcnNbbl0gPSBib3hOdW1iZXIodGhpcywgdmFsdWUpID8/IHRoaXMuX05BTjtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fY29tbW9uTnVtYmVyc1tuXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKG4pKVxuICAgICAgICAgIHJldHVybiB0aGlzLl9OQU47XG4gICAgICAgIGlmICghTnVtYmVyLmlzRmluaXRlKG4pKVxuICAgICAgICAgIHJldHVybiBuIDwgMCA/IHRoaXMuX05FR0FUSVZFX0lORklOSVRZIDogdGhpcy5fUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIpXG4gICAgICB2YWx1ZSA9IHRoaXMuYmlnbnVtKHZhbHVlKTtcbiAgICByZXR1cm4gYm94TnVtYmVyKHRoaXMsIHZhbHVlLCBvcHRpb25zKSA/PyB0aGlzLl9OQU47XG4gIH1cbiAgcnVsZXMocnVsZXMpIHtcbiAgICByZXR1cm4gYm94UnVsZXModGhpcywgcnVsZXMpO1xuICB9XG4gIHBhdHRlcm4oZXhwcikge1xuICAgIHJldHVybiBuZXcgQm94ZWRQYXR0ZXJuKHRoaXMsIGV4cHIpO1xuICB9XG4gIHBhcnNlKGxhdGV4LCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBsYXRleCAhPT0gXCJzdHJpbmdcIilcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMubGF0ZXhTeW50YXgucGFyc2UobGF0ZXhTdHJpbmcobGF0ZXgpID8/IGxhdGV4KTtcbiAgICByZXR1cm4gdGhpcy5ib3gocmVzdWx0LCBvcHRpb25zKTtcbiAgfVxuICBzZXJpYWxpemUoeCwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBcImpzb25cIiBpbiB4KSB7XG4gICAgICBjb25zdCBjZSA9IFwiZW5naW5lXCIgaW4geCA/IHguZW5naW5lIDogdGhpcztcbiAgICAgIHJldHVybiB0aGlzLmxhdGV4U3ludGF4LnNlcmlhbGl6ZShcbiAgICAgICAgdGhpcy5yYXdKc29uKGNlLmJveCh4LCB7IGNhbm9uaWNhbDogZmFsc2UgfSkpLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sYXRleFN5bnRheC5zZXJpYWxpemUoeCwgb3B0aW9ucyk7XG4gIH1cbiAgZ2V0IGxhdGV4T3B0aW9ucygpIHtcbiAgICBjb25zdCBsYXRleFN5bnRheCA9IHRoaXMubGF0ZXhTeW50YXg7XG4gICAgcmV0dXJuIG5ldyBQcm94eShcbiAgICAgIHtcbiAgICAgICAgLi4udGhpcy5sYXRleFN5bnRheC5vcHRpb25zLFxuICAgICAgICAuLi50aGlzLmxhdGV4U3ludGF4LnNlcmlhbGl6ZXIub3B0aW9uc1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2V0KG9wdGlvbnMsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKCEocHJvcCBpbiBvcHRpb25zKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBsYXRleFN5bnRheC51cGRhdGVPcHRpb25zKHsgW3Byb3BdOiB2YWx1ZSB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH1cbiAgc2V0IGxhdGV4T3B0aW9ucyhvcHRzKSB7XG4gICAgdGhpcy5sYXRleFN5bnRheC51cGRhdGVPcHRpb25zKG9wdHMpO1xuICB9XG4gIGdldCBqc29uU2VyaWFsaXphdGlvbk9wdGlvbnMoKSB7XG4gICAgaWYgKHRoaXMuX3VzZVJhd0pzb25TZXJpYWxpemF0aW9uT3B0aW9ucykge1xuICAgICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLl9yYXdKc29uU2VyaWFsaXphdGlvbk9wdGlvbnMsIHtcbiAgICAgICAgZ2V0KG9wdGlvbnMsIHByb3ApIHtcbiAgICAgICAgICBpZiAoIShwcm9wIGluIG9wdGlvbnMpKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4gb3B0aW9uc1twcm9wXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJveHkodGhpcy5fanNvblNlcmlhbGl6YXRpb25PcHRpb25zLCB7XG4gICAgICBnZXQob3B0aW9ucywgcHJvcCkge1xuICAgICAgICBpZiAoIShwcm9wIGluIG9wdGlvbnMpKVxuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIHJldHVybiBvcHRpb25zW3Byb3BdO1xuICAgICAgfSxcbiAgICAgIHNldChvcHRpb25zLCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIShwcm9wIGluIG9wdGlvbnMpKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgc2VsZi5qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMgPSB7IFtwcm9wXTogdmFsdWUgfTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc2V0IGpzb25TZXJpYWxpemF0aW9uT3B0aW9ucyh2YWwpIHtcbiAgICBpZiAodmFsLmV4Y2x1ZGUpXG4gICAgICB0aGlzLl9qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMuZXhjbHVkZSA9IFsuLi52YWwuZXhjbHVkZV07XG4gICAgaWYgKHZhbC5zaG9ydGhhbmRzKSB7XG4gICAgICBpZiAodmFsLnNob3J0aGFuZHMgPT09IFwiYWxsXCIgfHwgdmFsLnNob3J0aGFuZHMuaW5jbHVkZXMoXCJhbGxcIikpIHtcbiAgICAgICAgdGhpcy5fanNvblNlcmlhbGl6YXRpb25PcHRpb25zLnNob3J0aGFuZHMgPSBbXG4gICAgICAgICAgXCJmdW5jdGlvblwiLFxuICAgICAgICAgIFwic3ltYm9sXCIsXG4gICAgICAgICAgXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRpY3Rpb25hcnlcIixcbiAgICAgICAgICBcIm51bWJlclwiXG4gICAgICAgIF07XG4gICAgICB9IGVsc2VcbiAgICAgICAgdGhpcy5fanNvblNlcmlhbGl6YXRpb25PcHRpb25zLnNob3J0aGFuZHMgPSBbLi4udmFsLnNob3J0aGFuZHNdO1xuICAgIH1cbiAgICBpZiAodmFsLm1ldGFkYXRhKSB7XG4gICAgICBpZiAodmFsLm1ldGFkYXRhID09PSBcImFsbFwiIHx8IHZhbC5tZXRhZGF0YS5pbmNsdWRlcyhcImFsbFwiKSkge1xuICAgICAgICB0aGlzLl9qc29uU2VyaWFsaXphdGlvbk9wdGlvbnMubWV0YWRhdGEgPSBbXCJsYXRleFwiLCBcIndpa2lkYXRhXCJdO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHRoaXMuX2pzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5tZXRhZGF0YSA9IFsuLi52YWwubWV0YWRhdGFdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbC5wcmVjaXNpb24gPT09IFwibnVtYmVyXCIgJiYgdmFsLnByZWNpc2lvbiA+IDApIHtcbiAgICAgIHRoaXMuX2pzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5wcmVjaXNpb24gPSB2YWwucHJlY2lzaW9uO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbC5yZXBlYXRpbmdEZWNpbWFscyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHRoaXMuX2pzb25TZXJpYWxpemF0aW9uT3B0aW9ucy5yZXBlYXRpbmdEZWNpbWFscyA9IHZhbC5yZXBlYXRpbmdEZWNpbWFscztcbiAgICB9XG4gIH1cbiAgcmF3SnNvbihleHByKSB7XG4gICAgY29uc3Qgc2F2ZSA9IHRoaXMuX3VzZVJhd0pzb25TZXJpYWxpemF0aW9uT3B0aW9ucztcbiAgICB0aGlzLl91c2VSYXdKc29uU2VyaWFsaXphdGlvbk9wdGlvbnMgPSB0cnVlO1xuICAgIGNvbnN0IHJlc3VsdCA9IGV4cHIuanNvbjtcbiAgICB0aGlzLl91c2VSYXdKc29uU2VyaWFsaXphdGlvbk9wdGlvbnMgPSBzYXZlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhIGxpc3Qgb2YgYWxsIHRoZSBhc3N1bXB0aW9ucyB0aGF0IG1hdGNoIGEgcGF0dGVybi5cbiAgICpcbiAgICogYGBganNcbiAgICogIGNlLmFzc3VtZSh4LCAnUG9zaXRpdmVJbnRlZ2VyJyk7XG4gICAqICBjZS5hc2soWydHcmVhdGVyJywgJ3gnLCAnX3ZhbCddKVxuICAgKiAgLy8gIC0+IFt7J3ZhbCc6IDB9XVxuICAgKiBgYGBcbiAgICovXG4gIGFzayhwYXR0ZXJuKSB7XG4gICAgY29uc3QgcGF0ID0gdGhpcy5wYXR0ZXJuKHBhdHRlcm4pO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAoY29uc3QgW2Fzc3VtcHRpb24sIHZhbF0gb2YgdGhpcy5hc3N1bXB0aW9ucykge1xuICAgICAgY29uc3QgbSA9IHBhdC5tYXRjaChhc3N1bXB0aW9uLCB7XG4gICAgICAgIG51bWVyaWNUb2xlcmFuY2U6IHRoaXMuX3RvbGVyYW5jZVxuICAgICAgfSk7XG4gICAgICBpZiAobSAhPT0gbnVsbCAmJiB2YWwgPT09IHRydWUpXG4gICAgICAgIHJlc3VsdC5wdXNoKG0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8vIEJhc2VkIG9uIGNvbnRleHR1YWwgdXNhZ2UsIGluZmVyIGRvbWFpbiBvZiBhIHN5bWJvbFxuICBpbmZlcihzeW1ib2wyLCBfZG9tYWluKSB7XG4gICAgaWYgKHR5cGVvZiBzeW1ib2wyICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBpZiAoIXN5bWJvbDIuc3ltYm9sKVxuICAgICAgICByZXR1cm4gXCJpbnRlcm5hbC1lcnJvclwiO1xuICAgICAgc3ltYm9sMiA9IHN5bWJvbDIuc3ltYm9sO1xuICAgIH1cbiAgICByZXR1cm4gXCJva1wiO1xuICB9XG4gIGFzc3VtZShhcmcxLCBhcmcyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGxhdGV4ID0gbGF0ZXhTdHJpbmcoYXJnMSk7XG4gICAgICBjb25zdCBwcmVkaWNhdGUgPSBsYXRleCA/IHRoaXMucGFyc2UobGF0ZXgsIHsgY2Fub25pY2FsOiBmYWxzZSB9KSA6IHRoaXMuYm94KGFyZzEsIHsgY2Fub25pY2FsOiBmYWxzZSB9KTtcbiAgICAgIGlmICghYXJnMilcbiAgICAgICAgcmV0dXJuIGFzc3VtZShwcmVkaWNhdGUpO1xuICAgICAgaWYgKGlzRG9tYWluKGFyZzIpKVxuICAgICAgICByZXR1cm4gYXNzdW1lKHRoaXMuYm94KFtcIkVsZW1lbnRcIiwgcHJlZGljYXRlLCB0aGlzLmRvbWFpbihhcmcyKV0pKTtcbiAgICAgIHJldHVybiBhc3N1bWUodGhpcy5ib3goW1wiRXF1YWxcIiwgcHJlZGljYXRlLCBhcmcyXSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICByZXR1cm4gXCJpbnRlcm5hbC1lcnJvclwiO1xuICAgIH1cbiAgfVxuICBmb3JnZXQoc3ltYm9sMikge1xuICAgIGlmICghdGhpcy5jb250ZXh0KVxuICAgICAgdGhyb3cgRXJyb3IoXCJObyBzY29wZSBhdmFpbGFibGVcIik7XG4gICAgaWYgKHN5bWJvbDIgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dC5pZFRhYmxlKVxuICAgICAgICBmb3IgKGNvbnN0IGsgb2YgdGhpcy5jb250ZXh0LmlkVGFibGUua2V5cygpKVxuICAgICAgICAgIHRoaXMuZm9yZ2V0KGspO1xuICAgICAgdGhpcy5hc3N1bXB0aW9ucy5jbGVhcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzeW1ib2wyKSkge1xuICAgICAgZm9yIChjb25zdCB4IG9mIHN5bWJvbDIpXG4gICAgICAgIHRoaXMuZm9yZ2V0KHgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHN5bWJvbDIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHQuaWRUYWJsZSkge1xuICAgICAgICBjb25zdCBkZWYgPSB0aGlzLmNvbnRleHQuaWRUYWJsZS5nZXQoc3ltYm9sMik7XG4gICAgICAgIGlmIChpc1N5bWJvbERlZmluaXRpb24oZGVmKSkge1xuICAgICAgICAgIGRlZi52YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgICBpZiAoZGVmLmRvbWFpbj8uaXNOdW1lcmljKSB7XG4gICAgICAgICAgICBkZWYuZG9tYWluID0gdGhpcy5kZWZhdWx0RG9tYWluID8/IHRoaXMuZG9tYWluKFwiTnVtYmVyXCIpO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgZGVmLmRvbWFpbiA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBbYXNzdW1wdGlvbiwgX3ZhbF0gb2YgdGhpcy5hc3N1bXB0aW9ucykge1xuICAgICAgICBpZiAoYXNzdW1wdGlvbi5zeW1ib2xzLmluY2x1ZGVzKHN5bWJvbDIpKVxuICAgICAgICAgIHRoaXMuYXNzdW1wdGlvbnMuZGVsZXRlKGFzc3VtcHRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL2NvbXB1dGUtZW5naW5lLnRzXG52YXIgdmVyc2lvbiA9IFwiMC4xNS4wXCI7XG5nbG9iYWxUaGlzW1N5bWJvbC5mb3IoXCJpby5jb3J0ZXhqcy5jb21wdXRlLWVuZ2luZVwiKV0gPSB7XG4gIENvbXB1dGVFbmdpbmU6IENvbXB1dGVFbmdpbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yLFxuICB2ZXJzaW9uOiBcIjAuMTUuMFwiXG59O1xuZXhwb3J0IHtcbiAgQ29tcHV0ZUVuZ2luZSxcbiAgaXNFbnZpcm9ubWVudEVudHJ5LFxuICBpc0V4cHJlc3Npb25FbnRyeSxcbiAgaXNGdW5jdGlvbkVudHJ5LFxuICBpc0luZml4RW50cnksXG4gIGlzTWF0Y2hmaXhFbnRyeSxcbiAgaXNQb3N0Zml4RW50cnksXG4gIGlzUHJlZml4RW50cnksXG4gIGlzU3ltYm9sRW50cnksXG4gIHZlcnNpb25cbn07XG4vKiEgQnVuZGxlZCBsaWNlbnNlIGluZm9ybWF0aW9uOlxuXG5jb21wbGV4LmpzL2NvbXBsZXguanM6XG4gICgqKlxuICAgKiBAbGljZW5zZSBDb21wbGV4LmpzIHYyLjEuMSAxMi8wNS8yMDIwXG4gICAqXG4gICAqIENvcHlyaWdodCAoYykgMjAyMCwgUm9iZXJ0IEVpc2VsZSAocm9iZXJ0QHhhcmcub3JnKVxuICAgKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgb3IgR1BMIFZlcnNpb24gMiBsaWNlbnNlcy5cbiAgICoqKVxuXG5kZWNpbWFsLmpzL2RlY2ltYWwubWpzOlxuICAoKiFcbiAgICogIGRlY2ltYWwuanMgdjEwLjQuM1xuICAgKiAgQW4gYXJiaXRyYXJ5LXByZWNpc2lvbiBEZWNpbWFsIHR5cGUgZm9yIEphdmFTY3JpcHQuXG4gICAqICBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9kZWNpbWFsLmpzXG4gICAqICBDb3B5cmlnaHQgKGMpIDIwMjIgTWljaGFlbCBNY2xhdWdobGluIDxNOGNoODhsQGdtYWlsLmNvbT5cbiAgICogIE1JVCBMaWNlbmNlXG4gICAqKVxuKi9cbiIsICJpbXBvcnQgQ2FsY3RleFBsdWdpbiBmcm9tIFwiLi9tYWluXCI7XHJcbmltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDYWxjdGV4UGx1Z2luU2V0dGluZ3Mge1xyXG4gIGNhbGN1bGF0aW9uVHJpZ2dlclN0cmluZzogc3RyaW5nXHJcbiAgY29tcGxldGlvblRyaWdnZXJLZXk6IHN0cmluZ1xyXG4gIG11bHRpcGxpY2F0aW9uU3ltYm9sOiBzdHJpbmdcclxuICBncm91cFNlcGFyYXRvcjogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQYXJ0aWFsPENhbGN0ZXhQbHVnaW5TZXR0aW5ncz4gPSB7XHJcbiAgY2FsY3VsYXRpb25UcmlnZ2VyU3RyaW5nOiBcIj1cIixcclxuICBjb21wbGV0aW9uVHJpZ2dlcktleTogXCJUYWJcIixcclxuICBtdWx0aXBsaWNhdGlvblN5bWJvbDogXCIqXCIsXHJcbiAgZ3JvdXBTZXBhcmF0b3I6IFwiJ1wiLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIENhbGN0ZXhTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgcGx1Z2luOiBDYWxjdGV4UGx1Z2luO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBDYWxjdGV4UGx1Z2luKSB7XHJcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICB9XHJcblxyXG4gIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICBsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKFwiQ2FsY3VsYXRpb24gVHJpZ2dlciBTdHJpbmdcIilcclxuICAgICAgLnNldERlc2MoXCJUaGUgc3RyaW5nIHRoYXQgdHJpZ2dlcnMgY2FsY3VsYXRpb24uXCIpXHJcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICAgIHRleHRcclxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIlR5cGUgYSBzdHJpbmcgaGVyZVwiKVxyXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNhbGN1bGF0aW9uVHJpZ2dlclN0cmluZylcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2FsY3VsYXRpb25UcmlnZ2VyU3RyaW5nID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJDb21wbGV0aW9uIFRyaWdnZXIgS2V5XCIpXHJcbiAgICAgIC5zZXREZXNjKFwiVGhlIGtleSB0aGF0IHRyaWdnZXJzIGNvbXBsZXRpb24uXCIpXHJcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICAgIHRleHRcclxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIlR5cGUgbmFtZSBvZiBhIGtleSBoZXJlXCIpXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29tcGxldGlvblRyaWdnZXJLZXkpXHJcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbXBsZXRpb25UcmlnZ2VyS2V5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJNdWx0aXBsaWNhdGlvbiBTeW1ib2xcIilcclxuICAgICAgLnNldERlc2MoXCJUaGUgc3ltYm9sIHVzZWQgZm9yIG11bHRpcGxpY2F0aW9uIChlLmcuICogb3IgXFxcXHRpbWVzKS5cIilcclxuICAgICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgICAgdGV4dFxyXG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiVHlwZSBhIHN5bWJvbCBoZXJlXCIpXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubXVsdGlwbGljYXRpb25TeW1ib2wpXHJcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm11bHRpcGxpY2F0aW9uU3ltYm9sID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJHcm91cCBTZXBhcmF0b3JcIilcclxuICAgICAgLnNldERlc2MoXCJUaGUgc3ltYm9sIHVzZWQgZm9yIGdyb3VwaW5nIG51bWJlcnMgKGUuZy4gJyBvciBcXFxcLCkuXCIpXHJcbiAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICAgIHRleHRcclxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIlR5cGUgYSBzeW1ib2wgaGVyZVwiKVxyXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmdyb3VwU2VwYXJhdG9yKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ncm91cFNlcGFyYXRvciA9IHZhbHVlO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgfVxyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG1CQUF1Qjs7O0FDQ3ZCLHNCQUEyQjtBQUMzQixtQkFBZ0M7QUFDaEMsSUFBQUMsZUFRTzs7O0FDWFAsa0JBQXVDO0FBR2hDLElBQU0sZUFBTixjQUEyQix1QkFBVztBQUFBLEVBSzNDLFlBQW1CLE1BQXlCLE9BQXNCLE1BQWM7QUFDOUUsVUFBTTtBQURXO0FBQXlCO0FBQXNCO0FBQUEsRUFFbEU7QUFBQSxFQUVBLE1BQU0sT0FBZ0M7QUFDcEMsYUFBUyxvQkFBb0IsV0FBVyxLQUFLLGFBQWEsSUFBSTtBQUU5RCxVQUFNQyxPQUFNLFNBQVMsY0FBYyxNQUFNO0FBQ3pDLElBQUFBLEtBQUksWUFBWTtBQUVoQixTQUFLLGlCQUFpQixLQUFLO0FBQzNCLFNBQUssYUFBYSxLQUFLO0FBRXZCLElBQUFBLEtBQUksWUFBWSxLQUFLO0FBQ3JCLFNBQUssY0FBYyxDQUFDLFVBQVU7QUFDNUIsVUFBSSxNQUFNLFFBQVEsY0FBYyxTQUFTLFNBQVM7QUFBc0I7QUFDeEUsWUFBTSxlQUFlO0FBQ3JCLFdBQUssWUFBWTtBQUFBLElBQ25CO0FBQ0EsYUFBUyxpQkFBaUIsV0FBVyxLQUFLLGFBQWEsSUFBSTtBQUMzRCxJQUFBQSxLQUFJLFVB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LFlBQ0UsR0FBRztBQUFBLFlBQ0gsR0FBRztBQUFBLFlBQ0gsR0FBRztBQUFBLFlBQ0gsR0FBRztBQUFBLFlBQ0gsR0FBRztBQUFBLFlBQ0gsR0FBRztBQUFBLFlBQ0gsR0FBRztBQUFBLFlBQ0gsR0FBRztBQUFBLFlBQ0gsR0FBRztBQUFBLFlBQ0gsSUFBSTtBQUFBLFVBQ04sRUFBRSxDQUFDO0FBQUEsVUFDSDtBQUFBLFVBQ0E7QUFBQSxRQUNGLENBQUM7QUFBQSxNQUNIO0FBQ0EsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGO0FBQUEsRUFDQTtBQUFBLElBQ0UsY0FBYyxDQUFDLEtBQUs7QUFBQSxJQUNwQixPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRTtBQUFBLEVBQ3ZDO0FBQUEsRUFDQTtBQUFBLElBQ0UsY0FBYyxDQUFDLEtBQUs7QUFBQSxJQUNwQixPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztBQUFBLEVBQ3RDO0FBQUEsRUFDQTtBQUFBLElBQ0UsY0FBYyxDQUFDLEtBQUs7QUFBQSxJQUNwQixPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztBQUFBLEVBQ3RDO0FBQUEsRUFDQTtBQUFBLElBQ0UsY0FBYyxDQUFDLFVBQVU7QUFBQSxJQUN6QixPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztBQUFBLEVBQ3RDO0FBQUEsRUFDQTtBQUFBLElBQ0UsY0FBYyxDQUFDLFFBQVE7QUFBQSxJQUN2QixPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRTtBQUFBLEVBQ3ZDO0FBQUEsRUFDQTtBQUFBLElBQ0UsY0FBYyxDQUFDLFNBQVM7QUFBQSxJQUN4QixPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRTtBQUFBLEVBQ3ZDO0FBQUEsRUFDQTtBQUFBLElBQ0UsY0FBYyxDQUFDLEtBQUs7QUFBQSxJQUNwQixPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztBQUFBLEVBQ3RDO0FBQUEsRUFDQTtBQUFBLElBQ0UsY0FBYyxDQUFDLEtBQUs7QUFBQSxJQUNwQixPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsQ0FB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QUFBLElBQ3pCLE9BQU8sVUFBVSxRQUFRO0FBQUEsRUFDM0I7QUFBQSxFQUNBO0FBQUEsSUFDRSxNQUFNO0FBQUEsSUFDTixjQUFjO0FBQUEsSUFDZCxPQUFPLFVBQVUsUUFBUTtBQUFBLEVBQzNCO0FBQUEsRUFDQTtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sY0FBYyxDQUFDLFVBQVU7QUFBQSxJQUN6QixPQUFPLFVBQVUsUUFBUTtBQUFBLEVBQzNCO0FBQUEsRUFDQTtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sY0FBYyxDQUFDLFVBQVU7QUFBQSxJQUN6QixPQUFPLFVBQVUsUUFBUTtBQUFBLEVBQzNCO0FBQUEsRUFDQTtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sY0FBYyxDQUFDLFVBQVU7QUFBQSxJQUN6QixPQUFPLFVBQVUsUUFBUTtBQUFBLEVBQzNCO0FBQUEsRUFDQTtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sY0FBYyxDQUFDLFVBQVU7QUFBQSxJQUN6QixPQUFPLFVBQVUsUUFBUTtBQUFBLEVBQzNCO0FBQUEsRUFDQTtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sY0FBYyxDQUFDLFVBQVU7QUFBQSxJQUN6QixPQUFPLFVBQVUsUUFBUTtBQUFBLEVBQzNCO0FBQUEsRUFDQTtBQUFBLElBQ0UsTUFBTTtBQUFBLElBQ04sY0FBYyxDQUFDLFVBQVU7QUFBQSxJQUN6QixPQUFPLFVBQVUsUUFBUTtBQUFBLEVBQzNCO0FBQUEsRUFDQTtBQUFBO0FBQUEsSUFFRSxjQUFjLENBQUMsTUFBTTtBQUFBLElBQ3JCLE9BQU8sVUFBVSxNQUFNO0FBQUEsRUFDekI7QUFBQSxFQUNBO0FBQUEsSUFDRSxNQUFNO0FBQUEsSUFDTixjQUFjLENBQUMsU0FBUztBQUFBLElBQ3hCLE9BQU8sVUFBVSxPQUFPO0FBQUEsRUFDMUI7QUFBQSxFQUNBO0FBQUEsSUFDRSxNQUFNO0FBQUEsSUFDTixjQUFjLENBQUMsUUFBUTtBQUFBLElBQ3ZCLE9BQU8sVUFBVSxNQUFNO0FBQUEsRUFDekI7QUFBQSxFQUNBO0FBQUEs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O0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNB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QUE7QUFBQSxNQUVWLFVBQVU7QUFBQTtBQUFBLE1BRVYsVUFBVTtBQUFBO0FBQUEsTUFFVixVQUFVO0FBQUE7QUFBQSxNQUVWLFVBQVU7QUFBQTtBQUFBLE1BRVYsVUFBVTtBQUFBO0FBQUEsTUFFVixVQUFVO0FBQUE7QUFBQSxNQUVWLFVBQVU7QUFBQTtBQUFBLE1BRVYsVUFBVTtBQUFBO0FBQUEsTUFFVixVQUFVO0FBQUE7QUFBQSxNQUVWLFVBQVU7QUFBQTtBQUFBLE1BRVYsVUFBVTtBQUFBO0FBQUEsTUFFVixVQUFVO0FBQUE7QUFBQSxNQUVWLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxJQUNQLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDTixRQUFJLE1BQU0sSUFBSTtBQUNaLFVBQUksTUFBTTtBQUNSLGVBQU8sQ0FBQyxPQUFPLEVB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SSxLQUFLLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFBQSxNQUN0RDtBQUFBLElBQ0Y7QUFBQSxJQUNBLFFBQVE7QUFBQSxNQUNOLFNBQVM7QUFBQSxNQUNULFdBQVc7QUFBQSxRQUNULFFBQVEseUJBQXlCLFFBQVE7QUFBQSxRQUN6QyxVQUFVLENBQUMsSUFBSSxTQUFTLFNBQVMsSUFBSSxZQUFZLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFBQSxRQUNsRSxHQUFHLENBQUMsSUFBSSxTQUFTLFNBQVMsSUFBSSxLQUFLLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFBQSxNQUN0RDtBQUFBLElBQ0Y7QUFBQSxJQUNBLFFBQVE7QUFBQSxNQUNOLFNBQVM7QUFBQSxNQUNULFdBQVc7QUFBQSxRQUNULFFBQVEseUJBQXlCLFFBQVE7QUFBQSxRQUN6QyxVQUFVLENBQUMsSUFBSSxTQUFTLFNBQVMsSUFBSSxZQUFZLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFBQSxRQUNsRSxHQUFHLENBQUMsSUFBSSxTQUFTLFNBQVMsSUFBSSxLQUFLLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFBQSxNQUN0RDtBQUFBLElBQ0Y7QUFBQSxJQUNBLFFBQVE7QUFBQSxNQUNOLFNBQVM7QUFBQSxNQUNULFdBQVc7QUFBQSxRQUNULFFBQVEseUJBQXlCLFFBQVE7QUFBQSxRQUN6QyxVQUFVLENBQUMsSUFBSSxTQUFTLFNBQVMsSUFBSSxZQUFZLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFBQSxRQUNsRSxHQUFHLENBQUMsSUFBSSxTQUFTLFNBQVMsSUFBSSxLQUFLLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFBQSxNQUN0RDtBQUFBLElBQ0Y7QUFBQSxJQUNBLFFBQVE7QUFBQSxNQUNOLFNBQVM7QUFBQSxNQUNULFdBQVc7QUFBQSxRQUNULFFBQVEseUJBQXlCLFFBQVE7QUFBQSxRQUN6QyxVQUFVLENBQUMsSUFBSSxTQUFTLFNBQVMsSUFBSSxZQUFZLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFBQSxRQUNsRSxHQUFHLENBQUMsSUFBSSxTQUFTLFNBQVMsSUFB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dEMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUFBLE1BQzdELEtBQUssQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFBQSxNQUNuRSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsQ0FBQztBQUFBLE1BQzdDLEtBQUssQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFBQSxNQUNuRSxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUU7QUFBQSxJQUNwQjtBQUFBLEVBQ0Y7QUFBQSxFQUNBO0FBQUEsSUFDRSxDQUFDLEdBQUcsQ0FBQztBQUFBLElBQ0w7QUFBQSxNQUNFLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxJQUNQO0FBQUEsRUFDRjtBQUFBLEVBQ0E7QUFBQSxJQUNFLENBQUMsR0FBRyxDQUFDO0FBQUEsSUFDTDtBQUFBLE1BQ0UsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLElBQ1A7QUFBQSxFQUNGO0FBQUEsRUFDQTtBQUFBLElBQ0UsQ0FBQyxHQUFHLENBQUM7QUFBQSxJQUNMO0FBQUEsTUFDRSxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsSUFDUDtBQUFBLEVBQ0Y7QUFBQSxFQUNBO0FBQUEsSUFDRSxDQUFDLEdBQUcsQ0FBQztBQUFBLElBQ0w7QUFBQSxNQUNFLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQztBQUFBLE1BQ3JCLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQztBQUFBLE1BQ3JCLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxJQUNQO0FBQUEsRUFDRjtBQUFBLEVBQ0E7QUFBQSxJQUNFLENBQUMsR0FBRyxFQUFFO0FBQUEsSUFDTjtBQUFBLE1BQ0UsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLElBQ1A7QUFBQSxFQUNGO0FBQUEsRUFDQTtBQUFBLElBQ0UsQ0FBQyxHQUFHLENBQUM7QUFBQSxJQUNMO0FBQUEsTUFDRSxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUM7QUFBQTtBQUFBLE1BRXJCLEtBQUs7QUFBQTtBQUFBLE1BRUwsS0FBSztBQUFBO0FBQUEsTUFFTCxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUM7QUFBQTtBQUFBLE1BRXJCLEtBQUs7QUFBQSxNQUNMLEtBQUssQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRyxDQUFDO0FBQUE7QUFBQSxJQUV4QztBQUFBLEVBQ0Y7QUFBQSxFQUNBO0FBQUEsSUFDRSxDQUFDLEdBQUcsQ0FBQztBQUFBLElBQ0w7QUFBQSxNQUNFLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFBQSxJQUNQO0FBQUEsRUFDRjtBQUFBLEVBQ0E7QUFBQSxJQUNFLENBQUMsR0FBRyxDQUFDO0FBQUEsSUFDTDtBQUFBLE1BQ0UsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLE1BQ0wsS0FBSztBQUFBLElBQ1A7QUFBQSxFQUNGO0FBQUEsRUFDQTtBQUFBLElB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LEVBQy9CLFFBQVEseURBQXlELEVBQ2pFO0FBQUEsTUFBUSxDQUFDLFNBQ1IsS0FDRyxlQUFlLG9CQUFvQixFQUNuQyxTQUFTLEtBQUssT0FBTyxTQUFTLG9CQUFvQixFQUNsRCxTQUFTLE9BQU8sVUFBVTtBQUN6QixhQUFLLE9BQU8sU0FBUyx1QkFBdUI7QUFDNUMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ2pDLENBQUM7QUFBQSxJQUNMO0FBRUYsUUFBSSx3QkFBUSxXQUFXLEVBQ3BCLFFBQVEsaUJBQWlCLEVBQ3pCLFFBQVEsdURBQXVELEVBQy9EO0FBQUEsTUFBUSxDQUFDLFNBQ1IsS0FDRyxlQUFlLG9CQUFvQixFQUNuQyxTQUFTLEtBQUssT0FBTyxTQUFTLGNBQWMsRUFDNUMsU0FBUyxPQUFPLFVBQVU7QUFDekIsYUFBSyxPQUFPLFNBQVMsaUJBQWlCO0FBQ3RDLGNBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxNQUNqQyxDQUFDO0FBQUEsSUFDTDtBQUFBLEVBQ0o7QUFDRjs7O0FKN0VBLElBQXFCLGdCQUFyQixjQUEyQyx3QkFBTztBQUFBLEVBSWpELE1BQU0sU0FBUztBQUNaLFVBQU0sS0FBSyxhQUFhO0FBQ3hCLFNBQUssY0FBYyxJQUFJLGtCQUFrQixLQUFLLEtBQUssSUFBSSxDQUFDO0FBRXhELFNBQUssd0JBQXdCLENBQUMsbUJBQW1CLENBQUM7QUFFbEQsa0JBQWMsV0FBVztBQUFBLEVBQzVCO0FBQUEsRUFFQyxNQUFNLGVBQWU7QUFDbkIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMzRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ25CLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ25DO0FBQ0Y7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfdmlldyIsICJkaXYiLCAiX19kZWZQcm9wIiwgIl9fZ2V0T3duUHJvcERlc2MiLCAiX19nZXRPd25Qcm9wTmFtZXMiLCAiX19oYXNPd25Qcm9wIiwgIl9fY29weVByb3BzIiwgIm1vZHVsZSIsICJfYSJdCn0K
